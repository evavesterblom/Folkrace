
Viper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db4  08003db4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003db4  08003db4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003db4  08003db4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  08003dc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08003dc8  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121b6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002779  00000000  00000000  000321ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00034968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  000359d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011313  00000000  00000000  00036920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149d6  00000000  00000000  00047c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068499  00000000  00000000  0005c609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c4aa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b34  00000000  00000000  000c4af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c40 	.word	0x08003c40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003c40 	.word	0x08003c40

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f003 fcfd 	bl	8003c30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b4d      	ldr	r3, [pc, #308]	; (800036c <MX_GPIO_Init+0x14c>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b4c      	ldr	r3, [pc, #304]	; (800036c <MX_GPIO_Init+0x14c>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0309      	lsls	r1, r1, #12
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b49      	ldr	r3, [pc, #292]	; (800036c <MX_GPIO_Init+0x14c>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	031b      	lsls	r3, r3, #12
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	4b46      	ldr	r3, [pc, #280]	; (800036c <MX_GPIO_Init+0x14c>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b45      	ldr	r3, [pc, #276]	; (800036c <MX_GPIO_Init+0x14c>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	03c9      	lsls	r1, r1, #15
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b42      	ldr	r3, [pc, #264]	; (800036c <MX_GPIO_Init+0x14c>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b3f      	ldr	r3, [pc, #252]	; (800036c <MX_GPIO_Init+0x14c>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b3e      	ldr	r3, [pc, #248]	; (800036c <MX_GPIO_Init+0x14c>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b3b      	ldr	r3, [pc, #236]	; (800036c <MX_GPIO_Init+0x14c>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028a:	4b38      	ldr	r3, [pc, #224]	; (800036c <MX_GPIO_Init+0x14c>)
 800028c:	695a      	ldr	r2, [r3, #20]
 800028e:	4b37      	ldr	r3, [pc, #220]	; (800036c <MX_GPIO_Init+0x14c>)
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	02c9      	lsls	r1, r1, #11
 8000294:	430a      	orrs	r2, r1
 8000296:	615a      	str	r2, [r3, #20]
 8000298:	4b34      	ldr	r3, [pc, #208]	; (800036c <MX_GPIO_Init+0x14c>)
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	02db      	lsls	r3, r3, #11
 80002a0:	4013      	ands	r3, r2
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_DIR_1_Pin|MOTOR_DIR_2_Pin, GPIO_PIN_RESET);
 80002a6:	4b32      	ldr	r3, [pc, #200]	; (8000370 <MX_GPIO_Init+0x150>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	2103      	movs	r1, #3
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fe59 	bl	8000f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002b2:	2390      	movs	r3, #144	; 0x90
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	2200      	movs	r2, #0
 80002b8:	2120      	movs	r1, #32
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fe52 	bl	8000f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_1_Pin|TOF_2_Pin|TOF_3_Pin, GPIO_PIN_RESET);
 80002c0:	23e0      	movs	r3, #224	; 0xe0
 80002c2:	021b      	lsls	r3, r3, #8
 80002c4:	482b      	ldr	r0, [pc, #172]	; (8000374 <MX_GPIO_Init+0x154>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	0019      	movs	r1, r3
 80002ca:	f000 fe4b 	bl	8000f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	2280      	movs	r2, #128	; 0x80
 80002d2:	0192      	lsls	r2, r2, #6
 80002d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	2284      	movs	r2, #132	; 0x84
 80002da:	0392      	lsls	r2, r2, #14
 80002dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	4a22      	ldr	r2, [pc, #136]	; (8000370 <MX_GPIO_Init+0x150>)
 80002e8:	0019      	movs	r1, r3
 80002ea:	0010      	movs	r0, r2
 80002ec:	f000 fcca 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_DIR_1_Pin|MOTOR_DIR_2_Pin;
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2203      	movs	r2, #3
 80002f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	2201      	movs	r2, #1
 80002fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000302:	193b      	adds	r3, r7, r4
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000308:	193b      	adds	r3, r7, r4
 800030a:	4a19      	ldr	r2, [pc, #100]	; (8000370 <MX_GPIO_Init+0x150>)
 800030c:	0019      	movs	r1, r3
 800030e:	0010      	movs	r0, r2
 8000310:	f000 fcb8 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2220      	movs	r2, #32
 8000318:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2201      	movs	r2, #1
 800031e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	193b      	adds	r3, r7, r4
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800032c:	193a      	adds	r2, r7, r4
 800032e:	2390      	movs	r3, #144	; 0x90
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	0011      	movs	r1, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f000 fca5 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_1_Pin|TOF_2_Pin|TOF_3_Pin;
 800033a:	0021      	movs	r1, r4
 800033c:	187b      	adds	r3, r7, r1
 800033e:	22e0      	movs	r2, #224	; 0xe0
 8000340:	0212      	lsls	r2, r2, #8
 8000342:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2201      	movs	r2, #1
 8000348:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000356:	187b      	adds	r3, r7, r1
 8000358:	4a06      	ldr	r2, [pc, #24]	; (8000374 <MX_GPIO_Init+0x154>)
 800035a:	0019      	movs	r1, r3
 800035c:	0010      	movs	r0, r2
 800035e:	f000 fc91 	bl	8000c84 <HAL_GPIO_Init>

}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	b00b      	add	sp, #44	; 0x2c
 8000368:	bd90      	pop	{r4, r7, pc}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	40021000 	.word	0x40021000
 8000370:	48000800 	.word	0x48000800
 8000374:	48000400 	.word	0x48000400

08000378 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_I2C1_Init+0x74>)
 800037e:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <MX_I2C1_Init+0x78>)
 8000380:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_I2C1_Init+0x74>)
 8000384:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <MX_I2C1_Init+0x7c>)
 8000386:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_I2C1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800038e:	4b17      	ldr	r3, [pc, #92]	; (80003ec <MX_I2C1_Init+0x74>)
 8000390:	2201      	movs	r2, #1
 8000392:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_I2C1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800039a:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_I2C1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <MX_I2C1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_I2C1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_I2C1_Init+0x74>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f000 fdf3 	bl	8000fa0 <HAL_I2C_Init>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003be:	f000 f972 	bl	80006a6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <MX_I2C1_Init+0x74>)
 80003c4:	2100      	movs	r1, #0
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 fa88 	bl	80018dc <HAL_I2CEx_ConfigAnalogFilter>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003d0:	f000 f969 	bl	80006a6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <MX_I2C1_Init+0x74>)
 80003d6:	2100      	movs	r1, #0
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 facb 	bl	8001974 <HAL_I2CEx_ConfigDigitalFilter>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003e2:	f000 f960 	bl	80006a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000028 	.word	0x20000028
 80003f0:	40005400 	.word	0x40005400
 80003f4:	2000090e 	.word	0x2000090e

080003f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b08b      	sub	sp, #44	; 0x2c
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	2414      	movs	r4, #20
 8000402:	193b      	adds	r3, r7, r4
 8000404:	0018      	movs	r0, r3
 8000406:	2314      	movs	r3, #20
 8000408:	001a      	movs	r2, r3
 800040a:	2100      	movs	r1, #0
 800040c:	f003 fc10 	bl	8003c30 <memset>
  if(i2cHandle->Instance==I2C1)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a1c      	ldr	r2, [pc, #112]	; (8000488 <HAL_I2C_MspInit+0x90>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d132      	bne.n	8000480 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	4b1c      	ldr	r3, [pc, #112]	; (800048c <HAL_I2C_MspInit+0x94>)
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <HAL_I2C_MspInit+0x94>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	02c9      	lsls	r1, r1, #11
 8000424:	430a      	orrs	r2, r1
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <HAL_I2C_MspInit+0x94>)
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	02db      	lsls	r3, r3, #11
 8000430:	4013      	ands	r3, r2
 8000432:	613b      	str	r3, [r7, #16]
 8000434:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_CLOCK_Pin|TOF_DATA_Pin;
 8000436:	193b      	adds	r3, r7, r4
 8000438:	22c0      	movs	r2, #192	; 0xc0
 800043a:	0092      	lsls	r2, r2, #2
 800043c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800043e:	0021      	movs	r1, r4
 8000440:	187b      	adds	r3, r7, r1
 8000442:	2212      	movs	r2, #18
 8000444:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2203      	movs	r2, #3
 8000450:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2201      	movs	r2, #1
 8000456:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000458:	187b      	adds	r3, r7, r1
 800045a:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <HAL_I2C_MspInit+0x98>)
 800045c:	0019      	movs	r1, r3
 800045e:	0010      	movs	r0, r2
 8000460:	f000 fc10 	bl	8000c84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <HAL_I2C_MspInit+0x94>)
 8000466:	69da      	ldr	r2, [r3, #28]
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <HAL_I2C_MspInit+0x94>)
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	0389      	lsls	r1, r1, #14
 800046e:	430a      	orrs	r2, r1
 8000470:	61da      	str	r2, [r3, #28]
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <HAL_I2C_MspInit+0x94>)
 8000474:	69da      	ldr	r2, [r3, #28]
 8000476:	2380      	movs	r3, #128	; 0x80
 8000478:	039b      	lsls	r3, r3, #14
 800047a:	4013      	ands	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b00b      	add	sp, #44	; 0x2c
 8000486:	bd90      	pop	{r4, r7, pc}
 8000488:	40005400 	.word	0x40005400
 800048c:	40021000 	.word	0x40021000
 8000490:	48000400 	.word	0x48000400

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	b0c3      	sub	sp, #268	; 0x10c
 8000498:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fab7 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f8a1 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f7ff febd 	bl	8000220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004a6:	f000 fa0b 	bl	80008c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004aa:	f7ff ff65 	bl	8000378 <MX_I2C1_Init>
  MX_TIM3_Init();
 80004ae:	f000 f93f 	bl	8000730 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80004b2:	4b46      	ldr	r3, [pc, #280]	; (80005cc <main+0x138>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 ffe3 	bl	8002480 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004ba:	4b44      	ldr	r3, [pc, #272]	; (80005cc <main+0x138>)
 80004bc:	2100      	movs	r1, #0
 80004be:	0018      	movs	r0, r3
 80004c0:	f002 f872 	bl	80025a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004c4:	4b41      	ldr	r3, [pc, #260]	; (80005cc <main+0x138>)
 80004c6:	2104      	movs	r1, #4
 80004c8:	0018      	movs	r0, r3
 80004ca:	f002 f86d 	bl	80025a8 <HAL_TIM_PWM_Start>

  VL53L1X sensor1;
  VL53L1X sensor2;
  VL53L1X sensor3;

  TOF_InitStruct(&sensor1, &hi2c1, 0x32, TOF_1_GPIO_Port, TOF_1_Pin);
 80004ce:	4a40      	ldr	r2, [pc, #256]	; (80005d0 <main+0x13c>)
 80004d0:	4940      	ldr	r1, [pc, #256]	; (80005d4 <main+0x140>)
 80004d2:	24ec      	movs	r4, #236	; 0xec
 80004d4:	1938      	adds	r0, r7, r4
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	019b      	lsls	r3, r3, #6
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	0013      	movs	r3, r2
 80004de:	2232      	movs	r2, #50	; 0x32
 80004e0:	f003 faec 	bl	8003abc <TOF_InitStruct>
  TOF_InitStruct(&sensor2, &hi2c1, 0x33, TOF_2_GPIO_Port, TOF_2_Pin);
 80004e4:	4a3a      	ldr	r2, [pc, #232]	; (80005d0 <main+0x13c>)
 80004e6:	493b      	ldr	r1, [pc, #236]	; (80005d4 <main+0x140>)
 80004e8:	25dc      	movs	r5, #220	; 0xdc
 80004ea:	1978      	adds	r0, r7, r5
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	01db      	lsls	r3, r3, #7
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	0013      	movs	r3, r2
 80004f4:	2233      	movs	r2, #51	; 0x33
 80004f6:	f003 fae1 	bl	8003abc <TOF_InitStruct>
  TOF_InitStruct(&sensor3, &hi2c1, 0x34, TOF_3_GPIO_Port, TOF_3_Pin);
 80004fa:	4a35      	ldr	r2, [pc, #212]	; (80005d0 <main+0x13c>)
 80004fc:	4935      	ldr	r1, [pc, #212]	; (80005d4 <main+0x140>)
 80004fe:	26cc      	movs	r6, #204	; 0xcc
 8000500:	19b8      	adds	r0, r7, r6
 8000502:	2380      	movs	r3, #128	; 0x80
 8000504:	021b      	lsls	r3, r3, #8
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	0013      	movs	r3, r2
 800050a:	2234      	movs	r2, #52	; 0x34
 800050c:	f003 fad6 	bl	8003abc <TOF_InitStruct>

  TOF_TurnOff(&sensor1);
 8000510:	193b      	adds	r3, r7, r4
 8000512:	0018      	movs	r0, r3
 8000514:	f003 fb04 	bl	8003b20 <TOF_TurnOff>
  TOF_TurnOff(&sensor2);
 8000518:	197b      	adds	r3, r7, r5
 800051a:	0018      	movs	r0, r3
 800051c:	f003 fb00 	bl	8003b20 <TOF_TurnOff>
  TOF_TurnOff(&sensor3);
 8000520:	19bb      	adds	r3, r7, r6
 8000522:	0018      	movs	r0, r3
 8000524:	f003 fafc 	bl	8003b20 <TOF_TurnOff>

  TOF_BootSensor(&sensor1);
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	f003 fb0e 	bl	8003b4c <TOF_BootSensor>
  TOF_BootSensor(&sensor2);
 8000530:	197b      	adds	r3, r7, r5
 8000532:	0018      	movs	r0, r3
 8000534:	f003 fb0a 	bl	8003b4c <TOF_BootSensor>
  TOF_BootSensor(&sensor3);
 8000538:	19bb      	adds	r3, r7, r6
 800053a:	0018      	movs	r0, r3
 800053c:	f003 fb06 	bl	8003b4c <TOF_BootSensor>

  char distanceStr[200] = "wasd";
 8000540:	1d39      	adds	r1, r7, #4
 8000542:	4a25      	ldr	r2, [pc, #148]	; (80005d8 <main+0x144>)
 8000544:	000b      	movs	r3, r1
 8000546:	6810      	ldr	r0, [r2, #0]
 8000548:	6018      	str	r0, [r3, #0]
 800054a:	7912      	ldrb	r2, [r2, #4]
 800054c:	711a      	strb	r2, [r3, #4]
 800054e:	2305      	movs	r3, #5
 8000550:	18cb      	adds	r3, r1, r3
 8000552:	22c3      	movs	r2, #195	; 0xc3
 8000554:	2100      	movs	r1, #0
 8000556:	0018      	movs	r0, r3
 8000558:	f003 fb6a 	bl	8003c30 <memset>
  uint16_t distance = 0;
 800055c:	23fe      	movs	r3, #254	; 0xfe
 800055e:	18fb      	adds	r3, r7, r3
 8000560:	2200      	movs	r2, #0
 8000562:	801a      	strh	r2, [r3, #0]
//
//	  distance = TOF_GetDistance(&sensor3);
//	  sprintf(distanceStr, "Distance 3: %d\n\r", distance);
//	  HAL_UART_Transmit(&huart2, distanceStr, strlen(distanceStr), 100);

	  HAL_Delay(5000);
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <main+0x148>)
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fab4 	bl	8000ad4 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 50);
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <main+0x138>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2232      	movs	r2, #50	; 0x32
 8000572:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_GPIO_WritePin(MOTOR_DIR_1_GPIO_Port, MOTOR_DIR_1_Pin, 1);
 8000574:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <main+0x14c>)
 8000576:	2201      	movs	r2, #1
 8000578:	2101      	movs	r1, #1
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fcf2 	bl	8000f64 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 300);
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <main+0x138>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2296      	movs	r2, #150	; 0x96
 8000586:	0052      	lsls	r2, r2, #1
 8000588:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_GPIO_WritePin(MOTOR_DIR_2_GPIO_Port, MOTOR_DIR_2_Pin, 1);
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <main+0x14c>)
 800058c:	2201      	movs	r2, #1
 800058e:	2102      	movs	r1, #2
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fce7 	bl	8000f64 <HAL_GPIO_WritePin>

	  HAL_Delay(5000);
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <main+0x148>)
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fa9b 	bl	8000ad4 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 300);
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <main+0x138>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2296      	movs	r2, #150	; 0x96
 80005a4:	0052      	lsls	r2, r2, #1
 80005a6:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_GPIO_WritePin(MOTOR_DIR_1_GPIO_Port, MOTOR_DIR_1_Pin, 0);
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <main+0x14c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	2101      	movs	r1, #1
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 fcd8 	bl	8000f64 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 50);
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <main+0x138>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2232      	movs	r2, #50	; 0x32
 80005ba:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_GPIO_WritePin(MOTOR_DIR_2_GPIO_Port, MOTOR_DIR_2_Pin, 0);
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <main+0x14c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	2102      	movs	r1, #2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fcce 	bl	8000f64 <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 80005c8:	e7cc      	b.n	8000564 <main+0xd0>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	20000074 	.word	0x20000074
 80005d0:	48000400 	.word	0x48000400
 80005d4:	20000028 	.word	0x20000028
 80005d8:	08003c58 	.word	0x08003c58
 80005dc:	00001388 	.word	0x00001388
 80005e0:	48000800 	.word	0x48000800

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b095      	sub	sp, #84	; 0x54
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	2420      	movs	r4, #32
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2330      	movs	r3, #48	; 0x30
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f003 fb1b 	bl	8003c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fa:	2310      	movs	r3, #16
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	0018      	movs	r0, r3
 8000600:	2310      	movs	r3, #16
 8000602:	001a      	movs	r2, r3
 8000604:	2100      	movs	r1, #0
 8000606:	f003 fb13 	bl	8003c30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060a:	003b      	movs	r3, r7
 800060c:	0018      	movs	r0, r3
 800060e:	2310      	movs	r3, #16
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f003 fb0c 	bl	8003c30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	0021      	movs	r1, r4
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2202      	movs	r2, #2
 800061e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2201      	movs	r2, #1
 8000624:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2210      	movs	r2, #16
 800062a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2202      	movs	r2, #2
 8000630:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	22a0      	movs	r2, #160	; 0xa0
 800063c:	0392      	lsls	r2, r2, #14
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2200      	movs	r2, #0
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	187b      	adds	r3, r7, r1
 8000648:	0018      	movs	r0, r3
 800064a:	f001 f9df 	bl	8001a0c <HAL_RCC_OscConfig>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000652:	f000 f828 	bl	80006a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	2110      	movs	r1, #16
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2207      	movs	r2, #7
 800065c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2202      	movs	r2, #2
 8000662:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2101      	movs	r1, #1
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fce3 	bl	8002040 <HAL_RCC_ClockConfig>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800067e:	f000 f812 	bl	80006a6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000682:	003b      	movs	r3, r7
 8000684:	2220      	movs	r2, #32
 8000686:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000688:	003b      	movs	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068e:	003b      	movs	r3, r7
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fe27 	bl	80022e4 <HAL_RCCEx_PeriphCLKConfig>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800069a:	f000 f804 	bl	80006a6 <Error_Handler>
  }
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b015      	add	sp, #84	; 0x54
 80006a4:	bd90      	pop	{r4, r7, pc}

080006a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006aa:	b672      	cpsid	i
}
 80006ac:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ae:	e7fe      	b.n	80006ae <Error_Handler+0x8>

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_MspInit+0x44>)
 80006b8:	699a      	ldr	r2, [r3, #24]
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <HAL_MspInit+0x44>)
 80006bc:	2101      	movs	r1, #1
 80006be:	430a      	orrs	r2, r1
 80006c0:	619a      	str	r2, [r3, #24]
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_MspInit+0x44>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	2201      	movs	r2, #1
 80006c8:	4013      	ands	r3, r2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_MspInit+0x44>)
 80006d0:	69da      	ldr	r2, [r3, #28]
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <HAL_MspInit+0x44>)
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	0549      	lsls	r1, r1, #21
 80006d8:	430a      	orrs	r2, r1
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_MspInit+0x44>)
 80006de:	69da      	ldr	r2, [r3, #28]
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	055b      	lsls	r3, r3, #21
 80006e4:	4013      	ands	r3, r2
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	40021000 	.word	0x40021000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071c:	f000 f9be 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000736:	2320      	movs	r3, #32
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	0018      	movs	r0, r3
 800073c:	2308      	movs	r3, #8
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f003 fa75 	bl	8003c30 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	0018      	movs	r0, r3
 800074a:	231c      	movs	r3, #28
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f003 fa6e 	bl	8003c30 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_TIM3_Init+0xd0>)
 8000756:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <MX_TIM3_Init+0xd4>)
 8000758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 960;
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_TIM3_Init+0xd0>)
 800075c:	22f0      	movs	r2, #240	; 0xf0
 800075e:	0092      	lsls	r2, r2, #2
 8000760:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b27      	ldr	r3, [pc, #156]	; (8000800 <MX_TIM3_Init+0xd0>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_TIM3_Init+0xd0>)
 800076a:	22fa      	movs	r2, #250	; 0xfa
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_TIM3_Init+0xd0>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_TIM3_Init+0xd0>)
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_TIM3_Init+0xd0>)
 800077e:	0018      	movs	r0, r3
 8000780:	f001 fec2 	bl	8002508 <HAL_TIM_PWM_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000788:	f7ff ff8d 	bl	80006a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2120      	movs	r1, #32
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800079a:	187a      	adds	r2, r7, r1
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_TIM3_Init+0xd0>)
 800079e:	0011      	movs	r1, r2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f002 fb0f 	bl	8002dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80007aa:	f7ff ff7c 	bl	80006a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2260      	movs	r2, #96	; 0x60
 80007b2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c6:	1d39      	adds	r1, r7, #4
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_TIM3_Init+0xd0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 ff9d 	bl	800270c <HAL_TIM_PWM_ConfigChannel>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80007d6:	f7ff ff66 	bl	80006a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007da:	1d39      	adds	r1, r7, #4
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_TIM3_Init+0xd0>)
 80007de:	2204      	movs	r2, #4
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 ff93 	bl	800270c <HAL_TIM_PWM_ConfigChannel>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 80007ea:	f7ff ff5c 	bl	80006a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <MX_TIM3_Init+0xd0>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 f827 	bl	8000844 <HAL_TIM_MspPostInit>

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b00a      	add	sp, #40	; 0x28
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000074 	.word	0x20000074
 8000804:	40000400 	.word	0x40000400

08000808 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a09      	ldr	r2, [pc, #36]	; (800083c <HAL_TIM_PWM_MspInit+0x34>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d10b      	bne.n	8000832 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_TIM_PWM_MspInit+0x38>)
 800081c:	69da      	ldr	r2, [r3, #28]
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_TIM_PWM_MspInit+0x38>)
 8000820:	2102      	movs	r1, #2
 8000822:	430a      	orrs	r2, r1
 8000824:	61da      	str	r2, [r3, #28]
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_TIM_PWM_MspInit+0x38>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	2202      	movs	r2, #2
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b004      	add	sp, #16
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40000400 	.word	0x40000400
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	240c      	movs	r4, #12
 800084e:	193b      	adds	r3, r7, r4
 8000850:	0018      	movs	r0, r3
 8000852:	2314      	movs	r3, #20
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f003 f9ea 	bl	8003c30 <memset>
  if(timHandle->Instance==TIM3)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <HAL_TIM_MspPostInit+0x74>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d124      	bne.n	80008b0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_TIM_MspPostInit+0x78>)
 8000868:	695a      	ldr	r2, [r3, #20]
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_TIM_MspPostInit+0x78>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0289      	lsls	r1, r1, #10
 8000870:	430a      	orrs	r2, r1
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_TIM_MspPostInit+0x78>)
 8000876:	695a      	ldr	r2, [r3, #20]
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	029b      	lsls	r3, r3, #10
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_1_Pin|MOTOR_PWM_2_Pin;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	22c0      	movs	r2, #192	; 0xc0
 8000888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2202      	movs	r2, #2
 800088e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2201      	movs	r2, #1
 80008a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	187a      	adds	r2, r7, r1
 80008a4:	2390      	movs	r3, #144	; 0x90
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 f9ea 	bl	8000c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b009      	add	sp, #36	; 0x24
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	40000400 	.word	0x40000400
 80008bc:	40021000 	.word	0x40021000

080008c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <MX_USART2_UART_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008cc:	22e1      	movs	r2, #225	; 0xe1
 80008ce:	0252      	lsls	r2, r2, #9
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <MX_USART2_UART_Init+0x58>)
 8000904:	0018      	movs	r0, r3
 8000906:	f002 fab5 	bl	8002e74 <HAL_UART_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800090e:	f7ff feca 	bl	80006a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000bc 	.word	0x200000bc
 800091c:	40004400 	.word	0x40004400

08000920 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b08b      	sub	sp, #44	; 0x2c
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	2414      	movs	r4, #20
 800092a:	193b      	adds	r3, r7, r4
 800092c:	0018      	movs	r0, r3
 800092e:	2314      	movs	r3, #20
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f003 f97c 	bl	8003c30 <memset>
  if(uartHandle->Instance==USART2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d132      	bne.n	80009a8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <HAL_UART_MspInit+0x94>)
 8000944:	69da      	ldr	r2, [r3, #28]
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <HAL_UART_MspInit+0x94>)
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	0289      	lsls	r1, r1, #10
 800094c:	430a      	orrs	r2, r1
 800094e:	61da      	str	r2, [r3, #28]
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_UART_MspInit+0x94>)
 8000952:	69da      	ldr	r2, [r3, #28]
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	029b      	lsls	r3, r3, #10
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_UART_MspInit+0x94>)
 8000960:	695a      	ldr	r2, [r3, #20]
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_UART_MspInit+0x94>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0289      	lsls	r1, r1, #10
 8000968:	430a      	orrs	r2, r1
 800096a:	615a      	str	r2, [r3, #20]
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_UART_MspInit+0x94>)
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	029b      	lsls	r3, r3, #10
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800097a:	0021      	movs	r1, r4
 800097c:	187b      	adds	r3, r7, r1
 800097e:	220c      	movs	r2, #12
 8000980:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2202      	movs	r2, #2
 8000986:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2201      	movs	r2, #1
 8000998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	187a      	adds	r2, r7, r1
 800099c:	2390      	movs	r3, #144	; 0x90
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 f96e 	bl	8000c84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b00b      	add	sp, #44	; 0x2c
 80009ae:	bd90      	pop	{r4, r7, pc}
 80009b0:	40004400 	.word	0x40004400
 80009b4:	40021000 	.word	0x40021000

080009b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b8:	480d      	ldr	r0, [pc, #52]	; (80009f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490e      	ldr	r1, [pc, #56]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0b      	ldr	r4, [pc, #44]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009e2:	f7ff fea0 	bl	8000726 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009e6:	f003 f8ff 	bl	8003be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ea:	f7ff fd53 	bl	8000494 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   r0, =_estack
 80009f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009fc:	08003dbc 	.word	0x08003dbc
  ldr r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a04:	20000248 	.word	0x20000248

08000a08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_IRQHandler>
	...

08000a0c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_Init+0x24>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_Init+0x24>)
 8000a16:	2110      	movs	r1, #16
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 f809 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a22:	f7ff fe45 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	40022000 	.word	0x40022000

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_InitTick+0x5c>)
 8000a3e:	681c      	ldr	r4, [r3, #0]
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_InitTick+0x60>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	0019      	movs	r1, r3
 8000a46:	23fa      	movs	r3, #250	; 0xfa
 8000a48:	0098      	lsls	r0, r3, #2
 8000a4a:	f7ff fb5d 	bl	8000108 <__udivsi3>
 8000a4e:	0003      	movs	r3, r0
 8000a50:	0019      	movs	r1, r3
 8000a52:	0020      	movs	r0, r4
 8000a54:	f7ff fb58 	bl	8000108 <__udivsi3>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 f905 	bl	8000c6a <HAL_SYSTICK_Config>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	e00f      	b.n	8000a88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d80b      	bhi.n	8000a86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	2301      	movs	r3, #1
 8000a72:	425b      	negs	r3, r3
 8000a74:	2200      	movs	r2, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 f8e2 	bl	8000c40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_InitTick+0x64>)
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b003      	add	sp, #12
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000004 	.word	0x20000004

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x1c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x20>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	18d2      	adds	r2, r2, r3
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_IncTick+0x20>)
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000140 	.word	0x20000140

08000ac0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <HAL_GetTick+0x10>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000140 	.word	0x20000140

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff fff0 	bl	8000ac0 <HAL_GetTick>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3301      	adds	r3, #1
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_Delay+0x44>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	001a      	movs	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	189b      	adds	r3, r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	f7ff ffe0 	bl	8000ac0 <HAL_GetTick>
 8000b00:	0002      	movs	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b004      	add	sp, #16
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	20000008 	.word	0x20000008

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	0002      	movs	r2, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b30:	d828      	bhi.n	8000b84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b32:	4a2f      	ldr	r2, [pc, #188]	; (8000bf0 <__NVIC_SetPriority+0xd4>)
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	33c0      	adds	r3, #192	; 0xc0
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	589b      	ldr	r3, [r3, r2]
 8000b42:	1dfa      	adds	r2, r7, #7
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	0011      	movs	r1, r2
 8000b48:	2203      	movs	r2, #3
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	00d2      	lsls	r2, r2, #3
 8000b4e:	21ff      	movs	r1, #255	; 0xff
 8000b50:	4091      	lsls	r1, r2
 8000b52:	000a      	movs	r2, r1
 8000b54:	43d2      	mvns	r2, r2
 8000b56:	401a      	ands	r2, r3
 8000b58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	019b      	lsls	r3, r3, #6
 8000b5e:	22ff      	movs	r2, #255	; 0xff
 8000b60:	401a      	ands	r2, r3
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	0018      	movs	r0, r3
 8000b68:	2303      	movs	r3, #3
 8000b6a:	4003      	ands	r3, r0
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b70:	481f      	ldr	r0, [pc, #124]	; (8000bf0 <__NVIC_SetPriority+0xd4>)
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	089b      	lsrs	r3, r3, #2
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	33c0      	adds	r3, #192	; 0xc0
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b82:	e031      	b.n	8000be8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b84:	4a1b      	ldr	r2, [pc, #108]	; (8000bf4 <__NVIC_SetPriority+0xd8>)
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	400b      	ands	r3, r1
 8000b90:	3b08      	subs	r3, #8
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	3306      	adds	r3, #6
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	18d3      	adds	r3, r2, r3
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1dfa      	adds	r2, r7, #7
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	400a      	ands	r2, r1
 8000ba8:	00d2      	lsls	r2, r2, #3
 8000baa:	21ff      	movs	r1, #255	; 0xff
 8000bac:	4091      	lsls	r1, r2
 8000bae:	000a      	movs	r2, r1
 8000bb0:	43d2      	mvns	r2, r2
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	019b      	lsls	r3, r3, #6
 8000bba:	22ff      	movs	r2, #255	; 0xff
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	4003      	ands	r3, r0
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <__NVIC_SetPriority+0xd8>)
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	001c      	movs	r4, r3
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	4023      	ands	r3, r4
 8000bd8:	3b08      	subs	r3, #8
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	3306      	adds	r3, #6
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	18c3      	adds	r3, r0, r3
 8000be4:	3304      	adds	r3, #4
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b003      	add	sp, #12
 8000bee:	bd90      	pop	{r4, r7, pc}
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	1e5a      	subs	r2, r3, #1
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	045b      	lsls	r3, r3, #17
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d301      	bcc.n	8000c10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e010      	b.n	8000c32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <SysTick_Config+0x44>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	3a01      	subs	r2, #1
 8000c16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c18:	2301      	movs	r3, #1
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	2103      	movs	r1, #3
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff ff7c 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SysTick_Config+0x44>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <SysTick_Config+0x44>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	1c02      	adds	r2, r0, #0
 8000c50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	0011      	movs	r1, r2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b004      	add	sp, #16
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ffbf 	bl	8000bf8 <SysTick_Config>
 8000c7a:	0003      	movs	r3, r0
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b002      	add	sp, #8
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c92:	e14f      	b.n	8000f34 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d100      	bne.n	8000cac <HAL_GPIO_Init+0x28>
 8000caa:	e140      	b.n	8000f2e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d005      	beq.n	8000cc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d130      	bne.n	8000d26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	409a      	lsls	r2, r3
 8000cd2:	0013      	movs	r3, r2
 8000cd4:	43da      	mvns	r2, r3
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	409a      	lsls	r2, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	0013      	movs	r3, r2
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	091b      	lsrs	r3, r3, #4
 8000d10:	2201      	movs	r2, #1
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d017      	beq.n	8000d62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	43da      	mvns	r2, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2203      	movs	r2, #3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d123      	bne.n	8000db6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	08da      	lsrs	r2, r3, #3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	58d3      	ldr	r3, [r2, r3]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	2207      	movs	r2, #7
 8000d80:	4013      	ands	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	691a      	ldr	r2, [r3, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2107      	movs	r1, #7
 8000d9a:	400b      	ands	r3, r1
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	6939      	ldr	r1, [r7, #16]
 8000db4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	23c0      	movs	r3, #192	; 0xc0
 8000df0:	029b      	lsls	r3, r3, #10
 8000df2:	4013      	ands	r3, r2
 8000df4:	d100      	bne.n	8000df8 <HAL_GPIO_Init+0x174>
 8000df6:	e09a      	b.n	8000f2e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df8:	4b54      	ldr	r3, [pc, #336]	; (8000f4c <HAL_GPIO_Init+0x2c8>)
 8000dfa:	699a      	ldr	r2, [r3, #24]
 8000dfc:	4b53      	ldr	r3, [pc, #332]	; (8000f4c <HAL_GPIO_Init+0x2c8>)
 8000dfe:	2101      	movs	r1, #1
 8000e00:	430a      	orrs	r2, r1
 8000e02:	619a      	str	r2, [r3, #24]
 8000e04:	4b51      	ldr	r3, [pc, #324]	; (8000f4c <HAL_GPIO_Init+0x2c8>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e10:	4a4f      	ldr	r2, [pc, #316]	; (8000f50 <HAL_GPIO_Init+0x2cc>)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3302      	adds	r3, #2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	589b      	ldr	r3, [r3, r2]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2203      	movs	r2, #3
 8000e22:	4013      	ands	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	220f      	movs	r2, #15
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	0013      	movs	r3, r2
 8000e2c:	43da      	mvns	r2, r3
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	2390      	movs	r3, #144	; 0x90
 8000e38:	05db      	lsls	r3, r3, #23
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d013      	beq.n	8000e66 <HAL_GPIO_Init+0x1e2>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a44      	ldr	r2, [pc, #272]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00d      	beq.n	8000e62 <HAL_GPIO_Init+0x1de>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a43      	ldr	r2, [pc, #268]	; (8000f58 <HAL_GPIO_Init+0x2d4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d007      	beq.n	8000e5e <HAL_GPIO_Init+0x1da>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a42      	ldr	r2, [pc, #264]	; (8000f5c <HAL_GPIO_Init+0x2d8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d101      	bne.n	8000e5a <HAL_GPIO_Init+0x1d6>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x1e4>
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	e004      	b.n	8000e68 <HAL_GPIO_Init+0x1e4>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e002      	b.n	8000e68 <HAL_GPIO_Init+0x1e4>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e000      	b.n	8000e68 <HAL_GPIO_Init+0x1e4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	400a      	ands	r2, r1
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	4093      	lsls	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e78:	4935      	ldr	r1, [pc, #212]	; (8000f50 <HAL_GPIO_Init+0x2cc>)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e86:	4b36      	ldr	r3, [pc, #216]	; (8000f60 <HAL_GPIO_Init+0x2dc>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	025b      	lsls	r3, r3, #9
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <HAL_GPIO_Init+0x2dc>)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000eb0:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <HAL_GPIO_Init+0x2dc>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43da      	mvns	r2, r3
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	029b      	lsls	r3, r3, #10
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <HAL_GPIO_Init+0x2dc>)
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eda:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <HAL_GPIO_Init+0x2dc>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	035b      	lsls	r3, r3, #13
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_GPIO_Init+0x2dc>)
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_GPIO_Init+0x2dc>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43da      	mvns	r2, r3
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	039b      	lsls	r3, r3, #14
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_GPIO_Init+0x2dc>)
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3301      	adds	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	40da      	lsrs	r2, r3
 8000f3c:	1e13      	subs	r3, r2, #0
 8000f3e:	d000      	beq.n	8000f42 <HAL_GPIO_Init+0x2be>
 8000f40:	e6a8      	b.n	8000c94 <HAL_GPIO_Init+0x10>
  } 
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b006      	add	sp, #24
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010000 	.word	0x40010000
 8000f54:	48000400 	.word	0x48000400
 8000f58:	48000800 	.word	0x48000800
 8000f5c:	48000c00 	.word	0x48000c00
 8000f60:	40010400 	.word	0x40010400

08000f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	0008      	movs	r0, r1
 8000f6e:	0011      	movs	r1, r2
 8000f70:	1cbb      	adds	r3, r7, #2
 8000f72:	1c02      	adds	r2, r0, #0
 8000f74:	801a      	strh	r2, [r3, #0]
 8000f76:	1c7b      	adds	r3, r7, #1
 8000f78:	1c0a      	adds	r2, r1, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f7c:	1c7b      	adds	r3, r7, #1
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f84:	1cbb      	adds	r3, r7, #2
 8000f86:	881a      	ldrh	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f8c:	e003      	b.n	8000f96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f8e:	1cbb      	adds	r3, r7, #2
 8000f90:	881a      	ldrh	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e082      	b.n	80010b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2241      	movs	r2, #65	; 0x41
 8000fb6:	5c9b      	ldrb	r3, [r3, r2]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d107      	bne.n	8000fce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2240      	movs	r2, #64	; 0x40
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff fa15 	bl	80003f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2241      	movs	r2, #65	; 0x41
 8000fd2:	2124      	movs	r1, #36	; 0x24
 8000fd4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	438a      	bics	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4934      	ldr	r1, [pc, #208]	; (80010c0 <HAL_I2C_Init+0x120>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4931      	ldr	r1, [pc, #196]	; (80010c4 <HAL_I2C_Init+0x124>)
 8001000:	400a      	ands	r2, r1
 8001002:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d108      	bne.n	800101e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	0209      	lsls	r1, r1, #8
 8001018:	430a      	orrs	r2, r1
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	e007      	b.n	800102e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2184      	movs	r1, #132	; 0x84
 8001028:	0209      	lsls	r1, r1, #8
 800102a:	430a      	orrs	r2, r1
 800102c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d104      	bne.n	8001040 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	491f      	ldr	r1, [pc, #124]	; (80010c8 <HAL_I2C_Init+0x128>)
 800104c:	430a      	orrs	r2, r1
 800104e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	491a      	ldr	r1, [pc, #104]	; (80010c4 <HAL_I2C_Init+0x124>)
 800105c:	400a      	ands	r2, r1
 800105e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	431a      	orrs	r2, r3
 800106a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69d9      	ldr	r1, [r3, #28]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a1a      	ldr	r2, [r3, #32]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	430a      	orrs	r2, r1
 8001098:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2241      	movs	r2, #65	; 0x41
 80010a4:	2120      	movs	r1, #32
 80010a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2242      	movs	r2, #66	; 0x42
 80010b2:	2100      	movs	r1, #0
 80010b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	f0ffffff 	.word	0xf0ffffff
 80010c4:	ffff7fff 	.word	0xffff7fff
 80010c8:	02008000 	.word	0x02008000

080010cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	0008      	movs	r0, r1
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	0019      	movs	r1, r3
 80010da:	230a      	movs	r3, #10
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	1c02      	adds	r2, r0, #0
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	2308      	movs	r3, #8
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	1c0a      	adds	r2, r1, #0
 80010e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2241      	movs	r2, #65	; 0x41
 80010ee:	5c9b      	ldrb	r3, [r3, r2]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b20      	cmp	r3, #32
 80010f4:	d000      	beq.n	80010f8 <HAL_I2C_Master_Transmit+0x2c>
 80010f6:	e0e7      	b.n	80012c8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2240      	movs	r2, #64	; 0x40
 80010fc:	5c9b      	ldrb	r3, [r3, r2]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d101      	bne.n	8001106 <HAL_I2C_Master_Transmit+0x3a>
 8001102:	2302      	movs	r3, #2
 8001104:	e0e1      	b.n	80012ca <HAL_I2C_Master_Transmit+0x1fe>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2240      	movs	r2, #64	; 0x40
 800110a:	2101      	movs	r1, #1
 800110c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800110e:	f7ff fcd7 	bl	8000ac0 <HAL_GetTick>
 8001112:	0003      	movs	r3, r0
 8001114:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	0219      	lsls	r1, r3, #8
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2319      	movs	r3, #25
 8001122:	2201      	movs	r2, #1
 8001124:	f000 fa04 	bl	8001530 <I2C_WaitOnFlagUntilTimeout>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d001      	beq.n	8001130 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0cc      	b.n	80012ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2241      	movs	r2, #65	; 0x41
 8001134:	2121      	movs	r1, #33	; 0x21
 8001136:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2242      	movs	r2, #66	; 0x42
 800113c:	2110      	movs	r1, #16
 800113e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2208      	movs	r2, #8
 8001150:	18ba      	adds	r2, r7, r2
 8001152:	8812      	ldrh	r2, [r2, #0]
 8001154:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2200      	movs	r2, #0
 800115a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001160:	b29b      	uxth	r3, r3
 8001162:	2bff      	cmp	r3, #255	; 0xff
 8001164:	d911      	bls.n	800118a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	22ff      	movs	r2, #255	; 0xff
 800116a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001170:	b2da      	uxtb	r2, r3
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	045c      	lsls	r4, r3, #17
 8001176:	230a      	movs	r3, #10
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	8819      	ldrh	r1, [r3, #0]
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	4b55      	ldr	r3, [pc, #340]	; (80012d4 <HAL_I2C_Master_Transmit+0x208>)
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	0023      	movs	r3, r4
 8001184:	f000 fb74 	bl	8001870 <I2C_TransferConfig>
 8001188:	e075      	b.n	8001276 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800118e:	b29a      	uxth	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001198:	b2da      	uxtb	r2, r3
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	049c      	lsls	r4, r3, #18
 800119e:	230a      	movs	r3, #10
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	8819      	ldrh	r1, [r3, #0]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	4b4b      	ldr	r3, [pc, #300]	; (80012d4 <HAL_I2C_Master_Transmit+0x208>)
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	0023      	movs	r3, r4
 80011ac:	f000 fb60 	bl	8001870 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80011b0:	e061      	b.n	8001276 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	0018      	movs	r0, r3
 80011ba:	f000 f9f8 	bl	80015ae <I2C_WaitOnTXISFlagUntilTimeout>
 80011be:	1e03      	subs	r3, r0, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e081      	b.n	80012ca <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	3b01      	subs	r3, #1
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d03a      	beq.n	8001276 <HAL_I2C_Master_Transmit+0x1aa>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001204:	2b00      	cmp	r3, #0
 8001206:	d136      	bne.n	8001276 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	0013      	movs	r3, r2
 8001212:	2200      	movs	r2, #0
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	f000 f98b 	bl	8001530 <I2C_WaitOnFlagUntilTimeout>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d001      	beq.n	8001222 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e053      	b.n	80012ca <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001226:	b29b      	uxth	r3, r3
 8001228:	2bff      	cmp	r3, #255	; 0xff
 800122a:	d911      	bls.n	8001250 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	22ff      	movs	r2, #255	; 0xff
 8001230:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001236:	b2da      	uxtb	r2, r3
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	045c      	lsls	r4, r3, #17
 800123c:	230a      	movs	r3, #10
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	8819      	ldrh	r1, [r3, #0]
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	0023      	movs	r3, r4
 800124a:	f000 fb11 	bl	8001870 <I2C_TransferConfig>
 800124e:	e012      	b.n	8001276 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001254:	b29a      	uxth	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125e:	b2da      	uxtb	r2, r3
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	049c      	lsls	r4, r3, #18
 8001264:	230a      	movs	r3, #10
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	8819      	ldrh	r1, [r3, #0]
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	2300      	movs	r3, #0
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	0023      	movs	r3, r4
 8001272:	f000 fafd 	bl	8001870 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127a:	b29b      	uxth	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d198      	bne.n	80011b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	0018      	movs	r0, r3
 8001288:	f000 f9d0 	bl	800162c <I2C_WaitOnSTOPFlagUntilTimeout>
 800128c:	1e03      	subs	r3, r0, #0
 800128e:	d001      	beq.n	8001294 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e01a      	b.n	80012ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2220      	movs	r2, #32
 800129a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	490c      	ldr	r1, [pc, #48]	; (80012d8 <HAL_I2C_Master_Transmit+0x20c>)
 80012a8:	400a      	ands	r2, r1
 80012aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2241      	movs	r2, #65	; 0x41
 80012b0:	2120      	movs	r1, #32
 80012b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2242      	movs	r2, #66	; 0x42
 80012b8:	2100      	movs	r1, #0
 80012ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2240      	movs	r2, #64	; 0x40
 80012c0:	2100      	movs	r1, #0
 80012c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e000      	b.n	80012ca <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80012c8:	2302      	movs	r3, #2
  }
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b007      	add	sp, #28
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	80002000 	.word	0x80002000
 80012d8:	fe00e800 	.word	0xfe00e800

080012dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	0008      	movs	r0, r1
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	0019      	movs	r1, r3
 80012ea:	230a      	movs	r3, #10
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	1c02      	adds	r2, r0, #0
 80012f0:	801a      	strh	r2, [r3, #0]
 80012f2:	2308      	movs	r3, #8
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	1c0a      	adds	r2, r1, #0
 80012f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2241      	movs	r2, #65	; 0x41
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b20      	cmp	r3, #32
 8001304:	d000      	beq.n	8001308 <HAL_I2C_Master_Receive+0x2c>
 8001306:	e0e8      	b.n	80014da <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2240      	movs	r2, #64	; 0x40
 800130c:	5c9b      	ldrb	r3, [r3, r2]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_I2C_Master_Receive+0x3a>
 8001312:	2302      	movs	r3, #2
 8001314:	e0e2      	b.n	80014dc <HAL_I2C_Master_Receive+0x200>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2240      	movs	r2, #64	; 0x40
 800131a:	2101      	movs	r1, #1
 800131c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800131e:	f7ff fbcf 	bl	8000ac0 <HAL_GetTick>
 8001322:	0003      	movs	r3, r0
 8001324:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	0219      	lsls	r1, r3, #8
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2319      	movs	r3, #25
 8001332:	2201      	movs	r2, #1
 8001334:	f000 f8fc 	bl	8001530 <I2C_WaitOnFlagUntilTimeout>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d001      	beq.n	8001340 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0cd      	b.n	80014dc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2241      	movs	r2, #65	; 0x41
 8001344:	2122      	movs	r1, #34	; 0x22
 8001346:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2242      	movs	r2, #66	; 0x42
 800134c:	2110      	movs	r1, #16
 800134e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2208      	movs	r2, #8
 8001360:	18ba      	adds	r2, r7, r2
 8001362:	8812      	ldrh	r2, [r2, #0]
 8001364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001370:	b29b      	uxth	r3, r3
 8001372:	2bff      	cmp	r3, #255	; 0xff
 8001374:	d911      	bls.n	800139a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	22ff      	movs	r2, #255	; 0xff
 800137a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001380:	b2da      	uxtb	r2, r3
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	045c      	lsls	r4, r3, #17
 8001386:	230a      	movs	r3, #10
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	8819      	ldrh	r1, [r3, #0]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	4b55      	ldr	r3, [pc, #340]	; (80014e4 <HAL_I2C_Master_Receive+0x208>)
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	0023      	movs	r3, r4
 8001394:	f000 fa6c 	bl	8001870 <I2C_TransferConfig>
 8001398:	e076      	b.n	8001488 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800139e:	b29a      	uxth	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	049c      	lsls	r4, r3, #18
 80013ae:	230a      	movs	r3, #10
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	8819      	ldrh	r1, [r3, #0]
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <HAL_I2C_Master_Receive+0x208>)
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	0023      	movs	r3, r4
 80013bc:	f000 fa58 	bl	8001870 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80013c0:	e062      	b.n	8001488 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	0018      	movs	r0, r3
 80013ca:	f000 f96b 	bl	80016a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80013ce:	1e03      	subs	r3, r0, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e082      	b.n	80014dc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fe:	b29b      	uxth	r3, r3
 8001400:	3b01      	subs	r3, #1
 8001402:	b29a      	uxth	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800140c:	b29b      	uxth	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d03a      	beq.n	8001488 <HAL_I2C_Master_Receive+0x1ac>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001416:	2b00      	cmp	r3, #0
 8001418:	d136      	bne.n	8001488 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800141a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	0013      	movs	r3, r2
 8001424:	2200      	movs	r2, #0
 8001426:	2180      	movs	r1, #128	; 0x80
 8001428:	f000 f882 	bl	8001530 <I2C_WaitOnFlagUntilTimeout>
 800142c:	1e03      	subs	r3, r0, #0
 800142e:	d001      	beq.n	8001434 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e053      	b.n	80014dc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001438:	b29b      	uxth	r3, r3
 800143a:	2bff      	cmp	r3, #255	; 0xff
 800143c:	d911      	bls.n	8001462 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	22ff      	movs	r2, #255	; 0xff
 8001442:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001448:	b2da      	uxtb	r2, r3
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	045c      	lsls	r4, r3, #17
 800144e:	230a      	movs	r3, #10
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	8819      	ldrh	r1, [r3, #0]
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	2300      	movs	r3, #0
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	0023      	movs	r3, r4
 800145c:	f000 fa08 	bl	8001870 <I2C_TransferConfig>
 8001460:	e012      	b.n	8001488 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001466:	b29a      	uxth	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001470:	b2da      	uxtb	r2, r3
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	049c      	lsls	r4, r3, #18
 8001476:	230a      	movs	r3, #10
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	8819      	ldrh	r1, [r3, #0]
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	2300      	movs	r3, #0
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	0023      	movs	r3, r4
 8001484:	f000 f9f4 	bl	8001870 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148c:	b29b      	uxth	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d197      	bne.n	80013c2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	0018      	movs	r0, r3
 800149a:	f000 f8c7 	bl	800162c <I2C_WaitOnSTOPFlagUntilTimeout>
 800149e:	1e03      	subs	r3, r0, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e01a      	b.n	80014dc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2220      	movs	r2, #32
 80014ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	490b      	ldr	r1, [pc, #44]	; (80014e8 <HAL_I2C_Master_Receive+0x20c>)
 80014ba:	400a      	ands	r2, r1
 80014bc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2241      	movs	r2, #65	; 0x41
 80014c2:	2120      	movs	r1, #32
 80014c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2242      	movs	r2, #66	; 0x42
 80014ca:	2100      	movs	r1, #0
 80014cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2240      	movs	r2, #64	; 0x40
 80014d2:	2100      	movs	r1, #0
 80014d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80014da:	2302      	movs	r3, #2
  }
}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	b007      	add	sp, #28
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	80002400 	.word	0x80002400
 80014e8:	fe00e800 	.word	0xfe00e800

080014ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2202      	movs	r2, #2
 80014fc:	4013      	ands	r3, r2
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d103      	bne.n	800150a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2200      	movs	r2, #0
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2201      	movs	r2, #1
 8001512:	4013      	ands	r3, r2
 8001514:	2b01      	cmp	r3, #1
 8001516:	d007      	beq.n	8001528 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	699a      	ldr	r2, [r3, #24]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2101      	movs	r1, #1
 8001524:	430a      	orrs	r2, r1
 8001526:	619a      	str	r2, [r3, #24]
  }
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}

08001530 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001540:	e021      	b.n	8001586 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	d01e      	beq.n	8001586 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001548:	f7ff faba 	bl	8000ac0 <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d302      	bcc.n	800155e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d113      	bne.n	8001586 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	2220      	movs	r2, #32
 8001564:	431a      	orrs	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2241      	movs	r2, #65	; 0x41
 800156e:	2120      	movs	r1, #32
 8001570:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2242      	movs	r2, #66	; 0x42
 8001576:	2100      	movs	r1, #0
 8001578:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2240      	movs	r2, #64	; 0x40
 800157e:	2100      	movs	r1, #0
 8001580:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	4013      	ands	r3, r2
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	425a      	negs	r2, r3
 8001596:	4153      	adcs	r3, r2
 8001598:	b2db      	uxtb	r3, r3
 800159a:	001a      	movs	r2, r3
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d0ce      	beq.n	8001542 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b004      	add	sp, #16
 80015ac:	bd80      	pop	{r7, pc}

080015ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015ba:	e02b      	b.n	8001614 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	0018      	movs	r0, r3
 80015c4:	f000 f8da 	bl	800177c <I2C_IsAcknowledgeFailed>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e029      	b.n	8001624 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	3301      	adds	r3, #1
 80015d4:	d01e      	beq.n	8001614 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d6:	f7ff fa73 	bl	8000ac0 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d302      	bcc.n	80015ec <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d113      	bne.n	8001614 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	2220      	movs	r2, #32
 80015f2:	431a      	orrs	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2241      	movs	r2, #65	; 0x41
 80015fc:	2120      	movs	r1, #32
 80015fe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2242      	movs	r2, #66	; 0x42
 8001604:	2100      	movs	r1, #0
 8001606:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	2100      	movs	r1, #0
 800160e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e007      	b.n	8001624 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2202      	movs	r2, #2
 800161c:	4013      	ands	r3, r2
 800161e:	2b02      	cmp	r3, #2
 8001620:	d1cc      	bne.n	80015bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b004      	add	sp, #16
 800162a:	bd80      	pop	{r7, pc}

0800162c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001638:	e028      	b.n	800168c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	0018      	movs	r0, r3
 8001642:	f000 f89b 	bl	800177c <I2C_IsAcknowledgeFailed>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d001      	beq.n	800164e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e026      	b.n	800169c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800164e:	f7ff fa37 	bl	8000ac0 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	429a      	cmp	r2, r3
 800165c:	d302      	bcc.n	8001664 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d113      	bne.n	800168c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	2220      	movs	r2, #32
 800166a:	431a      	orrs	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2241      	movs	r2, #65	; 0x41
 8001674:	2120      	movs	r1, #32
 8001676:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2242      	movs	r2, #66	; 0x42
 800167c:	2100      	movs	r1, #0
 800167e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2240      	movs	r2, #64	; 0x40
 8001684:	2100      	movs	r1, #0
 8001686:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e007      	b.n	800169c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2220      	movs	r2, #32
 8001694:	4013      	ands	r3, r2
 8001696:	2b20      	cmp	r3, #32
 8001698:	d1cf      	bne.n	800163a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b004      	add	sp, #16
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80016b0:	e055      	b.n	800175e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	0018      	movs	r0, r3
 80016ba:	f000 f85f 	bl	800177c <I2C_IsAcknowledgeFailed>
 80016be:	1e03      	subs	r3, r0, #0
 80016c0:	d001      	beq.n	80016c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e053      	b.n	800176e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2220      	movs	r2, #32
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b20      	cmp	r3, #32
 80016d2:	d129      	bne.n	8001728 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2204      	movs	r2, #4
 80016dc:	4013      	ands	r3, r2
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d105      	bne.n	80016ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e03f      	b.n	800176e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2220      	movs	r2, #32
 80016f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	491d      	ldr	r1, [pc, #116]	; (8001778 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001702:	400a      	ands	r2, r1
 8001704:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2241      	movs	r2, #65	; 0x41
 8001710:	2120      	movs	r1, #32
 8001712:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2242      	movs	r2, #66	; 0x42
 8001718:	2100      	movs	r1, #0
 800171a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2240      	movs	r2, #64	; 0x40
 8001720:	2100      	movs	r1, #0
 8001722:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e022      	b.n	800176e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001728:	f7ff f9ca 	bl	8000ac0 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	429a      	cmp	r2, r3
 8001736:	d302      	bcc.n	800173e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10f      	bne.n	800175e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	2220      	movs	r2, #32
 8001744:	431a      	orrs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2241      	movs	r2, #65	; 0x41
 800174e:	2120      	movs	r1, #32
 8001750:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2240      	movs	r2, #64	; 0x40
 8001756:	2100      	movs	r1, #0
 8001758:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e007      	b.n	800176e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2204      	movs	r2, #4
 8001766:	4013      	ands	r3, r2
 8001768:	2b04      	cmp	r3, #4
 800176a:	d1a2      	bne.n	80016b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b004      	add	sp, #16
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	fe00e800 	.word	0xfe00e800

0800177c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2210      	movs	r2, #16
 8001790:	4013      	ands	r3, r2
 8001792:	2b10      	cmp	r3, #16
 8001794:	d164      	bne.n	8001860 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	049b      	lsls	r3, r3, #18
 80017a0:	401a      	ands	r2, r3
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	049b      	lsls	r3, r3, #18
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d02b      	beq.n	8001802 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	01c9      	lsls	r1, r1, #7
 80017b8:	430a      	orrs	r2, r1
 80017ba:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017bc:	e021      	b.n	8001802 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3301      	adds	r3, #1
 80017c2:	d01e      	beq.n	8001802 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017c4:	f7ff f97c 	bl	8000ac0 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d302      	bcc.n	80017da <I2C_IsAcknowledgeFailed+0x5e>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d113      	bne.n	8001802 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	2220      	movs	r2, #32
 80017e0:	431a      	orrs	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2241      	movs	r2, #65	; 0x41
 80017ea:	2120      	movs	r1, #32
 80017ec:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2242      	movs	r2, #66	; 0x42
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2240      	movs	r2, #64	; 0x40
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e02f      	b.n	8001862 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2220      	movs	r2, #32
 800180a:	4013      	ands	r3, r2
 800180c:	2b20      	cmp	r3, #32
 800180e:	d1d6      	bne.n	80017be <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2210      	movs	r2, #16
 8001816:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2220      	movs	r2, #32
 800181e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff fe62 	bl	80014ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	490e      	ldr	r1, [pc, #56]	; (800186c <I2C_IsAcknowledgeFailed+0xf0>)
 8001834:	400a      	ands	r2, r1
 8001836:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	2204      	movs	r2, #4
 800183e:	431a      	orrs	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2241      	movs	r2, #65	; 0x41
 8001848:	2120      	movs	r1, #32
 800184a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2242      	movs	r2, #66	; 0x42
 8001850:	2100      	movs	r1, #0
 8001852:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2240      	movs	r2, #64	; 0x40
 8001858:	2100      	movs	r1, #0
 800185a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b004      	add	sp, #16
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	fe00e800 	.word	0xfe00e800

08001870 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	0008      	movs	r0, r1
 800187a:	0011      	movs	r1, r2
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	240a      	movs	r4, #10
 8001880:	193b      	adds	r3, r7, r4
 8001882:	1c02      	adds	r2, r0, #0
 8001884:	801a      	strh	r2, [r3, #0]
 8001886:	2009      	movs	r0, #9
 8001888:	183b      	adds	r3, r7, r0
 800188a:	1c0a      	adds	r2, r1, #0
 800188c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	6a3a      	ldr	r2, [r7, #32]
 8001896:	0d51      	lsrs	r1, r2, #21
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	00d2      	lsls	r2, r2, #3
 800189c:	400a      	ands	r2, r1
 800189e:	490e      	ldr	r1, [pc, #56]	; (80018d8 <I2C_TransferConfig+0x68>)
 80018a0:	430a      	orrs	r2, r1
 80018a2:	43d2      	mvns	r2, r2
 80018a4:	401a      	ands	r2, r3
 80018a6:	0011      	movs	r1, r2
 80018a8:	193b      	adds	r3, r7, r4
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	059b      	lsls	r3, r3, #22
 80018ae:	0d9a      	lsrs	r2, r3, #22
 80018b0:	183b      	adds	r3, r7, r0
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	0418      	lsls	r0, r3, #16
 80018b6:	23ff      	movs	r3, #255	; 0xff
 80018b8:	041b      	lsls	r3, r3, #16
 80018ba:	4003      	ands	r3, r0
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b005      	add	sp, #20
 80018d4:	bd90      	pop	{r4, r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	03ff63ff 	.word	0x03ff63ff

080018dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2241      	movs	r2, #65	; 0x41
 80018ea:	5c9b      	ldrb	r3, [r3, r2]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b20      	cmp	r3, #32
 80018f0:	d138      	bne.n	8001964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2240      	movs	r2, #64	; 0x40
 80018f6:	5c9b      	ldrb	r3, [r3, r2]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e032      	b.n	8001966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2240      	movs	r2, #64	; 0x40
 8001904:	2101      	movs	r1, #1
 8001906:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2241      	movs	r2, #65	; 0x41
 800190c:	2124      	movs	r1, #36	; 0x24
 800190e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2101      	movs	r1, #1
 800191c:	438a      	bics	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4911      	ldr	r1, [pc, #68]	; (8001970 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2101      	movs	r1, #1
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2241      	movs	r2, #65	; 0x41
 8001954:	2120      	movs	r1, #32
 8001956:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2240      	movs	r2, #64	; 0x40
 800195c:	2100      	movs	r1, #0
 800195e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	e000      	b.n	8001966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001964:	2302      	movs	r3, #2
  }
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b002      	add	sp, #8
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	ffffefff 	.word	0xffffefff

08001974 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2241      	movs	r2, #65	; 0x41
 8001982:	5c9b      	ldrb	r3, [r3, r2]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b20      	cmp	r3, #32
 8001988:	d139      	bne.n	80019fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2240      	movs	r2, #64	; 0x40
 800198e:	5c9b      	ldrb	r3, [r3, r2]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001994:	2302      	movs	r3, #2
 8001996:	e033      	b.n	8001a00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2240      	movs	r2, #64	; 0x40
 800199c:	2101      	movs	r1, #1
 800199e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2241      	movs	r2, #65	; 0x41
 80019a4:	2124      	movs	r1, #36	; 0x24
 80019a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2101      	movs	r1, #1
 80019b4:	438a      	bics	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2241      	movs	r2, #65	; 0x41
 80019ee:	2120      	movs	r1, #32
 80019f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2240      	movs	r2, #64	; 0x40
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019fe:	2302      	movs	r3, #2
  }
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b004      	add	sp, #16
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	fffff0ff 	.word	0xfffff0ff

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e301      	b.n	8002022 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2201      	movs	r2, #1
 8001a24:	4013      	ands	r3, r2
 8001a26:	d100      	bne.n	8001a2a <HAL_RCC_OscConfig+0x1e>
 8001a28:	e08d      	b.n	8001b46 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a2a:	4bc3      	ldr	r3, [pc, #780]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	220c      	movs	r2, #12
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d00e      	beq.n	8001a54 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a36:	4bc0      	ldr	r3, [pc, #768]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d116      	bne.n	8001a70 <HAL_RCC_OscConfig+0x64>
 8001a42:	4bbd      	ldr	r3, [pc, #756]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	025b      	lsls	r3, r3, #9
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	025b      	lsls	r3, r3, #9
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d10d      	bne.n	8001a70 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	4bb8      	ldr	r3, [pc, #736]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	029b      	lsls	r3, r3, #10
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d100      	bne.n	8001a62 <HAL_RCC_OscConfig+0x56>
 8001a60:	e070      	b.n	8001b44 <HAL_RCC_OscConfig+0x138>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d000      	beq.n	8001a6c <HAL_RCC_OscConfig+0x60>
 8001a6a:	e06b      	b.n	8001b44 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e2d8      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x7c>
 8001a78:	4baf      	ldr	r3, [pc, #700]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4bae      	ldr	r3, [pc, #696]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	0249      	lsls	r1, r1, #9
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e02f      	b.n	8001ae8 <HAL_RCC_OscConfig+0xdc>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x9e>
 8001a90:	4ba9      	ldr	r3, [pc, #676]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4ba8      	ldr	r3, [pc, #672]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001a96:	49a9      	ldr	r1, [pc, #676]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	4ba6      	ldr	r3, [pc, #664]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4ba5      	ldr	r3, [pc, #660]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	49a7      	ldr	r1, [pc, #668]	; (8001d40 <HAL_RCC_OscConfig+0x334>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e01e      	b.n	8001ae8 <HAL_RCC_OscConfig+0xdc>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b05      	cmp	r3, #5
 8001ab0:	d10e      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xc4>
 8001ab2:	4ba1      	ldr	r3, [pc, #644]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4ba0      	ldr	r3, [pc, #640]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	02c9      	lsls	r1, r1, #11
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	4b9d      	ldr	r3, [pc, #628]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b9c      	ldr	r3, [pc, #624]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	0249      	lsls	r1, r1, #9
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0xdc>
 8001ad0:	4b99      	ldr	r3, [pc, #612]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b98      	ldr	r3, [pc, #608]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	4999      	ldr	r1, [pc, #612]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001ad8:	400a      	ands	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	4b96      	ldr	r3, [pc, #600]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b95      	ldr	r3, [pc, #596]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	4997      	ldr	r1, [pc, #604]	; (8001d40 <HAL_RCC_OscConfig+0x334>)
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d014      	beq.n	8001b1a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7fe ffe6 	bl	8000ac0 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afa:	f7fe ffe1 	bl	8000ac0 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b64      	cmp	r3, #100	; 0x64
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e28a      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0c:	4b8a      	ldr	r3, [pc, #552]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	029b      	lsls	r3, r3, #10
 8001b14:	4013      	ands	r3, r2
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0xee>
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7fe ffd1 	bl	8000ac0 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b24:	f7fe ffcc 	bl	8000ac0 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e275      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b80      	ldr	r3, [pc, #512]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	029b      	lsls	r3, r3, #10
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x118>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d100      	bne.n	8001b52 <HAL_RCC_OscConfig+0x146>
 8001b50:	e069      	b.n	8001c26 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b52:	4b79      	ldr	r3, [pc, #484]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	220c      	movs	r2, #12
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d00b      	beq.n	8001b74 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b5c:	4b76      	ldr	r3, [pc, #472]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	220c      	movs	r2, #12
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d11c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x196>
 8001b68:	4b73      	ldr	r3, [pc, #460]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	025b      	lsls	r3, r3, #9
 8001b70:	4013      	ands	r3, r2
 8001b72:	d116      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b74:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x17e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e24b      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8a:	4b6b      	ldr	r3, [pc, #428]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	22f8      	movs	r2, #248	; 0xf8
 8001b90:	4393      	bics	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	00da      	lsls	r2, r3, #3
 8001b9a:	4b67      	ldr	r3, [pc, #412]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba0:	e041      	b.n	8001c26 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d024      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001baa:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b62      	ldr	r3, [pc, #392]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7fe ff83 	bl	8000ac0 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7fe ff7e 	bl	8000ac0 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e227      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d0f1      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	22f8      	movs	r2, #248	; 0xf8
 8001be2:	4393      	bics	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00da      	lsls	r2, r3, #3
 8001bec:	4b52      	ldr	r3, [pc, #328]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e018      	b.n	8001c26 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b4f      	ldr	r3, [pc, #316]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7fe ff5e 	bl	8000ac0 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7fe ff59 	bl	8000ac0 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e202      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1c:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2202      	movs	r2, #2
 8001c22:	4013      	ands	r3, r2
 8001c24:	d1f1      	bne.n	8001c0a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d036      	beq.n	8001c9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d019      	beq.n	8001c6c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c38:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3c:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	430a      	orrs	r2, r1
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c44:	f7fe ff3c 	bl	8000ac0 <HAL_GetTick>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4e:	f7fe ff37 	bl	8000ac0 <HAL_GetTick>
 8001c52:	0002      	movs	r2, r0
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e1e0      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c60:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	2202      	movs	r2, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	d0f1      	beq.n	8001c4e <HAL_RCC_OscConfig+0x242>
 8001c6a:	e018      	b.n	8001c9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c70:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001c72:	2101      	movs	r1, #1
 8001c74:	438a      	bics	r2, r1
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c78:	f7fe ff22 	bl	8000ac0 <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c82:	f7fe ff1d 	bl	8000ac0 <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e1c6      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2202      	movs	r2, #2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d1f1      	bne.n	8001c82 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d100      	bne.n	8001caa <HAL_RCC_OscConfig+0x29e>
 8001ca8:	e0b4      	b.n	8001e14 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001caa:	201f      	movs	r0, #31
 8001cac:	183b      	adds	r3, r7, r0
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	055b      	lsls	r3, r3, #21
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d110      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	0549      	lsls	r1, r1, #21
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	61da      	str	r2, [r3, #28]
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	055b      	lsls	r3, r3, #21
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cda:	183b      	adds	r3, r7, r0
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d11a      	bne.n	8001d22 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	0049      	lsls	r1, r1, #1
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfa:	f7fe fee1 	bl	8000ac0 <HAL_GetTick>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d04:	f7fe fedc 	bl	8000ac0 <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e185      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_OscConfig+0x338>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d10e      	bne.n	8001d48 <HAL_RCC_OscConfig+0x33c>
 8001d2a:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	6a1a      	ldr	r2, [r3, #32]
 8001d2e:	4b02      	ldr	r3, [pc, #8]	; (8001d38 <HAL_RCC_OscConfig+0x32c>)
 8001d30:	2101      	movs	r1, #1
 8001d32:	430a      	orrs	r2, r1
 8001d34:	621a      	str	r2, [r3, #32]
 8001d36:	e035      	b.n	8001da4 <HAL_RCC_OscConfig+0x398>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	fffeffff 	.word	0xfffeffff
 8001d40:	fffbffff 	.word	0xfffbffff
 8001d44:	40007000 	.word	0x40007000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10c      	bne.n	8001d6a <HAL_RCC_OscConfig+0x35e>
 8001d50:	4bb6      	ldr	r3, [pc, #728]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d52:	6a1a      	ldr	r2, [r3, #32]
 8001d54:	4bb5      	ldr	r3, [pc, #724]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d56:	2101      	movs	r1, #1
 8001d58:	438a      	bics	r2, r1
 8001d5a:	621a      	str	r2, [r3, #32]
 8001d5c:	4bb3      	ldr	r3, [pc, #716]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d5e:	6a1a      	ldr	r2, [r3, #32]
 8001d60:	4bb2      	ldr	r3, [pc, #712]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d62:	2104      	movs	r1, #4
 8001d64:	438a      	bics	r2, r1
 8001d66:	621a      	str	r2, [r3, #32]
 8001d68:	e01c      	b.n	8001da4 <HAL_RCC_OscConfig+0x398>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x380>
 8001d72:	4bae      	ldr	r3, [pc, #696]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d74:	6a1a      	ldr	r2, [r3, #32]
 8001d76:	4bad      	ldr	r3, [pc, #692]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d78:	2104      	movs	r1, #4
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	621a      	str	r2, [r3, #32]
 8001d7e:	4bab      	ldr	r3, [pc, #684]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d80:	6a1a      	ldr	r2, [r3, #32]
 8001d82:	4baa      	ldr	r3, [pc, #680]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	430a      	orrs	r2, r1
 8001d88:	621a      	str	r2, [r3, #32]
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0x398>
 8001d8c:	4ba7      	ldr	r3, [pc, #668]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	4ba6      	ldr	r3, [pc, #664]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	438a      	bics	r2, r1
 8001d96:	621a      	str	r2, [r3, #32]
 8001d98:	4ba4      	ldr	r3, [pc, #656]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	4ba3      	ldr	r3, [pc, #652]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001d9e:	2104      	movs	r1, #4
 8001da0:	438a      	bics	r2, r1
 8001da2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d014      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7fe fe88 	bl	8000ac0 <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db4:	e009      	b.n	8001dca <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7fe fe83 	bl	8000ac0 <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	4a9b      	ldr	r2, [pc, #620]	; (8002030 <HAL_RCC_OscConfig+0x624>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e12b      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dca:	4b98      	ldr	r3, [pc, #608]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x3aa>
 8001dd4:	e013      	b.n	8001dfe <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7fe fe73 	bl	8000ac0 <HAL_GetTick>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	e009      	b.n	8001df4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7fe fe6e 	bl	8000ac0 <HAL_GetTick>
 8001de4:	0002      	movs	r2, r0
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	4a91      	ldr	r2, [pc, #580]	; (8002030 <HAL_RCC_OscConfig+0x624>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e116      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df4:	4b8d      	ldr	r3, [pc, #564]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dfe:	231f      	movs	r3, #31
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d105      	bne.n	8001e14 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e08:	4b88      	ldr	r3, [pc, #544]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	4b87      	ldr	r3, [pc, #540]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e0e:	4989      	ldr	r1, [pc, #548]	; (8002034 <HAL_RCC_OscConfig+0x628>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2210      	movs	r2, #16
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d12a      	bne.n	8001e7c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e26:	4b81      	ldr	r3, [pc, #516]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e2a:	4b80      	ldr	r3, [pc, #512]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e32:	4b7e      	ldr	r3, [pc, #504]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e36:	4b7d      	ldr	r3, [pc, #500]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e38:	2101      	movs	r1, #1
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7fe fe3f 	bl	8000ac0 <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e48:	f7fe fe3a 	bl	8000ac0 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e0e3      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e5a:	4b74      	ldr	r3, [pc, #464]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d0f1      	beq.n	8001e48 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e64:	4b71      	ldr	r3, [pc, #452]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e68:	22f8      	movs	r2, #248	; 0xf8
 8001e6a:	4393      	bics	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	00da      	lsls	r2, r3, #3
 8001e74:	4b6d      	ldr	r3, [pc, #436]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e76:	430a      	orrs	r2, r1
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34
 8001e7a:	e034      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	3305      	adds	r3, #5
 8001e82:	d111      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e84:	4b69      	ldr	r3, [pc, #420]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e88:	4b68      	ldr	r3, [pc, #416]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	438a      	bics	r2, r1
 8001e8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e90:	4b66      	ldr	r3, [pc, #408]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e94:	22f8      	movs	r2, #248	; 0xf8
 8001e96:	4393      	bics	r3, r2
 8001e98:	0019      	movs	r1, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	00da      	lsls	r2, r3, #3
 8001ea0:	4b62      	ldr	r3, [pc, #392]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea6:	e01e      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ea8:	4b60      	ldr	r3, [pc, #384]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eac:	4b5f      	ldr	r3, [pc, #380]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001eae:	2104      	movs	r1, #4
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001eb4:	4b5d      	ldr	r3, [pc, #372]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb8:	4b5c      	ldr	r3, [pc, #368]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001eba:	2101      	movs	r1, #1
 8001ebc:	438a      	bics	r2, r1
 8001ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7fe fdfe 	bl	8000ac0 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001eca:	f7fe fdf9 	bl	8000ac0 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e0a2      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d1f1      	bne.n	8001eca <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d100      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4e4>
 8001eee:	e097      	b.n	8002020 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4b4e      	ldr	r3, [pc, #312]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	220c      	movs	r2, #12
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d100      	bne.n	8001efe <HAL_RCC_OscConfig+0x4f2>
 8001efc:	e06b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d14c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b49      	ldr	r3, [pc, #292]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b48      	ldr	r3, [pc, #288]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001f0c:	494a      	ldr	r1, [pc, #296]	; (8002038 <HAL_RCC_OscConfig+0x62c>)
 8001f0e:	400a      	ands	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe fdd5 	bl	8000ac0 <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7fe fdd0 	bl	8000ac0 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e079      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	049b      	lsls	r3, r3, #18
 8001f36:	4013      	ands	r3, r2
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	220f      	movs	r2, #15
 8001f40:	4393      	bics	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f48:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4a3a      	ldr	r2, [pc, #232]	; (800203c <HAL_RCC_OscConfig+0x630>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	431a      	orrs	r2, r3
 8001f62:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f68:	4b30      	ldr	r3, [pc, #192]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	0449      	lsls	r1, r1, #17
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe fda3 	bl	8000ac0 <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe fd9e 	bl	8000ac0 <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e047      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	049b      	lsls	r3, r3, #18
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x574>
 8001f9e:	e03f      	b.n	8002020 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001fa6:	4924      	ldr	r1, [pc, #144]	; (8002038 <HAL_RCC_OscConfig+0x62c>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7fe fd88 	bl	8000ac0 <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7fe fd83 	bl	8000ac0 <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e02c      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	049b      	lsls	r3, r3, #18
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x5aa>
 8001fd4:	e024      	b.n	8002020 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e01f      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_RCC_OscConfig+0x620>)
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	025b      	lsls	r3, r3, #9
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d10e      	bne.n	800201c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	220f      	movs	r2, #15
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d107      	bne.n	800201c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	23f0      	movs	r3, #240	; 0xf0
 8002010:	039b      	lsls	r3, r3, #14
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b008      	add	sp, #32
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	40021000 	.word	0x40021000
 8002030:	00001388 	.word	0x00001388
 8002034:	efffffff 	.word	0xefffffff
 8002038:	feffffff 	.word	0xfeffffff
 800203c:	ffc2ffff 	.word	0xffc2ffff

08002040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0b3      	b.n	80021bc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <HAL_RCC_ClockConfig+0x184>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d911      	bls.n	8002086 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b58      	ldr	r3, [pc, #352]	; (80021c4 <HAL_RCC_ClockConfig+0x184>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2201      	movs	r2, #1
 8002068:	4393      	bics	r3, r2
 800206a:	0019      	movs	r1, r3
 800206c:	4b55      	ldr	r3, [pc, #340]	; (80021c4 <HAL_RCC_ClockConfig+0x184>)
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002074:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <HAL_RCC_ClockConfig+0x184>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2201      	movs	r2, #1
 800207a:	4013      	ands	r3, r2
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e09a      	b.n	80021bc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2202      	movs	r2, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d015      	beq.n	80020bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2204      	movs	r2, #4
 8002096:	4013      	ands	r3, r2
 8002098:	d006      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800209a:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4b4a      	ldr	r3, [pc, #296]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 80020a0:	21e0      	movs	r1, #224	; 0xe0
 80020a2:	00c9      	lsls	r1, r1, #3
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	22f0      	movs	r2, #240	; 0xf0
 80020ae:	4393      	bics	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	4013      	ands	r3, r2
 80020c4:	d040      	beq.n	8002148 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	029b      	lsls	r3, r3, #10
 80020d6:	4013      	ands	r3, r2
 80020d8:	d114      	bne.n	8002104 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06e      	b.n	80021bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e6:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	049b      	lsls	r3, r3, #18
 80020ee:	4013      	ands	r3, r2
 80020f0:	d108      	bne.n	8002104 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e062      	b.n	80021bc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e05b      	b.n	80021bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002104:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2203      	movs	r2, #3
 800210a:	4393      	bics	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 8002114:	430a      	orrs	r2, r1
 8002116:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002118:	f7fe fcd2 	bl	8000ac0 <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002120:	e009      	b.n	8002136 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002122:	f7fe fccd 	bl	8000ac0 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	4a27      	ldr	r2, [pc, #156]	; (80021cc <HAL_RCC_ClockConfig+0x18c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e042      	b.n	80021bc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	220c      	movs	r2, #12
 800213c:	401a      	ands	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1ec      	bne.n	8002122 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_RCC_ClockConfig+0x184>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2201      	movs	r2, #1
 800214e:	4013      	ands	r3, r2
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d211      	bcs.n	800217a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_RCC_ClockConfig+0x184>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2201      	movs	r2, #1
 800215c:	4393      	bics	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_RCC_ClockConfig+0x184>)
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_RCC_ClockConfig+0x184>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2201      	movs	r2, #1
 800216e:	4013      	ands	r3, r2
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d001      	beq.n	800217a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e020      	b.n	80021bc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2204      	movs	r2, #4
 8002180:	4013      	ands	r3, r2
 8002182:	d009      	beq.n	8002198 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_RCC_ClockConfig+0x190>)
 800218a:	4013      	ands	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 8002194:	430a      	orrs	r2, r1
 8002196:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002198:	f000 f820 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800219c:	0001      	movs	r1, r0
 800219e:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_RCC_ClockConfig+0x188>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	220f      	movs	r2, #15
 80021a6:	4013      	ands	r3, r2
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <HAL_RCC_ClockConfig+0x194>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	000a      	movs	r2, r1
 80021ae:	40da      	lsrs	r2, r3
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x198>)
 80021b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7fe fc3d 	bl	8000a34 <HAL_InitTick>
  
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b004      	add	sp, #16
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	00001388 	.word	0x00001388
 80021d0:	fffff8ff 	.word	0xfffff8ff
 80021d4:	08003d40 	.word	0x08003d40
 80021d8:	20000000 	.word	0x20000000

080021dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b08f      	sub	sp, #60	; 0x3c
 80021e0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80021e2:	2314      	movs	r3, #20
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	4a2b      	ldr	r2, [pc, #172]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021ea:	c313      	stmia	r3!, {r0, r1, r4}
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	4a29      	ldr	r2, [pc, #164]	; (8002298 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021f6:	c313      	stmia	r3!, {r0, r1, r4}
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	220c      	movs	r2, #12
 800221a:	4013      	ands	r3, r2
 800221c:	2b04      	cmp	r3, #4
 800221e:	d002      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x4a>
 8002220:	2b08      	cmp	r3, #8
 8002222:	d003      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x50>
 8002224:	e02d      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002228:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800222a:	e02d      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222e:	0c9b      	lsrs	r3, r3, #18
 8002230:	220f      	movs	r2, #15
 8002232:	4013      	ands	r3, r2
 8002234:	2214      	movs	r2, #20
 8002236:	18ba      	adds	r2, r7, r2
 8002238:	5cd3      	ldrb	r3, [r2, r3]
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_RCC_GetSysClockFreq+0xc0>)
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	220f      	movs	r2, #15
 8002242:	4013      	ands	r3, r2
 8002244:	1d3a      	adds	r2, r7, #4
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800224a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	025b      	lsls	r3, r3, #9
 8002250:	4013      	ands	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002256:	4812      	ldr	r0, [pc, #72]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002258:	f7fd ff56 	bl	8000108 <__udivsi3>
 800225c:	0003      	movs	r3, r0
 800225e:	001a      	movs	r2, r3
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	4353      	muls	r3, r2
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
 8002266:	e009      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800226a:	000a      	movs	r2, r1
 800226c:	0152      	lsls	r2, r2, #5
 800226e:	1a52      	subs	r2, r2, r1
 8002270:	0193      	lsls	r3, r2, #6
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	185b      	adds	r3, r3, r1
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800227c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002280:	e002      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002286:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b00f      	add	sp, #60	; 0x3c
 8002290:	bd90      	pop	{r4, r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	08003d20 	.word	0x08003d20
 8002298:	08003d30 	.word	0x08003d30
 800229c:	40021000 	.word	0x40021000
 80022a0:	007a1200 	.word	0x007a1200

080022a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a8:	4b02      	ldr	r3, [pc, #8]	; (80022b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	20000000 	.word	0x20000000

080022b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80022bc:	f7ff fff2 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 80022c0:	0001      	movs	r1, r0
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	2207      	movs	r2, #7
 80022ca:	4013      	ands	r3, r2
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	40d9      	lsrs	r1, r3
 80022d2:	000b      	movs	r3, r1
}    
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08003d50 	.word	0x08003d50

080022e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	025b      	lsls	r3, r3, #9
 80022fc:	4013      	ands	r3, r2
 80022fe:	d100      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002300:	e08e      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002302:	2017      	movs	r0, #23
 8002304:	183b      	adds	r3, r7, r0
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230a:	4b57      	ldr	r3, [pc, #348]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	055b      	lsls	r3, r3, #21
 8002312:	4013      	ands	r3, r2
 8002314:	d110      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	4b54      	ldr	r3, [pc, #336]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0549      	lsls	r1, r1, #21
 8002320:	430a      	orrs	r2, r1
 8002322:	61da      	str	r2, [r3, #28]
 8002324:	4b50      	ldr	r3, [pc, #320]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	055b      	lsls	r3, r3, #21
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002332:	183b      	adds	r3, r7, r0
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4013      	ands	r3, r2
 8002342:	d11a      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002344:	4b49      	ldr	r3, [pc, #292]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b48      	ldr	r3, [pc, #288]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	0049      	lsls	r1, r1, #1
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7fe fbb5 	bl	8000ac0 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	e008      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235c:	f7fe fbb0 	bl	8000ac0 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e077      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b3f      	ldr	r3, [pc, #252]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4013      	ands	r3, r2
 8002378:	d0f0      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800237c:	6a1a      	ldr	r2, [r3, #32]
 800237e:	23c0      	movs	r3, #192	; 0xc0
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4013      	ands	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d034      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	23c0      	movs	r3, #192	; 0xc0
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4013      	ands	r3, r2
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d02c      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800239c:	4b32      	ldr	r3, [pc, #200]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4a33      	ldr	r2, [pc, #204]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023a6:	4b30      	ldr	r3, [pc, #192]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	0249      	lsls	r1, r1, #9
 80023b0:	430a      	orrs	r2, r1
 80023b2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023b4:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023b6:	6a1a      	ldr	r2, [r3, #32]
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023ba:	492e      	ldr	r1, [pc, #184]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80023bc:	400a      	ands	r2, r1
 80023be:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023c0:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4013      	ands	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7fe fb77 	bl	8000ac0 <HAL_GetTick>
 80023d2:	0003      	movs	r3, r0
 80023d4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	e009      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7fe fb72 	bl	8000ac0 <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	4a25      	ldr	r2, [pc, #148]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e038      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a1d      	ldr	r2, [pc, #116]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002406:	430a      	orrs	r2, r1
 8002408:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800240a:	2317      	movs	r3, #23
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d105      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800241a:	4918      	ldr	r1, [pc, #96]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800241c:	400a      	ands	r2, r1
 800241e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2201      	movs	r2, #1
 8002426:	4013      	ands	r3, r2
 8002428:	d009      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	2203      	movs	r2, #3
 8002430:	4393      	bics	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800243a:	430a      	orrs	r2, r1
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2220      	movs	r2, #32
 8002444:	4013      	ands	r3, r2
 8002446:	d009      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	2210      	movs	r2, #16
 800244e:	4393      	bics	r3, r2
 8002450:	0019      	movs	r1, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002458:	430a      	orrs	r2, r1
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b006      	add	sp, #24
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	40021000 	.word	0x40021000
 800246c:	40007000 	.word	0x40007000
 8002470:	fffffcff 	.word	0xfffffcff
 8002474:	fffeffff 	.word	0xfffeffff
 8002478:	00001388 	.word	0x00001388
 800247c:	efffffff 	.word	0xefffffff

08002480 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	223d      	movs	r2, #61	; 0x3d
 800248c:	5c9b      	ldrb	r3, [r3, r2]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d001      	beq.n	8002498 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e02d      	b.n	80024f4 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	223d      	movs	r2, #61	; 0x3d
 800249c:	2102      	movs	r1, #2
 800249e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a15      	ldr	r2, [pc, #84]	; (80024fc <HAL_TIM_Base_Start+0x7c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_TIM_Base_Start+0x3e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a14      	ldr	r2, [pc, #80]	; (8002500 <HAL_TIM_Base_Start+0x80>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d004      	beq.n	80024be <HAL_TIM_Base_Start+0x3e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a12      	ldr	r2, [pc, #72]	; (8002504 <HAL_TIM_Base_Start+0x84>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d111      	bne.n	80024e2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2207      	movs	r2, #7
 80024c6:	4013      	ands	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d010      	beq.n	80024f2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2101      	movs	r1, #1
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e0:	e007      	b.n	80024f2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2101      	movs	r1, #1
 80024ee:	430a      	orrs	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b004      	add	sp, #16
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40000400 	.word	0x40000400
 8002504:	40014000 	.word	0x40014000

08002508 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e042      	b.n	80025a0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	223d      	movs	r2, #61	; 0x3d
 800251e:	5c9b      	ldrb	r3, [r3, r2]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	223c      	movs	r2, #60	; 0x3c
 800252a:	2100      	movs	r1, #0
 800252c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f7fe f969 	bl	8000808 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	223d      	movs	r2, #61	; 0x3d
 800253a:	2102      	movs	r1, #2
 800253c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	0019      	movs	r1, r3
 8002548:	0010      	movs	r0, r2
 800254a:	f000 f9a5 	bl	8002898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2246      	movs	r2, #70	; 0x46
 8002552:	2101      	movs	r1, #1
 8002554:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	223e      	movs	r2, #62	; 0x3e
 800255a:	2101      	movs	r1, #1
 800255c:	5499      	strb	r1, [r3, r2]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	223f      	movs	r2, #63	; 0x3f
 8002562:	2101      	movs	r1, #1
 8002564:	5499      	strb	r1, [r3, r2]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2240      	movs	r2, #64	; 0x40
 800256a:	2101      	movs	r1, #1
 800256c:	5499      	strb	r1, [r3, r2]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2241      	movs	r2, #65	; 0x41
 8002572:	2101      	movs	r1, #1
 8002574:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2242      	movs	r2, #66	; 0x42
 800257a:	2101      	movs	r1, #1
 800257c:	5499      	strb	r1, [r3, r2]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2243      	movs	r2, #67	; 0x43
 8002582:	2101      	movs	r1, #1
 8002584:	5499      	strb	r1, [r3, r2]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2244      	movs	r2, #68	; 0x44
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2245      	movs	r2, #69	; 0x45
 8002592:	2101      	movs	r1, #1
 8002594:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	223d      	movs	r2, #61	; 0x3d
 800259a:	2101      	movs	r1, #1
 800259c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d108      	bne.n	80025ca <HAL_TIM_PWM_Start+0x22>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	223e      	movs	r2, #62	; 0x3e
 80025bc:	5c9b      	ldrb	r3, [r3, r2]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	1e5a      	subs	r2, r3, #1
 80025c4:	4193      	sbcs	r3, r2
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	e01f      	b.n	800260a <HAL_TIM_PWM_Start+0x62>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d108      	bne.n	80025e2 <HAL_TIM_PWM_Start+0x3a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	223f      	movs	r2, #63	; 0x3f
 80025d4:	5c9b      	ldrb	r3, [r3, r2]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	1e5a      	subs	r2, r3, #1
 80025dc:	4193      	sbcs	r3, r2
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	e013      	b.n	800260a <HAL_TIM_PWM_Start+0x62>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d108      	bne.n	80025fa <HAL_TIM_PWM_Start+0x52>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2240      	movs	r2, #64	; 0x40
 80025ec:	5c9b      	ldrb	r3, [r3, r2]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	1e5a      	subs	r2, r3, #1
 80025f4:	4193      	sbcs	r3, r2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	e007      	b.n	800260a <HAL_TIM_PWM_Start+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2241      	movs	r2, #65	; 0x41
 80025fe:	5c9b      	ldrb	r3, [r3, r2]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	1e5a      	subs	r2, r3, #1
 8002606:	4193      	sbcs	r3, r2
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e06e      	b.n	80026f0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d104      	bne.n	8002622 <HAL_TIM_PWM_Start+0x7a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	223e      	movs	r2, #62	; 0x3e
 800261c:	2102      	movs	r1, #2
 800261e:	5499      	strb	r1, [r3, r2]
 8002620:	e013      	b.n	800264a <HAL_TIM_PWM_Start+0xa2>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b04      	cmp	r3, #4
 8002626:	d104      	bne.n	8002632 <HAL_TIM_PWM_Start+0x8a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	223f      	movs	r2, #63	; 0x3f
 800262c:	2102      	movs	r1, #2
 800262e:	5499      	strb	r1, [r3, r2]
 8002630:	e00b      	b.n	800264a <HAL_TIM_PWM_Start+0xa2>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d104      	bne.n	8002642 <HAL_TIM_PWM_Start+0x9a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2240      	movs	r2, #64	; 0x40
 800263c:	2102      	movs	r1, #2
 800263e:	5499      	strb	r1, [r3, r2]
 8002640:	e003      	b.n	800264a <HAL_TIM_PWM_Start+0xa2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2241      	movs	r2, #65	; 0x41
 8002646:	2102      	movs	r1, #2
 8002648:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6839      	ldr	r1, [r7, #0]
 8002650:	2201      	movs	r2, #1
 8002652:	0018      	movs	r0, r3
 8002654:	f000 fb92 	bl	8002d7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <HAL_TIM_PWM_Start+0x150>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00e      	beq.n	8002680 <HAL_TIM_PWM_Start+0xd8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <HAL_TIM_PWM_Start+0x154>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d009      	beq.n	8002680 <HAL_TIM_PWM_Start+0xd8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a23      	ldr	r2, [pc, #140]	; (8002700 <HAL_TIM_PWM_Start+0x158>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_TIM_PWM_Start+0xd8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a22      	ldr	r2, [pc, #136]	; (8002704 <HAL_TIM_PWM_Start+0x15c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_TIM_PWM_Start+0xdc>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_TIM_PWM_Start+0xde>
 8002684:	2300      	movs	r3, #0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	0209      	lsls	r1, r1, #8
 8002698:	430a      	orrs	r2, r1
 800269a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <HAL_TIM_PWM_Start+0x150>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d009      	beq.n	80026ba <HAL_TIM_PWM_Start+0x112>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a17      	ldr	r2, [pc, #92]	; (8002708 <HAL_TIM_PWM_Start+0x160>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d004      	beq.n	80026ba <HAL_TIM_PWM_Start+0x112>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a11      	ldr	r2, [pc, #68]	; (80026fc <HAL_TIM_PWM_Start+0x154>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d111      	bne.n	80026de <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2207      	movs	r2, #7
 80026c2:	4013      	ands	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d010      	beq.n	80026ee <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2101      	movs	r1, #1
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026dc:	e007      	b.n	80026ee <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	0018      	movs	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b004      	add	sp, #16
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40012c00 	.word	0x40012c00
 80026fc:	40014000 	.word	0x40014000
 8002700:	40014400 	.word	0x40014400
 8002704:	40014800 	.word	0x40014800
 8002708:	40000400 	.word	0x40000400

0800270c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002718:	2317      	movs	r3, #23
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	223c      	movs	r2, #60	; 0x3c
 8002724:	5c9b      	ldrb	r3, [r3, r2]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_TIM_PWM_ConfigChannel+0x22>
 800272a:	2302      	movs	r3, #2
 800272c:	e0ad      	b.n	800288a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	223c      	movs	r2, #60	; 0x3c
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b0c      	cmp	r3, #12
 800273a:	d100      	bne.n	800273e <HAL_TIM_PWM_ConfigChannel+0x32>
 800273c:	e076      	b.n	800282c <HAL_TIM_PWM_ConfigChannel+0x120>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0c      	cmp	r3, #12
 8002742:	d900      	bls.n	8002746 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002744:	e095      	b.n	8002872 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d04e      	beq.n	80027ea <HAL_TIM_PWM_ConfigChannel+0xde>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d900      	bls.n	8002754 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002752:	e08e      	b.n	8002872 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_PWM_ConfigChannel+0x56>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d021      	beq.n	80027a4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002760:	e087      	b.n	8002872 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	0011      	movs	r1, r2
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f90a 	bl	8002984 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2108      	movs	r1, #8
 800277c:	430a      	orrs	r2, r1
 800277e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2104      	movs	r1, #4
 800278c:	438a      	bics	r2, r1
 800278e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	619a      	str	r2, [r3, #24]
      break;
 80027a2:	e06b      	b.n	800287c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f000 f971 	bl	8002a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	0109      	lsls	r1, r1, #4
 80027c0:	430a      	orrs	r2, r1
 80027c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4931      	ldr	r1, [pc, #196]	; (8002894 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80027d0:	400a      	ands	r2, r1
 80027d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6999      	ldr	r1, [r3, #24]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	021a      	lsls	r2, r3, #8
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	619a      	str	r2, [r3, #24]
      break;
 80027e8:	e048      	b.n	800287c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	0011      	movs	r1, r2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 f9d2 	bl	8002b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2108      	movs	r1, #8
 8002804:	430a      	orrs	r2, r1
 8002806:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2104      	movs	r1, #4
 8002814:	438a      	bics	r2, r1
 8002816:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	69d9      	ldr	r1, [r3, #28]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	61da      	str	r2, [r3, #28]
      break;
 800282a:	e027      	b.n	800287c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	0011      	movs	r1, r2
 8002834:	0018      	movs	r0, r3
 8002836:	f000 fa37 	bl	8002ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69da      	ldr	r2, [r3, #28]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	0109      	lsls	r1, r1, #4
 8002848:	430a      	orrs	r2, r1
 800284a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	490f      	ldr	r1, [pc, #60]	; (8002894 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002858:	400a      	ands	r2, r1
 800285a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69d9      	ldr	r1, [r3, #28]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	021a      	lsls	r2, r3, #8
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	61da      	str	r2, [r3, #28]
      break;
 8002870:	e004      	b.n	800287c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002872:	2317      	movs	r3, #23
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
      break;
 800287a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	223c      	movs	r2, #60	; 0x3c
 8002880:	2100      	movs	r1, #0
 8002882:	5499      	strb	r1, [r3, r2]

  return status;
 8002884:	2317      	movs	r3, #23
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	781b      	ldrb	r3, [r3, #0]
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b006      	add	sp, #24
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	fffffbff 	.word	0xfffffbff

08002898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a2f      	ldr	r2, [pc, #188]	; (8002968 <TIM_Base_SetConfig+0xd0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <TIM_Base_SetConfig+0x20>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a2e      	ldr	r2, [pc, #184]	; (800296c <TIM_Base_SetConfig+0xd4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d108      	bne.n	80028ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2270      	movs	r2, #112	; 0x70
 80028bc:	4393      	bics	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a26      	ldr	r2, [pc, #152]	; (8002968 <TIM_Base_SetConfig+0xd0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <TIM_Base_SetConfig+0x62>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a25      	ldr	r2, [pc, #148]	; (800296c <TIM_Base_SetConfig+0xd4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00f      	beq.n	80028fa <TIM_Base_SetConfig+0x62>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a24      	ldr	r2, [pc, #144]	; (8002970 <TIM_Base_SetConfig+0xd8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00b      	beq.n	80028fa <TIM_Base_SetConfig+0x62>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a23      	ldr	r2, [pc, #140]	; (8002974 <TIM_Base_SetConfig+0xdc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <TIM_Base_SetConfig+0x62>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <TIM_Base_SetConfig+0xe0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d003      	beq.n	80028fa <TIM_Base_SetConfig+0x62>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a21      	ldr	r2, [pc, #132]	; (800297c <TIM_Base_SetConfig+0xe4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d108      	bne.n	800290c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a20      	ldr	r2, [pc, #128]	; (8002980 <TIM_Base_SetConfig+0xe8>)
 80028fe:	4013      	ands	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	4393      	bics	r3, r2
 8002912:	001a      	movs	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <TIM_Base_SetConfig+0xd0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00b      	beq.n	8002952 <TIM_Base_SetConfig+0xba>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <TIM_Base_SetConfig+0xdc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <TIM_Base_SetConfig+0xba>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <TIM_Base_SetConfig+0xe0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d003      	beq.n	8002952 <TIM_Base_SetConfig+0xba>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a0b      	ldr	r2, [pc, #44]	; (800297c <TIM_Base_SetConfig+0xe4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d103      	bne.n	800295a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	615a      	str	r2, [r3, #20]
}
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	b004      	add	sp, #16
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40000400 	.word	0x40000400
 8002970:	40002000 	.word	0x40002000
 8002974:	40014000 	.word	0x40014000
 8002978:	40014400 	.word	0x40014400
 800297c:	40014800 	.word	0x40014800
 8002980:	fffffcff 	.word	0xfffffcff

08002984 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	2201      	movs	r2, #1
 8002994:	4393      	bics	r3, r2
 8002996:	001a      	movs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2270      	movs	r2, #112	; 0x70
 80029b2:	4393      	bics	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2203      	movs	r2, #3
 80029ba:	4393      	bics	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2202      	movs	r2, #2
 80029cc:	4393      	bics	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <TIM_OC1_SetConfig+0xf8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00b      	beq.n	80029fa <TIM_OC1_SetConfig+0x76>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a26      	ldr	r2, [pc, #152]	; (8002a80 <TIM_OC1_SetConfig+0xfc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d007      	beq.n	80029fa <TIM_OC1_SetConfig+0x76>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <TIM_OC1_SetConfig+0x100>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d003      	beq.n	80029fa <TIM_OC1_SetConfig+0x76>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <TIM_OC1_SetConfig+0x104>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d10c      	bne.n	8002a14 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2208      	movs	r2, #8
 80029fe:	4393      	bics	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	4393      	bics	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <TIM_OC1_SetConfig+0xf8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00b      	beq.n	8002a34 <TIM_OC1_SetConfig+0xb0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <TIM_OC1_SetConfig+0xfc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <TIM_OC1_SetConfig+0xb0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <TIM_OC1_SetConfig+0x100>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_OC1_SetConfig+0xb0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <TIM_OC1_SetConfig+0x104>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d111      	bne.n	8002a58 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <TIM_OC1_SetConfig+0x108>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <TIM_OC1_SetConfig+0x10c>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	621a      	str	r2, [r3, #32]
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b006      	add	sp, #24
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40014000 	.word	0x40014000
 8002a84:	40014400 	.word	0x40014400
 8002a88:	40014800 	.word	0x40014800
 8002a8c:	fffffeff 	.word	0xfffffeff
 8002a90:	fffffdff 	.word	0xfffffdff

08002a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	2210      	movs	r2, #16
 8002aa4:	4393      	bics	r3, r2
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a2e      	ldr	r2, [pc, #184]	; (8002b7c <TIM_OC2_SetConfig+0xe8>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4a2d      	ldr	r2, [pc, #180]	; (8002b80 <TIM_OC2_SetConfig+0xec>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2220      	movs	r2, #32
 8002ade:	4393      	bics	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a24      	ldr	r2, [pc, #144]	; (8002b84 <TIM_OC2_SetConfig+0xf0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10d      	bne.n	8002b12 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2280      	movs	r2, #128	; 0x80
 8002afa:	4393      	bics	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2240      	movs	r2, #64	; 0x40
 8002b0e:	4393      	bics	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <TIM_OC2_SetConfig+0xf0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <TIM_OC2_SetConfig+0x9e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <TIM_OC2_SetConfig+0xf4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <TIM_OC2_SetConfig+0x9e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <TIM_OC2_SetConfig+0xf8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_OC2_SetConfig+0x9e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <TIM_OC2_SetConfig+0xfc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d113      	bne.n	8002b5a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <TIM_OC2_SetConfig+0x100>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <TIM_OC2_SetConfig+0x104>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	621a      	str	r2, [r3, #32]
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b006      	add	sp, #24
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	ffff8fff 	.word	0xffff8fff
 8002b80:	fffffcff 	.word	0xfffffcff
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40014000 	.word	0x40014000
 8002b8c:	40014400 	.word	0x40014400
 8002b90:	40014800 	.word	0x40014800
 8002b94:	fffffbff 	.word	0xfffffbff
 8002b98:	fffff7ff 	.word	0xfffff7ff

08002b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4a35      	ldr	r2, [pc, #212]	; (8002c80 <TIM_OC3_SetConfig+0xe4>)
 8002bac:	401a      	ands	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2270      	movs	r2, #112	; 0x70
 8002bc8:	4393      	bics	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <TIM_OC3_SetConfig+0xe8>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a24      	ldr	r2, [pc, #144]	; (8002c88 <TIM_OC3_SetConfig+0xec>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10d      	bne.n	8002c16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <TIM_OC3_SetConfig+0xf0>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <TIM_OC3_SetConfig+0xf4>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <TIM_OC3_SetConfig+0xec>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00b      	beq.n	8002c36 <TIM_OC3_SetConfig+0x9a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <TIM_OC3_SetConfig+0xf8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d007      	beq.n	8002c36 <TIM_OC3_SetConfig+0x9a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <TIM_OC3_SetConfig+0xfc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d003      	beq.n	8002c36 <TIM_OC3_SetConfig+0x9a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a1a      	ldr	r2, [pc, #104]	; (8002c9c <TIM_OC3_SetConfig+0x100>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d113      	bne.n	8002c5e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <TIM_OC3_SetConfig+0x104>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <TIM_OC3_SetConfig+0x108>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	621a      	str	r2, [r3, #32]
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b006      	add	sp, #24
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	fffffeff 	.word	0xfffffeff
 8002c84:	fffffdff 	.word	0xfffffdff
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	fffff7ff 	.word	0xfffff7ff
 8002c90:	fffffbff 	.word	0xfffffbff
 8002c94:	40014000 	.word	0x40014000
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	40014800 	.word	0x40014800
 8002ca0:	ffffefff 	.word	0xffffefff
 8002ca4:	ffffdfff 	.word	0xffffdfff

08002ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a28      	ldr	r2, [pc, #160]	; (8002d58 <TIM_OC4_SetConfig+0xb0>)
 8002cb8:	401a      	ands	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <TIM_OC4_SetConfig+0xb4>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <TIM_OC4_SetConfig+0xb8>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <TIM_OC4_SetConfig+0xbc>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	031b      	lsls	r3, r3, #12
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <TIM_OC4_SetConfig+0xc0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00b      	beq.n	8002d20 <TIM_OC4_SetConfig+0x78>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <TIM_OC4_SetConfig+0xc4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d007      	beq.n	8002d20 <TIM_OC4_SetConfig+0x78>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <TIM_OC4_SetConfig+0xc8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d003      	beq.n	8002d20 <TIM_OC4_SetConfig+0x78>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <TIM_OC4_SetConfig+0xcc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d109      	bne.n	8002d34 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <TIM_OC4_SetConfig+0xd0>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	019b      	lsls	r3, r3, #6
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	621a      	str	r2, [r3, #32]
}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b006      	add	sp, #24
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	ffffefff 	.word	0xffffefff
 8002d5c:	ffff8fff 	.word	0xffff8fff
 8002d60:	fffffcff 	.word	0xfffffcff
 8002d64:	ffffdfff 	.word	0xffffdfff
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	40014400 	.word	0x40014400
 8002d74:	40014800 	.word	0x40014800
 8002d78:	ffffbfff 	.word	0xffffbfff

08002d7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	221f      	movs	r2, #31
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2201      	movs	r2, #1
 8002d90:	409a      	lsls	r2, r3
 8002d92:	0013      	movs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	43d2      	mvns	r2, r2
 8002d9e:	401a      	ands	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	211f      	movs	r1, #31
 8002dac:	400b      	ands	r3, r1
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4099      	lsls	r1, r3
 8002db2:	000b      	movs	r3, r1
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	621a      	str	r2, [r3, #32]
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b006      	add	sp, #24
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	223c      	movs	r2, #60	; 0x3c
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e041      	b.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	223c      	movs	r2, #60	; 0x3c
 8002de0:	2101      	movs	r1, #1
 8002de2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	223d      	movs	r2, #61	; 0x3d
 8002de8:	2102      	movs	r1, #2
 8002dea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2270      	movs	r2, #112	; 0x70
 8002e00:	4393      	bics	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d004      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10c      	bne.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	4393      	bics	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	223d      	movs	r2, #61	; 0x3d
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	223c      	movs	r2, #60	; 0x3c
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40012c00 	.word	0x40012c00
 8002e6c:	40000400 	.word	0x40000400
 8002e70:	40014000 	.word	0x40014000

08002e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e044      	b.n	8002f10 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2274      	movs	r2, #116	; 0x74
 8002e92:	2100      	movs	r1, #0
 8002e94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7fd fd41 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2224      	movs	r2, #36	; 0x24
 8002ea2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2101      	movs	r1, #1
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 f830 	bl	8002f1c <UART_SetConfig>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e024      	b.n	8002f10 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 f963 	bl	800319c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	490d      	ldr	r1, [pc, #52]	; (8002f18 <HAL_UART_Init+0xa4>)
 8002ee2:	400a      	ands	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2108      	movs	r1, #8
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	430a      	orrs	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 f9fb 	bl	8003304 <UART_CheckIdleState>
 8002f0e:	0003      	movs	r3, r0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	fffff7ff 	.word	0xfffff7ff

08002f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f24:	231e      	movs	r3, #30
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a8d      	ldr	r2, [pc, #564]	; (8003180 <UART_SetConfig+0x264>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4a88      	ldr	r2, [pc, #544]	; (8003184 <UART_SetConfig+0x268>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	0019      	movs	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a7f      	ldr	r2, [pc, #508]	; (8003188 <UART_SetConfig+0x26c>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a7b      	ldr	r2, [pc, #492]	; (800318c <UART_SetConfig+0x270>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d127      	bne.n	8002ff2 <UART_SetConfig+0xd6>
 8002fa2:	4b7b      	ldr	r3, [pc, #492]	; (8003190 <UART_SetConfig+0x274>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d00d      	beq.n	8002fca <UART_SetConfig+0xae>
 8002fae:	d81b      	bhi.n	8002fe8 <UART_SetConfig+0xcc>
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d014      	beq.n	8002fde <UART_SetConfig+0xc2>
 8002fb4:	d818      	bhi.n	8002fe8 <UART_SetConfig+0xcc>
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <UART_SetConfig+0xa4>
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d00a      	beq.n	8002fd4 <UART_SetConfig+0xb8>
 8002fbe:	e013      	b.n	8002fe8 <UART_SetConfig+0xcc>
 8002fc0:	231f      	movs	r3, #31
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e021      	b.n	800300e <UART_SetConfig+0xf2>
 8002fca:	231f      	movs	r3, #31
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	2202      	movs	r2, #2
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e01c      	b.n	800300e <UART_SetConfig+0xf2>
 8002fd4:	231f      	movs	r3, #31
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	2204      	movs	r2, #4
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	e017      	b.n	800300e <UART_SetConfig+0xf2>
 8002fde:	231f      	movs	r3, #31
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e012      	b.n	800300e <UART_SetConfig+0xf2>
 8002fe8:	231f      	movs	r3, #31
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	2210      	movs	r2, #16
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e00d      	b.n	800300e <UART_SetConfig+0xf2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a67      	ldr	r2, [pc, #412]	; (8003194 <UART_SetConfig+0x278>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d104      	bne.n	8003006 <UART_SetConfig+0xea>
 8002ffc:	231f      	movs	r3, #31
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e003      	b.n	800300e <UART_SetConfig+0xf2>
 8003006:	231f      	movs	r3, #31
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	2210      	movs	r2, #16
 800300c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	429a      	cmp	r2, r3
 8003018:	d15d      	bne.n	80030d6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800301a:	231f      	movs	r3, #31
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d015      	beq.n	8003050 <UART_SetConfig+0x134>
 8003024:	dc18      	bgt.n	8003058 <UART_SetConfig+0x13c>
 8003026:	2b04      	cmp	r3, #4
 8003028:	d00d      	beq.n	8003046 <UART_SetConfig+0x12a>
 800302a:	dc15      	bgt.n	8003058 <UART_SetConfig+0x13c>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <UART_SetConfig+0x11a>
 8003030:	2b02      	cmp	r3, #2
 8003032:	d005      	beq.n	8003040 <UART_SetConfig+0x124>
 8003034:	e010      	b.n	8003058 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003036:	f7ff f93f 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 800303a:	0003      	movs	r3, r0
 800303c:	61bb      	str	r3, [r7, #24]
        break;
 800303e:	e012      	b.n	8003066 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003040:	4b55      	ldr	r3, [pc, #340]	; (8003198 <UART_SetConfig+0x27c>)
 8003042:	61bb      	str	r3, [r7, #24]
        break;
 8003044:	e00f      	b.n	8003066 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003046:	f7ff f8c9 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800304a:	0003      	movs	r3, r0
 800304c:	61bb      	str	r3, [r7, #24]
        break;
 800304e:	e00a      	b.n	8003066 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	61bb      	str	r3, [r7, #24]
        break;
 8003056:	e006      	b.n	8003066 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800305c:	231e      	movs	r3, #30
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
        break;
 8003064:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d100      	bne.n	800306e <UART_SetConfig+0x152>
 800306c:	e07b      	b.n	8003166 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	005a      	lsls	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	18d2      	adds	r2, r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	0019      	movs	r1, r3
 8003080:	0010      	movs	r0, r2
 8003082:	f7fd f841 	bl	8000108 <__udivsi3>
 8003086:	0003      	movs	r3, r0
 8003088:	b29b      	uxth	r3, r3
 800308a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b0f      	cmp	r3, #15
 8003090:	d91c      	bls.n	80030cc <UART_SetConfig+0x1b0>
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	025b      	lsls	r3, r3, #9
 8003098:	429a      	cmp	r2, r3
 800309a:	d217      	bcs.n	80030cc <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	b29a      	uxth	r2, r3
 80030a0:	200e      	movs	r0, #14
 80030a2:	183b      	adds	r3, r7, r0
 80030a4:	210f      	movs	r1, #15
 80030a6:	438a      	bics	r2, r1
 80030a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2207      	movs	r2, #7
 80030b2:	4013      	ands	r3, r2
 80030b4:	b299      	uxth	r1, r3
 80030b6:	183b      	adds	r3, r7, r0
 80030b8:	183a      	adds	r2, r7, r0
 80030ba:	8812      	ldrh	r2, [r2, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	183a      	adds	r2, r7, r0
 80030c6:	8812      	ldrh	r2, [r2, #0]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	e04c      	b.n	8003166 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80030cc:	231e      	movs	r3, #30
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	e047      	b.n	8003166 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030d6:	231f      	movs	r3, #31
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d015      	beq.n	800310c <UART_SetConfig+0x1f0>
 80030e0:	dc18      	bgt.n	8003114 <UART_SetConfig+0x1f8>
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d00d      	beq.n	8003102 <UART_SetConfig+0x1e6>
 80030e6:	dc15      	bgt.n	8003114 <UART_SetConfig+0x1f8>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <UART_SetConfig+0x1d6>
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d005      	beq.n	80030fc <UART_SetConfig+0x1e0>
 80030f0:	e010      	b.n	8003114 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f2:	f7ff f8e1 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 80030f6:	0003      	movs	r3, r0
 80030f8:	61bb      	str	r3, [r7, #24]
        break;
 80030fa:	e012      	b.n	8003122 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030fc:	4b26      	ldr	r3, [pc, #152]	; (8003198 <UART_SetConfig+0x27c>)
 80030fe:	61bb      	str	r3, [r7, #24]
        break;
 8003100:	e00f      	b.n	8003122 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003102:	f7ff f86b 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 8003106:	0003      	movs	r3, r0
 8003108:	61bb      	str	r3, [r7, #24]
        break;
 800310a:	e00a      	b.n	8003122 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	61bb      	str	r3, [r7, #24]
        break;
 8003112:	e006      	b.n	8003122 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003118:	231e      	movs	r3, #30
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
        break;
 8003120:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01e      	beq.n	8003166 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	085a      	lsrs	r2, r3, #1
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	18d2      	adds	r2, r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0019      	movs	r1, r3
 8003138:	0010      	movs	r0, r2
 800313a:	f7fc ffe5 	bl	8000108 <__udivsi3>
 800313e:	0003      	movs	r3, r0
 8003140:	b29b      	uxth	r3, r3
 8003142:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b0f      	cmp	r3, #15
 8003148:	d909      	bls.n	800315e <UART_SetConfig+0x242>
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	025b      	lsls	r3, r3, #9
 8003150:	429a      	cmp	r2, r3
 8003152:	d204      	bcs.n	800315e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	e003      	b.n	8003166 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800315e:	231e      	movs	r3, #30
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003172:	231e      	movs	r3, #30
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	781b      	ldrb	r3, [r3, #0]
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b008      	add	sp, #32
 800317e:	bd80      	pop	{r7, pc}
 8003180:	ffff69f3 	.word	0xffff69f3
 8003184:	ffffcfff 	.word	0xffffcfff
 8003188:	fffff4ff 	.word	0xfffff4ff
 800318c:	40013800 	.word	0x40013800
 8003190:	40021000 	.word	0x40021000
 8003194:	40004400 	.word	0x40004400
 8003198:	007a1200 	.word	0x007a1200

0800319c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	2201      	movs	r2, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	d00b      	beq.n	80031c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a4a      	ldr	r2, [pc, #296]	; (80032e0 <UART_AdvFeatureConfig+0x144>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	2202      	movs	r2, #2
 80031cc:	4013      	ands	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4a43      	ldr	r2, [pc, #268]	; (80032e4 <UART_AdvFeatureConfig+0x148>)
 80031d8:	4013      	ands	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	2204      	movs	r2, #4
 80031ee:	4013      	ands	r3, r2
 80031f0:	d00b      	beq.n	800320a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a3b      	ldr	r2, [pc, #236]	; (80032e8 <UART_AdvFeatureConfig+0x14c>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	0019      	movs	r1, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	2208      	movs	r2, #8
 8003210:	4013      	ands	r3, r2
 8003212:	d00b      	beq.n	800322c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4a34      	ldr	r2, [pc, #208]	; (80032ec <UART_AdvFeatureConfig+0x150>)
 800321c:	4013      	ands	r3, r2
 800321e:	0019      	movs	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	2210      	movs	r2, #16
 8003232:	4013      	ands	r3, r2
 8003234:	d00b      	beq.n	800324e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <UART_AdvFeatureConfig+0x154>)
 800323e:	4013      	ands	r3, r2
 8003240:	0019      	movs	r1, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	2220      	movs	r2, #32
 8003254:	4013      	ands	r3, r2
 8003256:	d00b      	beq.n	8003270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <UART_AdvFeatureConfig+0x158>)
 8003260:	4013      	ands	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	2240      	movs	r2, #64	; 0x40
 8003276:	4013      	ands	r3, r2
 8003278:	d01d      	beq.n	80032b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <UART_AdvFeatureConfig+0x15c>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	035b      	lsls	r3, r3, #13
 800329a:	429a      	cmp	r2, r3
 800329c:	d10b      	bne.n	80032b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a15      	ldr	r2, [pc, #84]	; (80032fc <UART_AdvFeatureConfig+0x160>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2280      	movs	r2, #128	; 0x80
 80032bc:	4013      	ands	r3, r2
 80032be:	d00b      	beq.n	80032d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <UART_AdvFeatureConfig+0x164>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	0019      	movs	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	605a      	str	r2, [r3, #4]
  }
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b002      	add	sp, #8
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	fffdffff 	.word	0xfffdffff
 80032e4:	fffeffff 	.word	0xfffeffff
 80032e8:	fffbffff 	.word	0xfffbffff
 80032ec:	ffff7fff 	.word	0xffff7fff
 80032f0:	ffffefff 	.word	0xffffefff
 80032f4:	ffffdfff 	.word	0xffffdfff
 80032f8:	ffefffff 	.word	0xffefffff
 80032fc:	ff9fffff 	.word	0xff9fffff
 8003300:	fff7ffff 	.word	0xfff7ffff

08003304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af02      	add	r7, sp, #8
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	2100      	movs	r1, #0
 8003312:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003314:	f7fd fbd4 	bl	8000ac0 <HAL_GetTick>
 8003318:	0003      	movs	r3, r0
 800331a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2208      	movs	r2, #8
 8003324:	4013      	ands	r3, r2
 8003326:	2b08      	cmp	r3, #8
 8003328:	d10c      	bne.n	8003344 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2280      	movs	r2, #128	; 0x80
 800332e:	0391      	lsls	r1, r2, #14
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4a17      	ldr	r2, [pc, #92]	; (8003390 <UART_CheckIdleState+0x8c>)
 8003334:	9200      	str	r2, [sp, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	f000 f82c 	bl	8003394 <UART_WaitOnFlagUntilTimeout>
 800333c:	1e03      	subs	r3, r0, #0
 800333e:	d001      	beq.n	8003344 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e021      	b.n	8003388 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2204      	movs	r2, #4
 800334c:	4013      	ands	r3, r2
 800334e:	2b04      	cmp	r3, #4
 8003350:	d10c      	bne.n	800336c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	03d1      	lsls	r1, r2, #15
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <UART_CheckIdleState+0x8c>)
 800335c:	9200      	str	r2, [sp, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	f000 f818 	bl	8003394 <UART_WaitOnFlagUntilTimeout>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d001      	beq.n	800336c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e00d      	b.n	8003388 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2274      	movs	r2, #116	; 0x74
 8003382:	2100      	movs	r1, #0
 8003384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	0018      	movs	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	b004      	add	sp, #16
 800338e:	bd80      	pop	{r7, pc}
 8003390:	01ffffff 	.word	0x01ffffff

08003394 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b094      	sub	sp, #80	; 0x50
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a4:	e0a3      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a8:	3301      	adds	r3, #1
 80033aa:	d100      	bne.n	80033ae <UART_WaitOnFlagUntilTimeout+0x1a>
 80033ac:	e09f      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fd fb87 	bl	8000ac0 <HAL_GetTick>
 80033b2:	0002      	movs	r2, r0
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80033be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d13d      	bne.n	8003440 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c4:	f3ef 8310 	mrs	r3, PRIMASK
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033cc:	647b      	str	r3, [r7, #68]	; 0x44
 80033ce:	2301      	movs	r3, #1
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	f383 8810 	msr	PRIMASK, r3
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	494c      	ldr	r1, [pc, #304]	; (8003518 <UART_WaitOnFlagUntilTimeout+0x184>)
 80033e6:	400a      	ands	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	f383 8810 	msr	PRIMASK, r3
}
 80033f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f6:	f3ef 8310 	mrs	r3, PRIMASK
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80033fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003400:	2301      	movs	r3, #1
 8003402:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	f383 8810 	msr	PRIMASK, r3
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2101      	movs	r1, #1
 8003418:	438a      	bics	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800341e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003422:	f383 8810 	msr	PRIMASK, r3
}
 8003426:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2274      	movs	r2, #116	; 0x74
 8003438:	2100      	movs	r1, #0
 800343a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e067      	b.n	8003510 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2204      	movs	r2, #4
 8003448:	4013      	ands	r3, r2
 800344a:	d050      	beq.n	80034ee <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	401a      	ands	r2, r3
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	429a      	cmp	r2, r3
 800345e:	d146      	bne.n	80034ee <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2280      	movs	r2, #128	; 0x80
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346a:	f3ef 8310 	mrs	r3, PRIMASK
 800346e:	613b      	str	r3, [r7, #16]
  return(result);
 8003470:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003474:	2301      	movs	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f383 8810 	msr	PRIMASK, r3
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4923      	ldr	r1, [pc, #140]	; (8003518 <UART_WaitOnFlagUntilTimeout+0x184>)
 800348c:	400a      	ands	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003492:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f383 8810 	msr	PRIMASK, r3
}
 800349a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349c:	f3ef 8310 	mrs	r3, PRIMASK
 80034a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80034a2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80034a6:	2301      	movs	r3, #1
 80034a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	438a      	bics	r2, r1
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	f383 8810 	msr	PRIMASK, r3
}
 80034cc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	2120      	movs	r1, #32
 80034e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2274      	movs	r2, #116	; 0x74
 80034e6:	2100      	movs	r1, #0
 80034e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e010      	b.n	8003510 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	425a      	negs	r2, r3
 80034fe:	4153      	adcs	r3, r2
 8003500:	b2db      	uxtb	r3, r3
 8003502:	001a      	movs	r2, r3
 8003504:	1dfb      	adds	r3, r7, #7
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d100      	bne.n	800350e <UART_WaitOnFlagUntilTimeout+0x17a>
 800350c:	e74b      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	b014      	add	sp, #80	; 0x50
 8003516:	bd80      	pop	{r7, pc}
 8003518:	fffffe5f 	.word	0xfffffe5f

0800351c <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	0002      	movs	r2, r0
 8003524:	1dbb      	adds	r3, r7, #6
 8003526:	801a      	strh	r2, [r3, #0]
 8003528:	1d7b      	adds	r3, r7, #5
 800352a:	1c0a      	adds	r2, r1, #0
 800352c:	701a      	strb	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800352e:	240f      	movs	r4, #15
 8003530:	193b      	adds	r3, r7, r4
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 8003536:	1d7b      	adds	r3, r7, #5
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	1dbb      	adds	r3, r7, #6
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	2101      	movs	r1, #1
 8003540:	0018      	movs	r0, r3
 8003542:	f000 f9e7 	bl	8003914 <VL53L1_WrByte>
 8003546:	0003      	movs	r3, r0
 8003548:	0019      	movs	r1, r3
 800354a:	193b      	adds	r3, r7, r4
 800354c:	193a      	adds	r2, r7, r4
 800354e:	7812      	ldrb	r2, [r2, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	701a      	strb	r2, [r3, #0]
	return status;
 8003554:	193b      	adds	r3, r7, r4
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b25b      	sxtb	r3, r3
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b005      	add	sp, #20
 8003560:	bd90      	pop	{r4, r7, pc}
	...

08003564 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	0002      	movs	r2, r0
 800356c:	1dbb      	adds	r3, r7, #6
 800356e:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003570:	230f      	movs	r3, #15
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 8003578:	210e      	movs	r1, #14
 800357a:	187b      	adds	r3, r7, r1
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8003580:	187b      	adds	r3, r7, r1
 8003582:	222d      	movs	r2, #45	; 0x2d
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e01a      	b.n	80035be <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8003588:	240e      	movs	r4, #14
 800358a:	193b      	adds	r3, r7, r4
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	b299      	uxth	r1, r3
 8003590:	193b      	adds	r3, r7, r4
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	3b2d      	subs	r3, #45	; 0x2d
 8003596:	4a3e      	ldr	r2, [pc, #248]	; (8003690 <VL53L1X_SensorInit+0x12c>)
 8003598:	5cd2      	ldrb	r2, [r2, r3]
 800359a:	1dbb      	adds	r3, r7, #6
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	0018      	movs	r0, r3
 80035a0:	f000 f9b8 	bl	8003914 <VL53L1_WrByte>
 80035a4:	0003      	movs	r3, r0
 80035a6:	0019      	movs	r1, r3
 80035a8:	220f      	movs	r2, #15
 80035aa:	18bb      	adds	r3, r7, r2
 80035ac:	18ba      	adds	r2, r7, r2
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80035b4:	193b      	adds	r3, r7, r4
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	3201      	adds	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	230e      	movs	r3, #14
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b87      	cmp	r3, #135	; 0x87
 80035c6:	d9df      	bls.n	8003588 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 f8b3 	bl	8003738 <VL53L1X_StartRanging>
 80035d2:	0003      	movs	r3, r0
 80035d4:	0019      	movs	r1, r3
 80035d6:	220f      	movs	r2, #15
 80035d8:	18bb      	adds	r3, r7, r2
 80035da:	18ba      	adds	r2, r7, r2
 80035dc:	7812      	ldrb	r2, [r2, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 80035e2:	230d      	movs	r3, #13
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 80035ea:	e00f      	b.n	800360c <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 80035ec:	230d      	movs	r3, #13
 80035ee:	18fa      	adds	r2, r7, r3
 80035f0:	1dbb      	adds	r3, r7, #6
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	0011      	movs	r1, r2
 80035f6:	0018      	movs	r0, r3
 80035f8:	f000 f8dc 	bl	80037b4 <VL53L1X_CheckForDataReady>
 80035fc:	0003      	movs	r3, r0
 80035fe:	0019      	movs	r1, r3
 8003600:	220f      	movs	r2, #15
 8003602:	18bb      	adds	r3, r7, r2
 8003604:	18ba      	adds	r2, r7, r2
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 800360c:	230d      	movs	r3, #13
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ea      	beq.n	80035ec <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8003616:	1dbb      	adds	r3, r7, #6
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	0018      	movs	r0, r3
 800361c:	f000 f83a 	bl	8003694 <VL53L1X_ClearInterrupt>
 8003620:	0003      	movs	r3, r0
 8003622:	0019      	movs	r1, r3
 8003624:	240f      	movs	r4, #15
 8003626:	193b      	adds	r3, r7, r4
 8003628:	193a      	adds	r2, r7, r4
 800362a:	7812      	ldrb	r2, [r2, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 8003630:	1dbb      	adds	r3, r7, #6
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	0018      	movs	r0, r3
 8003636:	f000 f89e 	bl	8003776 <VL53L1X_StopRanging>
 800363a:	0003      	movs	r3, r0
 800363c:	0019      	movs	r1, r3
 800363e:	193b      	adds	r3, r7, r4
 8003640:	193a      	adds	r2, r7, r4
 8003642:	7812      	ldrb	r2, [r2, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8003648:	1dbb      	adds	r3, r7, #6
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	2209      	movs	r2, #9
 800364e:	2108      	movs	r1, #8
 8003650:	0018      	movs	r0, r3
 8003652:	f000 f95f 	bl	8003914 <VL53L1_WrByte>
 8003656:	0003      	movs	r3, r0
 8003658:	0019      	movs	r1, r3
 800365a:	193b      	adds	r3, r7, r4
 800365c:	193a      	adds	r2, r7, r4
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8003664:	1dbb      	adds	r3, r7, #6
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	2200      	movs	r2, #0
 800366a:	210b      	movs	r1, #11
 800366c:	0018      	movs	r0, r3
 800366e:	f000 f951 	bl	8003914 <VL53L1_WrByte>
 8003672:	0003      	movs	r3, r0
 8003674:	0019      	movs	r1, r3
 8003676:	193b      	adds	r3, r7, r4
 8003678:	193a      	adds	r2, r7, r4
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	701a      	strb	r2, [r3, #0]
	return status;
 8003680:	193b      	adds	r3, r7, r4
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	b25b      	sxtb	r3, r3
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b005      	add	sp, #20
 800368c:	bd90      	pop	{r4, r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	08003d58 	.word	0x08003d58

08003694 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	0002      	movs	r2, r0
 800369c:	1dbb      	adds	r3, r7, #6
 800369e:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80036a0:	240f      	movs	r4, #15
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80036a8:	1dbb      	adds	r3, r7, #6
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	2186      	movs	r1, #134	; 0x86
 80036b0:	0018      	movs	r0, r3
 80036b2:	f000 f92f 	bl	8003914 <VL53L1_WrByte>
 80036b6:	0003      	movs	r3, r0
 80036b8:	0019      	movs	r1, r3
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	193a      	adds	r2, r7, r4
 80036be:	7812      	ldrb	r2, [r2, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	701a      	strb	r2, [r3, #0]
	return status;
 80036c4:	193b      	adds	r3, r7, r4
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	b25b      	sxtb	r3, r3
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b005      	add	sp, #20
 80036d0:	bd90      	pop	{r4, r7, pc}

080036d2 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 80036d2:	b5b0      	push	{r4, r5, r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	0002      	movs	r2, r0
 80036da:	6039      	str	r1, [r7, #0]
 80036dc:	1dbb      	adds	r3, r7, #6
 80036de:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 80036e0:	240f      	movs	r4, #15
 80036e2:	193b      	adds	r3, r7, r4
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 80036e8:	250e      	movs	r5, #14
 80036ea:	197a      	adds	r2, r7, r5
 80036ec:	1dbb      	adds	r3, r7, #6
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	2130      	movs	r1, #48	; 0x30
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 f94a 	bl	800398c <VL53L1_RdByte>
 80036f8:	0003      	movs	r3, r0
 80036fa:	0019      	movs	r1, r3
 80036fc:	0020      	movs	r0, r4
 80036fe:	183b      	adds	r3, r7, r0
 8003700:	183a      	adds	r2, r7, r0
 8003702:	7812      	ldrb	r2, [r2, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8003708:	197b      	adds	r3, r7, r5
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2210      	movs	r2, #16
 800370e:	4013      	ands	r3, r2
 8003710:	b2da      	uxtb	r2, r3
 8003712:	197b      	adds	r3, r7, r5
 8003714:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8003716:	197b      	adds	r3, r7, r5
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	b2db      	uxtb	r3, r3
 800371e:	425a      	negs	r2, r3
 8003720:	4153      	adcs	r3, r2
 8003722:	b2db      	uxtb	r3, r3
 8003724:	001a      	movs	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	701a      	strb	r2, [r3, #0]
	return status;
 800372a:	183b      	adds	r3, r7, r0
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	b25b      	sxtb	r3, r3
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b004      	add	sp, #16
 8003736:	bdb0      	pop	{r4, r5, r7, pc}

08003738 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	0002      	movs	r2, r0
 8003740:	1dbb      	adds	r3, r7, #6
 8003742:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003744:	240f      	movs	r4, #15
 8003746:	193b      	adds	r3, r7, r4
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800374c:	1dbb      	adds	r3, r7, #6
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	2240      	movs	r2, #64	; 0x40
 8003752:	2187      	movs	r1, #135	; 0x87
 8003754:	0018      	movs	r0, r3
 8003756:	f000 f8dd 	bl	8003914 <VL53L1_WrByte>
 800375a:	0003      	movs	r3, r0
 800375c:	0019      	movs	r1, r3
 800375e:	193b      	adds	r3, r7, r4
 8003760:	193a      	adds	r2, r7, r4
 8003762:	7812      	ldrb	r2, [r2, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	701a      	strb	r2, [r3, #0]
	return status;
 8003768:	193b      	adds	r3, r7, r4
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	b25b      	sxtb	r3, r3
}
 800376e:	0018      	movs	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	b005      	add	sp, #20
 8003774:	bd90      	pop	{r4, r7, pc}

08003776 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8003776:	b590      	push	{r4, r7, lr}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	0002      	movs	r2, r0
 800377e:	1dbb      	adds	r3, r7, #6
 8003780:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003782:	240f      	movs	r4, #15
 8003784:	193b      	adds	r3, r7, r4
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 800378a:	1dbb      	adds	r3, r7, #6
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	2187      	movs	r1, #135	; 0x87
 8003792:	0018      	movs	r0, r3
 8003794:	f000 f8be 	bl	8003914 <VL53L1_WrByte>
 8003798:	0003      	movs	r3, r0
 800379a:	0019      	movs	r1, r3
 800379c:	193b      	adds	r3, r7, r4
 800379e:	193a      	adds	r2, r7, r4
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	701a      	strb	r2, [r3, #0]
	return status;
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	b25b      	sxtb	r3, r3
}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b005      	add	sp, #20
 80037b2:	bd90      	pop	{r4, r7, pc}

080037b4 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 80037b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	0002      	movs	r2, r0
 80037bc:	6039      	str	r1, [r7, #0]
 80037be:	1dbb      	adds	r3, r7, #6
 80037c0:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 80037c2:	240f      	movs	r4, #15
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 80037ca:	250d      	movs	r5, #13
 80037cc:	197a      	adds	r2, r7, r5
 80037ce:	1dbb      	adds	r3, r7, #6
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	0011      	movs	r1, r2
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff ff7c 	bl	80036d2 <VL53L1X_GetInterruptPolarity>
 80037da:	0003      	movs	r3, r0
 80037dc:	0019      	movs	r1, r3
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	193a      	adds	r2, r7, r4
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 80037e8:	260e      	movs	r6, #14
 80037ea:	19ba      	adds	r2, r7, r6
 80037ec:	1dbb      	adds	r3, r7, #6
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	2131      	movs	r1, #49	; 0x31
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 f8ca 	bl	800398c <VL53L1_RdByte>
 80037f8:	0003      	movs	r3, r0
 80037fa:	0019      	movs	r1, r3
 80037fc:	193b      	adds	r3, r7, r4
 80037fe:	193a      	adds	r2, r7, r4
 8003800:	7812      	ldrb	r2, [r2, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8003806:	193b      	adds	r3, r7, r4
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	b25b      	sxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10f      	bne.n	8003830 <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 8003810:	19bb      	adds	r3, r7, r6
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	001a      	movs	r2, r3
 8003816:	2301      	movs	r3, #1
 8003818:	4013      	ands	r3, r2
 800381a:	197a      	adds	r2, r7, r5
 800381c:	7812      	ldrb	r2, [r2, #0]
 800381e:	4293      	cmp	r3, r2
 8003820:	d103      	bne.n	800382a <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e002      	b.n	8003830 <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8003830:	230f      	movs	r3, #15
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b25b      	sxtb	r3, r3
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b005      	add	sp, #20
 800383e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003840 <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 8003840:	b5b0      	push	{r4, r5, r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	0002      	movs	r2, r0
 8003848:	6039      	str	r1, [r7, #0]
 800384a:	1dbb      	adds	r3, r7, #6
 800384c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800384e:	240f      	movs	r4, #15
 8003850:	193b      	adds	r3, r7, r4
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
	uint16_t tmp = 0;
 8003856:	250c      	movs	r5, #12
 8003858:	197b      	adds	r3, r7, r5
 800385a:	2200      	movs	r2, #0
 800385c:	801a      	strh	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 800385e:	197a      	adds	r2, r7, r5
 8003860:	2310      	movs	r3, #16
 8003862:	33ff      	adds	r3, #255	; 0xff
 8003864:	0019      	movs	r1, r3
 8003866:	1dbb      	adds	r3, r7, #6
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	0018      	movs	r0, r3
 800386c:	f000 f8d4 	bl	8003a18 <VL53L1_RdWord>
 8003870:	0003      	movs	r3, r0
 8003872:	0019      	movs	r1, r3
 8003874:	193b      	adds	r3, r7, r4
 8003876:	193a      	adds	r2, r7, r4
 8003878:	7812      	ldrb	r2, [r2, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	701a      	strb	r2, [r3, #0]
	*sensorId = tmp;
 800387e:	197b      	adds	r3, r7, r5
 8003880:	881a      	ldrh	r2, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	801a      	strh	r2, [r3, #0]
	return status;
 8003886:	193b      	adds	r3, r7, r4
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b25b      	sxtb	r3, r3
}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	b004      	add	sp, #16
 8003892:	bdb0      	pop	{r4, r5, r7, pc}

08003894 <_I2CWrite>:
#include "VL53L1X.h"
extern VL53L1X* active_sensor;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b087      	sub	sp, #28
 8003898:	af02      	add	r7, sp, #8
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	230e      	movs	r3, #14
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	1c02      	adds	r2, r0, #0
 80038a4:	801a      	strh	r2, [r3, #0]
	(void) (dev);
	return (int) HAL_I2C_Master_Transmit(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <_I2CWrite+0x3c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <_I2CWrite+0x3c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	791b      	ldrb	r3, [r3, #4]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	18db      	adds	r3, r3, r3
 80038b6:	b299      	uxth	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	2464      	movs	r4, #100	; 0x64
 80038c0:	9400      	str	r4, [sp, #0]
 80038c2:	f7fd fc03 	bl	80010cc <HAL_I2C_Master_Transmit>
 80038c6:	0003      	movs	r3, r0
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b005      	add	sp, #20
 80038ce:	bd90      	pop	{r4, r7, pc}
 80038d0:	20000244 	.word	0x20000244

080038d4 <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	230e      	movs	r3, #14
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	1c02      	adds	r2, r0, #0
 80038e4:	801a      	strh	r2, [r3, #0]
	(void) (dev);
    return (int) HAL_I2C_Master_Receive(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <_I2CRead+0x3c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	4b08      	ldr	r3, [pc, #32]	; (8003910 <_I2CRead+0x3c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	791b      	ldrb	r3, [r3, #4]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	18db      	adds	r3, r3, r3
 80038f6:	b299      	uxth	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	2464      	movs	r4, #100	; 0x64
 8003900:	9400      	str	r4, [sp, #0]
 8003902:	f7fd fceb 	bl	80012dc <HAL_I2C_Master_Receive>
 8003906:	0003      	movs	r3, r0
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b005      	add	sp, #20
 800390e:	bd90      	pop	{r4, r7, pc}
 8003910:	20000244 	.word	0x20000244

08003914 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	0004      	movs	r4, r0
 800391c:	0008      	movs	r0, r1
 800391e:	0011      	movs	r1, r2
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	1c22      	adds	r2, r4, #0
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	1c02      	adds	r2, r0, #0
 800392a:	801a      	strh	r2, [r3, #0]
 800392c:	1cfb      	adds	r3, r7, #3
 800392e:	1c0a      	adds	r2, r1, #0
 8003930:	701a      	strb	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003932:	240f      	movs	r4, #15
 8003934:	193b      	adds	r3, r7, r4
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	b29b      	uxth	r3, r3
 8003942:	b2da      	uxtb	r2, r3
 8003944:	4b10      	ldr	r3, [pc, #64]	; (8003988 <VL53L1_WrByte+0x74>)
 8003946:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b2da      	uxtb	r2, r3
 800394e:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <VL53L1_WrByte+0x74>)
 8003950:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8003952:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <VL53L1_WrByte+0x74>)
 8003954:	1cfa      	adds	r2, r7, #3
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 800395a:	490b      	ldr	r1, [pc, #44]	; (8003988 <VL53L1_WrByte+0x74>)
 800395c:	1dbb      	adds	r3, r7, #6
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	2203      	movs	r2, #3
 8003962:	0018      	movs	r0, r3
 8003964:	f7ff ff96 	bl	8003894 <_I2CWrite>
 8003968:	0003      	movs	r3, r0
 800396a:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <VL53L1_WrByte+0x64>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003972:	193b      	adds	r3, r7, r4
 8003974:	22f3      	movs	r2, #243	; 0xf3
 8003976:	701a      	strb	r2, [r3, #0]
    }
    return Status;}
 8003978:	230f      	movs	r3, #15
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	b25b      	sxtb	r3, r3
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	b005      	add	sp, #20
 8003986:	bd90      	pop	{r4, r7, pc}
 8003988:	20000144 	.word	0x20000144

0800398c <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	603a      	str	r2, [r7, #0]
 8003994:	1dbb      	adds	r3, r7, #6
 8003996:	1c02      	adds	r2, r0, #0
 8003998:	801a      	strh	r2, [r3, #0]
 800399a:	1d3b      	adds	r3, r7, #4
 800399c:	1c0a      	adds	r2, r1, #0
 800399e:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80039a0:	240f      	movs	r4, #15
 80039a2:	193b      	adds	r3, r7, r4
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <VL53L1_RdByte+0x88>)
 80039b4:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <VL53L1_RdByte+0x88>)
 80039be:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 80039c0:	4914      	ldr	r1, [pc, #80]	; (8003a14 <VL53L1_RdByte+0x88>)
 80039c2:	1dbb      	adds	r3, r7, #6
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	2202      	movs	r2, #2
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7ff ff63 	bl	8003894 <_I2CWrite>
 80039ce:	0003      	movs	r3, r0
 80039d0:	60bb      	str	r3, [r7, #8]
    if( status_int ){
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80039d8:	193b      	adds	r3, r7, r4
 80039da:	22f3      	movs	r2, #243	; 0xf3
 80039dc:	701a      	strb	r2, [r3, #0]
        goto done;
 80039de:	e011      	b.n	8003a04 <VL53L1_RdByte+0x78>
    }
    status_int = _I2CRead(dev, data, 1);
 80039e0:	6839      	ldr	r1, [r7, #0]
 80039e2:	1dbb      	adds	r3, r7, #6
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	2201      	movs	r2, #1
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7ff ff73 	bl	80038d4 <_I2CRead>
 80039ee:	0003      	movs	r3, r0
 80039f0:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d004      	beq.n	8003a02 <VL53L1_RdByte+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80039f8:	230f      	movs	r3, #15
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	22f3      	movs	r2, #243	; 0xf3
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	e000      	b.n	8003a04 <VL53L1_RdByte+0x78>
    }
done:
 8003a02:	46c0      	nop			; (mov r8, r8)

	return Status;
 8003a04:	230f      	movs	r3, #15
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b25b      	sxtb	r3, r3
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b005      	add	sp, #20
 8003a12:	bd90      	pop	{r4, r7, pc}
 8003a14:	20000144 	.word	0x20000144

08003a18 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	603a      	str	r2, [r7, #0]
 8003a20:	1dbb      	adds	r3, r7, #6
 8003a22:	1c02      	adds	r2, r0, #0
 8003a24:	801a      	strh	r2, [r3, #0]
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	1c0a      	adds	r2, r1, #0
 8003a2a:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a2c:	240f      	movs	r4, #15
 8003a2e:	193b      	adds	r3, r7, r4
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <VL53L1_RdWord+0xa0>)
 8003a40:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <VL53L1_RdWord+0xa0>)
 8003a4a:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8003a4c:	491a      	ldr	r1, [pc, #104]	; (8003ab8 <VL53L1_RdWord+0xa0>)
 8003a4e:	1dbb      	adds	r3, r7, #6
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	2202      	movs	r2, #2
 8003a54:	0018      	movs	r0, r3
 8003a56:	f7ff ff1d 	bl	8003894 <_I2CWrite>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	60bb      	str	r3, [r7, #8]

    if( status_int ){
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <VL53L1_RdWord+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003a64:	193b      	adds	r3, r7, r4
 8003a66:	22f3      	movs	r2, #243	; 0xf3
 8003a68:	701a      	strb	r2, [r3, #0]
        goto done;
 8003a6a:	e01c      	b.n	8003aa6 <VL53L1_RdWord+0x8e>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 8003a6c:	4912      	ldr	r1, [pc, #72]	; (8003ab8 <VL53L1_RdWord+0xa0>)
 8003a6e:	1dbb      	adds	r3, r7, #6
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	2202      	movs	r2, #2
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7ff ff2d 	bl	80038d4 <_I2CRead>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <VL53L1_RdWord+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003a84:	230f      	movs	r3, #15
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	22f3      	movs	r2, #243	; 0xf3
 8003a8a:	701a      	strb	r2, [r3, #0]
        goto done;
 8003a8c:	e00b      	b.n	8003aa6 <VL53L1_RdWord+0x8e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <VL53L1_RdWord+0xa0>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <VL53L1_RdWord+0xa0>)
 8003a9a:	785b      	ldrb	r3, [r3, #1]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	18d3      	adds	r3, r2, r3
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 8003aa6:	230f      	movs	r3, #15
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	b25b      	sxtb	r3, r3
 8003aae:	0018      	movs	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b005      	add	sp, #20
 8003ab4:	bd90      	pop	{r4, r7, pc}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	20000144 	.word	0x20000144

08003abc <TOF_InitStruct>:
#include "VL53L1X.h"
#include "VL53L1X_api.h"

VL53L1X* active_sensor;

void TOF_InitStruct(VL53L1X* const sensor, I2C_HandleTypeDef* hi2c, uint8_t address, GPIO_TypeDef* xshut_port, uint16_t xshut_pin) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	1dfb      	adds	r3, r7, #7
 8003aca:	701a      	strb	r2, [r3, #0]
	sensor->hi2c = hi2c;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1dfa      	adds	r2, r7, #7
 8003ad6:	7812      	ldrb	r2, [r2, #0]
 8003ad8:	711a      	strb	r2, [r3, #4]

	sensor->xshut_port = xshut_port;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	609a      	str	r2, [r3, #8]
	sensor->xshut_pin = xshut_pin;
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	2318      	movs	r3, #24
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	8193      	strh	r3, [r2, #12]
}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b004      	add	sp, #16
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <TOF_TurnOn>:

void TOF_TurnOn(VL53L1X* const sensor) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <TOF_TurnOn+0x28>)
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_SET);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6898      	ldr	r0, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	899b      	ldrh	r3, [r3, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	f7fd fa29 	bl	8000f64 <HAL_GPIO_WritePin>
}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b002      	add	sp, #8
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	20000244 	.word	0x20000244

08003b20 <TOF_TurnOff>:

void TOF_TurnOff(VL53L1X* const sensor) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8003b28:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <TOF_TurnOff+0x28>)
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_RESET);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6898      	ldr	r0, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	899b      	ldrh	r3, [r3, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	0019      	movs	r1, r3
 8003b3a:	f7fd fa13 	bl	8000f64 <HAL_GPIO_WritePin>
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b002      	add	sp, #8
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	20000244 	.word	0x20000244

08003b4c <TOF_BootSensor>:
	for (uint8_t n = 0; n < count; n++) {
		TOF_BootSensor(sensors[n]);
	}
}

void TOF_BootSensor(VL53L1X* const sensor) {
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8003b54:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <TOF_BootSensor+0x98>)
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	601a      	str	r2, [r3, #0]
	TOF_TurnOn(sensor);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff ffc9 	bl	8003af4 <TOF_TurnOn>

	// Assume sensor wasn't initialised and is using default address
	uint8_t correct_address = sensor->address;
 8003b62:	240f      	movs	r4, #15
 8003b64:	193b      	adds	r3, r7, r4
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	7912      	ldrb	r2, [r2, #4]
 8003b6a:	701a      	strb	r2, [r3, #0]
	sensor->address = 0x52 >> 1;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2229      	movs	r2, #41	; 0x29
 8003b70:	711a      	strb	r2, [r3, #4]

	// Set new address to sensor if necessary
	uint16_t id = 0;
 8003b72:	210c      	movs	r1, #12
 8003b74:	187b      	adds	r3, r7, r1
 8003b76:	2200      	movs	r2, #0
 8003b78:	801a      	strh	r2, [r3, #0]
	if (VL53L1X_GetSensorId(sensor->address, &id)) {
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	791b      	ldrb	r3, [r3, #4]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	187a      	adds	r2, r7, r1
 8003b82:	0011      	movs	r1, r2
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7ff fe5b 	bl	8003840 <VL53L1X_GetSensorId>
 8003b8a:	1e03      	subs	r3, r0, #0
 8003b8c:	d008      	beq.n	8003ba0 <TOF_BootSensor+0x54>
		VL53L1X_SetI2CAddress(sensor->address, correct_address);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	791b      	ldrb	r3, [r3, #4]
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	193b      	adds	r3, r7, r4
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	0019      	movs	r1, r3
 8003b9a:	0010      	movs	r0, r2
 8003b9c:	f7ff fcbe 	bl	800351c <VL53L1X_SetI2CAddress>
	}

	// Initialise sensor
	sensor->address = correct_address;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	220f      	movs	r2, #15
 8003ba4:	18ba      	adds	r2, r7, r2
 8003ba6:	7812      	ldrb	r2, [r2, #0]
 8003ba8:	711a      	strb	r2, [r3, #4]
	VL53L1X_GetSensorId(sensor->address, &id);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	791b      	ldrb	r3, [r3, #4]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	240c      	movs	r4, #12
 8003bb2:	193a      	adds	r2, r7, r4
 8003bb4:	0011      	movs	r1, r2
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7ff fe42 	bl	8003840 <VL53L1X_GetSensorId>
	if (id != 0) {
 8003bbc:	193b      	adds	r3, r7, r4
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00b      	beq.n	8003bdc <TOF_BootSensor+0x90>
		VL53L1X_SensorInit(sensor->address);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	791b      	ldrb	r3, [r3, #4]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7ff fcca 	bl	8003564 <VL53L1X_SensorInit>
		VL53L1X_StartRanging(sensor->address);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	791b      	ldrb	r3, [r3, #4]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7ff fdae 	bl	8003738 <VL53L1X_StartRanging>
	}
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b005      	add	sp, #20
 8003be2:	bd90      	pop	{r4, r7, pc}
 8003be4:	20000244 	.word	0x20000244

08003be8 <__libc_init_array>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	2600      	movs	r6, #0
 8003bec:	4d0c      	ldr	r5, [pc, #48]	; (8003c20 <__libc_init_array+0x38>)
 8003bee:	4c0d      	ldr	r4, [pc, #52]	; (8003c24 <__libc_init_array+0x3c>)
 8003bf0:	1b64      	subs	r4, r4, r5
 8003bf2:	10a4      	asrs	r4, r4, #2
 8003bf4:	42a6      	cmp	r6, r4
 8003bf6:	d109      	bne.n	8003c0c <__libc_init_array+0x24>
 8003bf8:	2600      	movs	r6, #0
 8003bfa:	f000 f821 	bl	8003c40 <_init>
 8003bfe:	4d0a      	ldr	r5, [pc, #40]	; (8003c28 <__libc_init_array+0x40>)
 8003c00:	4c0a      	ldr	r4, [pc, #40]	; (8003c2c <__libc_init_array+0x44>)
 8003c02:	1b64      	subs	r4, r4, r5
 8003c04:	10a4      	asrs	r4, r4, #2
 8003c06:	42a6      	cmp	r6, r4
 8003c08:	d105      	bne.n	8003c16 <__libc_init_array+0x2e>
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	00b3      	lsls	r3, r6, #2
 8003c0e:	58eb      	ldr	r3, [r5, r3]
 8003c10:	4798      	blx	r3
 8003c12:	3601      	adds	r6, #1
 8003c14:	e7ee      	b.n	8003bf4 <__libc_init_array+0xc>
 8003c16:	00b3      	lsls	r3, r6, #2
 8003c18:	58eb      	ldr	r3, [r5, r3]
 8003c1a:	4798      	blx	r3
 8003c1c:	3601      	adds	r6, #1
 8003c1e:	e7f2      	b.n	8003c06 <__libc_init_array+0x1e>
 8003c20:	08003db4 	.word	0x08003db4
 8003c24:	08003db4 	.word	0x08003db4
 8003c28:	08003db4 	.word	0x08003db4
 8003c2c:	08003db8 	.word	0x08003db8

08003c30 <memset>:
 8003c30:	0003      	movs	r3, r0
 8003c32:	1882      	adds	r2, r0, r2
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d100      	bne.n	8003c3a <memset+0xa>
 8003c38:	4770      	bx	lr
 8003c3a:	7019      	strb	r1, [r3, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	e7f9      	b.n	8003c34 <memset+0x4>

08003c40 <_init>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr

08003c4c <_fini>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr
