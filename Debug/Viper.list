
Viper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006d50  08006d50  00016d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec0  08006ec0  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08006ec0  08006ec0  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ec0  08006ec0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08006ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000184  0800704c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800704c  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bf0  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000297b  00000000  00000000  00032d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00035718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00036810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012259  00000000  00000000  000377d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153e3  00000000  00000000  00049a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068c24  00000000  00000000  0005ee0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7a30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042cc  00000000  00000000  000c7a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000184 	.word	0x20000184
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d38 	.word	0x08006d38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000188 	.word	0x20000188
 8000104:	08006d38 	.word	0x08006d38

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 ff0d 	bl	8001248 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fe5d 	bl	80010f8 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 feff 	bl	8001248 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fef5 	bl	8001248 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fe85 	bl	800117c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe7b 	bl	800117c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dadd>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	46d6      	mov	lr, sl
 800049c:	000d      	movs	r5, r1
 800049e:	0004      	movs	r4, r0
 80004a0:	b5c0      	push	{r6, r7, lr}
 80004a2:	001f      	movs	r7, r3
 80004a4:	0011      	movs	r1, r2
 80004a6:	0328      	lsls	r0, r5, #12
 80004a8:	0f62      	lsrs	r2, r4, #29
 80004aa:	0a40      	lsrs	r0, r0, #9
 80004ac:	4310      	orrs	r0, r2
 80004ae:	007a      	lsls	r2, r7, #1
 80004b0:	0d52      	lsrs	r2, r2, #21
 80004b2:	00e3      	lsls	r3, r4, #3
 80004b4:	033c      	lsls	r4, r7, #12
 80004b6:	4691      	mov	r9, r2
 80004b8:	0a64      	lsrs	r4, r4, #9
 80004ba:	0ffa      	lsrs	r2, r7, #31
 80004bc:	0f4f      	lsrs	r7, r1, #29
 80004be:	006e      	lsls	r6, r5, #1
 80004c0:	4327      	orrs	r7, r4
 80004c2:	4692      	mov	sl, r2
 80004c4:	46b8      	mov	r8, r7
 80004c6:	0d76      	lsrs	r6, r6, #21
 80004c8:	0fed      	lsrs	r5, r5, #31
 80004ca:	00c9      	lsls	r1, r1, #3
 80004cc:	4295      	cmp	r5, r2
 80004ce:	d100      	bne.n	80004d2 <__aeabi_dadd+0x3e>
 80004d0:	e099      	b.n	8000606 <__aeabi_dadd+0x172>
 80004d2:	464c      	mov	r4, r9
 80004d4:	1b34      	subs	r4, r6, r4
 80004d6:	46a4      	mov	ip, r4
 80004d8:	2c00      	cmp	r4, #0
 80004da:	dc00      	bgt.n	80004de <__aeabi_dadd+0x4a>
 80004dc:	e07c      	b.n	80005d8 <__aeabi_dadd+0x144>
 80004de:	464a      	mov	r2, r9
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x52>
 80004e4:	e0b8      	b.n	8000658 <__aeabi_dadd+0x1c4>
 80004e6:	4ac5      	ldr	r2, [pc, #788]	; (80007fc <__aeabi_dadd+0x368>)
 80004e8:	4296      	cmp	r6, r2
 80004ea:	d100      	bne.n	80004ee <__aeabi_dadd+0x5a>
 80004ec:	e11c      	b.n	8000728 <__aeabi_dadd+0x294>
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	003c      	movs	r4, r7
 80004f2:	0412      	lsls	r2, r2, #16
 80004f4:	4314      	orrs	r4, r2
 80004f6:	46a0      	mov	r8, r4
 80004f8:	4662      	mov	r2, ip
 80004fa:	2a38      	cmp	r2, #56	; 0x38
 80004fc:	dd00      	ble.n	8000500 <__aeabi_dadd+0x6c>
 80004fe:	e161      	b.n	80007c4 <__aeabi_dadd+0x330>
 8000500:	2a1f      	cmp	r2, #31
 8000502:	dd00      	ble.n	8000506 <__aeabi_dadd+0x72>
 8000504:	e1cc      	b.n	80008a0 <__aeabi_dadd+0x40c>
 8000506:	4664      	mov	r4, ip
 8000508:	2220      	movs	r2, #32
 800050a:	1b12      	subs	r2, r2, r4
 800050c:	4644      	mov	r4, r8
 800050e:	4094      	lsls	r4, r2
 8000510:	000f      	movs	r7, r1
 8000512:	46a1      	mov	r9, r4
 8000514:	4664      	mov	r4, ip
 8000516:	4091      	lsls	r1, r2
 8000518:	40e7      	lsrs	r7, r4
 800051a:	464c      	mov	r4, r9
 800051c:	1e4a      	subs	r2, r1, #1
 800051e:	4191      	sbcs	r1, r2
 8000520:	433c      	orrs	r4, r7
 8000522:	4642      	mov	r2, r8
 8000524:	4321      	orrs	r1, r4
 8000526:	4664      	mov	r4, ip
 8000528:	40e2      	lsrs	r2, r4
 800052a:	1a80      	subs	r0, r0, r2
 800052c:	1a5c      	subs	r4, r3, r1
 800052e:	42a3      	cmp	r3, r4
 8000530:	419b      	sbcs	r3, r3
 8000532:	425f      	negs	r7, r3
 8000534:	1bc7      	subs	r7, r0, r7
 8000536:	023b      	lsls	r3, r7, #8
 8000538:	d400      	bmi.n	800053c <__aeabi_dadd+0xa8>
 800053a:	e0d0      	b.n	80006de <__aeabi_dadd+0x24a>
 800053c:	027f      	lsls	r7, r7, #9
 800053e:	0a7f      	lsrs	r7, r7, #9
 8000540:	2f00      	cmp	r7, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_dadd+0xb2>
 8000544:	e0ff      	b.n	8000746 <__aeabi_dadd+0x2b2>
 8000546:	0038      	movs	r0, r7
 8000548:	f001 fd46 	bl	8001fd8 <__clzsi2>
 800054c:	0001      	movs	r1, r0
 800054e:	3908      	subs	r1, #8
 8000550:	2320      	movs	r3, #32
 8000552:	0022      	movs	r2, r4
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	408f      	lsls	r7, r1
 8000558:	40da      	lsrs	r2, r3
 800055a:	408c      	lsls	r4, r1
 800055c:	4317      	orrs	r7, r2
 800055e:	42b1      	cmp	r1, r6
 8000560:	da00      	bge.n	8000564 <__aeabi_dadd+0xd0>
 8000562:	e0ff      	b.n	8000764 <__aeabi_dadd+0x2d0>
 8000564:	1b89      	subs	r1, r1, r6
 8000566:	1c4b      	adds	r3, r1, #1
 8000568:	2b1f      	cmp	r3, #31
 800056a:	dd00      	ble.n	800056e <__aeabi_dadd+0xda>
 800056c:	e0a8      	b.n	80006c0 <__aeabi_dadd+0x22c>
 800056e:	2220      	movs	r2, #32
 8000570:	0039      	movs	r1, r7
 8000572:	1ad2      	subs	r2, r2, r3
 8000574:	0020      	movs	r0, r4
 8000576:	4094      	lsls	r4, r2
 8000578:	4091      	lsls	r1, r2
 800057a:	40d8      	lsrs	r0, r3
 800057c:	1e62      	subs	r2, r4, #1
 800057e:	4194      	sbcs	r4, r2
 8000580:	40df      	lsrs	r7, r3
 8000582:	2600      	movs	r6, #0
 8000584:	4301      	orrs	r1, r0
 8000586:	430c      	orrs	r4, r1
 8000588:	0763      	lsls	r3, r4, #29
 800058a:	d009      	beq.n	80005a0 <__aeabi_dadd+0x10c>
 800058c:	230f      	movs	r3, #15
 800058e:	4023      	ands	r3, r4
 8000590:	2b04      	cmp	r3, #4
 8000592:	d005      	beq.n	80005a0 <__aeabi_dadd+0x10c>
 8000594:	1d23      	adds	r3, r4, #4
 8000596:	42a3      	cmp	r3, r4
 8000598:	41a4      	sbcs	r4, r4
 800059a:	4264      	negs	r4, r4
 800059c:	193f      	adds	r7, r7, r4
 800059e:	001c      	movs	r4, r3
 80005a0:	023b      	lsls	r3, r7, #8
 80005a2:	d400      	bmi.n	80005a6 <__aeabi_dadd+0x112>
 80005a4:	e09e      	b.n	80006e4 <__aeabi_dadd+0x250>
 80005a6:	4b95      	ldr	r3, [pc, #596]	; (80007fc <__aeabi_dadd+0x368>)
 80005a8:	3601      	adds	r6, #1
 80005aa:	429e      	cmp	r6, r3
 80005ac:	d100      	bne.n	80005b0 <__aeabi_dadd+0x11c>
 80005ae:	e0b7      	b.n	8000720 <__aeabi_dadd+0x28c>
 80005b0:	4a93      	ldr	r2, [pc, #588]	; (8000800 <__aeabi_dadd+0x36c>)
 80005b2:	08e4      	lsrs	r4, r4, #3
 80005b4:	4017      	ands	r7, r2
 80005b6:	077b      	lsls	r3, r7, #29
 80005b8:	0571      	lsls	r1, r6, #21
 80005ba:	027f      	lsls	r7, r7, #9
 80005bc:	4323      	orrs	r3, r4
 80005be:	0b3f      	lsrs	r7, r7, #12
 80005c0:	0d4a      	lsrs	r2, r1, #21
 80005c2:	0512      	lsls	r2, r2, #20
 80005c4:	433a      	orrs	r2, r7
 80005c6:	07ed      	lsls	r5, r5, #31
 80005c8:	432a      	orrs	r2, r5
 80005ca:	0018      	movs	r0, r3
 80005cc:	0011      	movs	r1, r2
 80005ce:	bce0      	pop	{r5, r6, r7}
 80005d0:	46ba      	mov	sl, r7
 80005d2:	46b1      	mov	r9, r6
 80005d4:	46a8      	mov	r8, r5
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	2c00      	cmp	r4, #0
 80005da:	d04b      	beq.n	8000674 <__aeabi_dadd+0x1e0>
 80005dc:	464c      	mov	r4, r9
 80005de:	1ba4      	subs	r4, r4, r6
 80005e0:	46a4      	mov	ip, r4
 80005e2:	2e00      	cmp	r6, #0
 80005e4:	d000      	beq.n	80005e8 <__aeabi_dadd+0x154>
 80005e6:	e123      	b.n	8000830 <__aeabi_dadd+0x39c>
 80005e8:	0004      	movs	r4, r0
 80005ea:	431c      	orrs	r4, r3
 80005ec:	d100      	bne.n	80005f0 <__aeabi_dadd+0x15c>
 80005ee:	e1af      	b.n	8000950 <__aeabi_dadd+0x4bc>
 80005f0:	4662      	mov	r2, ip
 80005f2:	1e54      	subs	r4, r2, #1
 80005f4:	2a01      	cmp	r2, #1
 80005f6:	d100      	bne.n	80005fa <__aeabi_dadd+0x166>
 80005f8:	e215      	b.n	8000a26 <__aeabi_dadd+0x592>
 80005fa:	4d80      	ldr	r5, [pc, #512]	; (80007fc <__aeabi_dadd+0x368>)
 80005fc:	45ac      	cmp	ip, r5
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x16e>
 8000600:	e1c8      	b.n	8000994 <__aeabi_dadd+0x500>
 8000602:	46a4      	mov	ip, r4
 8000604:	e11b      	b.n	800083e <__aeabi_dadd+0x3aa>
 8000606:	464a      	mov	r2, r9
 8000608:	1ab2      	subs	r2, r6, r2
 800060a:	4694      	mov	ip, r2
 800060c:	2a00      	cmp	r2, #0
 800060e:	dc00      	bgt.n	8000612 <__aeabi_dadd+0x17e>
 8000610:	e0ac      	b.n	800076c <__aeabi_dadd+0x2d8>
 8000612:	464a      	mov	r2, r9
 8000614:	2a00      	cmp	r2, #0
 8000616:	d043      	beq.n	80006a0 <__aeabi_dadd+0x20c>
 8000618:	4a78      	ldr	r2, [pc, #480]	; (80007fc <__aeabi_dadd+0x368>)
 800061a:	4296      	cmp	r6, r2
 800061c:	d100      	bne.n	8000620 <__aeabi_dadd+0x18c>
 800061e:	e1af      	b.n	8000980 <__aeabi_dadd+0x4ec>
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	003c      	movs	r4, r7
 8000624:	0412      	lsls	r2, r2, #16
 8000626:	4314      	orrs	r4, r2
 8000628:	46a0      	mov	r8, r4
 800062a:	4662      	mov	r2, ip
 800062c:	2a38      	cmp	r2, #56	; 0x38
 800062e:	dc67      	bgt.n	8000700 <__aeabi_dadd+0x26c>
 8000630:	2a1f      	cmp	r2, #31
 8000632:	dc00      	bgt.n	8000636 <__aeabi_dadd+0x1a2>
 8000634:	e15f      	b.n	80008f6 <__aeabi_dadd+0x462>
 8000636:	4647      	mov	r7, r8
 8000638:	3a20      	subs	r2, #32
 800063a:	40d7      	lsrs	r7, r2
 800063c:	4662      	mov	r2, ip
 800063e:	2a20      	cmp	r2, #32
 8000640:	d005      	beq.n	800064e <__aeabi_dadd+0x1ba>
 8000642:	4664      	mov	r4, ip
 8000644:	2240      	movs	r2, #64	; 0x40
 8000646:	1b12      	subs	r2, r2, r4
 8000648:	4644      	mov	r4, r8
 800064a:	4094      	lsls	r4, r2
 800064c:	4321      	orrs	r1, r4
 800064e:	1e4a      	subs	r2, r1, #1
 8000650:	4191      	sbcs	r1, r2
 8000652:	000c      	movs	r4, r1
 8000654:	433c      	orrs	r4, r7
 8000656:	e057      	b.n	8000708 <__aeabi_dadd+0x274>
 8000658:	003a      	movs	r2, r7
 800065a:	430a      	orrs	r2, r1
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x1cc>
 800065e:	e105      	b.n	800086c <__aeabi_dadd+0x3d8>
 8000660:	0022      	movs	r2, r4
 8000662:	3a01      	subs	r2, #1
 8000664:	2c01      	cmp	r4, #1
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x1d6>
 8000668:	e182      	b.n	8000970 <__aeabi_dadd+0x4dc>
 800066a:	4c64      	ldr	r4, [pc, #400]	; (80007fc <__aeabi_dadd+0x368>)
 800066c:	45a4      	cmp	ip, r4
 800066e:	d05b      	beq.n	8000728 <__aeabi_dadd+0x294>
 8000670:	4694      	mov	ip, r2
 8000672:	e741      	b.n	80004f8 <__aeabi_dadd+0x64>
 8000674:	4c63      	ldr	r4, [pc, #396]	; (8000804 <__aeabi_dadd+0x370>)
 8000676:	1c77      	adds	r7, r6, #1
 8000678:	4227      	tst	r7, r4
 800067a:	d000      	beq.n	800067e <__aeabi_dadd+0x1ea>
 800067c:	e0c4      	b.n	8000808 <__aeabi_dadd+0x374>
 800067e:	0004      	movs	r4, r0
 8000680:	431c      	orrs	r4, r3
 8000682:	2e00      	cmp	r6, #0
 8000684:	d000      	beq.n	8000688 <__aeabi_dadd+0x1f4>
 8000686:	e169      	b.n	800095c <__aeabi_dadd+0x4c8>
 8000688:	2c00      	cmp	r4, #0
 800068a:	d100      	bne.n	800068e <__aeabi_dadd+0x1fa>
 800068c:	e1bf      	b.n	8000a0e <__aeabi_dadd+0x57a>
 800068e:	4644      	mov	r4, r8
 8000690:	430c      	orrs	r4, r1
 8000692:	d000      	beq.n	8000696 <__aeabi_dadd+0x202>
 8000694:	e1d0      	b.n	8000a38 <__aeabi_dadd+0x5a4>
 8000696:	0742      	lsls	r2, r0, #29
 8000698:	08db      	lsrs	r3, r3, #3
 800069a:	4313      	orrs	r3, r2
 800069c:	08c0      	lsrs	r0, r0, #3
 800069e:	e029      	b.n	80006f4 <__aeabi_dadd+0x260>
 80006a0:	003a      	movs	r2, r7
 80006a2:	430a      	orrs	r2, r1
 80006a4:	d100      	bne.n	80006a8 <__aeabi_dadd+0x214>
 80006a6:	e170      	b.n	800098a <__aeabi_dadd+0x4f6>
 80006a8:	4662      	mov	r2, ip
 80006aa:	4664      	mov	r4, ip
 80006ac:	3a01      	subs	r2, #1
 80006ae:	2c01      	cmp	r4, #1
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0x220>
 80006b2:	e0e0      	b.n	8000876 <__aeabi_dadd+0x3e2>
 80006b4:	4c51      	ldr	r4, [pc, #324]	; (80007fc <__aeabi_dadd+0x368>)
 80006b6:	45a4      	cmp	ip, r4
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x228>
 80006ba:	e161      	b.n	8000980 <__aeabi_dadd+0x4ec>
 80006bc:	4694      	mov	ip, r2
 80006be:	e7b4      	b.n	800062a <__aeabi_dadd+0x196>
 80006c0:	003a      	movs	r2, r7
 80006c2:	391f      	subs	r1, #31
 80006c4:	40ca      	lsrs	r2, r1
 80006c6:	0011      	movs	r1, r2
 80006c8:	2b20      	cmp	r3, #32
 80006ca:	d003      	beq.n	80006d4 <__aeabi_dadd+0x240>
 80006cc:	2240      	movs	r2, #64	; 0x40
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	409f      	lsls	r7, r3
 80006d2:	433c      	orrs	r4, r7
 80006d4:	1e63      	subs	r3, r4, #1
 80006d6:	419c      	sbcs	r4, r3
 80006d8:	2700      	movs	r7, #0
 80006da:	2600      	movs	r6, #0
 80006dc:	430c      	orrs	r4, r1
 80006de:	0763      	lsls	r3, r4, #29
 80006e0:	d000      	beq.n	80006e4 <__aeabi_dadd+0x250>
 80006e2:	e753      	b.n	800058c <__aeabi_dadd+0xf8>
 80006e4:	46b4      	mov	ip, r6
 80006e6:	08e4      	lsrs	r4, r4, #3
 80006e8:	077b      	lsls	r3, r7, #29
 80006ea:	4323      	orrs	r3, r4
 80006ec:	08f8      	lsrs	r0, r7, #3
 80006ee:	4a43      	ldr	r2, [pc, #268]	; (80007fc <__aeabi_dadd+0x368>)
 80006f0:	4594      	cmp	ip, r2
 80006f2:	d01d      	beq.n	8000730 <__aeabi_dadd+0x29c>
 80006f4:	4662      	mov	r2, ip
 80006f6:	0307      	lsls	r7, r0, #12
 80006f8:	0552      	lsls	r2, r2, #21
 80006fa:	0b3f      	lsrs	r7, r7, #12
 80006fc:	0d52      	lsrs	r2, r2, #21
 80006fe:	e760      	b.n	80005c2 <__aeabi_dadd+0x12e>
 8000700:	4644      	mov	r4, r8
 8000702:	430c      	orrs	r4, r1
 8000704:	1e62      	subs	r2, r4, #1
 8000706:	4194      	sbcs	r4, r2
 8000708:	18e4      	adds	r4, r4, r3
 800070a:	429c      	cmp	r4, r3
 800070c:	419b      	sbcs	r3, r3
 800070e:	425f      	negs	r7, r3
 8000710:	183f      	adds	r7, r7, r0
 8000712:	023b      	lsls	r3, r7, #8
 8000714:	d5e3      	bpl.n	80006de <__aeabi_dadd+0x24a>
 8000716:	4b39      	ldr	r3, [pc, #228]	; (80007fc <__aeabi_dadd+0x368>)
 8000718:	3601      	adds	r6, #1
 800071a:	429e      	cmp	r6, r3
 800071c:	d000      	beq.n	8000720 <__aeabi_dadd+0x28c>
 800071e:	e0b5      	b.n	800088c <__aeabi_dadd+0x3f8>
 8000720:	0032      	movs	r2, r6
 8000722:	2700      	movs	r7, #0
 8000724:	2300      	movs	r3, #0
 8000726:	e74c      	b.n	80005c2 <__aeabi_dadd+0x12e>
 8000728:	0742      	lsls	r2, r0, #29
 800072a:	08db      	lsrs	r3, r3, #3
 800072c:	4313      	orrs	r3, r2
 800072e:	08c0      	lsrs	r0, r0, #3
 8000730:	001a      	movs	r2, r3
 8000732:	4302      	orrs	r2, r0
 8000734:	d100      	bne.n	8000738 <__aeabi_dadd+0x2a4>
 8000736:	e1e1      	b.n	8000afc <__aeabi_dadd+0x668>
 8000738:	2780      	movs	r7, #128	; 0x80
 800073a:	033f      	lsls	r7, r7, #12
 800073c:	4307      	orrs	r7, r0
 800073e:	033f      	lsls	r7, r7, #12
 8000740:	4a2e      	ldr	r2, [pc, #184]	; (80007fc <__aeabi_dadd+0x368>)
 8000742:	0b3f      	lsrs	r7, r7, #12
 8000744:	e73d      	b.n	80005c2 <__aeabi_dadd+0x12e>
 8000746:	0020      	movs	r0, r4
 8000748:	f001 fc46 	bl	8001fd8 <__clzsi2>
 800074c:	0001      	movs	r1, r0
 800074e:	3118      	adds	r1, #24
 8000750:	291f      	cmp	r1, #31
 8000752:	dc00      	bgt.n	8000756 <__aeabi_dadd+0x2c2>
 8000754:	e6fc      	b.n	8000550 <__aeabi_dadd+0xbc>
 8000756:	3808      	subs	r0, #8
 8000758:	4084      	lsls	r4, r0
 800075a:	0027      	movs	r7, r4
 800075c:	2400      	movs	r4, #0
 800075e:	42b1      	cmp	r1, r6
 8000760:	db00      	blt.n	8000764 <__aeabi_dadd+0x2d0>
 8000762:	e6ff      	b.n	8000564 <__aeabi_dadd+0xd0>
 8000764:	4a26      	ldr	r2, [pc, #152]	; (8000800 <__aeabi_dadd+0x36c>)
 8000766:	1a76      	subs	r6, r6, r1
 8000768:	4017      	ands	r7, r2
 800076a:	e70d      	b.n	8000588 <__aeabi_dadd+0xf4>
 800076c:	2a00      	cmp	r2, #0
 800076e:	d02f      	beq.n	80007d0 <__aeabi_dadd+0x33c>
 8000770:	464a      	mov	r2, r9
 8000772:	1b92      	subs	r2, r2, r6
 8000774:	4694      	mov	ip, r2
 8000776:	2e00      	cmp	r6, #0
 8000778:	d100      	bne.n	800077c <__aeabi_dadd+0x2e8>
 800077a:	e0ad      	b.n	80008d8 <__aeabi_dadd+0x444>
 800077c:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <__aeabi_dadd+0x368>)
 800077e:	4591      	cmp	r9, r2
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0x2f0>
 8000782:	e10f      	b.n	80009a4 <__aeabi_dadd+0x510>
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	0412      	lsls	r2, r2, #16
 8000788:	4310      	orrs	r0, r2
 800078a:	4662      	mov	r2, ip
 800078c:	2a38      	cmp	r2, #56	; 0x38
 800078e:	dd00      	ble.n	8000792 <__aeabi_dadd+0x2fe>
 8000790:	e10f      	b.n	80009b2 <__aeabi_dadd+0x51e>
 8000792:	2a1f      	cmp	r2, #31
 8000794:	dd00      	ble.n	8000798 <__aeabi_dadd+0x304>
 8000796:	e180      	b.n	8000a9a <__aeabi_dadd+0x606>
 8000798:	4664      	mov	r4, ip
 800079a:	2220      	movs	r2, #32
 800079c:	001e      	movs	r6, r3
 800079e:	1b12      	subs	r2, r2, r4
 80007a0:	4667      	mov	r7, ip
 80007a2:	0004      	movs	r4, r0
 80007a4:	4093      	lsls	r3, r2
 80007a6:	4094      	lsls	r4, r2
 80007a8:	40fe      	lsrs	r6, r7
 80007aa:	1e5a      	subs	r2, r3, #1
 80007ac:	4193      	sbcs	r3, r2
 80007ae:	40f8      	lsrs	r0, r7
 80007b0:	4334      	orrs	r4, r6
 80007b2:	431c      	orrs	r4, r3
 80007b4:	4480      	add	r8, r0
 80007b6:	1864      	adds	r4, r4, r1
 80007b8:	428c      	cmp	r4, r1
 80007ba:	41bf      	sbcs	r7, r7
 80007bc:	427f      	negs	r7, r7
 80007be:	464e      	mov	r6, r9
 80007c0:	4447      	add	r7, r8
 80007c2:	e7a6      	b.n	8000712 <__aeabi_dadd+0x27e>
 80007c4:	4642      	mov	r2, r8
 80007c6:	430a      	orrs	r2, r1
 80007c8:	0011      	movs	r1, r2
 80007ca:	1e4a      	subs	r2, r1, #1
 80007cc:	4191      	sbcs	r1, r2
 80007ce:	e6ad      	b.n	800052c <__aeabi_dadd+0x98>
 80007d0:	4c0c      	ldr	r4, [pc, #48]	; (8000804 <__aeabi_dadd+0x370>)
 80007d2:	1c72      	adds	r2, r6, #1
 80007d4:	4222      	tst	r2, r4
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x346>
 80007d8:	e0a1      	b.n	800091e <__aeabi_dadd+0x48a>
 80007da:	0002      	movs	r2, r0
 80007dc:	431a      	orrs	r2, r3
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d000      	beq.n	80007e4 <__aeabi_dadd+0x350>
 80007e2:	e0fa      	b.n	80009da <__aeabi_dadd+0x546>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x356>
 80007e8:	e145      	b.n	8000a76 <__aeabi_dadd+0x5e2>
 80007ea:	003a      	movs	r2, r7
 80007ec:	430a      	orrs	r2, r1
 80007ee:	d000      	beq.n	80007f2 <__aeabi_dadd+0x35e>
 80007f0:	e146      	b.n	8000a80 <__aeabi_dadd+0x5ec>
 80007f2:	0742      	lsls	r2, r0, #29
 80007f4:	08db      	lsrs	r3, r3, #3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	08c0      	lsrs	r0, r0, #3
 80007fa:	e77b      	b.n	80006f4 <__aeabi_dadd+0x260>
 80007fc:	000007ff 	.word	0x000007ff
 8000800:	ff7fffff 	.word	0xff7fffff
 8000804:	000007fe 	.word	0x000007fe
 8000808:	4647      	mov	r7, r8
 800080a:	1a5c      	subs	r4, r3, r1
 800080c:	1bc2      	subs	r2, r0, r7
 800080e:	42a3      	cmp	r3, r4
 8000810:	41bf      	sbcs	r7, r7
 8000812:	427f      	negs	r7, r7
 8000814:	46b9      	mov	r9, r7
 8000816:	0017      	movs	r7, r2
 8000818:	464a      	mov	r2, r9
 800081a:	1abf      	subs	r7, r7, r2
 800081c:	023a      	lsls	r2, r7, #8
 800081e:	d500      	bpl.n	8000822 <__aeabi_dadd+0x38e>
 8000820:	e08d      	b.n	800093e <__aeabi_dadd+0x4aa>
 8000822:	0023      	movs	r3, r4
 8000824:	433b      	orrs	r3, r7
 8000826:	d000      	beq.n	800082a <__aeabi_dadd+0x396>
 8000828:	e68a      	b.n	8000540 <__aeabi_dadd+0xac>
 800082a:	2000      	movs	r0, #0
 800082c:	2500      	movs	r5, #0
 800082e:	e761      	b.n	80006f4 <__aeabi_dadd+0x260>
 8000830:	4cb4      	ldr	r4, [pc, #720]	; (8000b04 <__aeabi_dadd+0x670>)
 8000832:	45a1      	cmp	r9, r4
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x3a4>
 8000836:	e0ad      	b.n	8000994 <__aeabi_dadd+0x500>
 8000838:	2480      	movs	r4, #128	; 0x80
 800083a:	0424      	lsls	r4, r4, #16
 800083c:	4320      	orrs	r0, r4
 800083e:	4664      	mov	r4, ip
 8000840:	2c38      	cmp	r4, #56	; 0x38
 8000842:	dc3d      	bgt.n	80008c0 <__aeabi_dadd+0x42c>
 8000844:	4662      	mov	r2, ip
 8000846:	2c1f      	cmp	r4, #31
 8000848:	dd00      	ble.n	800084c <__aeabi_dadd+0x3b8>
 800084a:	e0b7      	b.n	80009bc <__aeabi_dadd+0x528>
 800084c:	2520      	movs	r5, #32
 800084e:	001e      	movs	r6, r3
 8000850:	1b2d      	subs	r5, r5, r4
 8000852:	0004      	movs	r4, r0
 8000854:	40ab      	lsls	r3, r5
 8000856:	40ac      	lsls	r4, r5
 8000858:	40d6      	lsrs	r6, r2
 800085a:	40d0      	lsrs	r0, r2
 800085c:	4642      	mov	r2, r8
 800085e:	1e5d      	subs	r5, r3, #1
 8000860:	41ab      	sbcs	r3, r5
 8000862:	4334      	orrs	r4, r6
 8000864:	1a12      	subs	r2, r2, r0
 8000866:	4690      	mov	r8, r2
 8000868:	4323      	orrs	r3, r4
 800086a:	e02c      	b.n	80008c6 <__aeabi_dadd+0x432>
 800086c:	0742      	lsls	r2, r0, #29
 800086e:	08db      	lsrs	r3, r3, #3
 8000870:	4313      	orrs	r3, r2
 8000872:	08c0      	lsrs	r0, r0, #3
 8000874:	e73b      	b.n	80006ee <__aeabi_dadd+0x25a>
 8000876:	185c      	adds	r4, r3, r1
 8000878:	429c      	cmp	r4, r3
 800087a:	419b      	sbcs	r3, r3
 800087c:	4440      	add	r0, r8
 800087e:	425b      	negs	r3, r3
 8000880:	18c7      	adds	r7, r0, r3
 8000882:	2601      	movs	r6, #1
 8000884:	023b      	lsls	r3, r7, #8
 8000886:	d400      	bmi.n	800088a <__aeabi_dadd+0x3f6>
 8000888:	e729      	b.n	80006de <__aeabi_dadd+0x24a>
 800088a:	2602      	movs	r6, #2
 800088c:	4a9e      	ldr	r2, [pc, #632]	; (8000b08 <__aeabi_dadd+0x674>)
 800088e:	0863      	lsrs	r3, r4, #1
 8000890:	4017      	ands	r7, r2
 8000892:	2201      	movs	r2, #1
 8000894:	4014      	ands	r4, r2
 8000896:	431c      	orrs	r4, r3
 8000898:	07fb      	lsls	r3, r7, #31
 800089a:	431c      	orrs	r4, r3
 800089c:	087f      	lsrs	r7, r7, #1
 800089e:	e673      	b.n	8000588 <__aeabi_dadd+0xf4>
 80008a0:	4644      	mov	r4, r8
 80008a2:	3a20      	subs	r2, #32
 80008a4:	40d4      	lsrs	r4, r2
 80008a6:	4662      	mov	r2, ip
 80008a8:	2a20      	cmp	r2, #32
 80008aa:	d005      	beq.n	80008b8 <__aeabi_dadd+0x424>
 80008ac:	4667      	mov	r7, ip
 80008ae:	2240      	movs	r2, #64	; 0x40
 80008b0:	1bd2      	subs	r2, r2, r7
 80008b2:	4647      	mov	r7, r8
 80008b4:	4097      	lsls	r7, r2
 80008b6:	4339      	orrs	r1, r7
 80008b8:	1e4a      	subs	r2, r1, #1
 80008ba:	4191      	sbcs	r1, r2
 80008bc:	4321      	orrs	r1, r4
 80008be:	e635      	b.n	800052c <__aeabi_dadd+0x98>
 80008c0:	4303      	orrs	r3, r0
 80008c2:	1e58      	subs	r0, r3, #1
 80008c4:	4183      	sbcs	r3, r0
 80008c6:	1acc      	subs	r4, r1, r3
 80008c8:	42a1      	cmp	r1, r4
 80008ca:	41bf      	sbcs	r7, r7
 80008cc:	4643      	mov	r3, r8
 80008ce:	427f      	negs	r7, r7
 80008d0:	4655      	mov	r5, sl
 80008d2:	464e      	mov	r6, r9
 80008d4:	1bdf      	subs	r7, r3, r7
 80008d6:	e62e      	b.n	8000536 <__aeabi_dadd+0xa2>
 80008d8:	0002      	movs	r2, r0
 80008da:	431a      	orrs	r2, r3
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x44c>
 80008de:	e0bd      	b.n	8000a5c <__aeabi_dadd+0x5c8>
 80008e0:	4662      	mov	r2, ip
 80008e2:	4664      	mov	r4, ip
 80008e4:	3a01      	subs	r2, #1
 80008e6:	2c01      	cmp	r4, #1
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x458>
 80008ea:	e0e5      	b.n	8000ab8 <__aeabi_dadd+0x624>
 80008ec:	4c85      	ldr	r4, [pc, #532]	; (8000b04 <__aeabi_dadd+0x670>)
 80008ee:	45a4      	cmp	ip, r4
 80008f0:	d058      	beq.n	80009a4 <__aeabi_dadd+0x510>
 80008f2:	4694      	mov	ip, r2
 80008f4:	e749      	b.n	800078a <__aeabi_dadd+0x2f6>
 80008f6:	4664      	mov	r4, ip
 80008f8:	2220      	movs	r2, #32
 80008fa:	1b12      	subs	r2, r2, r4
 80008fc:	4644      	mov	r4, r8
 80008fe:	4094      	lsls	r4, r2
 8000900:	000f      	movs	r7, r1
 8000902:	46a1      	mov	r9, r4
 8000904:	4664      	mov	r4, ip
 8000906:	4091      	lsls	r1, r2
 8000908:	40e7      	lsrs	r7, r4
 800090a:	464c      	mov	r4, r9
 800090c:	1e4a      	subs	r2, r1, #1
 800090e:	4191      	sbcs	r1, r2
 8000910:	433c      	orrs	r4, r7
 8000912:	4642      	mov	r2, r8
 8000914:	430c      	orrs	r4, r1
 8000916:	4661      	mov	r1, ip
 8000918:	40ca      	lsrs	r2, r1
 800091a:	1880      	adds	r0, r0, r2
 800091c:	e6f4      	b.n	8000708 <__aeabi_dadd+0x274>
 800091e:	4c79      	ldr	r4, [pc, #484]	; (8000b04 <__aeabi_dadd+0x670>)
 8000920:	42a2      	cmp	r2, r4
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x492>
 8000924:	e6fd      	b.n	8000722 <__aeabi_dadd+0x28e>
 8000926:	1859      	adds	r1, r3, r1
 8000928:	4299      	cmp	r1, r3
 800092a:	419b      	sbcs	r3, r3
 800092c:	4440      	add	r0, r8
 800092e:	425f      	negs	r7, r3
 8000930:	19c7      	adds	r7, r0, r7
 8000932:	07fc      	lsls	r4, r7, #31
 8000934:	0849      	lsrs	r1, r1, #1
 8000936:	0016      	movs	r6, r2
 8000938:	430c      	orrs	r4, r1
 800093a:	087f      	lsrs	r7, r7, #1
 800093c:	e6cf      	b.n	80006de <__aeabi_dadd+0x24a>
 800093e:	1acc      	subs	r4, r1, r3
 8000940:	42a1      	cmp	r1, r4
 8000942:	41bf      	sbcs	r7, r7
 8000944:	4643      	mov	r3, r8
 8000946:	427f      	negs	r7, r7
 8000948:	1a18      	subs	r0, r3, r0
 800094a:	4655      	mov	r5, sl
 800094c:	1bc7      	subs	r7, r0, r7
 800094e:	e5f7      	b.n	8000540 <__aeabi_dadd+0xac>
 8000950:	08c9      	lsrs	r1, r1, #3
 8000952:	077b      	lsls	r3, r7, #29
 8000954:	4655      	mov	r5, sl
 8000956:	430b      	orrs	r3, r1
 8000958:	08f8      	lsrs	r0, r7, #3
 800095a:	e6c8      	b.n	80006ee <__aeabi_dadd+0x25a>
 800095c:	2c00      	cmp	r4, #0
 800095e:	d000      	beq.n	8000962 <__aeabi_dadd+0x4ce>
 8000960:	e081      	b.n	8000a66 <__aeabi_dadd+0x5d2>
 8000962:	4643      	mov	r3, r8
 8000964:	430b      	orrs	r3, r1
 8000966:	d115      	bne.n	8000994 <__aeabi_dadd+0x500>
 8000968:	2080      	movs	r0, #128	; 0x80
 800096a:	2500      	movs	r5, #0
 800096c:	0300      	lsls	r0, r0, #12
 800096e:	e6e3      	b.n	8000738 <__aeabi_dadd+0x2a4>
 8000970:	1a5c      	subs	r4, r3, r1
 8000972:	42a3      	cmp	r3, r4
 8000974:	419b      	sbcs	r3, r3
 8000976:	1bc7      	subs	r7, r0, r7
 8000978:	425b      	negs	r3, r3
 800097a:	2601      	movs	r6, #1
 800097c:	1aff      	subs	r7, r7, r3
 800097e:	e5da      	b.n	8000536 <__aeabi_dadd+0xa2>
 8000980:	0742      	lsls	r2, r0, #29
 8000982:	08db      	lsrs	r3, r3, #3
 8000984:	4313      	orrs	r3, r2
 8000986:	08c0      	lsrs	r0, r0, #3
 8000988:	e6d2      	b.n	8000730 <__aeabi_dadd+0x29c>
 800098a:	0742      	lsls	r2, r0, #29
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	4313      	orrs	r3, r2
 8000990:	08c0      	lsrs	r0, r0, #3
 8000992:	e6ac      	b.n	80006ee <__aeabi_dadd+0x25a>
 8000994:	4643      	mov	r3, r8
 8000996:	4642      	mov	r2, r8
 8000998:	08c9      	lsrs	r1, r1, #3
 800099a:	075b      	lsls	r3, r3, #29
 800099c:	4655      	mov	r5, sl
 800099e:	430b      	orrs	r3, r1
 80009a0:	08d0      	lsrs	r0, r2, #3
 80009a2:	e6c5      	b.n	8000730 <__aeabi_dadd+0x29c>
 80009a4:	4643      	mov	r3, r8
 80009a6:	4642      	mov	r2, r8
 80009a8:	075b      	lsls	r3, r3, #29
 80009aa:	08c9      	lsrs	r1, r1, #3
 80009ac:	430b      	orrs	r3, r1
 80009ae:	08d0      	lsrs	r0, r2, #3
 80009b0:	e6be      	b.n	8000730 <__aeabi_dadd+0x29c>
 80009b2:	4303      	orrs	r3, r0
 80009b4:	001c      	movs	r4, r3
 80009b6:	1e63      	subs	r3, r4, #1
 80009b8:	419c      	sbcs	r4, r3
 80009ba:	e6fc      	b.n	80007b6 <__aeabi_dadd+0x322>
 80009bc:	0002      	movs	r2, r0
 80009be:	3c20      	subs	r4, #32
 80009c0:	40e2      	lsrs	r2, r4
 80009c2:	0014      	movs	r4, r2
 80009c4:	4662      	mov	r2, ip
 80009c6:	2a20      	cmp	r2, #32
 80009c8:	d003      	beq.n	80009d2 <__aeabi_dadd+0x53e>
 80009ca:	2540      	movs	r5, #64	; 0x40
 80009cc:	1aad      	subs	r5, r5, r2
 80009ce:	40a8      	lsls	r0, r5
 80009d0:	4303      	orrs	r3, r0
 80009d2:	1e58      	subs	r0, r3, #1
 80009d4:	4183      	sbcs	r3, r0
 80009d6:	4323      	orrs	r3, r4
 80009d8:	e775      	b.n	80008c6 <__aeabi_dadd+0x432>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	d0e2      	beq.n	80009a4 <__aeabi_dadd+0x510>
 80009de:	003a      	movs	r2, r7
 80009e0:	430a      	orrs	r2, r1
 80009e2:	d0cd      	beq.n	8000980 <__aeabi_dadd+0x4ec>
 80009e4:	0742      	lsls	r2, r0, #29
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	2280      	movs	r2, #128	; 0x80
 80009ec:	08c0      	lsrs	r0, r0, #3
 80009ee:	0312      	lsls	r2, r2, #12
 80009f0:	4210      	tst	r0, r2
 80009f2:	d006      	beq.n	8000a02 <__aeabi_dadd+0x56e>
 80009f4:	08fc      	lsrs	r4, r7, #3
 80009f6:	4214      	tst	r4, r2
 80009f8:	d103      	bne.n	8000a02 <__aeabi_dadd+0x56e>
 80009fa:	0020      	movs	r0, r4
 80009fc:	08cb      	lsrs	r3, r1, #3
 80009fe:	077a      	lsls	r2, r7, #29
 8000a00:	4313      	orrs	r3, r2
 8000a02:	0f5a      	lsrs	r2, r3, #29
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	0752      	lsls	r2, r2, #29
 8000a08:	08db      	lsrs	r3, r3, #3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	e690      	b.n	8000730 <__aeabi_dadd+0x29c>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	430b      	orrs	r3, r1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0x582>
 8000a14:	e709      	b.n	800082a <__aeabi_dadd+0x396>
 8000a16:	4643      	mov	r3, r8
 8000a18:	4642      	mov	r2, r8
 8000a1a:	08c9      	lsrs	r1, r1, #3
 8000a1c:	075b      	lsls	r3, r3, #29
 8000a1e:	4655      	mov	r5, sl
 8000a20:	430b      	orrs	r3, r1
 8000a22:	08d0      	lsrs	r0, r2, #3
 8000a24:	e666      	b.n	80006f4 <__aeabi_dadd+0x260>
 8000a26:	1acc      	subs	r4, r1, r3
 8000a28:	42a1      	cmp	r1, r4
 8000a2a:	4189      	sbcs	r1, r1
 8000a2c:	1a3f      	subs	r7, r7, r0
 8000a2e:	4249      	negs	r1, r1
 8000a30:	4655      	mov	r5, sl
 8000a32:	2601      	movs	r6, #1
 8000a34:	1a7f      	subs	r7, r7, r1
 8000a36:	e57e      	b.n	8000536 <__aeabi_dadd+0xa2>
 8000a38:	4642      	mov	r2, r8
 8000a3a:	1a5c      	subs	r4, r3, r1
 8000a3c:	1a87      	subs	r7, r0, r2
 8000a3e:	42a3      	cmp	r3, r4
 8000a40:	4192      	sbcs	r2, r2
 8000a42:	4252      	negs	r2, r2
 8000a44:	1abf      	subs	r7, r7, r2
 8000a46:	023a      	lsls	r2, r7, #8
 8000a48:	d53d      	bpl.n	8000ac6 <__aeabi_dadd+0x632>
 8000a4a:	1acc      	subs	r4, r1, r3
 8000a4c:	42a1      	cmp	r1, r4
 8000a4e:	4189      	sbcs	r1, r1
 8000a50:	4643      	mov	r3, r8
 8000a52:	4249      	negs	r1, r1
 8000a54:	1a1f      	subs	r7, r3, r0
 8000a56:	4655      	mov	r5, sl
 8000a58:	1a7f      	subs	r7, r7, r1
 8000a5a:	e595      	b.n	8000588 <__aeabi_dadd+0xf4>
 8000a5c:	077b      	lsls	r3, r7, #29
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	430b      	orrs	r3, r1
 8000a62:	08f8      	lsrs	r0, r7, #3
 8000a64:	e643      	b.n	80006ee <__aeabi_dadd+0x25a>
 8000a66:	4644      	mov	r4, r8
 8000a68:	08db      	lsrs	r3, r3, #3
 8000a6a:	430c      	orrs	r4, r1
 8000a6c:	d130      	bne.n	8000ad0 <__aeabi_dadd+0x63c>
 8000a6e:	0742      	lsls	r2, r0, #29
 8000a70:	4313      	orrs	r3, r2
 8000a72:	08c0      	lsrs	r0, r0, #3
 8000a74:	e65c      	b.n	8000730 <__aeabi_dadd+0x29c>
 8000a76:	077b      	lsls	r3, r7, #29
 8000a78:	08c9      	lsrs	r1, r1, #3
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	08f8      	lsrs	r0, r7, #3
 8000a7e:	e639      	b.n	80006f4 <__aeabi_dadd+0x260>
 8000a80:	185c      	adds	r4, r3, r1
 8000a82:	429c      	cmp	r4, r3
 8000a84:	419b      	sbcs	r3, r3
 8000a86:	4440      	add	r0, r8
 8000a88:	425b      	negs	r3, r3
 8000a8a:	18c7      	adds	r7, r0, r3
 8000a8c:	023b      	lsls	r3, r7, #8
 8000a8e:	d400      	bmi.n	8000a92 <__aeabi_dadd+0x5fe>
 8000a90:	e625      	b.n	80006de <__aeabi_dadd+0x24a>
 8000a92:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <__aeabi_dadd+0x674>)
 8000a94:	2601      	movs	r6, #1
 8000a96:	401f      	ands	r7, r3
 8000a98:	e621      	b.n	80006de <__aeabi_dadd+0x24a>
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	3a20      	subs	r2, #32
 8000a9e:	40d4      	lsrs	r4, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	2a20      	cmp	r2, #32
 8000aa4:	d004      	beq.n	8000ab0 <__aeabi_dadd+0x61c>
 8000aa6:	2240      	movs	r2, #64	; 0x40
 8000aa8:	4666      	mov	r6, ip
 8000aaa:	1b92      	subs	r2, r2, r6
 8000aac:	4090      	lsls	r0, r2
 8000aae:	4303      	orrs	r3, r0
 8000ab0:	1e5a      	subs	r2, r3, #1
 8000ab2:	4193      	sbcs	r3, r2
 8000ab4:	431c      	orrs	r4, r3
 8000ab6:	e67e      	b.n	80007b6 <__aeabi_dadd+0x322>
 8000ab8:	185c      	adds	r4, r3, r1
 8000aba:	428c      	cmp	r4, r1
 8000abc:	4189      	sbcs	r1, r1
 8000abe:	4440      	add	r0, r8
 8000ac0:	4249      	negs	r1, r1
 8000ac2:	1847      	adds	r7, r0, r1
 8000ac4:	e6dd      	b.n	8000882 <__aeabi_dadd+0x3ee>
 8000ac6:	0023      	movs	r3, r4
 8000ac8:	433b      	orrs	r3, r7
 8000aca:	d100      	bne.n	8000ace <__aeabi_dadd+0x63a>
 8000acc:	e6ad      	b.n	800082a <__aeabi_dadd+0x396>
 8000ace:	e606      	b.n	80006de <__aeabi_dadd+0x24a>
 8000ad0:	0744      	lsls	r4, r0, #29
 8000ad2:	4323      	orrs	r3, r4
 8000ad4:	2480      	movs	r4, #128	; 0x80
 8000ad6:	08c0      	lsrs	r0, r0, #3
 8000ad8:	0324      	lsls	r4, r4, #12
 8000ada:	4220      	tst	r0, r4
 8000adc:	d008      	beq.n	8000af0 <__aeabi_dadd+0x65c>
 8000ade:	4642      	mov	r2, r8
 8000ae0:	08d6      	lsrs	r6, r2, #3
 8000ae2:	4226      	tst	r6, r4
 8000ae4:	d104      	bne.n	8000af0 <__aeabi_dadd+0x65c>
 8000ae6:	4655      	mov	r5, sl
 8000ae8:	0030      	movs	r0, r6
 8000aea:	08cb      	lsrs	r3, r1, #3
 8000aec:	0751      	lsls	r1, r2, #29
 8000aee:	430b      	orrs	r3, r1
 8000af0:	0f5a      	lsrs	r2, r3, #29
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	0752      	lsls	r2, r2, #29
 8000af8:	4313      	orrs	r3, r2
 8000afa:	e619      	b.n	8000730 <__aeabi_dadd+0x29c>
 8000afc:	2300      	movs	r3, #0
 8000afe:	4a01      	ldr	r2, [pc, #4]	; (8000b04 <__aeabi_dadd+0x670>)
 8000b00:	001f      	movs	r7, r3
 8000b02:	e55e      	b.n	80005c2 <__aeabi_dadd+0x12e>
 8000b04:	000007ff 	.word	0x000007ff
 8000b08:	ff7fffff 	.word	0xff7fffff

08000b0c <__aeabi_ddiv>:
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0e:	4657      	mov	r7, sl
 8000b10:	464e      	mov	r6, r9
 8000b12:	4645      	mov	r5, r8
 8000b14:	46de      	mov	lr, fp
 8000b16:	b5e0      	push	{r5, r6, r7, lr}
 8000b18:	4681      	mov	r9, r0
 8000b1a:	0005      	movs	r5, r0
 8000b1c:	030c      	lsls	r4, r1, #12
 8000b1e:	0048      	lsls	r0, r1, #1
 8000b20:	4692      	mov	sl, r2
 8000b22:	001f      	movs	r7, r3
 8000b24:	b085      	sub	sp, #20
 8000b26:	0b24      	lsrs	r4, r4, #12
 8000b28:	0d40      	lsrs	r0, r0, #21
 8000b2a:	0fce      	lsrs	r6, r1, #31
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_ddiv+0x26>
 8000b30:	e156      	b.n	8000de0 <__aeabi_ddiv+0x2d4>
 8000b32:	4bd4      	ldr	r3, [pc, #848]	; (8000e84 <__aeabi_ddiv+0x378>)
 8000b34:	4298      	cmp	r0, r3
 8000b36:	d100      	bne.n	8000b3a <__aeabi_ddiv+0x2e>
 8000b38:	e172      	b.n	8000e20 <__aeabi_ddiv+0x314>
 8000b3a:	0f6b      	lsrs	r3, r5, #29
 8000b3c:	00e4      	lsls	r4, r4, #3
 8000b3e:	431c      	orrs	r4, r3
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	041b      	lsls	r3, r3, #16
 8000b44:	4323      	orrs	r3, r4
 8000b46:	4698      	mov	r8, r3
 8000b48:	4bcf      	ldr	r3, [pc, #828]	; (8000e88 <__aeabi_ddiv+0x37c>)
 8000b4a:	00ed      	lsls	r5, r5, #3
 8000b4c:	469b      	mov	fp, r3
 8000b4e:	2300      	movs	r3, #0
 8000b50:	4699      	mov	r9, r3
 8000b52:	4483      	add	fp, r0
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	033c      	lsls	r4, r7, #12
 8000b58:	007b      	lsls	r3, r7, #1
 8000b5a:	4650      	mov	r0, sl
 8000b5c:	0b24      	lsrs	r4, r4, #12
 8000b5e:	0d5b      	lsrs	r3, r3, #21
 8000b60:	0fff      	lsrs	r7, r7, #31
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d100      	bne.n	8000b68 <__aeabi_ddiv+0x5c>
 8000b66:	e11f      	b.n	8000da8 <__aeabi_ddiv+0x29c>
 8000b68:	4ac6      	ldr	r2, [pc, #792]	; (8000e84 <__aeabi_ddiv+0x378>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_ddiv+0x64>
 8000b6e:	e162      	b.n	8000e36 <__aeabi_ddiv+0x32a>
 8000b70:	49c5      	ldr	r1, [pc, #788]	; (8000e88 <__aeabi_ddiv+0x37c>)
 8000b72:	0f42      	lsrs	r2, r0, #29
 8000b74:	468c      	mov	ip, r1
 8000b76:	00e4      	lsls	r4, r4, #3
 8000b78:	4659      	mov	r1, fp
 8000b7a:	4314      	orrs	r4, r2
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	4463      	add	r3, ip
 8000b80:	0412      	lsls	r2, r2, #16
 8000b82:	1acb      	subs	r3, r1, r3
 8000b84:	4314      	orrs	r4, r2
 8000b86:	469b      	mov	fp, r3
 8000b88:	00c2      	lsls	r2, r0, #3
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	0033      	movs	r3, r6
 8000b8e:	407b      	eors	r3, r7
 8000b90:	469a      	mov	sl, r3
 8000b92:	464b      	mov	r3, r9
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d827      	bhi.n	8000be8 <__aeabi_ddiv+0xdc>
 8000b98:	49bc      	ldr	r1, [pc, #752]	; (8000e8c <__aeabi_ddiv+0x380>)
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	58cb      	ldr	r3, [r1, r3]
 8000b9e:	469f      	mov	pc, r3
 8000ba0:	46b2      	mov	sl, r6
 8000ba2:	9b00      	ldr	r3, [sp, #0]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d016      	beq.n	8000bd6 <__aeabi_ddiv+0xca>
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d100      	bne.n	8000bae <__aeabi_ddiv+0xa2>
 8000bac:	e28e      	b.n	80010cc <__aeabi_ddiv+0x5c0>
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_ddiv+0xa8>
 8000bb2:	e0d9      	b.n	8000d68 <__aeabi_ddiv+0x25c>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	2400      	movs	r4, #0
 8000bb8:	2500      	movs	r5, #0
 8000bba:	4652      	mov	r2, sl
 8000bbc:	051b      	lsls	r3, r3, #20
 8000bbe:	4323      	orrs	r3, r4
 8000bc0:	07d2      	lsls	r2, r2, #31
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	0028      	movs	r0, r5
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	b005      	add	sp, #20
 8000bca:	bcf0      	pop	{r4, r5, r6, r7}
 8000bcc:	46bb      	mov	fp, r7
 8000bce:	46b2      	mov	sl, r6
 8000bd0:	46a9      	mov	r9, r5
 8000bd2:	46a0      	mov	r8, r4
 8000bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bd6:	2400      	movs	r4, #0
 8000bd8:	2500      	movs	r5, #0
 8000bda:	4baa      	ldr	r3, [pc, #680]	; (8000e84 <__aeabi_ddiv+0x378>)
 8000bdc:	e7ed      	b.n	8000bba <__aeabi_ddiv+0xae>
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46a0      	mov	r8, r4
 8000be2:	0015      	movs	r5, r2
 8000be4:	9000      	str	r0, [sp, #0]
 8000be6:	e7dc      	b.n	8000ba2 <__aeabi_ddiv+0x96>
 8000be8:	4544      	cmp	r4, r8
 8000bea:	d200      	bcs.n	8000bee <__aeabi_ddiv+0xe2>
 8000bec:	e1c7      	b.n	8000f7e <__aeabi_ddiv+0x472>
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_ddiv+0xe6>
 8000bf0:	e1c2      	b.n	8000f78 <__aeabi_ddiv+0x46c>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	425b      	negs	r3, r3
 8000bf6:	469c      	mov	ip, r3
 8000bf8:	002e      	movs	r6, r5
 8000bfa:	4640      	mov	r0, r8
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	44e3      	add	fp, ip
 8000c00:	0223      	lsls	r3, r4, #8
 8000c02:	0e14      	lsrs	r4, r2, #24
 8000c04:	431c      	orrs	r4, r3
 8000c06:	0c1b      	lsrs	r3, r3, #16
 8000c08:	4699      	mov	r9, r3
 8000c0a:	0423      	lsls	r3, r4, #16
 8000c0c:	0c1f      	lsrs	r7, r3, #16
 8000c0e:	0212      	lsls	r2, r2, #8
 8000c10:	4649      	mov	r1, r9
 8000c12:	9200      	str	r2, [sp, #0]
 8000c14:	9701      	str	r7, [sp, #4]
 8000c16:	f7ff fb0f 	bl	8000238 <__aeabi_uidivmod>
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	437a      	muls	r2, r7
 8000c1e:	040b      	lsls	r3, r1, #16
 8000c20:	0c31      	lsrs	r1, r6, #16
 8000c22:	4680      	mov	r8, r0
 8000c24:	4319      	orrs	r1, r3
 8000c26:	428a      	cmp	r2, r1
 8000c28:	d907      	bls.n	8000c3a <__aeabi_ddiv+0x12e>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	469c      	mov	ip, r3
 8000c30:	1909      	adds	r1, r1, r4
 8000c32:	44e0      	add	r8, ip
 8000c34:	428c      	cmp	r4, r1
 8000c36:	d800      	bhi.n	8000c3a <__aeabi_ddiv+0x12e>
 8000c38:	e207      	b.n	800104a <__aeabi_ddiv+0x53e>
 8000c3a:	1a88      	subs	r0, r1, r2
 8000c3c:	4649      	mov	r1, r9
 8000c3e:	f7ff fafb 	bl	8000238 <__aeabi_uidivmod>
 8000c42:	0409      	lsls	r1, r1, #16
 8000c44:	468c      	mov	ip, r1
 8000c46:	0431      	lsls	r1, r6, #16
 8000c48:	4666      	mov	r6, ip
 8000c4a:	9a01      	ldr	r2, [sp, #4]
 8000c4c:	0c09      	lsrs	r1, r1, #16
 8000c4e:	4342      	muls	r2, r0
 8000c50:	0003      	movs	r3, r0
 8000c52:	4331      	orrs	r1, r6
 8000c54:	428a      	cmp	r2, r1
 8000c56:	d904      	bls.n	8000c62 <__aeabi_ddiv+0x156>
 8000c58:	1909      	adds	r1, r1, r4
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	428c      	cmp	r4, r1
 8000c5e:	d800      	bhi.n	8000c62 <__aeabi_ddiv+0x156>
 8000c60:	e1ed      	b.n	800103e <__aeabi_ddiv+0x532>
 8000c62:	1a88      	subs	r0, r1, r2
 8000c64:	4642      	mov	r2, r8
 8000c66:	0412      	lsls	r2, r2, #16
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	4690      	mov	r8, r2
 8000c6c:	4641      	mov	r1, r8
 8000c6e:	9b00      	ldr	r3, [sp, #0]
 8000c70:	040e      	lsls	r6, r1, #16
 8000c72:	0c1b      	lsrs	r3, r3, #16
 8000c74:	001f      	movs	r7, r3
 8000c76:	9302      	str	r3, [sp, #8]
 8000c78:	9b00      	ldr	r3, [sp, #0]
 8000c7a:	0c36      	lsrs	r6, r6, #16
 8000c7c:	041b      	lsls	r3, r3, #16
 8000c7e:	0c19      	lsrs	r1, r3, #16
 8000c80:	000b      	movs	r3, r1
 8000c82:	4373      	muls	r3, r6
 8000c84:	0c12      	lsrs	r2, r2, #16
 8000c86:	437e      	muls	r6, r7
 8000c88:	9103      	str	r1, [sp, #12]
 8000c8a:	4351      	muls	r1, r2
 8000c8c:	437a      	muls	r2, r7
 8000c8e:	0c1f      	lsrs	r7, r3, #16
 8000c90:	46bc      	mov	ip, r7
 8000c92:	1876      	adds	r6, r6, r1
 8000c94:	4466      	add	r6, ip
 8000c96:	42b1      	cmp	r1, r6
 8000c98:	d903      	bls.n	8000ca2 <__aeabi_ddiv+0x196>
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	0249      	lsls	r1, r1, #9
 8000c9e:	468c      	mov	ip, r1
 8000ca0:	4462      	add	r2, ip
 8000ca2:	0c31      	lsrs	r1, r6, #16
 8000ca4:	188a      	adds	r2, r1, r2
 8000ca6:	0431      	lsls	r1, r6, #16
 8000ca8:	041e      	lsls	r6, r3, #16
 8000caa:	0c36      	lsrs	r6, r6, #16
 8000cac:	198e      	adds	r6, r1, r6
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	d302      	bcc.n	8000cb8 <__aeabi_ddiv+0x1ac>
 8000cb2:	d112      	bne.n	8000cda <__aeabi_ddiv+0x1ce>
 8000cb4:	42b5      	cmp	r5, r6
 8000cb6:	d210      	bcs.n	8000cda <__aeabi_ddiv+0x1ce>
 8000cb8:	4643      	mov	r3, r8
 8000cba:	1e59      	subs	r1, r3, #1
 8000cbc:	9b00      	ldr	r3, [sp, #0]
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	4465      	add	r5, ip
 8000cc2:	001f      	movs	r7, r3
 8000cc4:	429d      	cmp	r5, r3
 8000cc6:	419b      	sbcs	r3, r3
 8000cc8:	425b      	negs	r3, r3
 8000cca:	191b      	adds	r3, r3, r4
 8000ccc:	18c0      	adds	r0, r0, r3
 8000cce:	4284      	cmp	r4, r0
 8000cd0:	d200      	bcs.n	8000cd4 <__aeabi_ddiv+0x1c8>
 8000cd2:	e1a0      	b.n	8001016 <__aeabi_ddiv+0x50a>
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_ddiv+0x1cc>
 8000cd6:	e19b      	b.n	8001010 <__aeabi_ddiv+0x504>
 8000cd8:	4688      	mov	r8, r1
 8000cda:	1bae      	subs	r6, r5, r6
 8000cdc:	42b5      	cmp	r5, r6
 8000cde:	41ad      	sbcs	r5, r5
 8000ce0:	1a80      	subs	r0, r0, r2
 8000ce2:	426d      	negs	r5, r5
 8000ce4:	1b40      	subs	r0, r0, r5
 8000ce6:	4284      	cmp	r4, r0
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x1e0>
 8000cea:	e1d5      	b.n	8001098 <__aeabi_ddiv+0x58c>
 8000cec:	4649      	mov	r1, r9
 8000cee:	f7ff faa3 	bl	8000238 <__aeabi_uidivmod>
 8000cf2:	9a01      	ldr	r2, [sp, #4]
 8000cf4:	040b      	lsls	r3, r1, #16
 8000cf6:	4342      	muls	r2, r0
 8000cf8:	0c31      	lsrs	r1, r6, #16
 8000cfa:	0005      	movs	r5, r0
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	428a      	cmp	r2, r1
 8000d00:	d900      	bls.n	8000d04 <__aeabi_ddiv+0x1f8>
 8000d02:	e16c      	b.n	8000fde <__aeabi_ddiv+0x4d2>
 8000d04:	1a88      	subs	r0, r1, r2
 8000d06:	4649      	mov	r1, r9
 8000d08:	f7ff fa96 	bl	8000238 <__aeabi_uidivmod>
 8000d0c:	9a01      	ldr	r2, [sp, #4]
 8000d0e:	0436      	lsls	r6, r6, #16
 8000d10:	4342      	muls	r2, r0
 8000d12:	0409      	lsls	r1, r1, #16
 8000d14:	0c36      	lsrs	r6, r6, #16
 8000d16:	0003      	movs	r3, r0
 8000d18:	430e      	orrs	r6, r1
 8000d1a:	42b2      	cmp	r2, r6
 8000d1c:	d900      	bls.n	8000d20 <__aeabi_ddiv+0x214>
 8000d1e:	e153      	b.n	8000fc8 <__aeabi_ddiv+0x4bc>
 8000d20:	9803      	ldr	r0, [sp, #12]
 8000d22:	1ab6      	subs	r6, r6, r2
 8000d24:	0002      	movs	r2, r0
 8000d26:	042d      	lsls	r5, r5, #16
 8000d28:	431d      	orrs	r5, r3
 8000d2a:	9f02      	ldr	r7, [sp, #8]
 8000d2c:	042b      	lsls	r3, r5, #16
 8000d2e:	0c1b      	lsrs	r3, r3, #16
 8000d30:	435a      	muls	r2, r3
 8000d32:	437b      	muls	r3, r7
 8000d34:	469c      	mov	ip, r3
 8000d36:	0c29      	lsrs	r1, r5, #16
 8000d38:	4348      	muls	r0, r1
 8000d3a:	0c13      	lsrs	r3, r2, #16
 8000d3c:	4484      	add	ip, r0
 8000d3e:	4463      	add	r3, ip
 8000d40:	4379      	muls	r1, r7
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d903      	bls.n	8000d4e <__aeabi_ddiv+0x242>
 8000d46:	2080      	movs	r0, #128	; 0x80
 8000d48:	0240      	lsls	r0, r0, #9
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	4461      	add	r1, ip
 8000d4e:	0c18      	lsrs	r0, r3, #16
 8000d50:	0412      	lsls	r2, r2, #16
 8000d52:	041b      	lsls	r3, r3, #16
 8000d54:	0c12      	lsrs	r2, r2, #16
 8000d56:	1841      	adds	r1, r0, r1
 8000d58:	189b      	adds	r3, r3, r2
 8000d5a:	428e      	cmp	r6, r1
 8000d5c:	d200      	bcs.n	8000d60 <__aeabi_ddiv+0x254>
 8000d5e:	e0ff      	b.n	8000f60 <__aeabi_ddiv+0x454>
 8000d60:	d100      	bne.n	8000d64 <__aeabi_ddiv+0x258>
 8000d62:	e0fa      	b.n	8000f5a <__aeabi_ddiv+0x44e>
 8000d64:	2301      	movs	r3, #1
 8000d66:	431d      	orrs	r5, r3
 8000d68:	4a49      	ldr	r2, [pc, #292]	; (8000e90 <__aeabi_ddiv+0x384>)
 8000d6a:	445a      	add	r2, fp
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	dc00      	bgt.n	8000d72 <__aeabi_ddiv+0x266>
 8000d70:	e0aa      	b.n	8000ec8 <__aeabi_ddiv+0x3bc>
 8000d72:	076b      	lsls	r3, r5, #29
 8000d74:	d000      	beq.n	8000d78 <__aeabi_ddiv+0x26c>
 8000d76:	e13d      	b.n	8000ff4 <__aeabi_ddiv+0x4e8>
 8000d78:	08ed      	lsrs	r5, r5, #3
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	01db      	lsls	r3, r3, #7
 8000d7e:	d506      	bpl.n	8000d8e <__aeabi_ddiv+0x282>
 8000d80:	4642      	mov	r2, r8
 8000d82:	4b44      	ldr	r3, [pc, #272]	; (8000e94 <__aeabi_ddiv+0x388>)
 8000d84:	401a      	ands	r2, r3
 8000d86:	4690      	mov	r8, r2
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	00d2      	lsls	r2, r2, #3
 8000d8c:	445a      	add	r2, fp
 8000d8e:	4b42      	ldr	r3, [pc, #264]	; (8000e98 <__aeabi_ddiv+0x38c>)
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dd00      	ble.n	8000d96 <__aeabi_ddiv+0x28a>
 8000d94:	e71f      	b.n	8000bd6 <__aeabi_ddiv+0xca>
 8000d96:	4643      	mov	r3, r8
 8000d98:	075b      	lsls	r3, r3, #29
 8000d9a:	431d      	orrs	r5, r3
 8000d9c:	4643      	mov	r3, r8
 8000d9e:	0552      	lsls	r2, r2, #21
 8000da0:	025c      	lsls	r4, r3, #9
 8000da2:	0b24      	lsrs	r4, r4, #12
 8000da4:	0d53      	lsrs	r3, r2, #21
 8000da6:	e708      	b.n	8000bba <__aeabi_ddiv+0xae>
 8000da8:	4652      	mov	r2, sl
 8000daa:	4322      	orrs	r2, r4
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x2a4>
 8000dae:	e07b      	b.n	8000ea8 <__aeabi_ddiv+0x39c>
 8000db0:	2c00      	cmp	r4, #0
 8000db2:	d100      	bne.n	8000db6 <__aeabi_ddiv+0x2aa>
 8000db4:	e0fa      	b.n	8000fac <__aeabi_ddiv+0x4a0>
 8000db6:	0020      	movs	r0, r4
 8000db8:	f001 f90e 	bl	8001fd8 <__clzsi2>
 8000dbc:	0002      	movs	r2, r0
 8000dbe:	3a0b      	subs	r2, #11
 8000dc0:	231d      	movs	r3, #29
 8000dc2:	0001      	movs	r1, r0
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	4652      	mov	r2, sl
 8000dc8:	3908      	subs	r1, #8
 8000dca:	40da      	lsrs	r2, r3
 8000dcc:	408c      	lsls	r4, r1
 8000dce:	4314      	orrs	r4, r2
 8000dd0:	4652      	mov	r2, sl
 8000dd2:	408a      	lsls	r2, r1
 8000dd4:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <__aeabi_ddiv+0x390>)
 8000dd6:	4458      	add	r0, fp
 8000dd8:	469b      	mov	fp, r3
 8000dda:	4483      	add	fp, r0
 8000ddc:	2000      	movs	r0, #0
 8000dde:	e6d5      	b.n	8000b8c <__aeabi_ddiv+0x80>
 8000de0:	464b      	mov	r3, r9
 8000de2:	4323      	orrs	r3, r4
 8000de4:	4698      	mov	r8, r3
 8000de6:	d044      	beq.n	8000e72 <__aeabi_ddiv+0x366>
 8000de8:	2c00      	cmp	r4, #0
 8000dea:	d100      	bne.n	8000dee <__aeabi_ddiv+0x2e2>
 8000dec:	e0ce      	b.n	8000f8c <__aeabi_ddiv+0x480>
 8000dee:	0020      	movs	r0, r4
 8000df0:	f001 f8f2 	bl	8001fd8 <__clzsi2>
 8000df4:	0001      	movs	r1, r0
 8000df6:	0002      	movs	r2, r0
 8000df8:	390b      	subs	r1, #11
 8000dfa:	231d      	movs	r3, #29
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	4649      	mov	r1, r9
 8000e00:	0010      	movs	r0, r2
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	3808      	subs	r0, #8
 8000e06:	4084      	lsls	r4, r0
 8000e08:	000b      	movs	r3, r1
 8000e0a:	464d      	mov	r5, r9
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	4698      	mov	r8, r3
 8000e10:	4085      	lsls	r5, r0
 8000e12:	4823      	ldr	r0, [pc, #140]	; (8000ea0 <__aeabi_ddiv+0x394>)
 8000e14:	1a83      	subs	r3, r0, r2
 8000e16:	469b      	mov	fp, r3
 8000e18:	2300      	movs	r3, #0
 8000e1a:	4699      	mov	r9, r3
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	e69a      	b.n	8000b56 <__aeabi_ddiv+0x4a>
 8000e20:	464b      	mov	r3, r9
 8000e22:	4323      	orrs	r3, r4
 8000e24:	4698      	mov	r8, r3
 8000e26:	d11d      	bne.n	8000e64 <__aeabi_ddiv+0x358>
 8000e28:	2308      	movs	r3, #8
 8000e2a:	4699      	mov	r9, r3
 8000e2c:	3b06      	subs	r3, #6
 8000e2e:	2500      	movs	r5, #0
 8000e30:	4683      	mov	fp, r0
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	e68f      	b.n	8000b56 <__aeabi_ddiv+0x4a>
 8000e36:	4652      	mov	r2, sl
 8000e38:	4322      	orrs	r2, r4
 8000e3a:	d109      	bne.n	8000e50 <__aeabi_ddiv+0x344>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	4649      	mov	r1, r9
 8000e40:	4319      	orrs	r1, r3
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <__aeabi_ddiv+0x398>)
 8000e44:	4689      	mov	r9, r1
 8000e46:	469c      	mov	ip, r3
 8000e48:	2400      	movs	r4, #0
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	44e3      	add	fp, ip
 8000e4e:	e69d      	b.n	8000b8c <__aeabi_ddiv+0x80>
 8000e50:	2303      	movs	r3, #3
 8000e52:	464a      	mov	r2, r9
 8000e54:	431a      	orrs	r2, r3
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <__aeabi_ddiv+0x398>)
 8000e58:	4691      	mov	r9, r2
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	4652      	mov	r2, sl
 8000e5e:	2003      	movs	r0, #3
 8000e60:	44e3      	add	fp, ip
 8000e62:	e693      	b.n	8000b8c <__aeabi_ddiv+0x80>
 8000e64:	230c      	movs	r3, #12
 8000e66:	4699      	mov	r9, r3
 8000e68:	3b09      	subs	r3, #9
 8000e6a:	46a0      	mov	r8, r4
 8000e6c:	4683      	mov	fp, r0
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	e671      	b.n	8000b56 <__aeabi_ddiv+0x4a>
 8000e72:	2304      	movs	r3, #4
 8000e74:	4699      	mov	r9, r3
 8000e76:	2300      	movs	r3, #0
 8000e78:	469b      	mov	fp, r3
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	e669      	b.n	8000b56 <__aeabi_ddiv+0x4a>
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	000007ff 	.word	0x000007ff
 8000e88:	fffffc01 	.word	0xfffffc01
 8000e8c:	08006d98 	.word	0x08006d98
 8000e90:	000003ff 	.word	0x000003ff
 8000e94:	feffffff 	.word	0xfeffffff
 8000e98:	000007fe 	.word	0x000007fe
 8000e9c:	000003f3 	.word	0x000003f3
 8000ea0:	fffffc0d 	.word	0xfffffc0d
 8000ea4:	fffff801 	.word	0xfffff801
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	2301      	movs	r3, #1
 8000eac:	4319      	orrs	r1, r3
 8000eae:	4689      	mov	r9, r1
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	e66a      	b.n	8000b8c <__aeabi_ddiv+0x80>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2480      	movs	r4, #128	; 0x80
 8000eba:	469a      	mov	sl, r3
 8000ebc:	2500      	movs	r5, #0
 8000ebe:	4b8a      	ldr	r3, [pc, #552]	; (80010e8 <__aeabi_ddiv+0x5dc>)
 8000ec0:	0324      	lsls	r4, r4, #12
 8000ec2:	e67a      	b.n	8000bba <__aeabi_ddiv+0xae>
 8000ec4:	2501      	movs	r5, #1
 8000ec6:	426d      	negs	r5, r5
 8000ec8:	2301      	movs	r3, #1
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	2b38      	cmp	r3, #56	; 0x38
 8000ece:	dd00      	ble.n	8000ed2 <__aeabi_ddiv+0x3c6>
 8000ed0:	e670      	b.n	8000bb4 <__aeabi_ddiv+0xa8>
 8000ed2:	2b1f      	cmp	r3, #31
 8000ed4:	dc00      	bgt.n	8000ed8 <__aeabi_ddiv+0x3cc>
 8000ed6:	e0bf      	b.n	8001058 <__aeabi_ddiv+0x54c>
 8000ed8:	211f      	movs	r1, #31
 8000eda:	4249      	negs	r1, r1
 8000edc:	1a8a      	subs	r2, r1, r2
 8000ede:	4641      	mov	r1, r8
 8000ee0:	40d1      	lsrs	r1, r2
 8000ee2:	000a      	movs	r2, r1
 8000ee4:	2b20      	cmp	r3, #32
 8000ee6:	d004      	beq.n	8000ef2 <__aeabi_ddiv+0x3e6>
 8000ee8:	4641      	mov	r1, r8
 8000eea:	4b80      	ldr	r3, [pc, #512]	; (80010ec <__aeabi_ddiv+0x5e0>)
 8000eec:	445b      	add	r3, fp
 8000eee:	4099      	lsls	r1, r3
 8000ef0:	430d      	orrs	r5, r1
 8000ef2:	1e6b      	subs	r3, r5, #1
 8000ef4:	419d      	sbcs	r5, r3
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	432a      	orrs	r2, r5
 8000efa:	001d      	movs	r5, r3
 8000efc:	2400      	movs	r4, #0
 8000efe:	4015      	ands	r5, r2
 8000f00:	4213      	tst	r3, r2
 8000f02:	d100      	bne.n	8000f06 <__aeabi_ddiv+0x3fa>
 8000f04:	e0d4      	b.n	80010b0 <__aeabi_ddiv+0x5a4>
 8000f06:	210f      	movs	r1, #15
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4011      	ands	r1, r2
 8000f0c:	2904      	cmp	r1, #4
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_ddiv+0x406>
 8000f10:	e0cb      	b.n	80010aa <__aeabi_ddiv+0x59e>
 8000f12:	1d11      	adds	r1, r2, #4
 8000f14:	4291      	cmp	r1, r2
 8000f16:	4192      	sbcs	r2, r2
 8000f18:	4252      	negs	r2, r2
 8000f1a:	189b      	adds	r3, r3, r2
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	0219      	lsls	r1, r3, #8
 8000f20:	d400      	bmi.n	8000f24 <__aeabi_ddiv+0x418>
 8000f22:	e0c2      	b.n	80010aa <__aeabi_ddiv+0x59e>
 8000f24:	2301      	movs	r3, #1
 8000f26:	2400      	movs	r4, #0
 8000f28:	2500      	movs	r5, #0
 8000f2a:	e646      	b.n	8000bba <__aeabi_ddiv+0xae>
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	4641      	mov	r1, r8
 8000f30:	031b      	lsls	r3, r3, #12
 8000f32:	4219      	tst	r1, r3
 8000f34:	d008      	beq.n	8000f48 <__aeabi_ddiv+0x43c>
 8000f36:	421c      	tst	r4, r3
 8000f38:	d106      	bne.n	8000f48 <__aeabi_ddiv+0x43c>
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	0324      	lsls	r4, r4, #12
 8000f3e:	46ba      	mov	sl, r7
 8000f40:	0015      	movs	r5, r2
 8000f42:	4b69      	ldr	r3, [pc, #420]	; (80010e8 <__aeabi_ddiv+0x5dc>)
 8000f44:	0b24      	lsrs	r4, r4, #12
 8000f46:	e638      	b.n	8000bba <__aeabi_ddiv+0xae>
 8000f48:	2480      	movs	r4, #128	; 0x80
 8000f4a:	4643      	mov	r3, r8
 8000f4c:	0324      	lsls	r4, r4, #12
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	0324      	lsls	r4, r4, #12
 8000f52:	46b2      	mov	sl, r6
 8000f54:	4b64      	ldr	r3, [pc, #400]	; (80010e8 <__aeabi_ddiv+0x5dc>)
 8000f56:	0b24      	lsrs	r4, r4, #12
 8000f58:	e62f      	b.n	8000bba <__aeabi_ddiv+0xae>
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_ddiv+0x454>
 8000f5e:	e703      	b.n	8000d68 <__aeabi_ddiv+0x25c>
 8000f60:	19a6      	adds	r6, r4, r6
 8000f62:	1e68      	subs	r0, r5, #1
 8000f64:	42a6      	cmp	r6, r4
 8000f66:	d200      	bcs.n	8000f6a <__aeabi_ddiv+0x45e>
 8000f68:	e08d      	b.n	8001086 <__aeabi_ddiv+0x57a>
 8000f6a:	428e      	cmp	r6, r1
 8000f6c:	d200      	bcs.n	8000f70 <__aeabi_ddiv+0x464>
 8000f6e:	e0a3      	b.n	80010b8 <__aeabi_ddiv+0x5ac>
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x468>
 8000f72:	e0b3      	b.n	80010dc <__aeabi_ddiv+0x5d0>
 8000f74:	0005      	movs	r5, r0
 8000f76:	e6f5      	b.n	8000d64 <__aeabi_ddiv+0x258>
 8000f78:	42aa      	cmp	r2, r5
 8000f7a:	d900      	bls.n	8000f7e <__aeabi_ddiv+0x472>
 8000f7c:	e639      	b.n	8000bf2 <__aeabi_ddiv+0xe6>
 8000f7e:	4643      	mov	r3, r8
 8000f80:	07de      	lsls	r6, r3, #31
 8000f82:	0858      	lsrs	r0, r3, #1
 8000f84:	086b      	lsrs	r3, r5, #1
 8000f86:	431e      	orrs	r6, r3
 8000f88:	07ed      	lsls	r5, r5, #31
 8000f8a:	e639      	b.n	8000c00 <__aeabi_ddiv+0xf4>
 8000f8c:	4648      	mov	r0, r9
 8000f8e:	f001 f823 	bl	8001fd8 <__clzsi2>
 8000f92:	0001      	movs	r1, r0
 8000f94:	0002      	movs	r2, r0
 8000f96:	3115      	adds	r1, #21
 8000f98:	3220      	adds	r2, #32
 8000f9a:	291c      	cmp	r1, #28
 8000f9c:	dc00      	bgt.n	8000fa0 <__aeabi_ddiv+0x494>
 8000f9e:	e72c      	b.n	8000dfa <__aeabi_ddiv+0x2ee>
 8000fa0:	464b      	mov	r3, r9
 8000fa2:	3808      	subs	r0, #8
 8000fa4:	4083      	lsls	r3, r0
 8000fa6:	2500      	movs	r5, #0
 8000fa8:	4698      	mov	r8, r3
 8000faa:	e732      	b.n	8000e12 <__aeabi_ddiv+0x306>
 8000fac:	f001 f814 	bl	8001fd8 <__clzsi2>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	001a      	movs	r2, r3
 8000fb4:	3215      	adds	r2, #21
 8000fb6:	3020      	adds	r0, #32
 8000fb8:	2a1c      	cmp	r2, #28
 8000fba:	dc00      	bgt.n	8000fbe <__aeabi_ddiv+0x4b2>
 8000fbc:	e700      	b.n	8000dc0 <__aeabi_ddiv+0x2b4>
 8000fbe:	4654      	mov	r4, sl
 8000fc0:	3b08      	subs	r3, #8
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	409c      	lsls	r4, r3
 8000fc6:	e705      	b.n	8000dd4 <__aeabi_ddiv+0x2c8>
 8000fc8:	1936      	adds	r6, r6, r4
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	42b4      	cmp	r4, r6
 8000fce:	d900      	bls.n	8000fd2 <__aeabi_ddiv+0x4c6>
 8000fd0:	e6a6      	b.n	8000d20 <__aeabi_ddiv+0x214>
 8000fd2:	42b2      	cmp	r2, r6
 8000fd4:	d800      	bhi.n	8000fd8 <__aeabi_ddiv+0x4cc>
 8000fd6:	e6a3      	b.n	8000d20 <__aeabi_ddiv+0x214>
 8000fd8:	1e83      	subs	r3, r0, #2
 8000fda:	1936      	adds	r6, r6, r4
 8000fdc:	e6a0      	b.n	8000d20 <__aeabi_ddiv+0x214>
 8000fde:	1909      	adds	r1, r1, r4
 8000fe0:	3d01      	subs	r5, #1
 8000fe2:	428c      	cmp	r4, r1
 8000fe4:	d900      	bls.n	8000fe8 <__aeabi_ddiv+0x4dc>
 8000fe6:	e68d      	b.n	8000d04 <__aeabi_ddiv+0x1f8>
 8000fe8:	428a      	cmp	r2, r1
 8000fea:	d800      	bhi.n	8000fee <__aeabi_ddiv+0x4e2>
 8000fec:	e68a      	b.n	8000d04 <__aeabi_ddiv+0x1f8>
 8000fee:	1e85      	subs	r5, r0, #2
 8000ff0:	1909      	adds	r1, r1, r4
 8000ff2:	e687      	b.n	8000d04 <__aeabi_ddiv+0x1f8>
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	402b      	ands	r3, r5
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x4f2>
 8000ffc:	e6bc      	b.n	8000d78 <__aeabi_ddiv+0x26c>
 8000ffe:	2305      	movs	r3, #5
 8001000:	425b      	negs	r3, r3
 8001002:	42ab      	cmp	r3, r5
 8001004:	419b      	sbcs	r3, r3
 8001006:	3504      	adds	r5, #4
 8001008:	425b      	negs	r3, r3
 800100a:	08ed      	lsrs	r5, r5, #3
 800100c:	4498      	add	r8, r3
 800100e:	e6b4      	b.n	8000d7a <__aeabi_ddiv+0x26e>
 8001010:	42af      	cmp	r7, r5
 8001012:	d900      	bls.n	8001016 <__aeabi_ddiv+0x50a>
 8001014:	e660      	b.n	8000cd8 <__aeabi_ddiv+0x1cc>
 8001016:	4282      	cmp	r2, r0
 8001018:	d804      	bhi.n	8001024 <__aeabi_ddiv+0x518>
 800101a:	d000      	beq.n	800101e <__aeabi_ddiv+0x512>
 800101c:	e65c      	b.n	8000cd8 <__aeabi_ddiv+0x1cc>
 800101e:	42ae      	cmp	r6, r5
 8001020:	d800      	bhi.n	8001024 <__aeabi_ddiv+0x518>
 8001022:	e659      	b.n	8000cd8 <__aeabi_ddiv+0x1cc>
 8001024:	2302      	movs	r3, #2
 8001026:	425b      	negs	r3, r3
 8001028:	469c      	mov	ip, r3
 800102a:	9b00      	ldr	r3, [sp, #0]
 800102c:	44e0      	add	r8, ip
 800102e:	469c      	mov	ip, r3
 8001030:	4465      	add	r5, ip
 8001032:	429d      	cmp	r5, r3
 8001034:	419b      	sbcs	r3, r3
 8001036:	425b      	negs	r3, r3
 8001038:	191b      	adds	r3, r3, r4
 800103a:	18c0      	adds	r0, r0, r3
 800103c:	e64d      	b.n	8000cda <__aeabi_ddiv+0x1ce>
 800103e:	428a      	cmp	r2, r1
 8001040:	d800      	bhi.n	8001044 <__aeabi_ddiv+0x538>
 8001042:	e60e      	b.n	8000c62 <__aeabi_ddiv+0x156>
 8001044:	1e83      	subs	r3, r0, #2
 8001046:	1909      	adds	r1, r1, r4
 8001048:	e60b      	b.n	8000c62 <__aeabi_ddiv+0x156>
 800104a:	428a      	cmp	r2, r1
 800104c:	d800      	bhi.n	8001050 <__aeabi_ddiv+0x544>
 800104e:	e5f4      	b.n	8000c3a <__aeabi_ddiv+0x12e>
 8001050:	1e83      	subs	r3, r0, #2
 8001052:	4698      	mov	r8, r3
 8001054:	1909      	adds	r1, r1, r4
 8001056:	e5f0      	b.n	8000c3a <__aeabi_ddiv+0x12e>
 8001058:	4925      	ldr	r1, [pc, #148]	; (80010f0 <__aeabi_ddiv+0x5e4>)
 800105a:	0028      	movs	r0, r5
 800105c:	4459      	add	r1, fp
 800105e:	408d      	lsls	r5, r1
 8001060:	4642      	mov	r2, r8
 8001062:	408a      	lsls	r2, r1
 8001064:	1e69      	subs	r1, r5, #1
 8001066:	418d      	sbcs	r5, r1
 8001068:	4641      	mov	r1, r8
 800106a:	40d8      	lsrs	r0, r3
 800106c:	40d9      	lsrs	r1, r3
 800106e:	4302      	orrs	r2, r0
 8001070:	432a      	orrs	r2, r5
 8001072:	000b      	movs	r3, r1
 8001074:	0751      	lsls	r1, r2, #29
 8001076:	d100      	bne.n	800107a <__aeabi_ddiv+0x56e>
 8001078:	e751      	b.n	8000f1e <__aeabi_ddiv+0x412>
 800107a:	210f      	movs	r1, #15
 800107c:	4011      	ands	r1, r2
 800107e:	2904      	cmp	r1, #4
 8001080:	d000      	beq.n	8001084 <__aeabi_ddiv+0x578>
 8001082:	e746      	b.n	8000f12 <__aeabi_ddiv+0x406>
 8001084:	e74b      	b.n	8000f1e <__aeabi_ddiv+0x412>
 8001086:	0005      	movs	r5, r0
 8001088:	428e      	cmp	r6, r1
 800108a:	d000      	beq.n	800108e <__aeabi_ddiv+0x582>
 800108c:	e66a      	b.n	8000d64 <__aeabi_ddiv+0x258>
 800108e:	9a00      	ldr	r2, [sp, #0]
 8001090:	4293      	cmp	r3, r2
 8001092:	d000      	beq.n	8001096 <__aeabi_ddiv+0x58a>
 8001094:	e666      	b.n	8000d64 <__aeabi_ddiv+0x258>
 8001096:	e667      	b.n	8000d68 <__aeabi_ddiv+0x25c>
 8001098:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <__aeabi_ddiv+0x5e8>)
 800109a:	445a      	add	r2, fp
 800109c:	2a00      	cmp	r2, #0
 800109e:	dc00      	bgt.n	80010a2 <__aeabi_ddiv+0x596>
 80010a0:	e710      	b.n	8000ec4 <__aeabi_ddiv+0x3b8>
 80010a2:	2301      	movs	r3, #1
 80010a4:	2500      	movs	r5, #0
 80010a6:	4498      	add	r8, r3
 80010a8:	e667      	b.n	8000d7a <__aeabi_ddiv+0x26e>
 80010aa:	075d      	lsls	r5, r3, #29
 80010ac:	025b      	lsls	r3, r3, #9
 80010ae:	0b1c      	lsrs	r4, r3, #12
 80010b0:	08d2      	lsrs	r2, r2, #3
 80010b2:	2300      	movs	r3, #0
 80010b4:	4315      	orrs	r5, r2
 80010b6:	e580      	b.n	8000bba <__aeabi_ddiv+0xae>
 80010b8:	9800      	ldr	r0, [sp, #0]
 80010ba:	3d02      	subs	r5, #2
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	4282      	cmp	r2, r0
 80010c0:	41bf      	sbcs	r7, r7
 80010c2:	427f      	negs	r7, r7
 80010c4:	193c      	adds	r4, r7, r4
 80010c6:	1936      	adds	r6, r6, r4
 80010c8:	9200      	str	r2, [sp, #0]
 80010ca:	e7dd      	b.n	8001088 <__aeabi_ddiv+0x57c>
 80010cc:	2480      	movs	r4, #128	; 0x80
 80010ce:	4643      	mov	r3, r8
 80010d0:	0324      	lsls	r4, r4, #12
 80010d2:	431c      	orrs	r4, r3
 80010d4:	0324      	lsls	r4, r4, #12
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__aeabi_ddiv+0x5dc>)
 80010d8:	0b24      	lsrs	r4, r4, #12
 80010da:	e56e      	b.n	8000bba <__aeabi_ddiv+0xae>
 80010dc:	9a00      	ldr	r2, [sp, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3ea      	bcc.n	80010b8 <__aeabi_ddiv+0x5ac>
 80010e2:	0005      	movs	r5, r0
 80010e4:	e7d3      	b.n	800108e <__aeabi_ddiv+0x582>
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	000007ff 	.word	0x000007ff
 80010ec:	0000043e 	.word	0x0000043e
 80010f0:	0000041e 	.word	0x0000041e
 80010f4:	000003ff 	.word	0x000003ff

080010f8 <__eqdf2>:
 80010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fa:	464e      	mov	r6, r9
 80010fc:	4645      	mov	r5, r8
 80010fe:	46de      	mov	lr, fp
 8001100:	4657      	mov	r7, sl
 8001102:	4690      	mov	r8, r2
 8001104:	b5e0      	push	{r5, r6, r7, lr}
 8001106:	0017      	movs	r7, r2
 8001108:	031a      	lsls	r2, r3, #12
 800110a:	0b12      	lsrs	r2, r2, #12
 800110c:	0005      	movs	r5, r0
 800110e:	4684      	mov	ip, r0
 8001110:	4819      	ldr	r0, [pc, #100]	; (8001178 <__eqdf2+0x80>)
 8001112:	030e      	lsls	r6, r1, #12
 8001114:	004c      	lsls	r4, r1, #1
 8001116:	4691      	mov	r9, r2
 8001118:	005a      	lsls	r2, r3, #1
 800111a:	0fdb      	lsrs	r3, r3, #31
 800111c:	469b      	mov	fp, r3
 800111e:	0b36      	lsrs	r6, r6, #12
 8001120:	0d64      	lsrs	r4, r4, #21
 8001122:	0fc9      	lsrs	r1, r1, #31
 8001124:	0d52      	lsrs	r2, r2, #21
 8001126:	4284      	cmp	r4, r0
 8001128:	d019      	beq.n	800115e <__eqdf2+0x66>
 800112a:	4282      	cmp	r2, r0
 800112c:	d010      	beq.n	8001150 <__eqdf2+0x58>
 800112e:	2001      	movs	r0, #1
 8001130:	4294      	cmp	r4, r2
 8001132:	d10e      	bne.n	8001152 <__eqdf2+0x5a>
 8001134:	454e      	cmp	r6, r9
 8001136:	d10c      	bne.n	8001152 <__eqdf2+0x5a>
 8001138:	2001      	movs	r0, #1
 800113a:	45c4      	cmp	ip, r8
 800113c:	d109      	bne.n	8001152 <__eqdf2+0x5a>
 800113e:	4559      	cmp	r1, fp
 8001140:	d017      	beq.n	8001172 <__eqdf2+0x7a>
 8001142:	2c00      	cmp	r4, #0
 8001144:	d105      	bne.n	8001152 <__eqdf2+0x5a>
 8001146:	0030      	movs	r0, r6
 8001148:	4328      	orrs	r0, r5
 800114a:	1e43      	subs	r3, r0, #1
 800114c:	4198      	sbcs	r0, r3
 800114e:	e000      	b.n	8001152 <__eqdf2+0x5a>
 8001150:	2001      	movs	r0, #1
 8001152:	bcf0      	pop	{r4, r5, r6, r7}
 8001154:	46bb      	mov	fp, r7
 8001156:	46b2      	mov	sl, r6
 8001158:	46a9      	mov	r9, r5
 800115a:	46a0      	mov	r8, r4
 800115c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800115e:	0033      	movs	r3, r6
 8001160:	2001      	movs	r0, #1
 8001162:	432b      	orrs	r3, r5
 8001164:	d1f5      	bne.n	8001152 <__eqdf2+0x5a>
 8001166:	42a2      	cmp	r2, r4
 8001168:	d1f3      	bne.n	8001152 <__eqdf2+0x5a>
 800116a:	464b      	mov	r3, r9
 800116c:	433b      	orrs	r3, r7
 800116e:	d1f0      	bne.n	8001152 <__eqdf2+0x5a>
 8001170:	e7e2      	b.n	8001138 <__eqdf2+0x40>
 8001172:	2000      	movs	r0, #0
 8001174:	e7ed      	b.n	8001152 <__eqdf2+0x5a>
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	000007ff 	.word	0x000007ff

0800117c <__gedf2>:
 800117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117e:	4647      	mov	r7, r8
 8001180:	46ce      	mov	lr, r9
 8001182:	0004      	movs	r4, r0
 8001184:	0018      	movs	r0, r3
 8001186:	0016      	movs	r6, r2
 8001188:	031b      	lsls	r3, r3, #12
 800118a:	0b1b      	lsrs	r3, r3, #12
 800118c:	4d2d      	ldr	r5, [pc, #180]	; (8001244 <__gedf2+0xc8>)
 800118e:	004a      	lsls	r2, r1, #1
 8001190:	4699      	mov	r9, r3
 8001192:	b580      	push	{r7, lr}
 8001194:	0043      	lsls	r3, r0, #1
 8001196:	030f      	lsls	r7, r1, #12
 8001198:	46a4      	mov	ip, r4
 800119a:	46b0      	mov	r8, r6
 800119c:	0b3f      	lsrs	r7, r7, #12
 800119e:	0d52      	lsrs	r2, r2, #21
 80011a0:	0fc9      	lsrs	r1, r1, #31
 80011a2:	0d5b      	lsrs	r3, r3, #21
 80011a4:	0fc0      	lsrs	r0, r0, #31
 80011a6:	42aa      	cmp	r2, r5
 80011a8:	d021      	beq.n	80011ee <__gedf2+0x72>
 80011aa:	42ab      	cmp	r3, r5
 80011ac:	d013      	beq.n	80011d6 <__gedf2+0x5a>
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	d122      	bne.n	80011f8 <__gedf2+0x7c>
 80011b2:	433c      	orrs	r4, r7
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <__gedf2+0x42>
 80011b8:	464d      	mov	r5, r9
 80011ba:	432e      	orrs	r6, r5
 80011bc:	d022      	beq.n	8001204 <__gedf2+0x88>
 80011be:	2c00      	cmp	r4, #0
 80011c0:	d010      	beq.n	80011e4 <__gedf2+0x68>
 80011c2:	4281      	cmp	r1, r0
 80011c4:	d022      	beq.n	800120c <__gedf2+0x90>
 80011c6:	2002      	movs	r0, #2
 80011c8:	3901      	subs	r1, #1
 80011ca:	4008      	ands	r0, r1
 80011cc:	3801      	subs	r0, #1
 80011ce:	bcc0      	pop	{r6, r7}
 80011d0:	46b9      	mov	r9, r7
 80011d2:	46b0      	mov	r8, r6
 80011d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d6:	464d      	mov	r5, r9
 80011d8:	432e      	orrs	r6, r5
 80011da:	d129      	bne.n	8001230 <__gedf2+0xb4>
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d1f0      	bne.n	80011c2 <__gedf2+0x46>
 80011e0:	433c      	orrs	r4, r7
 80011e2:	d1ee      	bne.n	80011c2 <__gedf2+0x46>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d1f2      	bne.n	80011ce <__gedf2+0x52>
 80011e8:	2001      	movs	r0, #1
 80011ea:	4240      	negs	r0, r0
 80011ec:	e7ef      	b.n	80011ce <__gedf2+0x52>
 80011ee:	003d      	movs	r5, r7
 80011f0:	4325      	orrs	r5, r4
 80011f2:	d11d      	bne.n	8001230 <__gedf2+0xb4>
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d0ee      	beq.n	80011d6 <__gedf2+0x5a>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1e2      	bne.n	80011c2 <__gedf2+0x46>
 80011fc:	464c      	mov	r4, r9
 80011fe:	4326      	orrs	r6, r4
 8001200:	d1df      	bne.n	80011c2 <__gedf2+0x46>
 8001202:	e7e0      	b.n	80011c6 <__gedf2+0x4a>
 8001204:	2000      	movs	r0, #0
 8001206:	2c00      	cmp	r4, #0
 8001208:	d0e1      	beq.n	80011ce <__gedf2+0x52>
 800120a:	e7dc      	b.n	80011c6 <__gedf2+0x4a>
 800120c:	429a      	cmp	r2, r3
 800120e:	dc0a      	bgt.n	8001226 <__gedf2+0xaa>
 8001210:	dbe8      	blt.n	80011e4 <__gedf2+0x68>
 8001212:	454f      	cmp	r7, r9
 8001214:	d8d7      	bhi.n	80011c6 <__gedf2+0x4a>
 8001216:	d00e      	beq.n	8001236 <__gedf2+0xba>
 8001218:	2000      	movs	r0, #0
 800121a:	454f      	cmp	r7, r9
 800121c:	d2d7      	bcs.n	80011ce <__gedf2+0x52>
 800121e:	2900      	cmp	r1, #0
 8001220:	d0e2      	beq.n	80011e8 <__gedf2+0x6c>
 8001222:	0008      	movs	r0, r1
 8001224:	e7d3      	b.n	80011ce <__gedf2+0x52>
 8001226:	4243      	negs	r3, r0
 8001228:	4158      	adcs	r0, r3
 800122a:	0040      	lsls	r0, r0, #1
 800122c:	3801      	subs	r0, #1
 800122e:	e7ce      	b.n	80011ce <__gedf2+0x52>
 8001230:	2002      	movs	r0, #2
 8001232:	4240      	negs	r0, r0
 8001234:	e7cb      	b.n	80011ce <__gedf2+0x52>
 8001236:	45c4      	cmp	ip, r8
 8001238:	d8c5      	bhi.n	80011c6 <__gedf2+0x4a>
 800123a:	2000      	movs	r0, #0
 800123c:	45c4      	cmp	ip, r8
 800123e:	d2c6      	bcs.n	80011ce <__gedf2+0x52>
 8001240:	e7ed      	b.n	800121e <__gedf2+0xa2>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	000007ff 	.word	0x000007ff

08001248 <__ledf2>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	4647      	mov	r7, r8
 800124c:	46ce      	mov	lr, r9
 800124e:	0004      	movs	r4, r0
 8001250:	0018      	movs	r0, r3
 8001252:	0016      	movs	r6, r2
 8001254:	031b      	lsls	r3, r3, #12
 8001256:	0b1b      	lsrs	r3, r3, #12
 8001258:	4d2c      	ldr	r5, [pc, #176]	; (800130c <__ledf2+0xc4>)
 800125a:	004a      	lsls	r2, r1, #1
 800125c:	4699      	mov	r9, r3
 800125e:	b580      	push	{r7, lr}
 8001260:	0043      	lsls	r3, r0, #1
 8001262:	030f      	lsls	r7, r1, #12
 8001264:	46a4      	mov	ip, r4
 8001266:	46b0      	mov	r8, r6
 8001268:	0b3f      	lsrs	r7, r7, #12
 800126a:	0d52      	lsrs	r2, r2, #21
 800126c:	0fc9      	lsrs	r1, r1, #31
 800126e:	0d5b      	lsrs	r3, r3, #21
 8001270:	0fc0      	lsrs	r0, r0, #31
 8001272:	42aa      	cmp	r2, r5
 8001274:	d00d      	beq.n	8001292 <__ledf2+0x4a>
 8001276:	42ab      	cmp	r3, r5
 8001278:	d010      	beq.n	800129c <__ledf2+0x54>
 800127a:	2a00      	cmp	r2, #0
 800127c:	d127      	bne.n	80012ce <__ledf2+0x86>
 800127e:	433c      	orrs	r4, r7
 8001280:	2b00      	cmp	r3, #0
 8001282:	d111      	bne.n	80012a8 <__ledf2+0x60>
 8001284:	464d      	mov	r5, r9
 8001286:	432e      	orrs	r6, r5
 8001288:	d10e      	bne.n	80012a8 <__ledf2+0x60>
 800128a:	2000      	movs	r0, #0
 800128c:	2c00      	cmp	r4, #0
 800128e:	d015      	beq.n	80012bc <__ledf2+0x74>
 8001290:	e00e      	b.n	80012b0 <__ledf2+0x68>
 8001292:	003d      	movs	r5, r7
 8001294:	4325      	orrs	r5, r4
 8001296:	d110      	bne.n	80012ba <__ledf2+0x72>
 8001298:	4293      	cmp	r3, r2
 800129a:	d118      	bne.n	80012ce <__ledf2+0x86>
 800129c:	464d      	mov	r5, r9
 800129e:	432e      	orrs	r6, r5
 80012a0:	d10b      	bne.n	80012ba <__ledf2+0x72>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d102      	bne.n	80012ac <__ledf2+0x64>
 80012a6:	433c      	orrs	r4, r7
 80012a8:	2c00      	cmp	r4, #0
 80012aa:	d00b      	beq.n	80012c4 <__ledf2+0x7c>
 80012ac:	4281      	cmp	r1, r0
 80012ae:	d014      	beq.n	80012da <__ledf2+0x92>
 80012b0:	2002      	movs	r0, #2
 80012b2:	3901      	subs	r1, #1
 80012b4:	4008      	ands	r0, r1
 80012b6:	3801      	subs	r0, #1
 80012b8:	e000      	b.n	80012bc <__ledf2+0x74>
 80012ba:	2002      	movs	r0, #2
 80012bc:	bcc0      	pop	{r6, r7}
 80012be:	46b9      	mov	r9, r7
 80012c0:	46b0      	mov	r8, r6
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	2800      	cmp	r0, #0
 80012c6:	d1f9      	bne.n	80012bc <__ledf2+0x74>
 80012c8:	2001      	movs	r0, #1
 80012ca:	4240      	negs	r0, r0
 80012cc:	e7f6      	b.n	80012bc <__ledf2+0x74>
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1ec      	bne.n	80012ac <__ledf2+0x64>
 80012d2:	464c      	mov	r4, r9
 80012d4:	4326      	orrs	r6, r4
 80012d6:	d1e9      	bne.n	80012ac <__ledf2+0x64>
 80012d8:	e7ea      	b.n	80012b0 <__ledf2+0x68>
 80012da:	429a      	cmp	r2, r3
 80012dc:	dd04      	ble.n	80012e8 <__ledf2+0xa0>
 80012de:	4243      	negs	r3, r0
 80012e0:	4158      	adcs	r0, r3
 80012e2:	0040      	lsls	r0, r0, #1
 80012e4:	3801      	subs	r0, #1
 80012e6:	e7e9      	b.n	80012bc <__ledf2+0x74>
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbeb      	blt.n	80012c4 <__ledf2+0x7c>
 80012ec:	454f      	cmp	r7, r9
 80012ee:	d8df      	bhi.n	80012b0 <__ledf2+0x68>
 80012f0:	d006      	beq.n	8001300 <__ledf2+0xb8>
 80012f2:	2000      	movs	r0, #0
 80012f4:	454f      	cmp	r7, r9
 80012f6:	d2e1      	bcs.n	80012bc <__ledf2+0x74>
 80012f8:	2900      	cmp	r1, #0
 80012fa:	d0e5      	beq.n	80012c8 <__ledf2+0x80>
 80012fc:	0008      	movs	r0, r1
 80012fe:	e7dd      	b.n	80012bc <__ledf2+0x74>
 8001300:	45c4      	cmp	ip, r8
 8001302:	d8d5      	bhi.n	80012b0 <__ledf2+0x68>
 8001304:	2000      	movs	r0, #0
 8001306:	45c4      	cmp	ip, r8
 8001308:	d2d8      	bcs.n	80012bc <__ledf2+0x74>
 800130a:	e7f5      	b.n	80012f8 <__ledf2+0xb0>
 800130c:	000007ff 	.word	0x000007ff

08001310 <__aeabi_dmul>:
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	4657      	mov	r7, sl
 8001314:	464e      	mov	r6, r9
 8001316:	4645      	mov	r5, r8
 8001318:	46de      	mov	lr, fp
 800131a:	b5e0      	push	{r5, r6, r7, lr}
 800131c:	4698      	mov	r8, r3
 800131e:	030c      	lsls	r4, r1, #12
 8001320:	004b      	lsls	r3, r1, #1
 8001322:	0006      	movs	r6, r0
 8001324:	4692      	mov	sl, r2
 8001326:	b087      	sub	sp, #28
 8001328:	0b24      	lsrs	r4, r4, #12
 800132a:	0d5b      	lsrs	r3, r3, #21
 800132c:	0fcf      	lsrs	r7, r1, #31
 800132e:	2b00      	cmp	r3, #0
 8001330:	d100      	bne.n	8001334 <__aeabi_dmul+0x24>
 8001332:	e15c      	b.n	80015ee <__aeabi_dmul+0x2de>
 8001334:	4ad9      	ldr	r2, [pc, #868]	; (800169c <__aeabi_dmul+0x38c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x2c>
 800133a:	e175      	b.n	8001628 <__aeabi_dmul+0x318>
 800133c:	0f42      	lsrs	r2, r0, #29
 800133e:	00e4      	lsls	r4, r4, #3
 8001340:	4314      	orrs	r4, r2
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	0412      	lsls	r2, r2, #16
 8001346:	4314      	orrs	r4, r2
 8001348:	4ad5      	ldr	r2, [pc, #852]	; (80016a0 <__aeabi_dmul+0x390>)
 800134a:	00c5      	lsls	r5, r0, #3
 800134c:	4694      	mov	ip, r2
 800134e:	4463      	add	r3, ip
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	4699      	mov	r9, r3
 8001356:	469b      	mov	fp, r3
 8001358:	4643      	mov	r3, r8
 800135a:	4642      	mov	r2, r8
 800135c:	031e      	lsls	r6, r3, #12
 800135e:	0fd2      	lsrs	r2, r2, #31
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4650      	mov	r0, sl
 8001364:	4690      	mov	r8, r2
 8001366:	0b36      	lsrs	r6, r6, #12
 8001368:	0d5b      	lsrs	r3, r3, #21
 800136a:	d100      	bne.n	800136e <__aeabi_dmul+0x5e>
 800136c:	e120      	b.n	80015b0 <__aeabi_dmul+0x2a0>
 800136e:	4acb      	ldr	r2, [pc, #812]	; (800169c <__aeabi_dmul+0x38c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d100      	bne.n	8001376 <__aeabi_dmul+0x66>
 8001374:	e162      	b.n	800163c <__aeabi_dmul+0x32c>
 8001376:	49ca      	ldr	r1, [pc, #808]	; (80016a0 <__aeabi_dmul+0x390>)
 8001378:	0f42      	lsrs	r2, r0, #29
 800137a:	468c      	mov	ip, r1
 800137c:	9900      	ldr	r1, [sp, #0]
 800137e:	4463      	add	r3, ip
 8001380:	00f6      	lsls	r6, r6, #3
 8001382:	468c      	mov	ip, r1
 8001384:	4316      	orrs	r6, r2
 8001386:	2280      	movs	r2, #128	; 0x80
 8001388:	449c      	add	ip, r3
 800138a:	0412      	lsls	r2, r2, #16
 800138c:	4663      	mov	r3, ip
 800138e:	4316      	orrs	r6, r2
 8001390:	00c2      	lsls	r2, r0, #3
 8001392:	2000      	movs	r0, #0
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	9900      	ldr	r1, [sp, #0]
 8001398:	4643      	mov	r3, r8
 800139a:	3101      	adds	r1, #1
 800139c:	468c      	mov	ip, r1
 800139e:	4649      	mov	r1, r9
 80013a0:	407b      	eors	r3, r7
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	290f      	cmp	r1, #15
 80013a6:	d826      	bhi.n	80013f6 <__aeabi_dmul+0xe6>
 80013a8:	4bbe      	ldr	r3, [pc, #760]	; (80016a4 <__aeabi_dmul+0x394>)
 80013aa:	0089      	lsls	r1, r1, #2
 80013ac:	5859      	ldr	r1, [r3, r1]
 80013ae:	468f      	mov	pc, r1
 80013b0:	4643      	mov	r3, r8
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	0034      	movs	r4, r6
 80013b6:	0015      	movs	r5, r2
 80013b8:	4683      	mov	fp, r0
 80013ba:	465b      	mov	r3, fp
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d016      	beq.n	80013ee <__aeabi_dmul+0xde>
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dmul+0xb6>
 80013c4:	e203      	b.n	80017ce <__aeabi_dmul+0x4be>
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d000      	beq.n	80013cc <__aeabi_dmul+0xbc>
 80013ca:	e0cd      	b.n	8001568 <__aeabi_dmul+0x258>
 80013cc:	2200      	movs	r2, #0
 80013ce:	2400      	movs	r4, #0
 80013d0:	2500      	movs	r5, #0
 80013d2:	9b01      	ldr	r3, [sp, #4]
 80013d4:	0512      	lsls	r2, r2, #20
 80013d6:	4322      	orrs	r2, r4
 80013d8:	07db      	lsls	r3, r3, #31
 80013da:	431a      	orrs	r2, r3
 80013dc:	0028      	movs	r0, r5
 80013de:	0011      	movs	r1, r2
 80013e0:	b007      	add	sp, #28
 80013e2:	bcf0      	pop	{r4, r5, r6, r7}
 80013e4:	46bb      	mov	fp, r7
 80013e6:	46b2      	mov	sl, r6
 80013e8:	46a9      	mov	r9, r5
 80013ea:	46a0      	mov	r8, r4
 80013ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ee:	2400      	movs	r4, #0
 80013f0:	2500      	movs	r5, #0
 80013f2:	4aaa      	ldr	r2, [pc, #680]	; (800169c <__aeabi_dmul+0x38c>)
 80013f4:	e7ed      	b.n	80013d2 <__aeabi_dmul+0xc2>
 80013f6:	0c28      	lsrs	r0, r5, #16
 80013f8:	042d      	lsls	r5, r5, #16
 80013fa:	0c2d      	lsrs	r5, r5, #16
 80013fc:	002b      	movs	r3, r5
 80013fe:	0c11      	lsrs	r1, r2, #16
 8001400:	0412      	lsls	r2, r2, #16
 8001402:	0c12      	lsrs	r2, r2, #16
 8001404:	4353      	muls	r3, r2
 8001406:	4698      	mov	r8, r3
 8001408:	0013      	movs	r3, r2
 800140a:	002f      	movs	r7, r5
 800140c:	4343      	muls	r3, r0
 800140e:	4699      	mov	r9, r3
 8001410:	434f      	muls	r7, r1
 8001412:	444f      	add	r7, r9
 8001414:	46bb      	mov	fp, r7
 8001416:	4647      	mov	r7, r8
 8001418:	000b      	movs	r3, r1
 800141a:	0c3f      	lsrs	r7, r7, #16
 800141c:	46ba      	mov	sl, r7
 800141e:	4343      	muls	r3, r0
 8001420:	44da      	add	sl, fp
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	45d1      	cmp	r9, sl
 8001426:	d904      	bls.n	8001432 <__aeabi_dmul+0x122>
 8001428:	2780      	movs	r7, #128	; 0x80
 800142a:	027f      	lsls	r7, r7, #9
 800142c:	46b9      	mov	r9, r7
 800142e:	444b      	add	r3, r9
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	4653      	mov	r3, sl
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	469b      	mov	fp, r3
 8001438:	4653      	mov	r3, sl
 800143a:	041f      	lsls	r7, r3, #16
 800143c:	4643      	mov	r3, r8
 800143e:	041b      	lsls	r3, r3, #16
 8001440:	0c1b      	lsrs	r3, r3, #16
 8001442:	4698      	mov	r8, r3
 8001444:	003b      	movs	r3, r7
 8001446:	4443      	add	r3, r8
 8001448:	9304      	str	r3, [sp, #16]
 800144a:	0c33      	lsrs	r3, r6, #16
 800144c:	0436      	lsls	r6, r6, #16
 800144e:	0c36      	lsrs	r6, r6, #16
 8001450:	4698      	mov	r8, r3
 8001452:	0033      	movs	r3, r6
 8001454:	4343      	muls	r3, r0
 8001456:	4699      	mov	r9, r3
 8001458:	4643      	mov	r3, r8
 800145a:	4343      	muls	r3, r0
 800145c:	002f      	movs	r7, r5
 800145e:	469a      	mov	sl, r3
 8001460:	4643      	mov	r3, r8
 8001462:	4377      	muls	r7, r6
 8001464:	435d      	muls	r5, r3
 8001466:	0c38      	lsrs	r0, r7, #16
 8001468:	444d      	add	r5, r9
 800146a:	1945      	adds	r5, r0, r5
 800146c:	45a9      	cmp	r9, r5
 800146e:	d903      	bls.n	8001478 <__aeabi_dmul+0x168>
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	025b      	lsls	r3, r3, #9
 8001474:	4699      	mov	r9, r3
 8001476:	44ca      	add	sl, r9
 8001478:	043f      	lsls	r7, r7, #16
 800147a:	0c28      	lsrs	r0, r5, #16
 800147c:	0c3f      	lsrs	r7, r7, #16
 800147e:	042d      	lsls	r5, r5, #16
 8001480:	19ed      	adds	r5, r5, r7
 8001482:	0c27      	lsrs	r7, r4, #16
 8001484:	0424      	lsls	r4, r4, #16
 8001486:	0c24      	lsrs	r4, r4, #16
 8001488:	0003      	movs	r3, r0
 800148a:	0020      	movs	r0, r4
 800148c:	4350      	muls	r0, r2
 800148e:	437a      	muls	r2, r7
 8001490:	4691      	mov	r9, r2
 8001492:	003a      	movs	r2, r7
 8001494:	4453      	add	r3, sl
 8001496:	9305      	str	r3, [sp, #20]
 8001498:	0c03      	lsrs	r3, r0, #16
 800149a:	469a      	mov	sl, r3
 800149c:	434a      	muls	r2, r1
 800149e:	4361      	muls	r1, r4
 80014a0:	4449      	add	r1, r9
 80014a2:	4451      	add	r1, sl
 80014a4:	44ab      	add	fp, r5
 80014a6:	4589      	cmp	r9, r1
 80014a8:	d903      	bls.n	80014b2 <__aeabi_dmul+0x1a2>
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	025b      	lsls	r3, r3, #9
 80014ae:	4699      	mov	r9, r3
 80014b0:	444a      	add	r2, r9
 80014b2:	0400      	lsls	r0, r0, #16
 80014b4:	0c0b      	lsrs	r3, r1, #16
 80014b6:	0c00      	lsrs	r0, r0, #16
 80014b8:	0409      	lsls	r1, r1, #16
 80014ba:	1809      	adds	r1, r1, r0
 80014bc:	0020      	movs	r0, r4
 80014be:	4699      	mov	r9, r3
 80014c0:	4643      	mov	r3, r8
 80014c2:	4370      	muls	r0, r6
 80014c4:	435c      	muls	r4, r3
 80014c6:	437e      	muls	r6, r7
 80014c8:	435f      	muls	r7, r3
 80014ca:	0c03      	lsrs	r3, r0, #16
 80014cc:	4698      	mov	r8, r3
 80014ce:	19a4      	adds	r4, r4, r6
 80014d0:	4444      	add	r4, r8
 80014d2:	444a      	add	r2, r9
 80014d4:	9703      	str	r7, [sp, #12]
 80014d6:	42a6      	cmp	r6, r4
 80014d8:	d904      	bls.n	80014e4 <__aeabi_dmul+0x1d4>
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	025b      	lsls	r3, r3, #9
 80014de:	4698      	mov	r8, r3
 80014e0:	4447      	add	r7, r8
 80014e2:	9703      	str	r7, [sp, #12]
 80014e4:	0423      	lsls	r3, r4, #16
 80014e6:	9e02      	ldr	r6, [sp, #8]
 80014e8:	469a      	mov	sl, r3
 80014ea:	9b05      	ldr	r3, [sp, #20]
 80014ec:	445e      	add	r6, fp
 80014ee:	4698      	mov	r8, r3
 80014f0:	42ae      	cmp	r6, r5
 80014f2:	41ad      	sbcs	r5, r5
 80014f4:	1876      	adds	r6, r6, r1
 80014f6:	428e      	cmp	r6, r1
 80014f8:	4189      	sbcs	r1, r1
 80014fa:	0400      	lsls	r0, r0, #16
 80014fc:	0c00      	lsrs	r0, r0, #16
 80014fe:	4450      	add	r0, sl
 8001500:	4440      	add	r0, r8
 8001502:	426d      	negs	r5, r5
 8001504:	1947      	adds	r7, r0, r5
 8001506:	46b8      	mov	r8, r7
 8001508:	4693      	mov	fp, r2
 800150a:	4249      	negs	r1, r1
 800150c:	4689      	mov	r9, r1
 800150e:	44c3      	add	fp, r8
 8001510:	44d9      	add	r9, fp
 8001512:	4298      	cmp	r0, r3
 8001514:	4180      	sbcs	r0, r0
 8001516:	45a8      	cmp	r8, r5
 8001518:	41ad      	sbcs	r5, r5
 800151a:	4593      	cmp	fp, r2
 800151c:	4192      	sbcs	r2, r2
 800151e:	4589      	cmp	r9, r1
 8001520:	4189      	sbcs	r1, r1
 8001522:	426d      	negs	r5, r5
 8001524:	4240      	negs	r0, r0
 8001526:	4328      	orrs	r0, r5
 8001528:	0c24      	lsrs	r4, r4, #16
 800152a:	4252      	negs	r2, r2
 800152c:	4249      	negs	r1, r1
 800152e:	430a      	orrs	r2, r1
 8001530:	9b03      	ldr	r3, [sp, #12]
 8001532:	1900      	adds	r0, r0, r4
 8001534:	1880      	adds	r0, r0, r2
 8001536:	18c7      	adds	r7, r0, r3
 8001538:	464b      	mov	r3, r9
 800153a:	0ddc      	lsrs	r4, r3, #23
 800153c:	9b04      	ldr	r3, [sp, #16]
 800153e:	0275      	lsls	r5, r6, #9
 8001540:	431d      	orrs	r5, r3
 8001542:	1e6a      	subs	r2, r5, #1
 8001544:	4195      	sbcs	r5, r2
 8001546:	464b      	mov	r3, r9
 8001548:	0df6      	lsrs	r6, r6, #23
 800154a:	027f      	lsls	r7, r7, #9
 800154c:	4335      	orrs	r5, r6
 800154e:	025a      	lsls	r2, r3, #9
 8001550:	433c      	orrs	r4, r7
 8001552:	4315      	orrs	r5, r2
 8001554:	01fb      	lsls	r3, r7, #7
 8001556:	d400      	bmi.n	800155a <__aeabi_dmul+0x24a>
 8001558:	e11c      	b.n	8001794 <__aeabi_dmul+0x484>
 800155a:	2101      	movs	r1, #1
 800155c:	086a      	lsrs	r2, r5, #1
 800155e:	400d      	ands	r5, r1
 8001560:	4315      	orrs	r5, r2
 8001562:	07e2      	lsls	r2, r4, #31
 8001564:	4315      	orrs	r5, r2
 8001566:	0864      	lsrs	r4, r4, #1
 8001568:	494f      	ldr	r1, [pc, #316]	; (80016a8 <__aeabi_dmul+0x398>)
 800156a:	4461      	add	r1, ip
 800156c:	2900      	cmp	r1, #0
 800156e:	dc00      	bgt.n	8001572 <__aeabi_dmul+0x262>
 8001570:	e0b0      	b.n	80016d4 <__aeabi_dmul+0x3c4>
 8001572:	076b      	lsls	r3, r5, #29
 8001574:	d009      	beq.n	800158a <__aeabi_dmul+0x27a>
 8001576:	220f      	movs	r2, #15
 8001578:	402a      	ands	r2, r5
 800157a:	2a04      	cmp	r2, #4
 800157c:	d005      	beq.n	800158a <__aeabi_dmul+0x27a>
 800157e:	1d2a      	adds	r2, r5, #4
 8001580:	42aa      	cmp	r2, r5
 8001582:	41ad      	sbcs	r5, r5
 8001584:	426d      	negs	r5, r5
 8001586:	1964      	adds	r4, r4, r5
 8001588:	0015      	movs	r5, r2
 800158a:	01e3      	lsls	r3, r4, #7
 800158c:	d504      	bpl.n	8001598 <__aeabi_dmul+0x288>
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	4a46      	ldr	r2, [pc, #280]	; (80016ac <__aeabi_dmul+0x39c>)
 8001592:	00c9      	lsls	r1, r1, #3
 8001594:	4014      	ands	r4, r2
 8001596:	4461      	add	r1, ip
 8001598:	4a45      	ldr	r2, [pc, #276]	; (80016b0 <__aeabi_dmul+0x3a0>)
 800159a:	4291      	cmp	r1, r2
 800159c:	dd00      	ble.n	80015a0 <__aeabi_dmul+0x290>
 800159e:	e726      	b.n	80013ee <__aeabi_dmul+0xde>
 80015a0:	0762      	lsls	r2, r4, #29
 80015a2:	08ed      	lsrs	r5, r5, #3
 80015a4:	0264      	lsls	r4, r4, #9
 80015a6:	0549      	lsls	r1, r1, #21
 80015a8:	4315      	orrs	r5, r2
 80015aa:	0b24      	lsrs	r4, r4, #12
 80015ac:	0d4a      	lsrs	r2, r1, #21
 80015ae:	e710      	b.n	80013d2 <__aeabi_dmul+0xc2>
 80015b0:	4652      	mov	r2, sl
 80015b2:	4332      	orrs	r2, r6
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dmul+0x2a8>
 80015b6:	e07f      	b.n	80016b8 <__aeabi_dmul+0x3a8>
 80015b8:	2e00      	cmp	r6, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x2ae>
 80015bc:	e0dc      	b.n	8001778 <__aeabi_dmul+0x468>
 80015be:	0030      	movs	r0, r6
 80015c0:	f000 fd0a 	bl	8001fd8 <__clzsi2>
 80015c4:	0002      	movs	r2, r0
 80015c6:	3a0b      	subs	r2, #11
 80015c8:	231d      	movs	r3, #29
 80015ca:	0001      	movs	r1, r0
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	4652      	mov	r2, sl
 80015d0:	3908      	subs	r1, #8
 80015d2:	40da      	lsrs	r2, r3
 80015d4:	408e      	lsls	r6, r1
 80015d6:	4316      	orrs	r6, r2
 80015d8:	4652      	mov	r2, sl
 80015da:	408a      	lsls	r2, r1
 80015dc:	9b00      	ldr	r3, [sp, #0]
 80015de:	4935      	ldr	r1, [pc, #212]	; (80016b4 <__aeabi_dmul+0x3a4>)
 80015e0:	1a18      	subs	r0, r3, r0
 80015e2:	0003      	movs	r3, r0
 80015e4:	468c      	mov	ip, r1
 80015e6:	4463      	add	r3, ip
 80015e8:	2000      	movs	r0, #0
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	e6d3      	b.n	8001396 <__aeabi_dmul+0x86>
 80015ee:	0025      	movs	r5, r4
 80015f0:	4305      	orrs	r5, r0
 80015f2:	d04a      	beq.n	800168a <__aeabi_dmul+0x37a>
 80015f4:	2c00      	cmp	r4, #0
 80015f6:	d100      	bne.n	80015fa <__aeabi_dmul+0x2ea>
 80015f8:	e0b0      	b.n	800175c <__aeabi_dmul+0x44c>
 80015fa:	0020      	movs	r0, r4
 80015fc:	f000 fcec 	bl	8001fd8 <__clzsi2>
 8001600:	0001      	movs	r1, r0
 8001602:	0002      	movs	r2, r0
 8001604:	390b      	subs	r1, #11
 8001606:	231d      	movs	r3, #29
 8001608:	0010      	movs	r0, r2
 800160a:	1a5b      	subs	r3, r3, r1
 800160c:	0031      	movs	r1, r6
 800160e:	0035      	movs	r5, r6
 8001610:	3808      	subs	r0, #8
 8001612:	4084      	lsls	r4, r0
 8001614:	40d9      	lsrs	r1, r3
 8001616:	4085      	lsls	r5, r0
 8001618:	430c      	orrs	r4, r1
 800161a:	4826      	ldr	r0, [pc, #152]	; (80016b4 <__aeabi_dmul+0x3a4>)
 800161c:	1a83      	subs	r3, r0, r2
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	4699      	mov	r9, r3
 8001624:	469b      	mov	fp, r3
 8001626:	e697      	b.n	8001358 <__aeabi_dmul+0x48>
 8001628:	0005      	movs	r5, r0
 800162a:	4325      	orrs	r5, r4
 800162c:	d126      	bne.n	800167c <__aeabi_dmul+0x36c>
 800162e:	2208      	movs	r2, #8
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2302      	movs	r3, #2
 8001634:	2400      	movs	r4, #0
 8001636:	4691      	mov	r9, r2
 8001638:	469b      	mov	fp, r3
 800163a:	e68d      	b.n	8001358 <__aeabi_dmul+0x48>
 800163c:	4652      	mov	r2, sl
 800163e:	9b00      	ldr	r3, [sp, #0]
 8001640:	4332      	orrs	r2, r6
 8001642:	d110      	bne.n	8001666 <__aeabi_dmul+0x356>
 8001644:	4915      	ldr	r1, [pc, #84]	; (800169c <__aeabi_dmul+0x38c>)
 8001646:	2600      	movs	r6, #0
 8001648:	468c      	mov	ip, r1
 800164a:	4463      	add	r3, ip
 800164c:	4649      	mov	r1, r9
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2302      	movs	r3, #2
 8001652:	4319      	orrs	r1, r3
 8001654:	4689      	mov	r9, r1
 8001656:	2002      	movs	r0, #2
 8001658:	e69d      	b.n	8001396 <__aeabi_dmul+0x86>
 800165a:	465b      	mov	r3, fp
 800165c:	9701      	str	r7, [sp, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d000      	beq.n	8001664 <__aeabi_dmul+0x354>
 8001662:	e6ad      	b.n	80013c0 <__aeabi_dmul+0xb0>
 8001664:	e6c3      	b.n	80013ee <__aeabi_dmul+0xde>
 8001666:	4a0d      	ldr	r2, [pc, #52]	; (800169c <__aeabi_dmul+0x38c>)
 8001668:	2003      	movs	r0, #3
 800166a:	4694      	mov	ip, r2
 800166c:	4463      	add	r3, ip
 800166e:	464a      	mov	r2, r9
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2303      	movs	r3, #3
 8001674:	431a      	orrs	r2, r3
 8001676:	4691      	mov	r9, r2
 8001678:	4652      	mov	r2, sl
 800167a:	e68c      	b.n	8001396 <__aeabi_dmul+0x86>
 800167c:	220c      	movs	r2, #12
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2303      	movs	r3, #3
 8001682:	0005      	movs	r5, r0
 8001684:	4691      	mov	r9, r2
 8001686:	469b      	mov	fp, r3
 8001688:	e666      	b.n	8001358 <__aeabi_dmul+0x48>
 800168a:	2304      	movs	r3, #4
 800168c:	4699      	mov	r9, r3
 800168e:	2300      	movs	r3, #0
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	2400      	movs	r4, #0
 8001696:	469b      	mov	fp, r3
 8001698:	e65e      	b.n	8001358 <__aeabi_dmul+0x48>
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	000007ff 	.word	0x000007ff
 80016a0:	fffffc01 	.word	0xfffffc01
 80016a4:	08006dd8 	.word	0x08006dd8
 80016a8:	000003ff 	.word	0x000003ff
 80016ac:	feffffff 	.word	0xfeffffff
 80016b0:	000007fe 	.word	0x000007fe
 80016b4:	fffffc0d 	.word	0xfffffc0d
 80016b8:	4649      	mov	r1, r9
 80016ba:	2301      	movs	r3, #1
 80016bc:	4319      	orrs	r1, r3
 80016be:	4689      	mov	r9, r1
 80016c0:	2600      	movs	r6, #0
 80016c2:	2001      	movs	r0, #1
 80016c4:	e667      	b.n	8001396 <__aeabi_dmul+0x86>
 80016c6:	2300      	movs	r3, #0
 80016c8:	2480      	movs	r4, #128	; 0x80
 80016ca:	2500      	movs	r5, #0
 80016cc:	4a43      	ldr	r2, [pc, #268]	; (80017dc <__aeabi_dmul+0x4cc>)
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	0324      	lsls	r4, r4, #12
 80016d2:	e67e      	b.n	80013d2 <__aeabi_dmul+0xc2>
 80016d4:	2001      	movs	r0, #1
 80016d6:	1a40      	subs	r0, r0, r1
 80016d8:	2838      	cmp	r0, #56	; 0x38
 80016da:	dd00      	ble.n	80016de <__aeabi_dmul+0x3ce>
 80016dc:	e676      	b.n	80013cc <__aeabi_dmul+0xbc>
 80016de:	281f      	cmp	r0, #31
 80016e0:	dd5b      	ble.n	800179a <__aeabi_dmul+0x48a>
 80016e2:	221f      	movs	r2, #31
 80016e4:	0023      	movs	r3, r4
 80016e6:	4252      	negs	r2, r2
 80016e8:	1a51      	subs	r1, r2, r1
 80016ea:	40cb      	lsrs	r3, r1
 80016ec:	0019      	movs	r1, r3
 80016ee:	2820      	cmp	r0, #32
 80016f0:	d003      	beq.n	80016fa <__aeabi_dmul+0x3ea>
 80016f2:	4a3b      	ldr	r2, [pc, #236]	; (80017e0 <__aeabi_dmul+0x4d0>)
 80016f4:	4462      	add	r2, ip
 80016f6:	4094      	lsls	r4, r2
 80016f8:	4325      	orrs	r5, r4
 80016fa:	1e6a      	subs	r2, r5, #1
 80016fc:	4195      	sbcs	r5, r2
 80016fe:	002a      	movs	r2, r5
 8001700:	430a      	orrs	r2, r1
 8001702:	2107      	movs	r1, #7
 8001704:	000d      	movs	r5, r1
 8001706:	2400      	movs	r4, #0
 8001708:	4015      	ands	r5, r2
 800170a:	4211      	tst	r1, r2
 800170c:	d05b      	beq.n	80017c6 <__aeabi_dmul+0x4b6>
 800170e:	210f      	movs	r1, #15
 8001710:	2400      	movs	r4, #0
 8001712:	4011      	ands	r1, r2
 8001714:	2904      	cmp	r1, #4
 8001716:	d053      	beq.n	80017c0 <__aeabi_dmul+0x4b0>
 8001718:	1d11      	adds	r1, r2, #4
 800171a:	4291      	cmp	r1, r2
 800171c:	4192      	sbcs	r2, r2
 800171e:	4252      	negs	r2, r2
 8001720:	18a4      	adds	r4, r4, r2
 8001722:	000a      	movs	r2, r1
 8001724:	0223      	lsls	r3, r4, #8
 8001726:	d54b      	bpl.n	80017c0 <__aeabi_dmul+0x4b0>
 8001728:	2201      	movs	r2, #1
 800172a:	2400      	movs	r4, #0
 800172c:	2500      	movs	r5, #0
 800172e:	e650      	b.n	80013d2 <__aeabi_dmul+0xc2>
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	031b      	lsls	r3, r3, #12
 8001734:	421c      	tst	r4, r3
 8001736:	d009      	beq.n	800174c <__aeabi_dmul+0x43c>
 8001738:	421e      	tst	r6, r3
 800173a:	d107      	bne.n	800174c <__aeabi_dmul+0x43c>
 800173c:	4333      	orrs	r3, r6
 800173e:	031c      	lsls	r4, r3, #12
 8001740:	4643      	mov	r3, r8
 8001742:	0015      	movs	r5, r2
 8001744:	0b24      	lsrs	r4, r4, #12
 8001746:	4a25      	ldr	r2, [pc, #148]	; (80017dc <__aeabi_dmul+0x4cc>)
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	e642      	b.n	80013d2 <__aeabi_dmul+0xc2>
 800174c:	2280      	movs	r2, #128	; 0x80
 800174e:	0312      	lsls	r2, r2, #12
 8001750:	4314      	orrs	r4, r2
 8001752:	0324      	lsls	r4, r4, #12
 8001754:	4a21      	ldr	r2, [pc, #132]	; (80017dc <__aeabi_dmul+0x4cc>)
 8001756:	0b24      	lsrs	r4, r4, #12
 8001758:	9701      	str	r7, [sp, #4]
 800175a:	e63a      	b.n	80013d2 <__aeabi_dmul+0xc2>
 800175c:	f000 fc3c 	bl	8001fd8 <__clzsi2>
 8001760:	0001      	movs	r1, r0
 8001762:	0002      	movs	r2, r0
 8001764:	3115      	adds	r1, #21
 8001766:	3220      	adds	r2, #32
 8001768:	291c      	cmp	r1, #28
 800176a:	dc00      	bgt.n	800176e <__aeabi_dmul+0x45e>
 800176c:	e74b      	b.n	8001606 <__aeabi_dmul+0x2f6>
 800176e:	0034      	movs	r4, r6
 8001770:	3808      	subs	r0, #8
 8001772:	2500      	movs	r5, #0
 8001774:	4084      	lsls	r4, r0
 8001776:	e750      	b.n	800161a <__aeabi_dmul+0x30a>
 8001778:	f000 fc2e 	bl	8001fd8 <__clzsi2>
 800177c:	0003      	movs	r3, r0
 800177e:	001a      	movs	r2, r3
 8001780:	3215      	adds	r2, #21
 8001782:	3020      	adds	r0, #32
 8001784:	2a1c      	cmp	r2, #28
 8001786:	dc00      	bgt.n	800178a <__aeabi_dmul+0x47a>
 8001788:	e71e      	b.n	80015c8 <__aeabi_dmul+0x2b8>
 800178a:	4656      	mov	r6, sl
 800178c:	3b08      	subs	r3, #8
 800178e:	2200      	movs	r2, #0
 8001790:	409e      	lsls	r6, r3
 8001792:	e723      	b.n	80015dc <__aeabi_dmul+0x2cc>
 8001794:	9b00      	ldr	r3, [sp, #0]
 8001796:	469c      	mov	ip, r3
 8001798:	e6e6      	b.n	8001568 <__aeabi_dmul+0x258>
 800179a:	4912      	ldr	r1, [pc, #72]	; (80017e4 <__aeabi_dmul+0x4d4>)
 800179c:	0022      	movs	r2, r4
 800179e:	4461      	add	r1, ip
 80017a0:	002e      	movs	r6, r5
 80017a2:	408d      	lsls	r5, r1
 80017a4:	408a      	lsls	r2, r1
 80017a6:	40c6      	lsrs	r6, r0
 80017a8:	1e69      	subs	r1, r5, #1
 80017aa:	418d      	sbcs	r5, r1
 80017ac:	4332      	orrs	r2, r6
 80017ae:	432a      	orrs	r2, r5
 80017b0:	40c4      	lsrs	r4, r0
 80017b2:	0753      	lsls	r3, r2, #29
 80017b4:	d0b6      	beq.n	8001724 <__aeabi_dmul+0x414>
 80017b6:	210f      	movs	r1, #15
 80017b8:	4011      	ands	r1, r2
 80017ba:	2904      	cmp	r1, #4
 80017bc:	d1ac      	bne.n	8001718 <__aeabi_dmul+0x408>
 80017be:	e7b1      	b.n	8001724 <__aeabi_dmul+0x414>
 80017c0:	0765      	lsls	r5, r4, #29
 80017c2:	0264      	lsls	r4, r4, #9
 80017c4:	0b24      	lsrs	r4, r4, #12
 80017c6:	08d2      	lsrs	r2, r2, #3
 80017c8:	4315      	orrs	r5, r2
 80017ca:	2200      	movs	r2, #0
 80017cc:	e601      	b.n	80013d2 <__aeabi_dmul+0xc2>
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	0312      	lsls	r2, r2, #12
 80017d2:	4314      	orrs	r4, r2
 80017d4:	0324      	lsls	r4, r4, #12
 80017d6:	4a01      	ldr	r2, [pc, #4]	; (80017dc <__aeabi_dmul+0x4cc>)
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	e5fa      	b.n	80013d2 <__aeabi_dmul+0xc2>
 80017dc:	000007ff 	.word	0x000007ff
 80017e0:	0000043e 	.word	0x0000043e
 80017e4:	0000041e 	.word	0x0000041e

080017e8 <__aeabi_dsub>:
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	4657      	mov	r7, sl
 80017ec:	464e      	mov	r6, r9
 80017ee:	4645      	mov	r5, r8
 80017f0:	46de      	mov	lr, fp
 80017f2:	b5e0      	push	{r5, r6, r7, lr}
 80017f4:	001e      	movs	r6, r3
 80017f6:	0017      	movs	r7, r2
 80017f8:	004a      	lsls	r2, r1, #1
 80017fa:	030b      	lsls	r3, r1, #12
 80017fc:	0d52      	lsrs	r2, r2, #21
 80017fe:	0a5b      	lsrs	r3, r3, #9
 8001800:	4690      	mov	r8, r2
 8001802:	0f42      	lsrs	r2, r0, #29
 8001804:	431a      	orrs	r2, r3
 8001806:	0fcd      	lsrs	r5, r1, #31
 8001808:	4ccd      	ldr	r4, [pc, #820]	; (8001b40 <__aeabi_dsub+0x358>)
 800180a:	0331      	lsls	r1, r6, #12
 800180c:	00c3      	lsls	r3, r0, #3
 800180e:	4694      	mov	ip, r2
 8001810:	0070      	lsls	r0, r6, #1
 8001812:	0f7a      	lsrs	r2, r7, #29
 8001814:	0a49      	lsrs	r1, r1, #9
 8001816:	00ff      	lsls	r7, r7, #3
 8001818:	469a      	mov	sl, r3
 800181a:	46b9      	mov	r9, r7
 800181c:	0d40      	lsrs	r0, r0, #21
 800181e:	0ff6      	lsrs	r6, r6, #31
 8001820:	4311      	orrs	r1, r2
 8001822:	42a0      	cmp	r0, r4
 8001824:	d100      	bne.n	8001828 <__aeabi_dsub+0x40>
 8001826:	e0b1      	b.n	800198c <__aeabi_dsub+0x1a4>
 8001828:	2201      	movs	r2, #1
 800182a:	4056      	eors	r6, r2
 800182c:	46b3      	mov	fp, r6
 800182e:	42b5      	cmp	r5, r6
 8001830:	d100      	bne.n	8001834 <__aeabi_dsub+0x4c>
 8001832:	e088      	b.n	8001946 <__aeabi_dsub+0x15e>
 8001834:	4642      	mov	r2, r8
 8001836:	1a12      	subs	r2, r2, r0
 8001838:	2a00      	cmp	r2, #0
 800183a:	dc00      	bgt.n	800183e <__aeabi_dsub+0x56>
 800183c:	e0ae      	b.n	800199c <__aeabi_dsub+0x1b4>
 800183e:	2800      	cmp	r0, #0
 8001840:	d100      	bne.n	8001844 <__aeabi_dsub+0x5c>
 8001842:	e0c1      	b.n	80019c8 <__aeabi_dsub+0x1e0>
 8001844:	48be      	ldr	r0, [pc, #760]	; (8001b40 <__aeabi_dsub+0x358>)
 8001846:	4580      	cmp	r8, r0
 8001848:	d100      	bne.n	800184c <__aeabi_dsub+0x64>
 800184a:	e151      	b.n	8001af0 <__aeabi_dsub+0x308>
 800184c:	2080      	movs	r0, #128	; 0x80
 800184e:	0400      	lsls	r0, r0, #16
 8001850:	4301      	orrs	r1, r0
 8001852:	2a38      	cmp	r2, #56	; 0x38
 8001854:	dd00      	ble.n	8001858 <__aeabi_dsub+0x70>
 8001856:	e17b      	b.n	8001b50 <__aeabi_dsub+0x368>
 8001858:	2a1f      	cmp	r2, #31
 800185a:	dd00      	ble.n	800185e <__aeabi_dsub+0x76>
 800185c:	e1ee      	b.n	8001c3c <__aeabi_dsub+0x454>
 800185e:	2020      	movs	r0, #32
 8001860:	003e      	movs	r6, r7
 8001862:	1a80      	subs	r0, r0, r2
 8001864:	000c      	movs	r4, r1
 8001866:	40d6      	lsrs	r6, r2
 8001868:	40d1      	lsrs	r1, r2
 800186a:	4087      	lsls	r7, r0
 800186c:	4662      	mov	r2, ip
 800186e:	4084      	lsls	r4, r0
 8001870:	1a52      	subs	r2, r2, r1
 8001872:	1e78      	subs	r0, r7, #1
 8001874:	4187      	sbcs	r7, r0
 8001876:	4694      	mov	ip, r2
 8001878:	4334      	orrs	r4, r6
 800187a:	4327      	orrs	r7, r4
 800187c:	1bdc      	subs	r4, r3, r7
 800187e:	42a3      	cmp	r3, r4
 8001880:	419b      	sbcs	r3, r3
 8001882:	4662      	mov	r2, ip
 8001884:	425b      	negs	r3, r3
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4699      	mov	r9, r3
 800188a:	464b      	mov	r3, r9
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	d400      	bmi.n	8001892 <__aeabi_dsub+0xaa>
 8001890:	e118      	b.n	8001ac4 <__aeabi_dsub+0x2dc>
 8001892:	464b      	mov	r3, r9
 8001894:	0258      	lsls	r0, r3, #9
 8001896:	0a43      	lsrs	r3, r0, #9
 8001898:	4699      	mov	r9, r3
 800189a:	464b      	mov	r3, r9
 800189c:	2b00      	cmp	r3, #0
 800189e:	d100      	bne.n	80018a2 <__aeabi_dsub+0xba>
 80018a0:	e137      	b.n	8001b12 <__aeabi_dsub+0x32a>
 80018a2:	4648      	mov	r0, r9
 80018a4:	f000 fb98 	bl	8001fd8 <__clzsi2>
 80018a8:	0001      	movs	r1, r0
 80018aa:	3908      	subs	r1, #8
 80018ac:	2320      	movs	r3, #32
 80018ae:	0022      	movs	r2, r4
 80018b0:	4648      	mov	r0, r9
 80018b2:	1a5b      	subs	r3, r3, r1
 80018b4:	40da      	lsrs	r2, r3
 80018b6:	4088      	lsls	r0, r1
 80018b8:	408c      	lsls	r4, r1
 80018ba:	4643      	mov	r3, r8
 80018bc:	4310      	orrs	r0, r2
 80018be:	4588      	cmp	r8, r1
 80018c0:	dd00      	ble.n	80018c4 <__aeabi_dsub+0xdc>
 80018c2:	e136      	b.n	8001b32 <__aeabi_dsub+0x34a>
 80018c4:	1ac9      	subs	r1, r1, r3
 80018c6:	1c4b      	adds	r3, r1, #1
 80018c8:	2b1f      	cmp	r3, #31
 80018ca:	dd00      	ble.n	80018ce <__aeabi_dsub+0xe6>
 80018cc:	e0ea      	b.n	8001aa4 <__aeabi_dsub+0x2bc>
 80018ce:	2220      	movs	r2, #32
 80018d0:	0026      	movs	r6, r4
 80018d2:	1ad2      	subs	r2, r2, r3
 80018d4:	0001      	movs	r1, r0
 80018d6:	4094      	lsls	r4, r2
 80018d8:	40de      	lsrs	r6, r3
 80018da:	40d8      	lsrs	r0, r3
 80018dc:	2300      	movs	r3, #0
 80018de:	4091      	lsls	r1, r2
 80018e0:	1e62      	subs	r2, r4, #1
 80018e2:	4194      	sbcs	r4, r2
 80018e4:	4681      	mov	r9, r0
 80018e6:	4698      	mov	r8, r3
 80018e8:	4331      	orrs	r1, r6
 80018ea:	430c      	orrs	r4, r1
 80018ec:	0763      	lsls	r3, r4, #29
 80018ee:	d009      	beq.n	8001904 <__aeabi_dsub+0x11c>
 80018f0:	230f      	movs	r3, #15
 80018f2:	4023      	ands	r3, r4
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d005      	beq.n	8001904 <__aeabi_dsub+0x11c>
 80018f8:	1d23      	adds	r3, r4, #4
 80018fa:	42a3      	cmp	r3, r4
 80018fc:	41a4      	sbcs	r4, r4
 80018fe:	4264      	negs	r4, r4
 8001900:	44a1      	add	r9, r4
 8001902:	001c      	movs	r4, r3
 8001904:	464b      	mov	r3, r9
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	d400      	bmi.n	800190c <__aeabi_dsub+0x124>
 800190a:	e0de      	b.n	8001aca <__aeabi_dsub+0x2e2>
 800190c:	4641      	mov	r1, r8
 800190e:	4b8c      	ldr	r3, [pc, #560]	; (8001b40 <__aeabi_dsub+0x358>)
 8001910:	3101      	adds	r1, #1
 8001912:	4299      	cmp	r1, r3
 8001914:	d100      	bne.n	8001918 <__aeabi_dsub+0x130>
 8001916:	e0e7      	b.n	8001ae8 <__aeabi_dsub+0x300>
 8001918:	464b      	mov	r3, r9
 800191a:	488a      	ldr	r0, [pc, #552]	; (8001b44 <__aeabi_dsub+0x35c>)
 800191c:	08e4      	lsrs	r4, r4, #3
 800191e:	4003      	ands	r3, r0
 8001920:	0018      	movs	r0, r3
 8001922:	0549      	lsls	r1, r1, #21
 8001924:	075b      	lsls	r3, r3, #29
 8001926:	0240      	lsls	r0, r0, #9
 8001928:	4323      	orrs	r3, r4
 800192a:	0d4a      	lsrs	r2, r1, #21
 800192c:	0b04      	lsrs	r4, r0, #12
 800192e:	0512      	lsls	r2, r2, #20
 8001930:	07ed      	lsls	r5, r5, #31
 8001932:	4322      	orrs	r2, r4
 8001934:	432a      	orrs	r2, r5
 8001936:	0018      	movs	r0, r3
 8001938:	0011      	movs	r1, r2
 800193a:	bcf0      	pop	{r4, r5, r6, r7}
 800193c:	46bb      	mov	fp, r7
 800193e:	46b2      	mov	sl, r6
 8001940:	46a9      	mov	r9, r5
 8001942:	46a0      	mov	r8, r4
 8001944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001946:	4642      	mov	r2, r8
 8001948:	1a12      	subs	r2, r2, r0
 800194a:	2a00      	cmp	r2, #0
 800194c:	dd52      	ble.n	80019f4 <__aeabi_dsub+0x20c>
 800194e:	2800      	cmp	r0, #0
 8001950:	d100      	bne.n	8001954 <__aeabi_dsub+0x16c>
 8001952:	e09c      	b.n	8001a8e <__aeabi_dsub+0x2a6>
 8001954:	45a0      	cmp	r8, r4
 8001956:	d100      	bne.n	800195a <__aeabi_dsub+0x172>
 8001958:	e0ca      	b.n	8001af0 <__aeabi_dsub+0x308>
 800195a:	2080      	movs	r0, #128	; 0x80
 800195c:	0400      	lsls	r0, r0, #16
 800195e:	4301      	orrs	r1, r0
 8001960:	2a38      	cmp	r2, #56	; 0x38
 8001962:	dd00      	ble.n	8001966 <__aeabi_dsub+0x17e>
 8001964:	e149      	b.n	8001bfa <__aeabi_dsub+0x412>
 8001966:	2a1f      	cmp	r2, #31
 8001968:	dc00      	bgt.n	800196c <__aeabi_dsub+0x184>
 800196a:	e197      	b.n	8001c9c <__aeabi_dsub+0x4b4>
 800196c:	0010      	movs	r0, r2
 800196e:	000e      	movs	r6, r1
 8001970:	3820      	subs	r0, #32
 8001972:	40c6      	lsrs	r6, r0
 8001974:	2a20      	cmp	r2, #32
 8001976:	d004      	beq.n	8001982 <__aeabi_dsub+0x19a>
 8001978:	2040      	movs	r0, #64	; 0x40
 800197a:	1a82      	subs	r2, r0, r2
 800197c:	4091      	lsls	r1, r2
 800197e:	430f      	orrs	r7, r1
 8001980:	46b9      	mov	r9, r7
 8001982:	464c      	mov	r4, r9
 8001984:	1e62      	subs	r2, r4, #1
 8001986:	4194      	sbcs	r4, r2
 8001988:	4334      	orrs	r4, r6
 800198a:	e13a      	b.n	8001c02 <__aeabi_dsub+0x41a>
 800198c:	000a      	movs	r2, r1
 800198e:	433a      	orrs	r2, r7
 8001990:	d028      	beq.n	80019e4 <__aeabi_dsub+0x1fc>
 8001992:	46b3      	mov	fp, r6
 8001994:	42b5      	cmp	r5, r6
 8001996:	d02b      	beq.n	80019f0 <__aeabi_dsub+0x208>
 8001998:	4a6b      	ldr	r2, [pc, #428]	; (8001b48 <__aeabi_dsub+0x360>)
 800199a:	4442      	add	r2, r8
 800199c:	2a00      	cmp	r2, #0
 800199e:	d05d      	beq.n	8001a5c <__aeabi_dsub+0x274>
 80019a0:	4642      	mov	r2, r8
 80019a2:	4644      	mov	r4, r8
 80019a4:	1a82      	subs	r2, r0, r2
 80019a6:	2c00      	cmp	r4, #0
 80019a8:	d000      	beq.n	80019ac <__aeabi_dsub+0x1c4>
 80019aa:	e0f5      	b.n	8001b98 <__aeabi_dsub+0x3b0>
 80019ac:	4665      	mov	r5, ip
 80019ae:	431d      	orrs	r5, r3
 80019b0:	d100      	bne.n	80019b4 <__aeabi_dsub+0x1cc>
 80019b2:	e19c      	b.n	8001cee <__aeabi_dsub+0x506>
 80019b4:	1e55      	subs	r5, r2, #1
 80019b6:	2a01      	cmp	r2, #1
 80019b8:	d100      	bne.n	80019bc <__aeabi_dsub+0x1d4>
 80019ba:	e1fb      	b.n	8001db4 <__aeabi_dsub+0x5cc>
 80019bc:	4c60      	ldr	r4, [pc, #384]	; (8001b40 <__aeabi_dsub+0x358>)
 80019be:	42a2      	cmp	r2, r4
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x1dc>
 80019c2:	e1bd      	b.n	8001d40 <__aeabi_dsub+0x558>
 80019c4:	002a      	movs	r2, r5
 80019c6:	e0f0      	b.n	8001baa <__aeabi_dsub+0x3c2>
 80019c8:	0008      	movs	r0, r1
 80019ca:	4338      	orrs	r0, r7
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x1e8>
 80019ce:	e0c3      	b.n	8001b58 <__aeabi_dsub+0x370>
 80019d0:	1e50      	subs	r0, r2, #1
 80019d2:	2a01      	cmp	r2, #1
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x1f0>
 80019d6:	e1a8      	b.n	8001d2a <__aeabi_dsub+0x542>
 80019d8:	4c59      	ldr	r4, [pc, #356]	; (8001b40 <__aeabi_dsub+0x358>)
 80019da:	42a2      	cmp	r2, r4
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x1f8>
 80019de:	e087      	b.n	8001af0 <__aeabi_dsub+0x308>
 80019e0:	0002      	movs	r2, r0
 80019e2:	e736      	b.n	8001852 <__aeabi_dsub+0x6a>
 80019e4:	2201      	movs	r2, #1
 80019e6:	4056      	eors	r6, r2
 80019e8:	46b3      	mov	fp, r6
 80019ea:	42b5      	cmp	r5, r6
 80019ec:	d000      	beq.n	80019f0 <__aeabi_dsub+0x208>
 80019ee:	e721      	b.n	8001834 <__aeabi_dsub+0x4c>
 80019f0:	4a55      	ldr	r2, [pc, #340]	; (8001b48 <__aeabi_dsub+0x360>)
 80019f2:	4442      	add	r2, r8
 80019f4:	2a00      	cmp	r2, #0
 80019f6:	d100      	bne.n	80019fa <__aeabi_dsub+0x212>
 80019f8:	e0b5      	b.n	8001b66 <__aeabi_dsub+0x37e>
 80019fa:	4642      	mov	r2, r8
 80019fc:	4644      	mov	r4, r8
 80019fe:	1a82      	subs	r2, r0, r2
 8001a00:	2c00      	cmp	r4, #0
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x21e>
 8001a04:	e138      	b.n	8001c78 <__aeabi_dsub+0x490>
 8001a06:	4e4e      	ldr	r6, [pc, #312]	; (8001b40 <__aeabi_dsub+0x358>)
 8001a08:	42b0      	cmp	r0, r6
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x226>
 8001a0c:	e1de      	b.n	8001dcc <__aeabi_dsub+0x5e4>
 8001a0e:	2680      	movs	r6, #128	; 0x80
 8001a10:	4664      	mov	r4, ip
 8001a12:	0436      	lsls	r6, r6, #16
 8001a14:	4334      	orrs	r4, r6
 8001a16:	46a4      	mov	ip, r4
 8001a18:	2a38      	cmp	r2, #56	; 0x38
 8001a1a:	dd00      	ble.n	8001a1e <__aeabi_dsub+0x236>
 8001a1c:	e196      	b.n	8001d4c <__aeabi_dsub+0x564>
 8001a1e:	2a1f      	cmp	r2, #31
 8001a20:	dd00      	ble.n	8001a24 <__aeabi_dsub+0x23c>
 8001a22:	e224      	b.n	8001e6e <__aeabi_dsub+0x686>
 8001a24:	2620      	movs	r6, #32
 8001a26:	1ab4      	subs	r4, r6, r2
 8001a28:	46a2      	mov	sl, r4
 8001a2a:	4664      	mov	r4, ip
 8001a2c:	4656      	mov	r6, sl
 8001a2e:	40b4      	lsls	r4, r6
 8001a30:	46a1      	mov	r9, r4
 8001a32:	001c      	movs	r4, r3
 8001a34:	464e      	mov	r6, r9
 8001a36:	40d4      	lsrs	r4, r2
 8001a38:	4326      	orrs	r6, r4
 8001a3a:	0034      	movs	r4, r6
 8001a3c:	4656      	mov	r6, sl
 8001a3e:	40b3      	lsls	r3, r6
 8001a40:	1e5e      	subs	r6, r3, #1
 8001a42:	41b3      	sbcs	r3, r6
 8001a44:	431c      	orrs	r4, r3
 8001a46:	4663      	mov	r3, ip
 8001a48:	40d3      	lsrs	r3, r2
 8001a4a:	18c9      	adds	r1, r1, r3
 8001a4c:	19e4      	adds	r4, r4, r7
 8001a4e:	42bc      	cmp	r4, r7
 8001a50:	41bf      	sbcs	r7, r7
 8001a52:	427f      	negs	r7, r7
 8001a54:	46b9      	mov	r9, r7
 8001a56:	4680      	mov	r8, r0
 8001a58:	4489      	add	r9, r1
 8001a5a:	e0d8      	b.n	8001c0e <__aeabi_dsub+0x426>
 8001a5c:	4640      	mov	r0, r8
 8001a5e:	4c3b      	ldr	r4, [pc, #236]	; (8001b4c <__aeabi_dsub+0x364>)
 8001a60:	3001      	adds	r0, #1
 8001a62:	4220      	tst	r0, r4
 8001a64:	d000      	beq.n	8001a68 <__aeabi_dsub+0x280>
 8001a66:	e0b4      	b.n	8001bd2 <__aeabi_dsub+0x3ea>
 8001a68:	4640      	mov	r0, r8
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d000      	beq.n	8001a70 <__aeabi_dsub+0x288>
 8001a6e:	e144      	b.n	8001cfa <__aeabi_dsub+0x512>
 8001a70:	4660      	mov	r0, ip
 8001a72:	4318      	orrs	r0, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dsub+0x290>
 8001a76:	e190      	b.n	8001d9a <__aeabi_dsub+0x5b2>
 8001a78:	0008      	movs	r0, r1
 8001a7a:	4338      	orrs	r0, r7
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dsub+0x298>
 8001a7e:	e1aa      	b.n	8001dd6 <__aeabi_dsub+0x5ee>
 8001a80:	4661      	mov	r1, ip
 8001a82:	08db      	lsrs	r3, r3, #3
 8001a84:	0749      	lsls	r1, r1, #29
 8001a86:	430b      	orrs	r3, r1
 8001a88:	4661      	mov	r1, ip
 8001a8a:	08cc      	lsrs	r4, r1, #3
 8001a8c:	e027      	b.n	8001ade <__aeabi_dsub+0x2f6>
 8001a8e:	0008      	movs	r0, r1
 8001a90:	4338      	orrs	r0, r7
 8001a92:	d061      	beq.n	8001b58 <__aeabi_dsub+0x370>
 8001a94:	1e50      	subs	r0, r2, #1
 8001a96:	2a01      	cmp	r2, #1
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dsub+0x2b4>
 8001a9a:	e139      	b.n	8001d10 <__aeabi_dsub+0x528>
 8001a9c:	42a2      	cmp	r2, r4
 8001a9e:	d027      	beq.n	8001af0 <__aeabi_dsub+0x308>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	e75d      	b.n	8001960 <__aeabi_dsub+0x178>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	391f      	subs	r1, #31
 8001aa8:	40ca      	lsrs	r2, r1
 8001aaa:	0011      	movs	r1, r2
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d003      	beq.n	8001ab8 <__aeabi_dsub+0x2d0>
 8001ab0:	2240      	movs	r2, #64	; 0x40
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	4098      	lsls	r0, r3
 8001ab6:	4304      	orrs	r4, r0
 8001ab8:	1e63      	subs	r3, r4, #1
 8001aba:	419c      	sbcs	r4, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	4699      	mov	r9, r3
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	430c      	orrs	r4, r1
 8001ac4:	0763      	lsls	r3, r4, #29
 8001ac6:	d000      	beq.n	8001aca <__aeabi_dsub+0x2e2>
 8001ac8:	e712      	b.n	80018f0 <__aeabi_dsub+0x108>
 8001aca:	464b      	mov	r3, r9
 8001acc:	464a      	mov	r2, r9
 8001ace:	08e4      	lsrs	r4, r4, #3
 8001ad0:	075b      	lsls	r3, r3, #29
 8001ad2:	4323      	orrs	r3, r4
 8001ad4:	08d4      	lsrs	r4, r2, #3
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	4919      	ldr	r1, [pc, #100]	; (8001b40 <__aeabi_dsub+0x358>)
 8001ada:	428a      	cmp	r2, r1
 8001adc:	d00e      	beq.n	8001afc <__aeabi_dsub+0x314>
 8001ade:	0324      	lsls	r4, r4, #12
 8001ae0:	0552      	lsls	r2, r2, #21
 8001ae2:	0b24      	lsrs	r4, r4, #12
 8001ae4:	0d52      	lsrs	r2, r2, #21
 8001ae6:	e722      	b.n	800192e <__aeabi_dsub+0x146>
 8001ae8:	000a      	movs	r2, r1
 8001aea:	2400      	movs	r4, #0
 8001aec:	2300      	movs	r3, #0
 8001aee:	e71e      	b.n	800192e <__aeabi_dsub+0x146>
 8001af0:	08db      	lsrs	r3, r3, #3
 8001af2:	4662      	mov	r2, ip
 8001af4:	0752      	lsls	r2, r2, #29
 8001af6:	4313      	orrs	r3, r2
 8001af8:	4662      	mov	r2, ip
 8001afa:	08d4      	lsrs	r4, r2, #3
 8001afc:	001a      	movs	r2, r3
 8001afe:	4322      	orrs	r2, r4
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x31c>
 8001b02:	e1fc      	b.n	8001efe <__aeabi_dsub+0x716>
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	0312      	lsls	r2, r2, #12
 8001b08:	4314      	orrs	r4, r2
 8001b0a:	0324      	lsls	r4, r4, #12
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <__aeabi_dsub+0x358>)
 8001b0e:	0b24      	lsrs	r4, r4, #12
 8001b10:	e70d      	b.n	800192e <__aeabi_dsub+0x146>
 8001b12:	0020      	movs	r0, r4
 8001b14:	f000 fa60 	bl	8001fd8 <__clzsi2>
 8001b18:	0001      	movs	r1, r0
 8001b1a:	3118      	adds	r1, #24
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dc00      	bgt.n	8001b22 <__aeabi_dsub+0x33a>
 8001b20:	e6c4      	b.n	80018ac <__aeabi_dsub+0xc4>
 8001b22:	3808      	subs	r0, #8
 8001b24:	4084      	lsls	r4, r0
 8001b26:	4643      	mov	r3, r8
 8001b28:	0020      	movs	r0, r4
 8001b2a:	2400      	movs	r4, #0
 8001b2c:	4588      	cmp	r8, r1
 8001b2e:	dc00      	bgt.n	8001b32 <__aeabi_dsub+0x34a>
 8001b30:	e6c8      	b.n	80018c4 <__aeabi_dsub+0xdc>
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__aeabi_dsub+0x35c>)
 8001b34:	1a5b      	subs	r3, r3, r1
 8001b36:	4010      	ands	r0, r2
 8001b38:	4698      	mov	r8, r3
 8001b3a:	4681      	mov	r9, r0
 8001b3c:	e6d6      	b.n	80018ec <__aeabi_dsub+0x104>
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	000007ff 	.word	0x000007ff
 8001b44:	ff7fffff 	.word	0xff7fffff
 8001b48:	fffff801 	.word	0xfffff801
 8001b4c:	000007fe 	.word	0x000007fe
 8001b50:	430f      	orrs	r7, r1
 8001b52:	1e7a      	subs	r2, r7, #1
 8001b54:	4197      	sbcs	r7, r2
 8001b56:	e691      	b.n	800187c <__aeabi_dsub+0x94>
 8001b58:	4661      	mov	r1, ip
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	0749      	lsls	r1, r1, #29
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	4661      	mov	r1, ip
 8001b62:	08cc      	lsrs	r4, r1, #3
 8001b64:	e7b8      	b.n	8001ad8 <__aeabi_dsub+0x2f0>
 8001b66:	4640      	mov	r0, r8
 8001b68:	4cd3      	ldr	r4, [pc, #844]	; (8001eb8 <__aeabi_dsub+0x6d0>)
 8001b6a:	3001      	adds	r0, #1
 8001b6c:	4220      	tst	r0, r4
 8001b6e:	d000      	beq.n	8001b72 <__aeabi_dsub+0x38a>
 8001b70:	e0a2      	b.n	8001cb8 <__aeabi_dsub+0x4d0>
 8001b72:	4640      	mov	r0, r8
 8001b74:	2800      	cmp	r0, #0
 8001b76:	d000      	beq.n	8001b7a <__aeabi_dsub+0x392>
 8001b78:	e101      	b.n	8001d7e <__aeabi_dsub+0x596>
 8001b7a:	4660      	mov	r0, ip
 8001b7c:	4318      	orrs	r0, r3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_dsub+0x39a>
 8001b80:	e15e      	b.n	8001e40 <__aeabi_dsub+0x658>
 8001b82:	0008      	movs	r0, r1
 8001b84:	4338      	orrs	r0, r7
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x3a2>
 8001b88:	e15f      	b.n	8001e4a <__aeabi_dsub+0x662>
 8001b8a:	4661      	mov	r1, ip
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	0749      	lsls	r1, r1, #29
 8001b90:	430b      	orrs	r3, r1
 8001b92:	4661      	mov	r1, ip
 8001b94:	08cc      	lsrs	r4, r1, #3
 8001b96:	e7a2      	b.n	8001ade <__aeabi_dsub+0x2f6>
 8001b98:	4dc8      	ldr	r5, [pc, #800]	; (8001ebc <__aeabi_dsub+0x6d4>)
 8001b9a:	42a8      	cmp	r0, r5
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dsub+0x3b8>
 8001b9e:	e0cf      	b.n	8001d40 <__aeabi_dsub+0x558>
 8001ba0:	2580      	movs	r5, #128	; 0x80
 8001ba2:	4664      	mov	r4, ip
 8001ba4:	042d      	lsls	r5, r5, #16
 8001ba6:	432c      	orrs	r4, r5
 8001ba8:	46a4      	mov	ip, r4
 8001baa:	2a38      	cmp	r2, #56	; 0x38
 8001bac:	dc56      	bgt.n	8001c5c <__aeabi_dsub+0x474>
 8001bae:	2a1f      	cmp	r2, #31
 8001bb0:	dd00      	ble.n	8001bb4 <__aeabi_dsub+0x3cc>
 8001bb2:	e0d1      	b.n	8001d58 <__aeabi_dsub+0x570>
 8001bb4:	2520      	movs	r5, #32
 8001bb6:	001e      	movs	r6, r3
 8001bb8:	1aad      	subs	r5, r5, r2
 8001bba:	4664      	mov	r4, ip
 8001bbc:	40ab      	lsls	r3, r5
 8001bbe:	40ac      	lsls	r4, r5
 8001bc0:	40d6      	lsrs	r6, r2
 8001bc2:	1e5d      	subs	r5, r3, #1
 8001bc4:	41ab      	sbcs	r3, r5
 8001bc6:	4334      	orrs	r4, r6
 8001bc8:	4323      	orrs	r3, r4
 8001bca:	4664      	mov	r4, ip
 8001bcc:	40d4      	lsrs	r4, r2
 8001bce:	1b09      	subs	r1, r1, r4
 8001bd0:	e049      	b.n	8001c66 <__aeabi_dsub+0x47e>
 8001bd2:	4660      	mov	r0, ip
 8001bd4:	1bdc      	subs	r4, r3, r7
 8001bd6:	1a46      	subs	r6, r0, r1
 8001bd8:	42a3      	cmp	r3, r4
 8001bda:	4180      	sbcs	r0, r0
 8001bdc:	4240      	negs	r0, r0
 8001bde:	4681      	mov	r9, r0
 8001be0:	0030      	movs	r0, r6
 8001be2:	464e      	mov	r6, r9
 8001be4:	1b80      	subs	r0, r0, r6
 8001be6:	4681      	mov	r9, r0
 8001be8:	0200      	lsls	r0, r0, #8
 8001bea:	d476      	bmi.n	8001cda <__aeabi_dsub+0x4f2>
 8001bec:	464b      	mov	r3, r9
 8001bee:	4323      	orrs	r3, r4
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x40c>
 8001bf2:	e652      	b.n	800189a <__aeabi_dsub+0xb2>
 8001bf4:	2400      	movs	r4, #0
 8001bf6:	2500      	movs	r5, #0
 8001bf8:	e771      	b.n	8001ade <__aeabi_dsub+0x2f6>
 8001bfa:	4339      	orrs	r1, r7
 8001bfc:	000c      	movs	r4, r1
 8001bfe:	1e62      	subs	r2, r4, #1
 8001c00:	4194      	sbcs	r4, r2
 8001c02:	18e4      	adds	r4, r4, r3
 8001c04:	429c      	cmp	r4, r3
 8001c06:	419b      	sbcs	r3, r3
 8001c08:	425b      	negs	r3, r3
 8001c0a:	4463      	add	r3, ip
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	464b      	mov	r3, r9
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	d400      	bmi.n	8001c16 <__aeabi_dsub+0x42e>
 8001c14:	e756      	b.n	8001ac4 <__aeabi_dsub+0x2dc>
 8001c16:	2301      	movs	r3, #1
 8001c18:	469c      	mov	ip, r3
 8001c1a:	4ba8      	ldr	r3, [pc, #672]	; (8001ebc <__aeabi_dsub+0x6d4>)
 8001c1c:	44e0      	add	r8, ip
 8001c1e:	4598      	cmp	r8, r3
 8001c20:	d038      	beq.n	8001c94 <__aeabi_dsub+0x4ac>
 8001c22:	464b      	mov	r3, r9
 8001c24:	48a6      	ldr	r0, [pc, #664]	; (8001ec0 <__aeabi_dsub+0x6d8>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	4003      	ands	r3, r0
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	0863      	lsrs	r3, r4, #1
 8001c2e:	4014      	ands	r4, r2
 8001c30:	431c      	orrs	r4, r3
 8001c32:	07c3      	lsls	r3, r0, #31
 8001c34:	431c      	orrs	r4, r3
 8001c36:	0843      	lsrs	r3, r0, #1
 8001c38:	4699      	mov	r9, r3
 8001c3a:	e657      	b.n	80018ec <__aeabi_dsub+0x104>
 8001c3c:	0010      	movs	r0, r2
 8001c3e:	000e      	movs	r6, r1
 8001c40:	3820      	subs	r0, #32
 8001c42:	40c6      	lsrs	r6, r0
 8001c44:	2a20      	cmp	r2, #32
 8001c46:	d004      	beq.n	8001c52 <__aeabi_dsub+0x46a>
 8001c48:	2040      	movs	r0, #64	; 0x40
 8001c4a:	1a82      	subs	r2, r0, r2
 8001c4c:	4091      	lsls	r1, r2
 8001c4e:	430f      	orrs	r7, r1
 8001c50:	46b9      	mov	r9, r7
 8001c52:	464f      	mov	r7, r9
 8001c54:	1e7a      	subs	r2, r7, #1
 8001c56:	4197      	sbcs	r7, r2
 8001c58:	4337      	orrs	r7, r6
 8001c5a:	e60f      	b.n	800187c <__aeabi_dsub+0x94>
 8001c5c:	4662      	mov	r2, ip
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	1e5a      	subs	r2, r3, #1
 8001c64:	4193      	sbcs	r3, r2
 8001c66:	1afc      	subs	r4, r7, r3
 8001c68:	42a7      	cmp	r7, r4
 8001c6a:	41bf      	sbcs	r7, r7
 8001c6c:	427f      	negs	r7, r7
 8001c6e:	1bcb      	subs	r3, r1, r7
 8001c70:	4699      	mov	r9, r3
 8001c72:	465d      	mov	r5, fp
 8001c74:	4680      	mov	r8, r0
 8001c76:	e608      	b.n	800188a <__aeabi_dsub+0xa2>
 8001c78:	4666      	mov	r6, ip
 8001c7a:	431e      	orrs	r6, r3
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_dsub+0x498>
 8001c7e:	e0be      	b.n	8001dfe <__aeabi_dsub+0x616>
 8001c80:	1e56      	subs	r6, r2, #1
 8001c82:	2a01      	cmp	r2, #1
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x4a0>
 8001c86:	e109      	b.n	8001e9c <__aeabi_dsub+0x6b4>
 8001c88:	4c8c      	ldr	r4, [pc, #560]	; (8001ebc <__aeabi_dsub+0x6d4>)
 8001c8a:	42a2      	cmp	r2, r4
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x4a8>
 8001c8e:	e119      	b.n	8001ec4 <__aeabi_dsub+0x6dc>
 8001c90:	0032      	movs	r2, r6
 8001c92:	e6c1      	b.n	8001a18 <__aeabi_dsub+0x230>
 8001c94:	4642      	mov	r2, r8
 8001c96:	2400      	movs	r4, #0
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e648      	b.n	800192e <__aeabi_dsub+0x146>
 8001c9c:	2020      	movs	r0, #32
 8001c9e:	000c      	movs	r4, r1
 8001ca0:	1a80      	subs	r0, r0, r2
 8001ca2:	003e      	movs	r6, r7
 8001ca4:	4087      	lsls	r7, r0
 8001ca6:	4084      	lsls	r4, r0
 8001ca8:	40d6      	lsrs	r6, r2
 8001caa:	1e78      	subs	r0, r7, #1
 8001cac:	4187      	sbcs	r7, r0
 8001cae:	40d1      	lsrs	r1, r2
 8001cb0:	4334      	orrs	r4, r6
 8001cb2:	433c      	orrs	r4, r7
 8001cb4:	448c      	add	ip, r1
 8001cb6:	e7a4      	b.n	8001c02 <__aeabi_dsub+0x41a>
 8001cb8:	4a80      	ldr	r2, [pc, #512]	; (8001ebc <__aeabi_dsub+0x6d4>)
 8001cba:	4290      	cmp	r0, r2
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x4d8>
 8001cbe:	e0e9      	b.n	8001e94 <__aeabi_dsub+0x6ac>
 8001cc0:	19df      	adds	r7, r3, r7
 8001cc2:	429f      	cmp	r7, r3
 8001cc4:	419b      	sbcs	r3, r3
 8001cc6:	4461      	add	r1, ip
 8001cc8:	425b      	negs	r3, r3
 8001cca:	18c9      	adds	r1, r1, r3
 8001ccc:	07cc      	lsls	r4, r1, #31
 8001cce:	087f      	lsrs	r7, r7, #1
 8001cd0:	084b      	lsrs	r3, r1, #1
 8001cd2:	4699      	mov	r9, r3
 8001cd4:	4680      	mov	r8, r0
 8001cd6:	433c      	orrs	r4, r7
 8001cd8:	e6f4      	b.n	8001ac4 <__aeabi_dsub+0x2dc>
 8001cda:	1afc      	subs	r4, r7, r3
 8001cdc:	42a7      	cmp	r7, r4
 8001cde:	41bf      	sbcs	r7, r7
 8001ce0:	4663      	mov	r3, ip
 8001ce2:	427f      	negs	r7, r7
 8001ce4:	1ac9      	subs	r1, r1, r3
 8001ce6:	1bcb      	subs	r3, r1, r7
 8001ce8:	4699      	mov	r9, r3
 8001cea:	465d      	mov	r5, fp
 8001cec:	e5d5      	b.n	800189a <__aeabi_dsub+0xb2>
 8001cee:	08ff      	lsrs	r7, r7, #3
 8001cf0:	074b      	lsls	r3, r1, #29
 8001cf2:	465d      	mov	r5, fp
 8001cf4:	433b      	orrs	r3, r7
 8001cf6:	08cc      	lsrs	r4, r1, #3
 8001cf8:	e6ee      	b.n	8001ad8 <__aeabi_dsub+0x2f0>
 8001cfa:	4662      	mov	r2, ip
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	d000      	beq.n	8001d02 <__aeabi_dsub+0x51a>
 8001d00:	e082      	b.n	8001e08 <__aeabi_dsub+0x620>
 8001d02:	000b      	movs	r3, r1
 8001d04:	433b      	orrs	r3, r7
 8001d06:	d11b      	bne.n	8001d40 <__aeabi_dsub+0x558>
 8001d08:	2480      	movs	r4, #128	; 0x80
 8001d0a:	2500      	movs	r5, #0
 8001d0c:	0324      	lsls	r4, r4, #12
 8001d0e:	e6f9      	b.n	8001b04 <__aeabi_dsub+0x31c>
 8001d10:	19dc      	adds	r4, r3, r7
 8001d12:	429c      	cmp	r4, r3
 8001d14:	419b      	sbcs	r3, r3
 8001d16:	4461      	add	r1, ip
 8001d18:	4689      	mov	r9, r1
 8001d1a:	425b      	negs	r3, r3
 8001d1c:	4499      	add	r9, r3
 8001d1e:	464b      	mov	r3, r9
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	d444      	bmi.n	8001dae <__aeabi_dsub+0x5c6>
 8001d24:	2301      	movs	r3, #1
 8001d26:	4698      	mov	r8, r3
 8001d28:	e6cc      	b.n	8001ac4 <__aeabi_dsub+0x2dc>
 8001d2a:	1bdc      	subs	r4, r3, r7
 8001d2c:	4662      	mov	r2, ip
 8001d2e:	42a3      	cmp	r3, r4
 8001d30:	419b      	sbcs	r3, r3
 8001d32:	1a51      	subs	r1, r2, r1
 8001d34:	425b      	negs	r3, r3
 8001d36:	1acb      	subs	r3, r1, r3
 8001d38:	4699      	mov	r9, r3
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	e5a4      	b.n	800188a <__aeabi_dsub+0xa2>
 8001d40:	08ff      	lsrs	r7, r7, #3
 8001d42:	074b      	lsls	r3, r1, #29
 8001d44:	465d      	mov	r5, fp
 8001d46:	433b      	orrs	r3, r7
 8001d48:	08cc      	lsrs	r4, r1, #3
 8001d4a:	e6d7      	b.n	8001afc <__aeabi_dsub+0x314>
 8001d4c:	4662      	mov	r2, ip
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	0014      	movs	r4, r2
 8001d52:	1e63      	subs	r3, r4, #1
 8001d54:	419c      	sbcs	r4, r3
 8001d56:	e679      	b.n	8001a4c <__aeabi_dsub+0x264>
 8001d58:	0015      	movs	r5, r2
 8001d5a:	4664      	mov	r4, ip
 8001d5c:	3d20      	subs	r5, #32
 8001d5e:	40ec      	lsrs	r4, r5
 8001d60:	46a0      	mov	r8, r4
 8001d62:	2a20      	cmp	r2, #32
 8001d64:	d005      	beq.n	8001d72 <__aeabi_dsub+0x58a>
 8001d66:	2540      	movs	r5, #64	; 0x40
 8001d68:	4664      	mov	r4, ip
 8001d6a:	1aaa      	subs	r2, r5, r2
 8001d6c:	4094      	lsls	r4, r2
 8001d6e:	4323      	orrs	r3, r4
 8001d70:	469a      	mov	sl, r3
 8001d72:	4654      	mov	r4, sl
 8001d74:	1e63      	subs	r3, r4, #1
 8001d76:	419c      	sbcs	r4, r3
 8001d78:	4643      	mov	r3, r8
 8001d7a:	4323      	orrs	r3, r4
 8001d7c:	e773      	b.n	8001c66 <__aeabi_dsub+0x47e>
 8001d7e:	4662      	mov	r2, ip
 8001d80:	431a      	orrs	r2, r3
 8001d82:	d023      	beq.n	8001dcc <__aeabi_dsub+0x5e4>
 8001d84:	000a      	movs	r2, r1
 8001d86:	433a      	orrs	r2, r7
 8001d88:	d000      	beq.n	8001d8c <__aeabi_dsub+0x5a4>
 8001d8a:	e0a0      	b.n	8001ece <__aeabi_dsub+0x6e6>
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	0752      	lsls	r2, r2, #29
 8001d92:	4313      	orrs	r3, r2
 8001d94:	4662      	mov	r2, ip
 8001d96:	08d4      	lsrs	r4, r2, #3
 8001d98:	e6b0      	b.n	8001afc <__aeabi_dsub+0x314>
 8001d9a:	000b      	movs	r3, r1
 8001d9c:	433b      	orrs	r3, r7
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x5ba>
 8001da0:	e728      	b.n	8001bf4 <__aeabi_dsub+0x40c>
 8001da2:	08ff      	lsrs	r7, r7, #3
 8001da4:	074b      	lsls	r3, r1, #29
 8001da6:	465d      	mov	r5, fp
 8001da8:	433b      	orrs	r3, r7
 8001daa:	08cc      	lsrs	r4, r1, #3
 8001dac:	e697      	b.n	8001ade <__aeabi_dsub+0x2f6>
 8001dae:	2302      	movs	r3, #2
 8001db0:	4698      	mov	r8, r3
 8001db2:	e736      	b.n	8001c22 <__aeabi_dsub+0x43a>
 8001db4:	1afc      	subs	r4, r7, r3
 8001db6:	42a7      	cmp	r7, r4
 8001db8:	41bf      	sbcs	r7, r7
 8001dba:	4663      	mov	r3, ip
 8001dbc:	427f      	negs	r7, r7
 8001dbe:	1ac9      	subs	r1, r1, r3
 8001dc0:	1bcb      	subs	r3, r1, r7
 8001dc2:	4699      	mov	r9, r3
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	465d      	mov	r5, fp
 8001dc8:	4698      	mov	r8, r3
 8001dca:	e55e      	b.n	800188a <__aeabi_dsub+0xa2>
 8001dcc:	074b      	lsls	r3, r1, #29
 8001dce:	08ff      	lsrs	r7, r7, #3
 8001dd0:	433b      	orrs	r3, r7
 8001dd2:	08cc      	lsrs	r4, r1, #3
 8001dd4:	e692      	b.n	8001afc <__aeabi_dsub+0x314>
 8001dd6:	1bdc      	subs	r4, r3, r7
 8001dd8:	4660      	mov	r0, ip
 8001dda:	42a3      	cmp	r3, r4
 8001ddc:	41b6      	sbcs	r6, r6
 8001dde:	1a40      	subs	r0, r0, r1
 8001de0:	4276      	negs	r6, r6
 8001de2:	1b80      	subs	r0, r0, r6
 8001de4:	4681      	mov	r9, r0
 8001de6:	0200      	lsls	r0, r0, #8
 8001de8:	d560      	bpl.n	8001eac <__aeabi_dsub+0x6c4>
 8001dea:	1afc      	subs	r4, r7, r3
 8001dec:	42a7      	cmp	r7, r4
 8001dee:	41bf      	sbcs	r7, r7
 8001df0:	4663      	mov	r3, ip
 8001df2:	427f      	negs	r7, r7
 8001df4:	1ac9      	subs	r1, r1, r3
 8001df6:	1bcb      	subs	r3, r1, r7
 8001df8:	4699      	mov	r9, r3
 8001dfa:	465d      	mov	r5, fp
 8001dfc:	e576      	b.n	80018ec <__aeabi_dsub+0x104>
 8001dfe:	08ff      	lsrs	r7, r7, #3
 8001e00:	074b      	lsls	r3, r1, #29
 8001e02:	433b      	orrs	r3, r7
 8001e04:	08cc      	lsrs	r4, r1, #3
 8001e06:	e667      	b.n	8001ad8 <__aeabi_dsub+0x2f0>
 8001e08:	000a      	movs	r2, r1
 8001e0a:	08db      	lsrs	r3, r3, #3
 8001e0c:	433a      	orrs	r2, r7
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dsub+0x62a>
 8001e10:	e66f      	b.n	8001af2 <__aeabi_dsub+0x30a>
 8001e12:	4662      	mov	r2, ip
 8001e14:	0752      	lsls	r2, r2, #29
 8001e16:	4313      	orrs	r3, r2
 8001e18:	4662      	mov	r2, ip
 8001e1a:	08d4      	lsrs	r4, r2, #3
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	0312      	lsls	r2, r2, #12
 8001e20:	4214      	tst	r4, r2
 8001e22:	d007      	beq.n	8001e34 <__aeabi_dsub+0x64c>
 8001e24:	08c8      	lsrs	r0, r1, #3
 8001e26:	4210      	tst	r0, r2
 8001e28:	d104      	bne.n	8001e34 <__aeabi_dsub+0x64c>
 8001e2a:	465d      	mov	r5, fp
 8001e2c:	0004      	movs	r4, r0
 8001e2e:	08fb      	lsrs	r3, r7, #3
 8001e30:	0749      	lsls	r1, r1, #29
 8001e32:	430b      	orrs	r3, r1
 8001e34:	0f5a      	lsrs	r2, r3, #29
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	0752      	lsls	r2, r2, #29
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	e65d      	b.n	8001afc <__aeabi_dsub+0x314>
 8001e40:	074b      	lsls	r3, r1, #29
 8001e42:	08ff      	lsrs	r7, r7, #3
 8001e44:	433b      	orrs	r3, r7
 8001e46:	08cc      	lsrs	r4, r1, #3
 8001e48:	e649      	b.n	8001ade <__aeabi_dsub+0x2f6>
 8001e4a:	19dc      	adds	r4, r3, r7
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	419b      	sbcs	r3, r3
 8001e50:	4461      	add	r1, ip
 8001e52:	4689      	mov	r9, r1
 8001e54:	425b      	negs	r3, r3
 8001e56:	4499      	add	r9, r3
 8001e58:	464b      	mov	r3, r9
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	d400      	bmi.n	8001e60 <__aeabi_dsub+0x678>
 8001e5e:	e631      	b.n	8001ac4 <__aeabi_dsub+0x2dc>
 8001e60:	464a      	mov	r2, r9
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <__aeabi_dsub+0x6d8>)
 8001e64:	401a      	ands	r2, r3
 8001e66:	2301      	movs	r3, #1
 8001e68:	4691      	mov	r9, r2
 8001e6a:	4698      	mov	r8, r3
 8001e6c:	e62a      	b.n	8001ac4 <__aeabi_dsub+0x2dc>
 8001e6e:	0016      	movs	r6, r2
 8001e70:	4664      	mov	r4, ip
 8001e72:	3e20      	subs	r6, #32
 8001e74:	40f4      	lsrs	r4, r6
 8001e76:	46a0      	mov	r8, r4
 8001e78:	2a20      	cmp	r2, #32
 8001e7a:	d005      	beq.n	8001e88 <__aeabi_dsub+0x6a0>
 8001e7c:	2640      	movs	r6, #64	; 0x40
 8001e7e:	4664      	mov	r4, ip
 8001e80:	1ab2      	subs	r2, r6, r2
 8001e82:	4094      	lsls	r4, r2
 8001e84:	4323      	orrs	r3, r4
 8001e86:	469a      	mov	sl, r3
 8001e88:	4654      	mov	r4, sl
 8001e8a:	1e63      	subs	r3, r4, #1
 8001e8c:	419c      	sbcs	r4, r3
 8001e8e:	4643      	mov	r3, r8
 8001e90:	431c      	orrs	r4, r3
 8001e92:	e5db      	b.n	8001a4c <__aeabi_dsub+0x264>
 8001e94:	0002      	movs	r2, r0
 8001e96:	2400      	movs	r4, #0
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e548      	b.n	800192e <__aeabi_dsub+0x146>
 8001e9c:	19dc      	adds	r4, r3, r7
 8001e9e:	42bc      	cmp	r4, r7
 8001ea0:	41bf      	sbcs	r7, r7
 8001ea2:	4461      	add	r1, ip
 8001ea4:	4689      	mov	r9, r1
 8001ea6:	427f      	negs	r7, r7
 8001ea8:	44b9      	add	r9, r7
 8001eaa:	e738      	b.n	8001d1e <__aeabi_dsub+0x536>
 8001eac:	464b      	mov	r3, r9
 8001eae:	4323      	orrs	r3, r4
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x6cc>
 8001eb2:	e69f      	b.n	8001bf4 <__aeabi_dsub+0x40c>
 8001eb4:	e606      	b.n	8001ac4 <__aeabi_dsub+0x2dc>
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	000007fe 	.word	0x000007fe
 8001ebc:	000007ff 	.word	0x000007ff
 8001ec0:	ff7fffff 	.word	0xff7fffff
 8001ec4:	08ff      	lsrs	r7, r7, #3
 8001ec6:	074b      	lsls	r3, r1, #29
 8001ec8:	433b      	orrs	r3, r7
 8001eca:	08cc      	lsrs	r4, r1, #3
 8001ecc:	e616      	b.n	8001afc <__aeabi_dsub+0x314>
 8001ece:	4662      	mov	r2, ip
 8001ed0:	08db      	lsrs	r3, r3, #3
 8001ed2:	0752      	lsls	r2, r2, #29
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	4662      	mov	r2, ip
 8001ed8:	08d4      	lsrs	r4, r2, #3
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	0312      	lsls	r2, r2, #12
 8001ede:	4214      	tst	r4, r2
 8001ee0:	d007      	beq.n	8001ef2 <__aeabi_dsub+0x70a>
 8001ee2:	08c8      	lsrs	r0, r1, #3
 8001ee4:	4210      	tst	r0, r2
 8001ee6:	d104      	bne.n	8001ef2 <__aeabi_dsub+0x70a>
 8001ee8:	465d      	mov	r5, fp
 8001eea:	0004      	movs	r4, r0
 8001eec:	08fb      	lsrs	r3, r7, #3
 8001eee:	0749      	lsls	r1, r1, #29
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	0f5a      	lsrs	r2, r3, #29
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	0752      	lsls	r2, r2, #29
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	4313      	orrs	r3, r2
 8001efc:	e5fe      	b.n	8001afc <__aeabi_dsub+0x314>
 8001efe:	2300      	movs	r3, #0
 8001f00:	4a01      	ldr	r2, [pc, #4]	; (8001f08 <__aeabi_dsub+0x720>)
 8001f02:	001c      	movs	r4, r3
 8001f04:	e513      	b.n	800192e <__aeabi_dsub+0x146>
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	000007ff 	.word	0x000007ff

08001f0c <__aeabi_d2iz>:
 8001f0c:	000a      	movs	r2, r1
 8001f0e:	b530      	push	{r4, r5, lr}
 8001f10:	4c13      	ldr	r4, [pc, #76]	; (8001f60 <__aeabi_d2iz+0x54>)
 8001f12:	0053      	lsls	r3, r2, #1
 8001f14:	0309      	lsls	r1, r1, #12
 8001f16:	0005      	movs	r5, r0
 8001f18:	0b09      	lsrs	r1, r1, #12
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	0d5b      	lsrs	r3, r3, #21
 8001f1e:	0fd2      	lsrs	r2, r2, #31
 8001f20:	42a3      	cmp	r3, r4
 8001f22:	dd04      	ble.n	8001f2e <__aeabi_d2iz+0x22>
 8001f24:	480f      	ldr	r0, [pc, #60]	; (8001f64 <__aeabi_d2iz+0x58>)
 8001f26:	4283      	cmp	r3, r0
 8001f28:	dd02      	ble.n	8001f30 <__aeabi_d2iz+0x24>
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <__aeabi_d2iz+0x5c>)
 8001f2c:	18d0      	adds	r0, r2, r3
 8001f2e:	bd30      	pop	{r4, r5, pc}
 8001f30:	2080      	movs	r0, #128	; 0x80
 8001f32:	0340      	lsls	r0, r0, #13
 8001f34:	4301      	orrs	r1, r0
 8001f36:	480d      	ldr	r0, [pc, #52]	; (8001f6c <__aeabi_d2iz+0x60>)
 8001f38:	1ac0      	subs	r0, r0, r3
 8001f3a:	281f      	cmp	r0, #31
 8001f3c:	dd08      	ble.n	8001f50 <__aeabi_d2iz+0x44>
 8001f3e:	480c      	ldr	r0, [pc, #48]	; (8001f70 <__aeabi_d2iz+0x64>)
 8001f40:	1ac3      	subs	r3, r0, r3
 8001f42:	40d9      	lsrs	r1, r3
 8001f44:	000b      	movs	r3, r1
 8001f46:	4258      	negs	r0, r3
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	d1f0      	bne.n	8001f2e <__aeabi_d2iz+0x22>
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	e7ee      	b.n	8001f2e <__aeabi_d2iz+0x22>
 8001f50:	4c08      	ldr	r4, [pc, #32]	; (8001f74 <__aeabi_d2iz+0x68>)
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	46a4      	mov	ip, r4
 8001f56:	4463      	add	r3, ip
 8001f58:	4099      	lsls	r1, r3
 8001f5a:	000b      	movs	r3, r1
 8001f5c:	432b      	orrs	r3, r5
 8001f5e:	e7f2      	b.n	8001f46 <__aeabi_d2iz+0x3a>
 8001f60:	000003fe 	.word	0x000003fe
 8001f64:	0000041d 	.word	0x0000041d
 8001f68:	7fffffff 	.word	0x7fffffff
 8001f6c:	00000433 	.word	0x00000433
 8001f70:	00000413 	.word	0x00000413
 8001f74:	fffffbed 	.word	0xfffffbed

08001f78 <__aeabi_i2d>:
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d016      	beq.n	8001fac <__aeabi_i2d+0x34>
 8001f7e:	17c3      	asrs	r3, r0, #31
 8001f80:	18c5      	adds	r5, r0, r3
 8001f82:	405d      	eors	r5, r3
 8001f84:	0fc4      	lsrs	r4, r0, #31
 8001f86:	0028      	movs	r0, r5
 8001f88:	f000 f826 	bl	8001fd8 <__clzsi2>
 8001f8c:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <__aeabi_i2d+0x5c>)
 8001f8e:	1a12      	subs	r2, r2, r0
 8001f90:	280a      	cmp	r0, #10
 8001f92:	dc16      	bgt.n	8001fc2 <__aeabi_i2d+0x4a>
 8001f94:	0003      	movs	r3, r0
 8001f96:	002e      	movs	r6, r5
 8001f98:	3315      	adds	r3, #21
 8001f9a:	409e      	lsls	r6, r3
 8001f9c:	230b      	movs	r3, #11
 8001f9e:	1a18      	subs	r0, r3, r0
 8001fa0:	40c5      	lsrs	r5, r0
 8001fa2:	0552      	lsls	r2, r2, #21
 8001fa4:	032d      	lsls	r5, r5, #12
 8001fa6:	0b2d      	lsrs	r5, r5, #12
 8001fa8:	0d53      	lsrs	r3, r2, #21
 8001faa:	e003      	b.n	8001fb4 <__aeabi_i2d+0x3c>
 8001fac:	2400      	movs	r4, #0
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2500      	movs	r5, #0
 8001fb2:	2600      	movs	r6, #0
 8001fb4:	051b      	lsls	r3, r3, #20
 8001fb6:	432b      	orrs	r3, r5
 8001fb8:	07e4      	lsls	r4, r4, #31
 8001fba:	4323      	orrs	r3, r4
 8001fbc:	0030      	movs	r0, r6
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
 8001fc2:	380b      	subs	r0, #11
 8001fc4:	4085      	lsls	r5, r0
 8001fc6:	0552      	lsls	r2, r2, #21
 8001fc8:	032d      	lsls	r5, r5, #12
 8001fca:	2600      	movs	r6, #0
 8001fcc:	0b2d      	lsrs	r5, r5, #12
 8001fce:	0d53      	lsrs	r3, r2, #21
 8001fd0:	e7f0      	b.n	8001fb4 <__aeabi_i2d+0x3c>
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	0000041e 	.word	0x0000041e

08001fd8 <__clzsi2>:
 8001fd8:	211c      	movs	r1, #28
 8001fda:	2301      	movs	r3, #1
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	4298      	cmp	r0, r3
 8001fe0:	d301      	bcc.n	8001fe6 <__clzsi2+0xe>
 8001fe2:	0c00      	lsrs	r0, r0, #16
 8001fe4:	3910      	subs	r1, #16
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	4298      	cmp	r0, r3
 8001fea:	d301      	bcc.n	8001ff0 <__clzsi2+0x18>
 8001fec:	0a00      	lsrs	r0, r0, #8
 8001fee:	3908      	subs	r1, #8
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	4298      	cmp	r0, r3
 8001ff4:	d301      	bcc.n	8001ffa <__clzsi2+0x22>
 8001ff6:	0900      	lsrs	r0, r0, #4
 8001ff8:	3904      	subs	r1, #4
 8001ffa:	a202      	add	r2, pc, #8	; (adr r2, 8002004 <__clzsi2+0x2c>)
 8001ffc:	5c10      	ldrb	r0, [r2, r0]
 8001ffe:	1840      	adds	r0, r0, r1
 8002000:	4770      	bx	lr
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	02020304 	.word	0x02020304
 8002008:	01010101 	.word	0x01010101
	...

08002014 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b08b      	sub	sp, #44	; 0x2c
 8002018:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	2414      	movs	r4, #20
 800201c:	193b      	adds	r3, r7, r4
 800201e:	0018      	movs	r0, r3
 8002020:	2314      	movs	r3, #20
 8002022:	001a      	movs	r2, r3
 8002024:	2100      	movs	r1, #0
 8002026:	f004 fa1e 	bl	8006466 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202a:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <MX_GPIO_Init+0x14c>)
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <MX_GPIO_Init+0x14c>)
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	0309      	lsls	r1, r1, #12
 8002034:	430a      	orrs	r2, r1
 8002036:	615a      	str	r2, [r3, #20]
 8002038:	4b49      	ldr	r3, [pc, #292]	; (8002160 <MX_GPIO_Init+0x14c>)
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	031b      	lsls	r3, r3, #12
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002046:	4b46      	ldr	r3, [pc, #280]	; (8002160 <MX_GPIO_Init+0x14c>)
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	4b45      	ldr	r3, [pc, #276]	; (8002160 <MX_GPIO_Init+0x14c>)
 800204c:	2180      	movs	r1, #128	; 0x80
 800204e:	03c9      	lsls	r1, r1, #15
 8002050:	430a      	orrs	r2, r1
 8002052:	615a      	str	r2, [r3, #20]
 8002054:	4b42      	ldr	r3, [pc, #264]	; (8002160 <MX_GPIO_Init+0x14c>)
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	03db      	lsls	r3, r3, #15
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <MX_GPIO_Init+0x14c>)
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <MX_GPIO_Init+0x14c>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0289      	lsls	r1, r1, #10
 800206c:	430a      	orrs	r2, r1
 800206e:	615a      	str	r2, [r3, #20]
 8002070:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <MX_GPIO_Init+0x14c>)
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	029b      	lsls	r3, r3, #10
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	4b38      	ldr	r3, [pc, #224]	; (8002160 <MX_GPIO_Init+0x14c>)
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	4b37      	ldr	r3, [pc, #220]	; (8002160 <MX_GPIO_Init+0x14c>)
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	02c9      	lsls	r1, r1, #11
 8002088:	430a      	orrs	r2, r1
 800208a:	615a      	str	r2, [r3, #20]
 800208c:	4b34      	ldr	r3, [pc, #208]	; (8002160 <MX_GPIO_Init+0x14c>)
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	02db      	lsls	r3, r3, #11
 8002094:	4013      	ands	r3, r2
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_DIR_1_Pin|MOTOR_DIR_2_Pin, GPIO_PIN_RESET);
 800209a:	4b32      	ldr	r3, [pc, #200]	; (8002164 <MX_GPIO_Init+0x150>)
 800209c:	2200      	movs	r2, #0
 800209e:	2103      	movs	r1, #3
 80020a0:	0018      	movs	r0, r3
 80020a2:	f001 fa2f 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020a6:	2390      	movs	r3, #144	; 0x90
 80020a8:	05db      	lsls	r3, r3, #23
 80020aa:	2200      	movs	r2, #0
 80020ac:	2120      	movs	r1, #32
 80020ae:	0018      	movs	r0, r3
 80020b0:	f001 fa28 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_1_Pin|TOF_2_Pin|TOF_3_Pin, GPIO_PIN_RESET);
 80020b4:	23e0      	movs	r3, #224	; 0xe0
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	482b      	ldr	r0, [pc, #172]	; (8002168 <MX_GPIO_Init+0x154>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	0019      	movs	r1, r3
 80020be:	f001 fa21 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020c2:	193b      	adds	r3, r7, r4
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	0192      	lsls	r2, r2, #6
 80020c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020ca:	193b      	adds	r3, r7, r4
 80020cc:	2284      	movs	r2, #132	; 0x84
 80020ce:	0392      	lsls	r2, r2, #14
 80020d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	193b      	adds	r3, r7, r4
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020d8:	193b      	adds	r3, r7, r4
 80020da:	4a22      	ldr	r2, [pc, #136]	; (8002164 <MX_GPIO_Init+0x150>)
 80020dc:	0019      	movs	r1, r3
 80020de:	0010      	movs	r0, r2
 80020e0:	f001 f8a0 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_DIR_1_Pin|MOTOR_DIR_2_Pin;
 80020e4:	193b      	adds	r3, r7, r4
 80020e6:	2203      	movs	r2, #3
 80020e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ea:	193b      	adds	r3, r7, r4
 80020ec:	2201      	movs	r2, #1
 80020ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	193b      	adds	r3, r7, r4
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	193b      	adds	r3, r7, r4
 80020f8:	2200      	movs	r2, #0
 80020fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fc:	193b      	adds	r3, r7, r4
 80020fe:	4a19      	ldr	r2, [pc, #100]	; (8002164 <MX_GPIO_Init+0x150>)
 8002100:	0019      	movs	r1, r3
 8002102:	0010      	movs	r0, r2
 8002104:	f001 f88e 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002108:	193b      	adds	r3, r7, r4
 800210a:	2220      	movs	r2, #32
 800210c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	193b      	adds	r3, r7, r4
 8002110:	2201      	movs	r2, #1
 8002112:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	193b      	adds	r3, r7, r4
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	193b      	adds	r3, r7, r4
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002120:	193a      	adds	r2, r7, r4
 8002122:	2390      	movs	r3, #144	; 0x90
 8002124:	05db      	lsls	r3, r3, #23
 8002126:	0011      	movs	r1, r2
 8002128:	0018      	movs	r0, r3
 800212a:	f001 f87b 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_1_Pin|TOF_2_Pin|TOF_3_Pin;
 800212e:	0021      	movs	r1, r4
 8002130:	187b      	adds	r3, r7, r1
 8002132:	22e0      	movs	r2, #224	; 0xe0
 8002134:	0212      	lsls	r2, r2, #8
 8002136:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002138:	187b      	adds	r3, r7, r1
 800213a:	2201      	movs	r2, #1
 800213c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	187b      	adds	r3, r7, r1
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	187b      	adds	r3, r7, r1
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	187b      	adds	r3, r7, r1
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <MX_GPIO_Init+0x154>)
 800214e:	0019      	movs	r1, r3
 8002150:	0010      	movs	r0, r2
 8002152:	f001 f867 	bl	8003224 <HAL_GPIO_Init>

}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	46bd      	mov	sp, r7
 800215a:	b00b      	add	sp, #44	; 0x2c
 800215c:	bd90      	pop	{r4, r7, pc}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	40021000 	.word	0x40021000
 8002164:	48000800 	.word	0x48000800
 8002168:	48000400 	.word	0x48000400

0800216c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <MX_I2C1_Init+0x74>)
 8002172:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <MX_I2C1_Init+0x78>)
 8002174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <MX_I2C1_Init+0x74>)
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <MX_I2C1_Init+0x7c>)
 800217a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <MX_I2C1_Init+0x74>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_I2C1_Init+0x74>)
 8002184:	2201      	movs	r2, #1
 8002186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <MX_I2C1_Init+0x74>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_I2C1_Init+0x74>)
 8002190:	2200      	movs	r2, #0
 8002192:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <MX_I2C1_Init+0x74>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_I2C1_Init+0x74>)
 800219c:	2200      	movs	r2, #0
 800219e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_I2C1_Init+0x74>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_I2C1_Init+0x74>)
 80021a8:	0018      	movs	r0, r3
 80021aa:	f001 f9c9 	bl	8003540 <HAL_I2C_Init>
 80021ae:	1e03      	subs	r3, r0, #0
 80021b0:	d001      	beq.n	80021b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021b2:	f000 fc93 	bl	8002adc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <MX_I2C1_Init+0x74>)
 80021b8:	2100      	movs	r1, #0
 80021ba:	0018      	movs	r0, r3
 80021bc:	f001 fe5e 	bl	8003e7c <HAL_I2CEx_ConfigAnalogFilter>
 80021c0:	1e03      	subs	r3, r0, #0
 80021c2:	d001      	beq.n	80021c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021c4:	f000 fc8a 	bl	8002adc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <MX_I2C1_Init+0x74>)
 80021ca:	2100      	movs	r1, #0
 80021cc:	0018      	movs	r0, r3
 80021ce:	f001 fea1 	bl	8003f14 <HAL_I2CEx_ConfigDigitalFilter>
 80021d2:	1e03      	subs	r3, r0, #0
 80021d4:	d001      	beq.n	80021da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021d6:	f000 fc81 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200001a0 	.word	0x200001a0
 80021e4:	40005400 	.word	0x40005400
 80021e8:	2000090e 	.word	0x2000090e

080021ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b08b      	sub	sp, #44	; 0x2c
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	2414      	movs	r4, #20
 80021f6:	193b      	adds	r3, r7, r4
 80021f8:	0018      	movs	r0, r3
 80021fa:	2314      	movs	r3, #20
 80021fc:	001a      	movs	r2, r3
 80021fe:	2100      	movs	r1, #0
 8002200:	f004 f931 	bl	8006466 <memset>
  if(i2cHandle->Instance==I2C1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1c      	ldr	r2, [pc, #112]	; (800227c <HAL_I2C_MspInit+0x90>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d132      	bne.n	8002274 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <HAL_I2C_MspInit+0x94>)
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_I2C_MspInit+0x94>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	02c9      	lsls	r1, r1, #11
 8002218:	430a      	orrs	r2, r1
 800221a:	615a      	str	r2, [r3, #20]
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_I2C_MspInit+0x94>)
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	02db      	lsls	r3, r3, #11
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_CLOCK_Pin|TOF_DATA_Pin;
 800222a:	193b      	adds	r3, r7, r4
 800222c:	22c0      	movs	r2, #192	; 0xc0
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002232:	0021      	movs	r1, r4
 8002234:	187b      	adds	r3, r7, r1
 8002236:	2212      	movs	r2, #18
 8002238:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	187b      	adds	r3, r7, r1
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002240:	187b      	adds	r3, r7, r1
 8002242:	2203      	movs	r2, #3
 8002244:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002246:	187b      	adds	r3, r7, r1
 8002248:	2201      	movs	r2, #1
 800224a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	187b      	adds	r3, r7, r1
 800224e:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <HAL_I2C_MspInit+0x98>)
 8002250:	0019      	movs	r1, r3
 8002252:	0010      	movs	r0, r2
 8002254:	f000 ffe6 	bl	8003224 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_I2C_MspInit+0x94>)
 800225a:	69da      	ldr	r2, [r3, #28]
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_I2C_MspInit+0x94>)
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	0389      	lsls	r1, r1, #14
 8002262:	430a      	orrs	r2, r1
 8002264:	61da      	str	r2, [r3, #28]
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_I2C_MspInit+0x94>)
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	039b      	lsls	r3, r3, #14
 800226e:	4013      	ands	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b00b      	add	sp, #44	; 0x2c
 800227a:	bd90      	pop	{r4, r7, pc}
 800227c:	40005400 	.word	0x40005400
 8002280:	40021000 	.word	0x40021000
 8002284:	48000400 	.word	0x48000400

08002288 <init>:





void init() {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af02      	add	r7, sp, #8
	// Motor PWM signals
	HAL_TIM_Base_Start(&htim3);
 800228e:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <init+0xf0>)
 8002290:	0018      	movs	r0, r3
 8002292:	f002 fc15 	bl	8004ac0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <init+0xf0>)
 8002298:	2100      	movs	r1, #0
 800229a:	0018      	movs	r0, r3
 800229c:	f002 fca4 	bl	8004be8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80022a0:	4b35      	ldr	r3, [pc, #212]	; (8002378 <init+0xf0>)
 80022a2:	2104      	movs	r1, #4
 80022a4:	0018      	movs	r0, r3
 80022a6:	f002 fc9f 	bl	8004be8 <HAL_TIM_PWM_Start>
	// Servo PWM Signal
	HAL_TIM_Base_Start(&htim14);
 80022aa:	4b34      	ldr	r3, [pc, #208]	; (800237c <init+0xf4>)
 80022ac:	0018      	movs	r0, r3
 80022ae:	f002 fc07 	bl	8004ac0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80022b2:	4b32      	ldr	r3, [pc, #200]	; (800237c <init+0xf4>)
 80022b4:	2100      	movs	r1, #0
 80022b6:	0018      	movs	r0, r3
 80022b8:	f002 fc96 	bl	8004be8 <HAL_TIM_PWM_Start>

	TOF_InitStruct(&sensor1, &hi2c1, 0x32, TOF_1_GPIO_Port, TOF_1_Pin);
 80022bc:	4a30      	ldr	r2, [pc, #192]	; (8002380 <init+0xf8>)
 80022be:	4931      	ldr	r1, [pc, #196]	; (8002384 <init+0xfc>)
 80022c0:	4831      	ldr	r0, [pc, #196]	; (8002388 <init+0x100>)
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	019b      	lsls	r3, r3, #6
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	0013      	movs	r3, r2
 80022ca:	2232      	movs	r2, #50	; 0x32
 80022cc:	f003 ffe6 	bl	800629c <TOF_InitStruct>
	TOF_InitStruct(&sensor2, &hi2c1, 0x33, TOF_2_GPIO_Port, TOF_2_Pin);
 80022d0:	4a2b      	ldr	r2, [pc, #172]	; (8002380 <init+0xf8>)
 80022d2:	492c      	ldr	r1, [pc, #176]	; (8002384 <init+0xfc>)
 80022d4:	482d      	ldr	r0, [pc, #180]	; (800238c <init+0x104>)
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	01db      	lsls	r3, r3, #7
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	0013      	movs	r3, r2
 80022de:	2233      	movs	r2, #51	; 0x33
 80022e0:	f003 ffdc 	bl	800629c <TOF_InitStruct>
	TOF_InitStruct(&sensor3, &hi2c1, 0x34, TOF_3_GPIO_Port, TOF_3_Pin);
 80022e4:	4a26      	ldr	r2, [pc, #152]	; (8002380 <init+0xf8>)
 80022e6:	4927      	ldr	r1, [pc, #156]	; (8002384 <init+0xfc>)
 80022e8:	4829      	ldr	r0, [pc, #164]	; (8002390 <init+0x108>)
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	0013      	movs	r3, r2
 80022f2:	2234      	movs	r2, #52	; 0x34
 80022f4:	f003 ffd2 	bl	800629c <TOF_InitStruct>

	TOF_TurnOff(&sensor1);
 80022f8:	4b23      	ldr	r3, [pc, #140]	; (8002388 <init+0x100>)
 80022fa:	0018      	movs	r0, r3
 80022fc:	f004 f800 	bl	8006300 <TOF_TurnOff>
	TOF_TurnOff(&sensor2);
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <init+0x104>)
 8002302:	0018      	movs	r0, r3
 8002304:	f003 fffc 	bl	8006300 <TOF_TurnOff>
	TOF_TurnOff(&sensor3);
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <init+0x108>)
 800230a:	0018      	movs	r0, r3
 800230c:	f003 fff8 	bl	8006300 <TOF_TurnOff>

	TOF_BootSensor(&sensor1);
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <init+0x100>)
 8002312:	0018      	movs	r0, r3
 8002314:	f004 f80a 	bl	800632c <TOF_BootSensor>
	TOF_BootSensor(&sensor2);
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <init+0x104>)
 800231a:	0018      	movs	r0, r3
 800231c:	f004 f806 	bl	800632c <TOF_BootSensor>
	TOF_BootSensor(&sensor3);
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <init+0x108>)
 8002322:	0018      	movs	r0, r3
 8002324:	f004 f802 	bl	800632c <TOF_BootSensor>

	if (MODE == 0) {
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <init+0x10c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <init+0xb8>
		left_speed = 400;
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <init+0x110>)
 8002332:	22c8      	movs	r2, #200	; 0xc8
 8002334:	0052      	lsls	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
		right_speed = 550;
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <init+0x114>)
 800233a:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <init+0x118>)
 800233c:	601a      	str	r2, [r3, #0]
		right_speed = 800;
	} else if (MODE == 2) {
		left_speed = 700;
		right_speed = 1000;
	}
}
 800233e:	e018      	b.n	8002372 <init+0xea>
	} else if (MODE == 1) {
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <init+0x10c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d108      	bne.n	800235a <init+0xd2>
		left_speed = 500;
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <init+0x110>)
 800234a:	22fa      	movs	r2, #250	; 0xfa
 800234c:	0052      	lsls	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
		right_speed = 800;
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <init+0x114>)
 8002352:	22c8      	movs	r2, #200	; 0xc8
 8002354:	0092      	lsls	r2, r2, #2
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	e00b      	b.n	8002372 <init+0xea>
	} else if (MODE == 2) {
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <init+0x10c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d107      	bne.n	8002372 <init+0xea>
		left_speed = 700;
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <init+0x110>)
 8002364:	22af      	movs	r2, #175	; 0xaf
 8002366:	0092      	lsls	r2, r2, #2
 8002368:	601a      	str	r2, [r3, #0]
		right_speed = 1000;
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <init+0x114>)
 800236c:	22fa      	movs	r2, #250	; 0xfa
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000234 	.word	0x20000234
 800237c:	2000027c 	.word	0x2000027c
 8002380:	48000400 	.word	0x48000400
 8002384:	200001a0 	.word	0x200001a0
 8002388:	200001ec 	.word	0x200001ec
 800238c:	200001fc 	.word	0x200001fc
 8002390:	2000020c 	.word	0x2000020c
 8002394:	200000f0 	.word	0x200000f0
 8002398:	200000d8 	.word	0x200000d8
 800239c:	200000dc 	.word	0x200000dc
 80023a0:	00000226 	.word	0x00000226

080023a4 <correct>:

void correct() {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	if (servo > SERVO_MAX_VALUE) {
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <correct+0x5c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <correct+0x60>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dd03      	ble.n	80023bc <correct+0x18>
		servo = SERVO_MAX_VALUE;
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <correct+0x60>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <correct+0x5c>)
 80023ba:	601a      	str	r2, [r3, #0]
	}

	if (servo < SERVO_MIN_VALUE) {
 80023bc:	4b10      	ldr	r3, [pc, #64]	; (8002400 <correct+0x5c>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <correct+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	da03      	bge.n	80023d0 <correct+0x2c>
		servo = SERVO_MIN_VALUE;
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <correct+0x64>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <correct+0x5c>)
 80023ce:	601a      	str	r2, [r3, #0]
	}

	if (left_speed > 1000) {
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <correct+0x68>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	23fa      	movs	r3, #250	; 0xfa
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	dd03      	ble.n	80023e4 <correct+0x40>
		left_speed = 1000;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <correct+0x68>)
 80023de:	22fa      	movs	r2, #250	; 0xfa
 80023e0:	0092      	lsls	r2, r2, #2
 80023e2:	601a      	str	r2, [r3, #0]
	}

	if (right_speed > 1000) {
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <correct+0x6c>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	23fa      	movs	r3, #250	; 0xfa
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	429a      	cmp	r2, r3
 80023ee:	dd03      	ble.n	80023f8 <correct+0x54>
		right_speed = 1000;
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <correct+0x6c>)
 80023f2:	22fa      	movs	r2, #250	; 0xfa
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	601a      	str	r2, [r3, #0]
	}

}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	200000e8 	.word	0x200000e8
 8002404:	20000008 	.word	0x20000008
 8002408:	20000000 	.word	0x20000000
 800240c:	200000d8 	.word	0x200000d8
 8002410:	200000dc 	.word	0x200000dc

08002414 <findTurnMagnitude>:
int servo_max_dist = 200;

int sensDiff = 0;
int sensDir = 0;

double findTurnMagnitude(int sensorDiffMilliMeters) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
    double sensorDiff = sensorDiffMilliMeters / 10;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	210a      	movs	r1, #10
 8002420:	0018      	movs	r0, r3
 8002422:	f7fd ff0d 	bl	8000240 <__divsi3>
 8002426:	0003      	movs	r3, r0
 8002428:	0018      	movs	r0, r3
 800242a:	f7ff fda5 	bl	8001f78 <__aeabi_i2d>
 800242e:	0002      	movs	r2, r0
 8002430:	000b      	movs	r3, r1
 8002432:	623a      	str	r2, [r7, #32]
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
    sensDiff = sensorDiff;
 8002436:	6a38      	ldr	r0, [r7, #32]
 8002438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800243a:	f7ff fd67 	bl	8001f0c <__aeabi_d2iz>
 800243e:	0002      	movs	r2, r0
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <findTurnMagnitude+0xa0>)
 8002442:	601a      	str	r2, [r3, #0]
    double upper = (sensorDiff - 50);
 8002444:	2200      	movs	r2, #0
 8002446:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <findTurnMagnitude+0xa4>)
 8002448:	6a38      	ldr	r0, [r7, #32]
 800244a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800244c:	f7ff f9cc 	bl	80017e8 <__aeabi_dsub>
 8002450:	0002      	movs	r2, r0
 8002452:	000b      	movs	r3, r1
 8002454:	61ba      	str	r2, [r7, #24]
 8002456:	61fb      	str	r3, [r7, #28]
    upper = upper * upper * upper;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	69b8      	ldr	r0, [r7, #24]
 800245e:	69f9      	ldr	r1, [r7, #28]
 8002460:	f7fe ff56 	bl	8001310 <__aeabi_dmul>
 8002464:	0002      	movs	r2, r0
 8002466:	000b      	movs	r3, r1
 8002468:	69b8      	ldr	r0, [r7, #24]
 800246a:	69f9      	ldr	r1, [r7, #28]
 800246c:	f7fe ff50 	bl	8001310 <__aeabi_dmul>
 8002470:	0002      	movs	r2, r0
 8002472:	000b      	movs	r3, r1
 8002474:	61ba      	str	r2, [r7, #24]
 8002476:	61fb      	str	r3, [r7, #28]
    double lower = 4000;
 8002478:	2200      	movs	r2, #0
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <findTurnMagnitude+0xa8>)
 800247c:	613a      	str	r2, [r7, #16]
 800247e:	617b      	str	r3, [r7, #20]
    double add = 28;
 8002480:	2200      	movs	r2, #0
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <findTurnMagnitude+0xac>)
 8002484:	60ba      	str	r2, [r7, #8]
 8002486:	60fb      	str	r3, [r7, #12]
    return upper / lower + add;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	69b8      	ldr	r0, [r7, #24]
 800248e:	69f9      	ldr	r1, [r7, #28]
 8002490:	f7fe fb3c 	bl	8000b0c <__aeabi_ddiv>
 8002494:	0002      	movs	r2, r0
 8002496:	000b      	movs	r3, r1
 8002498:	0010      	movs	r0, r2
 800249a:	0019      	movs	r1, r3
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f7fd fff8 	bl	8000494 <__aeabi_dadd>
 80024a4:	0002      	movs	r2, r0
 80024a6:	000b      	movs	r3, r1
}
 80024a8:	0010      	movs	r0, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b00a      	add	sp, #40	; 0x28
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	20000224 	.word	0x20000224
 80024b8:	40490000 	.word	0x40490000
 80024bc:	40af4000 	.word	0x40af4000
 80024c0:	403c0000 	.word	0x403c0000

080024c4 <setServoTurnLeft>:

void setServoTurnLeft(double turnAngle) {
 80024c4:	b5b0      	push	{r4, r5, r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6038      	str	r0, [r7, #0]
 80024cc:	6079      	str	r1, [r7, #4]
	if (MODE == 1) {
 80024ce:	4b26      	ldr	r3, [pc, #152]	; (8002568 <setServoTurnLeft+0xa4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10a      	bne.n	80024ec <setServoTurnLeft+0x28>
		turnAngle *= 1.3;
 80024d6:	4a25      	ldr	r2, [pc, #148]	; (800256c <setServoTurnLeft+0xa8>)
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <setServoTurnLeft+0xac>)
 80024da:	6838      	ldr	r0, [r7, #0]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	f7fe ff17 	bl	8001310 <__aeabi_dmul>
 80024e2:	0002      	movs	r2, r0
 80024e4:	000b      	movs	r3, r1
 80024e6:	603a      	str	r2, [r7, #0]
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	e00d      	b.n	8002508 <setServoTurnLeft+0x44>
	} else if (MODE == 2) {
 80024ec:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <setServoTurnLeft+0xa4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d109      	bne.n	8002508 <setServoTurnLeft+0x44>
		turnAngle *= 1.5;
 80024f4:	2200      	movs	r2, #0
 80024f6:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <setServoTurnLeft+0xb0>)
 80024f8:	6838      	ldr	r0, [r7, #0]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	f7fe ff08 	bl	8001310 <__aeabi_dmul>
 8002500:	0002      	movs	r2, r0
 8002502:	000b      	movs	r3, r1
 8002504:	603a      	str	r2, [r7, #0]
 8002506:	607b      	str	r3, [r7, #4]
	}
    int turnRange = SERVO_MID_VALUE - SERVO_MIN_VALUE;
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <setServoTurnLeft+0xb4>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <setServoTurnLeft+0xb8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	617b      	str	r3, [r7, #20]
    double servoDiff = turnAngle / MAX_TURN_ANGLE * turnRange;
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <setServoTurnLeft+0xbc>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0018      	movs	r0, r3
 800251a:	f7ff fd2d 	bl	8001f78 <__aeabi_i2d>
 800251e:	0002      	movs	r2, r0
 8002520:	000b      	movs	r3, r1
 8002522:	6838      	ldr	r0, [r7, #0]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	f7fe faf1 	bl	8000b0c <__aeabi_ddiv>
 800252a:	0002      	movs	r2, r0
 800252c:	000b      	movs	r3, r1
 800252e:	0014      	movs	r4, r2
 8002530:	001d      	movs	r5, r3
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff fd20 	bl	8001f78 <__aeabi_i2d>
 8002538:	0002      	movs	r2, r0
 800253a:	000b      	movs	r3, r1
 800253c:	0020      	movs	r0, r4
 800253e:	0029      	movs	r1, r5
 8002540:	f7fe fee6 	bl	8001310 <__aeabi_dmul>
 8002544:	0002      	movs	r2, r0
 8002546:	000b      	movs	r3, r1
 8002548:	60ba      	str	r2, [r7, #8]
 800254a:	60fb      	str	r3, [r7, #12]
    servoTarget = SERVO_MID_VALUE - (int) servoDiff;
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <setServoTurnLeft+0xb4>)
 800254e:	681c      	ldr	r4, [r3, #0]
 8002550:	68b8      	ldr	r0, [r7, #8]
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	f7ff fcda 	bl	8001f0c <__aeabi_d2iz>
 8002558:	0003      	movs	r3, r0
 800255a:	1ae2      	subs	r2, r4, r3
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <setServoTurnLeft+0xc0>)
 800255e:	601a      	str	r2, [r3, #0]
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b006      	add	sp, #24
 8002566:	bdb0      	pop	{r4, r5, r7, pc}
 8002568:	200000f0 	.word	0x200000f0
 800256c:	cccccccd 	.word	0xcccccccd
 8002570:	3ff4cccc 	.word	0x3ff4cccc
 8002574:	3ff80000 	.word	0x3ff80000
 8002578:	20000004 	.word	0x20000004
 800257c:	20000000 	.word	0x20000000
 8002580:	2000000c 	.word	0x2000000c
 8002584:	200000ec 	.word	0x200000ec

08002588 <setServoTurnRight>:

void setServoTurnRight(double turnAngle) {
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6038      	str	r0, [r7, #0]
 8002590:	6079      	str	r1, [r7, #4]
    int turnRange = SERVO_MAX_VALUE - SERVO_MID_VALUE;
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <setServoTurnRight+0x6c>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <setServoTurnRight+0x70>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
    double servoDiff = turnAngle / MAX_TURN_ANGLE * turnRange;
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <setServoTurnRight+0x74>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7ff fce8 	bl	8001f78 <__aeabi_i2d>
 80025a8:	0002      	movs	r2, r0
 80025aa:	000b      	movs	r3, r1
 80025ac:	6838      	ldr	r0, [r7, #0]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	f7fe faac 	bl	8000b0c <__aeabi_ddiv>
 80025b4:	0002      	movs	r2, r0
 80025b6:	000b      	movs	r3, r1
 80025b8:	0014      	movs	r4, r2
 80025ba:	001d      	movs	r5, r3
 80025bc:	6978      	ldr	r0, [r7, #20]
 80025be:	f7ff fcdb 	bl	8001f78 <__aeabi_i2d>
 80025c2:	0002      	movs	r2, r0
 80025c4:	000b      	movs	r3, r1
 80025c6:	0020      	movs	r0, r4
 80025c8:	0029      	movs	r1, r5
 80025ca:	f7fe fea1 	bl	8001310 <__aeabi_dmul>
 80025ce:	0002      	movs	r2, r0
 80025d0:	000b      	movs	r3, r1
 80025d2:	60ba      	str	r2, [r7, #8]
 80025d4:	60fb      	str	r3, [r7, #12]
    servoTarget = SERVO_MID_VALUE + (int) servoDiff;
 80025d6:	68b8      	ldr	r0, [r7, #8]
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	f7ff fc97 	bl	8001f0c <__aeabi_d2iz>
 80025de:	0002      	movs	r2, r0
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <setServoTurnRight+0x70>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	18d2      	adds	r2, r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <setServoTurnRight+0x78>)
 80025e8:	601a      	str	r2, [r3, #0]
}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b006      	add	sp, #24
 80025f0:	bdb0      	pop	{r4, r5, r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	20000008 	.word	0x20000008
 80025f8:	20000004 	.word	0x20000004
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	200000ec 	.word	0x200000ec

08002604 <findServoTarget>:

void findServoTarget() {
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
    int sensorDiff = dist1 - dist3;
 800260a:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <findServoTarget+0xbc>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	001a      	movs	r2, r3
 8002610:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <findServoTarget+0xc0>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	60fb      	str	r3, [r7, #12]
    int turnDirection = sensorDiff < 0 ? 1 : -1;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	da01      	bge.n	8002622 <findServoTarget+0x1e>
 800261e:	2301      	movs	r3, #1
 8002620:	e001      	b.n	8002626 <findServoTarget+0x22>
 8002622:	2301      	movs	r3, #1
 8002624:	425b      	negs	r3, r3
 8002626:	60bb      	str	r3, [r7, #8]
    sensDir = turnDirection;
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <findServoTarget+0xc4>)
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	601a      	str	r2, [r3, #0]
    sensorDiff = sensorDiff < 0 ? -sensorDiff : sensorDiff;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	17da      	asrs	r2, r3, #31
 8002632:	189b      	adds	r3, r3, r2
 8002634:	4053      	eors	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
    double turnAngle = findTurnMagnitude(sensorDiff);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	0018      	movs	r0, r3
 800263c:	f7ff feea 	bl	8002414 <findTurnMagnitude>
 8002640:	0002      	movs	r2, r0
 8002642:	000b      	movs	r3, r1
 8002644:	603a      	str	r2, [r7, #0]
 8002646:	607b      	str	r3, [r7, #4]
    turnAngle = turnAngle < 0 ? 0 : turnAngle;
 8002648:	2200      	movs	r2, #0
 800264a:	2300      	movs	r3, #0
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	f7fd fef8 	bl	8000444 <__aeabi_dcmplt>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d002      	beq.n	800265e <findServoTarget+0x5a>
 8002658:	2200      	movs	r2, #0
 800265a:	2300      	movs	r3, #0
 800265c:	e001      	b.n	8002662 <findServoTarget+0x5e>
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	603a      	str	r2, [r7, #0]
 8002664:	607b      	str	r3, [r7, #4]
    turnAngle = turnAngle > MAX_TURN_ANGLE ? MAX_TURN_ANGLE : turnAngle;
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <findServoTarget+0xc8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0018      	movs	r0, r3
 800266c:	f7ff fc84 	bl	8001f78 <__aeabi_i2d>
 8002670:	0002      	movs	r2, r0
 8002672:	000b      	movs	r3, r1
 8002674:	6838      	ldr	r0, [r7, #0]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	f7fd fef8 	bl	800046c <__aeabi_dcmpgt>
 800267c:	1e03      	subs	r3, r0, #0
 800267e:	d007      	beq.n	8002690 <findServoTarget+0x8c>
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <findServoTarget+0xc8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0018      	movs	r0, r3
 8002686:	f7ff fc77 	bl	8001f78 <__aeabi_i2d>
 800268a:	0002      	movs	r2, r0
 800268c:	000b      	movs	r3, r1
 800268e:	e001      	b.n	8002694 <findServoTarget+0x90>
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	603a      	str	r2, [r7, #0]
 8002696:	607b      	str	r3, [r7, #4]
    if (turnDirection < 0) setServoTurnLeft(turnAngle);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	da06      	bge.n	80026ac <findServoTarget+0xa8>
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	0010      	movs	r0, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	f7ff ff0d 	bl	80024c4 <setServoTurnLeft>
    else setServoTurnRight(turnAngle);
}
 80026aa:	e005      	b.n	80026b8 <findServoTarget+0xb4>
    else setServoTurnRight(turnAngle);
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0010      	movs	r0, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	f7ff ff68 	bl	8002588 <setServoTurnRight>
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b004      	add	sp, #16
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	2000021c 	.word	0x2000021c
 80026c4:	20000220 	.word	0x20000220
 80026c8:	20000228 	.word	0x20000228
 80026cc:	2000000c 	.word	0x2000000c

080026d0 <driveSmoothServo>:
int MID_CRASH_LIMIT = 120;
int SIDE_CRASH_LIMIT = 50;
int speedAdjustment = 10;
int reverseCounter = 0;

void driveSmoothServo() {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
	findServoTarget();
 80026d6:	f7ff ff95 	bl	8002604 <findServoTarget>
//	findTargetSpeed();


	left_dir = DRIVE;
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <driveSmoothServo+0xc0>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]
	right_dir = DRIVE;
 80026e0:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <driveSmoothServo+0xc4>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
	if (dist2 < MID_CRASH_LIMIT || dist1 < SIDE_CRASH_LIMIT || dist3 < SIDE_CRASH_LIMIT) {
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <driveSmoothServo+0xc8>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	001a      	movs	r2, r3
 80026ec:	4b2b      	ldr	r3, [pc, #172]	; (800279c <driveSmoothServo+0xcc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	db0d      	blt.n	8002710 <driveSmoothServo+0x40>
 80026f4:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <driveSmoothServo+0xd0>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	001a      	movs	r2, r3
 80026fa:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <driveSmoothServo+0xd4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	db06      	blt.n	8002710 <driveSmoothServo+0x40>
 8002702:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <driveSmoothServo+0xd8>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	001a      	movs	r2, r3
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <driveSmoothServo+0xd4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	da02      	bge.n	8002716 <driveSmoothServo+0x46>
		reverseCounter = 200;
 8002710:	4b26      	ldr	r3, [pc, #152]	; (80027ac <driveSmoothServo+0xdc>)
 8002712:	22c8      	movs	r2, #200	; 0xc8
 8002714:	601a      	str	r2, [r3, #0]
	}
	if (reverseCounter > 0) {
 8002716:	4b25      	ldr	r3, [pc, #148]	; (80027ac <driveSmoothServo+0xdc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	dd0e      	ble.n	800273c <driveSmoothServo+0x6c>
		reverseCounter--;
 800271e:	4b23      	ldr	r3, [pc, #140]	; (80027ac <driveSmoothServo+0xdc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	1e5a      	subs	r2, r3, #1
 8002724:	4b21      	ldr	r3, [pc, #132]	; (80027ac <driveSmoothServo+0xdc>)
 8002726:	601a      	str	r2, [r3, #0]
		servoTarget = SERVO_MID_VALUE;
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <driveSmoothServo+0xe0>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <driveSmoothServo+0xe4>)
 800272e:	601a      	str	r2, [r3, #0]
		left_dir = REVERSE;
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <driveSmoothServo+0xc0>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
		right_dir = REVERSE;
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <driveSmoothServo+0xc4>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
	}

	int servoAdjustment = 3;
 800273c:	2303      	movs	r3, #3
 800273e:	607b      	str	r3, [r7, #4]
	if (dist1 < ADJUSTMENT_LIMIT || dist3 < ADJUSTMENT_LIMIT) servoAdjustment = 10;
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <driveSmoothServo+0xd0>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	001a      	movs	r2, r3
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <driveSmoothServo+0xe8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	db06      	blt.n	800275c <driveSmoothServo+0x8c>
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <driveSmoothServo+0xd8>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	001a      	movs	r2, r3
 8002754:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <driveSmoothServo+0xe8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	da01      	bge.n	8002760 <driveSmoothServo+0x90>
 800275c:	230a      	movs	r3, #10
 800275e:	607b      	str	r3, [r7, #4]
	if (servo < servoTarget) servo += servoAdjustment;
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <driveSmoothServo+0xec>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <driveSmoothServo+0xe4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	da06      	bge.n	800277a <driveSmoothServo+0xaa>
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <driveSmoothServo+0xec>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	18d2      	adds	r2, r2, r3
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <driveSmoothServo+0xec>)
 8002776:	601a      	str	r2, [r3, #0]
//		right_speed = left_speed;
//	} else {
//		left_speed -= speedAdjustment;
//		right_speed = left_speed;
//	}
}
 8002778:	e005      	b.n	8002786 <driveSmoothServo+0xb6>
	else servo -= servoAdjustment;
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <driveSmoothServo+0xec>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	1ad2      	subs	r2, r2, r3
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <driveSmoothServo+0xec>)
 8002784:	601a      	str	r2, [r3, #0]
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b002      	add	sp, #8
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	200000e0 	.word	0x200000e0
 8002794:	200000e4 	.word	0x200000e4
 8002798:	2000021e 	.word	0x2000021e
 800279c:	200000f8 	.word	0x200000f8
 80027a0:	2000021c 	.word	0x2000021c
 80027a4:	200000fc 	.word	0x200000fc
 80027a8:	20000220 	.word	0x20000220
 80027ac:	2000022c 	.word	0x2000022c
 80027b0:	20000004 	.word	0x20000004
 80027b4:	200000ec 	.word	0x200000ec
 80027b8:	200000f4 	.word	0x200000f4
 80027bc:	200000e8 	.word	0x200000e8

080027c0 <sense>:
int SENSOR_ADJUSTMENT = 20;
int rawDist1 = 200;
int rawDist2 = 200;
int rawDist3 = 200;

void sense() {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	//TOF kuulamine
	rawDist1 = TOF_GetDistance(&sensor1);
 80027c4:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <sense+0x130>)
 80027c6:	0018      	movs	r0, r3
 80027c8:	f003 fdfe 	bl	80063c8 <TOF_GetDistance>
 80027cc:	0003      	movs	r3, r0
 80027ce:	001a      	movs	r2, r3
 80027d0:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <sense+0x134>)
 80027d2:	601a      	str	r2, [r3, #0]
	rawDist2 = TOF_GetDistance(&sensor2);
 80027d4:	4b48      	ldr	r3, [pc, #288]	; (80028f8 <sense+0x138>)
 80027d6:	0018      	movs	r0, r3
 80027d8:	f003 fdf6 	bl	80063c8 <TOF_GetDistance>
 80027dc:	0003      	movs	r3, r0
 80027de:	001a      	movs	r2, r3
 80027e0:	4b46      	ldr	r3, [pc, #280]	; (80028fc <sense+0x13c>)
 80027e2:	601a      	str	r2, [r3, #0]
	rawDist3 = TOF_GetDistance(&sensor3);
 80027e4:	4b46      	ldr	r3, [pc, #280]	; (8002900 <sense+0x140>)
 80027e6:	0018      	movs	r0, r3
 80027e8:	f003 fdee 	bl	80063c8 <TOF_GetDistance>
 80027ec:	0003      	movs	r3, r0
 80027ee:	001a      	movs	r2, r3
 80027f0:	4b44      	ldr	r3, [pc, #272]	; (8002904 <sense+0x144>)
 80027f2:	601a      	str	r2, [r3, #0]
//	if (rawDist2 < dist2) dist2 -= SENSOR_ADJUSTMENT;
//	else dist2 += SENSOR_ADJUSTMENT;
//	if (rawDist3 < dist3) dist3 -= SENSOR_ADJUSTMENT;
//	else dist3 += SENSOR_ADJUSTMENT;

	if (MODE == 2) {
 80027f4:	4b44      	ldr	r3, [pc, #272]	; (8002908 <sense+0x148>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d10f      	bne.n	800281c <sense+0x5c>
		dist1 = rawDist1;
 80027fc:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <sense+0x134>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	b29a      	uxth	r2, r3
 8002802:	4b42      	ldr	r3, [pc, #264]	; (800290c <sense+0x14c>)
 8002804:	801a      	strh	r2, [r3, #0]
		dist2 = rawDist2;
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <sense+0x13c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	b29a      	uxth	r2, r3
 800280c:	4b40      	ldr	r3, [pc, #256]	; (8002910 <sense+0x150>)
 800280e:	801a      	strh	r2, [r3, #0]
		dist3 = rawDist3;
 8002810:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <sense+0x144>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <sense+0x154>)
 8002818:	801a      	strh	r2, [r3, #0]
 800281a:	e041      	b.n	80028a0 <sense+0xe0>
	} else {
		if (rawDist1 < dist1) dist1 = rawDist1;
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <sense+0x14c>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	001a      	movs	r2, r3
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <sense+0x134>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	dd05      	ble.n	8002836 <sense+0x76>
 800282a:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <sense+0x134>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29a      	uxth	r2, r3
 8002830:	4b36      	ldr	r3, [pc, #216]	; (800290c <sense+0x14c>)
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	e008      	b.n	8002848 <sense+0x88>
		else dist1 += SENSOR_ADJUSTMENT;
 8002836:	4b38      	ldr	r3, [pc, #224]	; (8002918 <sense+0x158>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b29a      	uxth	r2, r3
 800283c:	4b33      	ldr	r3, [pc, #204]	; (800290c <sense+0x14c>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	18d3      	adds	r3, r2, r3
 8002842:	b29a      	uxth	r2, r3
 8002844:	4b31      	ldr	r3, [pc, #196]	; (800290c <sense+0x14c>)
 8002846:	801a      	strh	r2, [r3, #0]
		if (rawDist2 < dist2) dist2 = rawDist2;
 8002848:	4b31      	ldr	r3, [pc, #196]	; (8002910 <sense+0x150>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	001a      	movs	r2, r3
 800284e:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <sense+0x13c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	dd05      	ble.n	8002862 <sense+0xa2>
 8002856:	4b29      	ldr	r3, [pc, #164]	; (80028fc <sense+0x13c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b29a      	uxth	r2, r3
 800285c:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <sense+0x150>)
 800285e:	801a      	strh	r2, [r3, #0]
 8002860:	e008      	b.n	8002874 <sense+0xb4>
		else dist2 += SENSOR_ADJUSTMENT;
 8002862:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <sense+0x158>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <sense+0x150>)
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	18d3      	adds	r3, r2, r3
 800286e:	b29a      	uxth	r2, r3
 8002870:	4b27      	ldr	r3, [pc, #156]	; (8002910 <sense+0x150>)
 8002872:	801a      	strh	r2, [r3, #0]
		if (rawDist3 < dist3) dist3 = rawDist3;
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <sense+0x154>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	001a      	movs	r2, r3
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <sense+0x144>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	dd05      	ble.n	800288e <sense+0xce>
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <sense+0x144>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b22      	ldr	r3, [pc, #136]	; (8002914 <sense+0x154>)
 800288a:	801a      	strh	r2, [r3, #0]
 800288c:	e008      	b.n	80028a0 <sense+0xe0>
		else dist3 += SENSOR_ADJUSTMENT;
 800288e:	4b22      	ldr	r3, [pc, #136]	; (8002918 <sense+0x158>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	b29a      	uxth	r2, r3
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <sense+0x154>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	18d3      	adds	r3, r2, r3
 800289a:	b29a      	uxth	r2, r3
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <sense+0x154>)
 800289e:	801a      	strh	r2, [r3, #0]
	}


	if (dist1 > MAX_SENSOR_DISTANCE) dist1 = MAX_SENSOR_DISTANCE;
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <sense+0x14c>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	001a      	movs	r2, r3
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <sense+0x15c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	dd04      	ble.n	80028b8 <sense+0xf8>
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <sense+0x15c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <sense+0x14c>)
 80028b6:	801a      	strh	r2, [r3, #0]
	if (dist2 > MAX_SENSOR_DISTANCE) dist2 = MAX_SENSOR_DISTANCE;
 80028b8:	4b15      	ldr	r3, [pc, #84]	; (8002910 <sense+0x150>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	001a      	movs	r2, r3
 80028be:	4b17      	ldr	r3, [pc, #92]	; (800291c <sense+0x15c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	dd04      	ble.n	80028d0 <sense+0x110>
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <sense+0x15c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <sense+0x150>)
 80028ce:	801a      	strh	r2, [r3, #0]
	if (dist3 > MAX_SENSOR_DISTANCE) dist3 = MAX_SENSOR_DISTANCE;
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <sense+0x154>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	001a      	movs	r2, r3
 80028d6:	4b11      	ldr	r3, [pc, #68]	; (800291c <sense+0x15c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	dd04      	ble.n	80028e8 <sense+0x128>
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <sense+0x15c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <sense+0x154>)
 80028e6:	801a      	strh	r2, [r3, #0]
}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	200001ec 	.word	0x200001ec
 80028f4:	20000108 	.word	0x20000108
 80028f8:	200001fc 	.word	0x200001fc
 80028fc:	2000010c 	.word	0x2000010c
 8002900:	2000020c 	.word	0x2000020c
 8002904:	20000110 	.word	0x20000110
 8002908:	200000f0 	.word	0x200000f0
 800290c:	2000021c 	.word	0x2000021c
 8002910:	2000021e 	.word	0x2000021e
 8002914:	20000220 	.word	0x20000220
 8002918:	20000104 	.word	0x20000104
 800291c:	20000100 	.word	0x20000100

08002920 <plan>:

void plan() {
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
	//drive_by_motor_speed();
//	drive_by_servo();
	driveSmoothServo();
 8002924:	f7ff fed4 	bl	80026d0 <driveSmoothServo>

}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <act>:

void act() {
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b083      	sub	sp, #12
 8002934:	af02      	add	r7, sp, #8
	correct();
 8002936:	f7ff fd35 	bl	80023a4 <correct>

//	sprintf(distanceStr1, "L:%d       M:%d       R:%d \n\r", dist1, dist2, dist3);
	sprintf(distanceStr1, "Diff:%d       Dir:%d       Target:%d \n\r", sensDiff, sensDir, servoTarget);
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <act+0x80>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <act+0x84>)
 8002940:	681c      	ldr	r4, [r3, #0]
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <act+0x88>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	491d      	ldr	r1, [pc, #116]	; (80029bc <act+0x8c>)
 8002948:	481d      	ldr	r0, [pc, #116]	; (80029c0 <act+0x90>)
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	0023      	movs	r3, r4
 800294e:	f003 fd93 	bl	8006478 <siprintf>
	//sprintf(distanceStr2, "Distance 2: %d\n\r", dist2);
	//sprintf(distanceStr3, "Distance 3: %d\n\r", dist3);

	HAL_UART_Transmit(&huart2, (uint8_t*)distanceStr1, strlen(distanceStr1), 100);
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <act+0x90>)
 8002954:	0018      	movs	r0, r3
 8002956:	f7fd fbd7 	bl	8000108 <strlen>
 800295a:	0003      	movs	r3, r0
 800295c:	b29a      	uxth	r2, r3
 800295e:	4918      	ldr	r1, [pc, #96]	; (80029c0 <act+0x90>)
 8002960:	4818      	ldr	r0, [pc, #96]	; (80029c4 <act+0x94>)
 8002962:	2364      	movs	r3, #100	; 0x64
 8002964:	f002 fdfa 	bl	800555c <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2, (uint8_t*)distanceStr2, strlen(distanceStr2), 100);
	//HAL_UART_Transmit(&huart2, (uint8_t*)distanceStr3, strlen(distanceStr3), 100);


	//set left motor direction and speed
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, left_speed);
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <act+0x98>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <act+0x9c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(MOTOR_DIR_1_GPIO_Port, MOTOR_DIR_1_Pin, left_dir);
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <act+0xa0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4816      	ldr	r0, [pc, #88]	; (80029d4 <act+0xa4>)
 800297a:	001a      	movs	r2, r3
 800297c:	2101      	movs	r1, #1
 800297e:	f000 fdc1 	bl	8003504 <HAL_GPIO_WritePin>

	//set right motor direction and speed
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, right_speed);
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <act+0xa8>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <act+0x9c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(MOTOR_DIR_2_GPIO_Port, MOTOR_DIR_2_Pin, right_dir);
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <act+0xac>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	4810      	ldr	r0, [pc, #64]	; (80029d4 <act+0xa4>)
 8002994:	001a      	movs	r2, r3
 8002996:	2102      	movs	r1, #2
 8002998:	f000 fdb4 	bl	8003504 <HAL_GPIO_WritePin>

	//set servo angle
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, servo);
 800299c:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <act+0xb0>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <act+0xb4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b001      	add	sp, #4
 80029ac:	bd90      	pop	{r4, r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	20000224 	.word	0x20000224
 80029b4:	20000228 	.word	0x20000228
 80029b8:	200000ec 	.word	0x200000ec
 80029bc:	08006d50 	.word	0x08006d50
 80029c0:	20000010 	.word	0x20000010
 80029c4:	200002c4 	.word	0x200002c4
 80029c8:	200000d8 	.word	0x200000d8
 80029cc:	20000234 	.word	0x20000234
 80029d0:	200000e0 	.word	0x200000e0
 80029d4:	48000800 	.word	0x48000800
 80029d8:	200000dc 	.word	0x200000dc
 80029dc:	200000e4 	.word	0x200000e4
 80029e0:	200000e8 	.word	0x200000e8
 80029e4:	2000027c 	.word	0x2000027c

080029e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029ec:	f000 fb02 	bl	8002ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029f0:	f000 f813 	bl	8002a1a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029f4:	f7ff fb0e 	bl	8002014 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80029f8:	f000 fa56 	bl	8002ea8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80029fc:	f7ff fbb6 	bl	800216c <MX_I2C1_Init>
  MX_TIM3_Init();
 8002a00:	f000 f8ea 	bl	8002bd8 <MX_TIM3_Init>
  MX_TIM14_Init();
 8002a04:	f000 f956 	bl	8002cb4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  init();
 8002a08:	f7ff fc3e 	bl	8002288 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sense();
 8002a0c:	f7ff fed8 	bl	80027c0 <sense>
	  plan();
 8002a10:	f7ff ff86 	bl	8002920 <plan>
	  //left_dir = 1;
	  //right_dir = 1;
	  //left_speed = 400;
	  //right_speed = 400;
	  act();
 8002a14:	f7ff ff8c 	bl	8002930 <act>
	  sense();
 8002a18:	e7f8      	b.n	8002a0c <main+0x24>

08002a1a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a1a:	b590      	push	{r4, r7, lr}
 8002a1c:	b095      	sub	sp, #84	; 0x54
 8002a1e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a20:	2420      	movs	r4, #32
 8002a22:	193b      	adds	r3, r7, r4
 8002a24:	0018      	movs	r0, r3
 8002a26:	2330      	movs	r3, #48	; 0x30
 8002a28:	001a      	movs	r2, r3
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	f003 fd1b 	bl	8006466 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a30:	2310      	movs	r3, #16
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	0018      	movs	r0, r3
 8002a36:	2310      	movs	r3, #16
 8002a38:	001a      	movs	r2, r3
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	f003 fd13 	bl	8006466 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a40:	003b      	movs	r3, r7
 8002a42:	0018      	movs	r0, r3
 8002a44:	2310      	movs	r3, #16
 8002a46:	001a      	movs	r2, r3
 8002a48:	2100      	movs	r1, #0
 8002a4a:	f003 fd0c 	bl	8006466 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a4e:	0021      	movs	r1, r4
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	2202      	movs	r2, #2
 8002a54:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	2201      	movs	r2, #1
 8002a5a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	2210      	movs	r2, #16
 8002a60:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	2202      	movs	r2, #2
 8002a66:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	22a0      	movs	r2, #160	; 0xa0
 8002a72:	0392      	lsls	r2, r2, #14
 8002a74:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002a76:	187b      	adds	r3, r7, r1
 8002a78:	2200      	movs	r2, #0
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f001 fa94 	bl	8003fac <HAL_RCC_OscConfig>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d001      	beq.n	8002a8c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002a88:	f000 f828 	bl	8002adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a8c:	2110      	movs	r1, #16
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2202      	movs	r2, #2
 8002a98:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f001 fd98 	bl	80045e0 <HAL_RCC_ClockConfig>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002ab4:	f000 f812 	bl	8002adc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ab8:	003b      	movs	r3, r7
 8002aba:	2220      	movs	r2, #32
 8002abc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002abe:	003b      	movs	r3, r7
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ac4:	003b      	movs	r3, r7
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f001 fedc 	bl	8004884 <HAL_RCCEx_PeriphCLKConfig>
 8002acc:	1e03      	subs	r3, r0, #0
 8002ace:	d001      	beq.n	8002ad4 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002ad0:	f000 f804 	bl	8002adc <Error_Handler>
  }
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b015      	add	sp, #84	; 0x54
 8002ada:	bd90      	pop	{r4, r7, pc}

08002adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae0:	b672      	cpsid	i
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <Error_Handler+0x8>
	...

08002ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_MspInit+0x44>)
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <HAL_MspInit+0x44>)
 8002af4:	2101      	movs	r1, #1
 8002af6:	430a      	orrs	r2, r1
 8002af8:	619a      	str	r2, [r3, #24]
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_MspInit+0x44>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2201      	movs	r2, #1
 8002b00:	4013      	ands	r3, r2
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_MspInit+0x44>)
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_MspInit+0x44>)
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	0549      	lsls	r1, r1, #21
 8002b10:	430a      	orrs	r2, r1
 8002b12:	61da      	str	r2, [r3, #28]
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_MspInit+0x44>)
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	055b      	lsls	r3, r3, #21
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b002      	add	sp, #8
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	40021000 	.word	0x40021000

08002b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <NMI_Handler+0x4>

08002b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <HardFault_Handler+0x4>

08002b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b54:	f000 fa96 	bl	8003084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b68:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <_sbrk+0x5c>)
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <_sbrk+0x60>)
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <_sbrk+0x64>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <_sbrk+0x68>)
 8002b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	18d3      	adds	r3, r2, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d207      	bcs.n	8002ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b90:	f003 fc36 	bl	8006400 <__errno>
 8002b94:	0003      	movs	r3, r0
 8002b96:	220c      	movs	r2, #12
 8002b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	425b      	negs	r3, r3
 8002b9e:	e009      	b.n	8002bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <_sbrk+0x64>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <_sbrk+0x64>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	18d2      	adds	r2, r2, r3
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <_sbrk+0x64>)
 8002bb0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b006      	add	sp, #24
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20002000 	.word	0x20002000
 8002bc0:	00000400 	.word	0x00000400
 8002bc4:	20000230 	.word	0x20000230
 8002bc8:	20000460 	.word	0x20000460

08002bcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bde:	2320      	movs	r3, #32
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	0018      	movs	r0, r3
 8002be4:	2308      	movs	r3, #8
 8002be6:	001a      	movs	r2, r3
 8002be8:	2100      	movs	r1, #0
 8002bea:	f003 fc3c 	bl	8006466 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	231c      	movs	r3, #28
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f003 fc35 	bl	8006466 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bfc:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <MX_TIM3_Init+0xcc>)
 8002bfe:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <MX_TIM3_Init+0xd0>)
 8002c00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 960-1;
 8002c02:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <MX_TIM3_Init+0xcc>)
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <MX_TIM3_Init+0xd4>)
 8002c06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c08:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <MX_TIM3_Init+0xcc>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002c0e:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <MX_TIM3_Init+0xcc>)
 8002c10:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <MX_TIM3_Init+0xd8>)
 8002c12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <MX_TIM3_Init+0xcc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <MX_TIM3_Init+0xcc>)
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c20:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <MX_TIM3_Init+0xcc>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f001 ff90 	bl	8004b48 <HAL_TIM_PWM_Init>
 8002c28:	1e03      	subs	r3, r0, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002c2c:	f7ff ff56 	bl	8002adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c30:	2120      	movs	r1, #32
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c38:	187b      	adds	r3, r7, r1
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c3e:	187a      	adds	r2, r7, r1
 8002c40:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <MX_TIM3_Init+0xcc>)
 8002c42:	0011      	movs	r1, r2
 8002c44:	0018      	movs	r0, r3
 8002c46:	f002 fbdd 	bl	8005404 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4a:	1e03      	subs	r3, r0, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002c4e:	f7ff ff45 	bl	8002adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	2260      	movs	r2, #96	; 0x60
 8002c56:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c6a:	1d39      	adds	r1, r7, #4
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <MX_TIM3_Init+0xcc>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	0018      	movs	r0, r3
 8002c72:	f002 f86b 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8002c7a:	f7ff ff2f 	bl	8002adc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c7e:	1d39      	adds	r1, r7, #4
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <MX_TIM3_Init+0xcc>)
 8002c82:	2204      	movs	r2, #4
 8002c84:	0018      	movs	r0, r3
 8002c86:	f002 f861 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 8002c8a:	1e03      	subs	r3, r0, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8002c8e:	f7ff ff25 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <MX_TIM3_Init+0xcc>)
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 f89b 	bl	8002dd0 <HAL_TIM_MspPostInit>

}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b00a      	add	sp, #40	; 0x28
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	20000234 	.word	0x20000234
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	000003bf 	.word	0x000003bf
 8002cb0:	000003e7 	.word	0x000003e7

08002cb4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cba:	1d3b      	adds	r3, r7, #4
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	231c      	movs	r3, #28
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	f003 fbcf 	bl	8006466 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <MX_TIM14_Init+0x94>)
 8002cca:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <MX_TIM14_Init+0x98>)
 8002ccc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <MX_TIM14_Init+0x94>)
 8002cd0:	222f      	movs	r2, #47	; 0x2f
 8002cd2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <MX_TIM14_Init+0x94>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <MX_TIM14_Init+0x94>)
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <MX_TIM14_Init+0x9c>)
 8002cde:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <MX_TIM14_Init+0x94>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ce6:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <MX_TIM14_Init+0x94>)
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <MX_TIM14_Init+0x94>)
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f001 fe96 	bl	8004a20 <HAL_TIM_Base_Init>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8002cf8:	f7ff fef0 	bl	8002adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <MX_TIM14_Init+0x94>)
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f001 ff22 	bl	8004b48 <HAL_TIM_PWM_Init>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8002d08:	f7ff fee8 	bl	8002adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	2260      	movs	r2, #96	; 0x60
 8002d10:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	2200      	movs	r2, #0
 8002d16:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d24:	1d39      	adds	r1, r7, #4
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <MX_TIM14_Init+0x94>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f002 f80e 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002d34:	f7ff fed2 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <MX_TIM14_Init+0x94>)
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 f848 	bl	8002dd0 <HAL_TIM_MspPostInit>

}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b008      	add	sp, #32
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	2000027c 	.word	0x2000027c
 8002d4c:	40002000 	.word	0x40002000
 8002d50:	00004e1f 	.word	0x00004e1f

08002d54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <HAL_TIM_PWM_MspInit+0x34>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10b      	bne.n	8002d7e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <HAL_TIM_PWM_MspInit+0x38>)
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_TIM_PWM_MspInit+0x38>)
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	61da      	str	r2, [r3, #28]
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_TIM_PWM_MspInit+0x38>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2202      	movs	r2, #2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b004      	add	sp, #16
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40021000 	.word	0x40021000

08002d90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <HAL_TIM_Base_MspInit+0x38>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10d      	bne.n	8002dbe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <HAL_TIM_Base_MspInit+0x3c>)
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_TIM_Base_MspInit+0x3c>)
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	0049      	lsls	r1, r1, #1
 8002dac:	430a      	orrs	r2, r1
 8002dae:	61da      	str	r2, [r3, #28]
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_TIM_Base_MspInit+0x3c>)
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40002000 	.word	0x40002000
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b08b      	sub	sp, #44	; 0x2c
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	2414      	movs	r4, #20
 8002dda:	193b      	adds	r3, r7, r4
 8002ddc:	0018      	movs	r0, r3
 8002dde:	2314      	movs	r3, #20
 8002de0:	001a      	movs	r2, r3
 8002de2:	2100      	movs	r1, #0
 8002de4:	f003 fb3f 	bl	8006466 <memset>
  if(timHandle->Instance==TIM3)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <HAL_TIM_MspPostInit+0xcc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d125      	bne.n	8002e3e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df2:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_TIM_MspPostInit+0xd0>)
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <HAL_TIM_MspPostInit+0xd0>)
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0289      	lsls	r1, r1, #10
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	615a      	str	r2, [r3, #20]
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_TIM_MspPostInit+0xd0>)
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	029b      	lsls	r3, r3, #10
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_1_Pin|MOTOR_PWM_2_Pin;
 8002e0e:	0021      	movs	r1, r4
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	22c0      	movs	r2, #192	; 0xc0
 8002e14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	2202      	movs	r2, #2
 8002e1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	2200      	movs	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2e:	187a      	adds	r2, r7, r1
 8002e30:	2390      	movs	r3, #144	; 0x90
 8002e32:	05db      	lsls	r3, r3, #23
 8002e34:	0011      	movs	r1, r2
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 f9f4 	bl	8003224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002e3c:	e029      	b.n	8002e92 <HAL_TIM_MspPostInit+0xc2>
  else if(timHandle->Instance==TIM14)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <HAL_TIM_MspPostInit+0xd4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d124      	bne.n	8002e92 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_TIM_MspPostInit+0xd0>)
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <HAL_TIM_MspPostInit+0xd0>)
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	0289      	lsls	r1, r1, #10
 8002e52:	430a      	orrs	r2, r1
 8002e54:	615a      	str	r2, [r3, #20]
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_TIM_MspPostInit+0xd0>)
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	029b      	lsls	r3, r3, #10
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8002e64:	2114      	movs	r1, #20
 8002e66:	187b      	adds	r3, r7, r1
 8002e68:	2210      	movs	r2, #16
 8002e6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	187b      	adds	r3, r7, r1
 8002e6e:	2202      	movs	r2, #2
 8002e70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	187b      	adds	r3, r7, r1
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	2204      	movs	r2, #4
 8002e82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e84:	187a      	adds	r2, r7, r1
 8002e86:	2390      	movs	r3, #144	; 0x90
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f9c9 	bl	8003224 <HAL_GPIO_Init>
}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b00b      	add	sp, #44	; 0x2c
 8002e98:	bd90      	pop	{r4, r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40002000 	.word	0x40002000

08002ea8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <MX_USART2_UART_Init+0x58>)
 8002eae:	4a15      	ldr	r2, [pc, #84]	; (8002f04 <MX_USART2_UART_Init+0x5c>)
 8002eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <MX_USART2_UART_Init+0x58>)
 8002eb4:	22e1      	movs	r2, #225	; 0xe1
 8002eb6:	0252      	lsls	r2, r2, #9
 8002eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <MX_USART2_UART_Init+0x58>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <MX_USART2_UART_Init+0x58>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <MX_USART2_UART_Init+0x58>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <MX_USART2_UART_Init+0x58>)
 8002ece:	220c      	movs	r2, #12
 8002ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <MX_USART2_UART_Init+0x58>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <MX_USART2_UART_Init+0x58>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <MX_USART2_UART_Init+0x58>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <MX_USART2_UART_Init+0x58>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <MX_USART2_UART_Init+0x58>)
 8002eec:	0018      	movs	r0, r3
 8002eee:	f002 fae1 	bl	80054b4 <HAL_UART_Init>
 8002ef2:	1e03      	subs	r3, r0, #0
 8002ef4:	d001      	beq.n	8002efa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002ef6:	f7ff fdf1 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200002c4 	.word	0x200002c4
 8002f04:	40004400 	.word	0x40004400

08002f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b08b      	sub	sp, #44	; 0x2c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	2414      	movs	r4, #20
 8002f12:	193b      	adds	r3, r7, r4
 8002f14:	0018      	movs	r0, r3
 8002f16:	2314      	movs	r3, #20
 8002f18:	001a      	movs	r2, r3
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	f003 faa3 	bl	8006466 <memset>
  if(uartHandle->Instance==USART2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_UART_MspInit+0x90>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d132      	bne.n	8002f90 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <HAL_UART_MspInit+0x94>)
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_UART_MspInit+0x94>)
 8002f30:	2180      	movs	r1, #128	; 0x80
 8002f32:	0289      	lsls	r1, r1, #10
 8002f34:	430a      	orrs	r2, r1
 8002f36:	61da      	str	r2, [r3, #28]
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <HAL_UART_MspInit+0x94>)
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	029b      	lsls	r3, r3, #10
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <HAL_UART_MspInit+0x94>)
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_UART_MspInit+0x94>)
 8002f4c:	2180      	movs	r1, #128	; 0x80
 8002f4e:	0289      	lsls	r1, r1, #10
 8002f50:	430a      	orrs	r2, r1
 8002f52:	615a      	str	r2, [r3, #20]
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_UART_MspInit+0x94>)
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f62:	0021      	movs	r1, r4
 8002f64:	187b      	adds	r3, r7, r1
 8002f66:	220c      	movs	r2, #12
 8002f68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	187b      	adds	r3, r7, r1
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	187b      	adds	r3, r7, r1
 8002f78:	2200      	movs	r2, #0
 8002f7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002f7c:	187b      	adds	r3, r7, r1
 8002f7e:	2201      	movs	r2, #1
 8002f80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f82:	187a      	adds	r2, r7, r1
 8002f84:	2390      	movs	r3, #144	; 0x90
 8002f86:	05db      	lsls	r3, r3, #23
 8002f88:	0011      	movs	r1, r2
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f000 f94a 	bl	8003224 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b00b      	add	sp, #44	; 0x2c
 8002f96:	bd90      	pop	{r4, r7, pc}
 8002f98:	40004400 	.word	0x40004400
 8002f9c:	40021000 	.word	0x40021000

08002fa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fa0:	480d      	ldr	r0, [pc, #52]	; (8002fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fa2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fa4:	480d      	ldr	r0, [pc, #52]	; (8002fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8002fa6:	490e      	ldr	r1, [pc, #56]	; (8002fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fa8:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <LoopForever+0xe>)
  movs r3, #0
 8002faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fac:	e002      	b.n	8002fb4 <LoopCopyDataInit>

08002fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fb2:	3304      	adds	r3, #4

08002fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb8:	d3f9      	bcc.n	8002fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fba:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fbc:	4c0b      	ldr	r4, [pc, #44]	; (8002fec <LoopForever+0x16>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc0:	e001      	b.n	8002fc6 <LoopFillZerobss>

08002fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc4:	3204      	adds	r2, #4

08002fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc8:	d3fb      	bcc.n	8002fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002fca:	f7ff fdff 	bl	8002bcc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002fce:	f003 fa1d 	bl	800640c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fd2:	f7ff fd09 	bl	80029e8 <main>

08002fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002fd6:	e7fe      	b.n	8002fd6 <LoopForever>
  ldr   r0, =_estack
 8002fd8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fe0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8002fe4:	08006ec8 	.word	0x08006ec8
  ldr r2, =_sbss
 8002fe8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8002fec:	20000460 	.word	0x20000460

08002ff0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ff0:	e7fe      	b.n	8002ff0 <ADC1_IRQHandler>
	...

08002ff4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ff8:	4b07      	ldr	r3, [pc, #28]	; (8003018 <HAL_Init+0x24>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_Init+0x24>)
 8002ffe:	2110      	movs	r1, #16
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003004:	2000      	movs	r0, #0
 8003006:	f000 f809 	bl	800301c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800300a:	f7ff fd6d 	bl	8002ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	40022000 	.word	0x40022000

0800301c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003024:	4b14      	ldr	r3, [pc, #80]	; (8003078 <HAL_InitTick+0x5c>)
 8003026:	681c      	ldr	r4, [r3, #0]
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <HAL_InitTick+0x60>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	0019      	movs	r1, r3
 800302e:	23fa      	movs	r3, #250	; 0xfa
 8003030:	0098      	lsls	r0, r3, #2
 8003032:	f7fd f87b 	bl	800012c <__udivsi3>
 8003036:	0003      	movs	r3, r0
 8003038:	0019      	movs	r1, r3
 800303a:	0020      	movs	r0, r4
 800303c:	f7fd f876 	bl	800012c <__udivsi3>
 8003040:	0003      	movs	r3, r0
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f8e1 	bl	800320a <HAL_SYSTICK_Config>
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d001      	beq.n	8003050 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e00f      	b.n	8003070 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d80b      	bhi.n	800306e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	2301      	movs	r3, #1
 800305a:	425b      	negs	r3, r3
 800305c:	2200      	movs	r2, #0
 800305e:	0018      	movs	r0, r3
 8003060:	f000 f8be 	bl	80031e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_InitTick+0x64>)
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e000      	b.n	8003070 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	b003      	add	sp, #12
 8003076:	bd90      	pop	{r4, r7, pc}
 8003078:	20000114 	.word	0x20000114
 800307c:	2000011c 	.word	0x2000011c
 8003080:	20000118 	.word	0x20000118

08003084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_IncTick+0x1c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	001a      	movs	r2, r3
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_IncTick+0x20>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	18d2      	adds	r2, r2, r3
 8003094:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <HAL_IncTick+0x20>)
 8003096:	601a      	str	r2, [r3, #0]
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	2000011c 	.word	0x2000011c
 80030a4:	20000348 	.word	0x20000348

080030a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;
 80030ac:	4b02      	ldr	r3, [pc, #8]	; (80030b8 <HAL_GetTick+0x10>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	20000348 	.word	0x20000348

080030bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	0002      	movs	r2, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	1dfb      	adds	r3, r7, #7
 80030c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b7f      	cmp	r3, #127	; 0x7f
 80030d0:	d828      	bhi.n	8003124 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030d2:	4a2f      	ldr	r2, [pc, #188]	; (8003190 <__NVIC_SetPriority+0xd4>)
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b25b      	sxtb	r3, r3
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	33c0      	adds	r3, #192	; 0xc0
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	589b      	ldr	r3, [r3, r2]
 80030e2:	1dfa      	adds	r2, r7, #7
 80030e4:	7812      	ldrb	r2, [r2, #0]
 80030e6:	0011      	movs	r1, r2
 80030e8:	2203      	movs	r2, #3
 80030ea:	400a      	ands	r2, r1
 80030ec:	00d2      	lsls	r2, r2, #3
 80030ee:	21ff      	movs	r1, #255	; 0xff
 80030f0:	4091      	lsls	r1, r2
 80030f2:	000a      	movs	r2, r1
 80030f4:	43d2      	mvns	r2, r2
 80030f6:	401a      	ands	r2, r3
 80030f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	22ff      	movs	r2, #255	; 0xff
 8003100:	401a      	ands	r2, r3
 8003102:	1dfb      	adds	r3, r7, #7
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	0018      	movs	r0, r3
 8003108:	2303      	movs	r3, #3
 800310a:	4003      	ands	r3, r0
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003110:	481f      	ldr	r0, [pc, #124]	; (8003190 <__NVIC_SetPriority+0xd4>)
 8003112:	1dfb      	adds	r3, r7, #7
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	b25b      	sxtb	r3, r3
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	430a      	orrs	r2, r1
 800311c:	33c0      	adds	r3, #192	; 0xc0
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003122:	e031      	b.n	8003188 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003124:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <__NVIC_SetPriority+0xd8>)
 8003126:	1dfb      	adds	r3, r7, #7
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	0019      	movs	r1, r3
 800312c:	230f      	movs	r3, #15
 800312e:	400b      	ands	r3, r1
 8003130:	3b08      	subs	r3, #8
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	3306      	adds	r3, #6
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	18d3      	adds	r3, r2, r3
 800313a:	3304      	adds	r3, #4
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	1dfa      	adds	r2, r7, #7
 8003140:	7812      	ldrb	r2, [r2, #0]
 8003142:	0011      	movs	r1, r2
 8003144:	2203      	movs	r2, #3
 8003146:	400a      	ands	r2, r1
 8003148:	00d2      	lsls	r2, r2, #3
 800314a:	21ff      	movs	r1, #255	; 0xff
 800314c:	4091      	lsls	r1, r2
 800314e:	000a      	movs	r2, r1
 8003150:	43d2      	mvns	r2, r2
 8003152:	401a      	ands	r2, r3
 8003154:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	019b      	lsls	r3, r3, #6
 800315a:	22ff      	movs	r2, #255	; 0xff
 800315c:	401a      	ands	r2, r3
 800315e:	1dfb      	adds	r3, r7, #7
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	0018      	movs	r0, r3
 8003164:	2303      	movs	r3, #3
 8003166:	4003      	ands	r3, r0
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800316c:	4809      	ldr	r0, [pc, #36]	; (8003194 <__NVIC_SetPriority+0xd8>)
 800316e:	1dfb      	adds	r3, r7, #7
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	001c      	movs	r4, r3
 8003174:	230f      	movs	r3, #15
 8003176:	4023      	ands	r3, r4
 8003178:	3b08      	subs	r3, #8
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	430a      	orrs	r2, r1
 800317e:	3306      	adds	r3, #6
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	18c3      	adds	r3, r0, r3
 8003184:	3304      	adds	r3, #4
 8003186:	601a      	str	r2, [r3, #0]
}
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b003      	add	sp, #12
 800318e:	bd90      	pop	{r4, r7, pc}
 8003190:	e000e100 	.word	0xe000e100
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1e5a      	subs	r2, r3, #1
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	045b      	lsls	r3, r3, #17
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d301      	bcc.n	80031b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ac:	2301      	movs	r3, #1
 80031ae:	e010      	b.n	80031d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <SysTick_Config+0x44>)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	3a01      	subs	r2, #1
 80031b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b8:	2301      	movs	r3, #1
 80031ba:	425b      	negs	r3, r3
 80031bc:	2103      	movs	r1, #3
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff ff7c 	bl	80030bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <SysTick_Config+0x44>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <SysTick_Config+0x44>)
 80031cc:	2207      	movs	r2, #7
 80031ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b002      	add	sp, #8
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	e000e010 	.word	0xe000e010

080031e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	210f      	movs	r1, #15
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	1c02      	adds	r2, r0, #0
 80031f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b25b      	sxtb	r3, r3
 80031fa:	0011      	movs	r1, r2
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7ff ff5d 	bl	80030bc <__NVIC_SetPriority>
}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b004      	add	sp, #16
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	0018      	movs	r0, r3
 8003216:	f7ff ffbf 	bl	8003198 <SysTick_Config>
 800321a:	0003      	movs	r3, r0
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003232:	e14f      	b.n	80034d4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2101      	movs	r1, #1
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4091      	lsls	r1, r2
 800323e:	000a      	movs	r2, r1
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d100      	bne.n	800324c <HAL_GPIO_Init+0x28>
 800324a:	e140      	b.n	80034ce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2203      	movs	r2, #3
 8003252:	4013      	ands	r3, r2
 8003254:	2b01      	cmp	r3, #1
 8003256:	d005      	beq.n	8003264 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2203      	movs	r2, #3
 800325e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003260:	2b02      	cmp	r3, #2
 8003262:	d130      	bne.n	80032c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	409a      	lsls	r2, r3
 8003272:	0013      	movs	r3, r2
 8003274:	43da      	mvns	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	409a      	lsls	r2, r3
 8003286:	0013      	movs	r3, r2
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800329a:	2201      	movs	r2, #1
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
 80032a0:	0013      	movs	r3, r2
 80032a2:	43da      	mvns	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	2201      	movs	r2, #1
 80032b2:	401a      	ands	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	409a      	lsls	r2, r3
 80032b8:	0013      	movs	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2203      	movs	r2, #3
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d017      	beq.n	8003302 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	2203      	movs	r2, #3
 80032de:	409a      	lsls	r2, r3
 80032e0:	0013      	movs	r3, r2
 80032e2:	43da      	mvns	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	409a      	lsls	r2, r3
 80032f4:	0013      	movs	r3, r2
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2203      	movs	r2, #3
 8003308:	4013      	ands	r3, r2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d123      	bne.n	8003356 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3208      	adds	r2, #8
 8003316:	0092      	lsls	r2, r2, #2
 8003318:	58d3      	ldr	r3, [r2, r3]
 800331a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2207      	movs	r2, #7
 8003320:	4013      	ands	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	220f      	movs	r2, #15
 8003326:	409a      	lsls	r2, r3
 8003328:	0013      	movs	r3, r2
 800332a:	43da      	mvns	r2, r3
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2107      	movs	r1, #7
 800333a:	400b      	ands	r3, r1
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	409a      	lsls	r2, r3
 8003340:	0013      	movs	r3, r2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	08da      	lsrs	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3208      	adds	r2, #8
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	6939      	ldr	r1, [r7, #16]
 8003354:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2203      	movs	r2, #3
 8003362:	409a      	lsls	r2, r3
 8003364:	0013      	movs	r3, r2
 8003366:	43da      	mvns	r2, r3
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2203      	movs	r2, #3
 8003374:	401a      	ands	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	409a      	lsls	r2, r3
 800337c:	0013      	movs	r3, r2
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	23c0      	movs	r3, #192	; 0xc0
 8003390:	029b      	lsls	r3, r3, #10
 8003392:	4013      	ands	r3, r2
 8003394:	d100      	bne.n	8003398 <HAL_GPIO_Init+0x174>
 8003396:	e09a      	b.n	80034ce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003398:	4b54      	ldr	r3, [pc, #336]	; (80034ec <HAL_GPIO_Init+0x2c8>)
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	4b53      	ldr	r3, [pc, #332]	; (80034ec <HAL_GPIO_Init+0x2c8>)
 800339e:	2101      	movs	r1, #1
 80033a0:	430a      	orrs	r2, r1
 80033a2:	619a      	str	r2, [r3, #24]
 80033a4:	4b51      	ldr	r3, [pc, #324]	; (80034ec <HAL_GPIO_Init+0x2c8>)
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2201      	movs	r2, #1
 80033aa:	4013      	ands	r3, r2
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033b0:	4a4f      	ldr	r2, [pc, #316]	; (80034f0 <HAL_GPIO_Init+0x2cc>)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	3302      	adds	r3, #2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	589b      	ldr	r3, [r3, r2]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2203      	movs	r2, #3
 80033c2:	4013      	ands	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	220f      	movs	r2, #15
 80033c8:	409a      	lsls	r2, r3
 80033ca:	0013      	movs	r3, r2
 80033cc:	43da      	mvns	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	2390      	movs	r3, #144	; 0x90
 80033d8:	05db      	lsls	r3, r3, #23
 80033da:	429a      	cmp	r2, r3
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x1e2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a44      	ldr	r2, [pc, #272]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x1de>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a43      	ldr	r2, [pc, #268]	; (80034f8 <HAL_GPIO_Init+0x2d4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x1da>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a42      	ldr	r2, [pc, #264]	; (80034fc <HAL_GPIO_Init+0x2d8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x1d6>
 80033f6:	2303      	movs	r3, #3
 80033f8:	e006      	b.n	8003408 <HAL_GPIO_Init+0x1e4>
 80033fa:	2305      	movs	r3, #5
 80033fc:	e004      	b.n	8003408 <HAL_GPIO_Init+0x1e4>
 80033fe:	2302      	movs	r3, #2
 8003400:	e002      	b.n	8003408 <HAL_GPIO_Init+0x1e4>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_GPIO_Init+0x1e4>
 8003406:	2300      	movs	r3, #0
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	2103      	movs	r1, #3
 800340c:	400a      	ands	r2, r1
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	4093      	lsls	r3, r2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003418:	4935      	ldr	r1, [pc, #212]	; (80034f0 <HAL_GPIO_Init+0x2cc>)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003426:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_GPIO_Init+0x2dc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	43da      	mvns	r2, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	025b      	lsls	r3, r3, #9
 800343e:	4013      	ands	r3, r2
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800344a:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <HAL_GPIO_Init+0x2dc>)
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_GPIO_Init+0x2dc>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	43da      	mvns	r2, r3
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	029b      	lsls	r3, r3, #10
 8003468:	4013      	ands	r3, r2
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <HAL_GPIO_Init+0x2dc>)
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800347a:	4b21      	ldr	r3, [pc, #132]	; (8003500 <HAL_GPIO_Init+0x2dc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	43da      	mvns	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	035b      	lsls	r3, r3, #13
 8003492:	4013      	ands	r3, r2
 8003494:	d003      	beq.n	800349e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800349e:	4b18      	ldr	r3, [pc, #96]	; (8003500 <HAL_GPIO_Init+0x2dc>)
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80034a4:	4b16      	ldr	r3, [pc, #88]	; (8003500 <HAL_GPIO_Init+0x2dc>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	43da      	mvns	r2, r3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	039b      	lsls	r3, r3, #14
 80034bc:	4013      	ands	r3, r2
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <HAL_GPIO_Init+0x2dc>)
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	40da      	lsrs	r2, r3
 80034dc:	1e13      	subs	r3, r2, #0
 80034de:	d000      	beq.n	80034e2 <HAL_GPIO_Init+0x2be>
 80034e0:	e6a8      	b.n	8003234 <HAL_GPIO_Init+0x10>
  } 
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b006      	add	sp, #24
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40010000 	.word	0x40010000
 80034f4:	48000400 	.word	0x48000400
 80034f8:	48000800 	.word	0x48000800
 80034fc:	48000c00 	.word	0x48000c00
 8003500:	40010400 	.word	0x40010400

08003504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	0008      	movs	r0, r1
 800350e:	0011      	movs	r1, r2
 8003510:	1cbb      	adds	r3, r7, #2
 8003512:	1c02      	adds	r2, r0, #0
 8003514:	801a      	strh	r2, [r3, #0]
 8003516:	1c7b      	adds	r3, r7, #1
 8003518:	1c0a      	adds	r2, r1, #0
 800351a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800351c:	1c7b      	adds	r3, r7, #1
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d004      	beq.n	800352e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003524:	1cbb      	adds	r3, r7, #2
 8003526:	881a      	ldrh	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800352c:	e003      	b.n	8003536 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800352e:	1cbb      	adds	r3, r7, #2
 8003530:	881a      	ldrh	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b002      	add	sp, #8
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e082      	b.n	8003658 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2241      	movs	r2, #65	; 0x41
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d107      	bne.n	800356e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2240      	movs	r2, #64	; 0x40
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f7fe fe3f 	bl	80021ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2241      	movs	r2, #65	; 0x41
 8003572:	2124      	movs	r1, #36	; 0x24
 8003574:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2101      	movs	r1, #1
 8003582:	438a      	bics	r2, r1
 8003584:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4934      	ldr	r1, [pc, #208]	; (8003660 <HAL_I2C_Init+0x120>)
 8003590:	400a      	ands	r2, r1
 8003592:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4931      	ldr	r1, [pc, #196]	; (8003664 <HAL_I2C_Init+0x124>)
 80035a0:	400a      	ands	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d108      	bne.n	80035be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2180      	movs	r1, #128	; 0x80
 80035b6:	0209      	lsls	r1, r1, #8
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	e007      	b.n	80035ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2184      	movs	r1, #132	; 0x84
 80035c8:	0209      	lsls	r1, r1, #8
 80035ca:	430a      	orrs	r2, r1
 80035cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d104      	bne.n	80035e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2280      	movs	r2, #128	; 0x80
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	491f      	ldr	r1, [pc, #124]	; (8003668 <HAL_I2C_Init+0x128>)
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	491a      	ldr	r1, [pc, #104]	; (8003664 <HAL_I2C_Init+0x124>)
 80035fc:	400a      	ands	r2, r1
 80035fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	431a      	orrs	r2, r3
 800360a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69d9      	ldr	r1, [r3, #28]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1a      	ldr	r2, [r3, #32]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	430a      	orrs	r2, r1
 8003638:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2241      	movs	r2, #65	; 0x41
 8003644:	2120      	movs	r1, #32
 8003646:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2242      	movs	r2, #66	; 0x42
 8003652:	2100      	movs	r1, #0
 8003654:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}
 8003660:	f0ffffff 	.word	0xf0ffffff
 8003664:	ffff7fff 	.word	0xffff7fff
 8003668:	02008000 	.word	0x02008000

0800366c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	0008      	movs	r0, r1
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	0019      	movs	r1, r3
 800367a:	230a      	movs	r3, #10
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	1c02      	adds	r2, r0, #0
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	2308      	movs	r3, #8
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	1c0a      	adds	r2, r1, #0
 8003688:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2241      	movs	r2, #65	; 0x41
 800368e:	5c9b      	ldrb	r3, [r3, r2]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b20      	cmp	r3, #32
 8003694:	d000      	beq.n	8003698 <HAL_I2C_Master_Transmit+0x2c>
 8003696:	e0e7      	b.n	8003868 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2240      	movs	r2, #64	; 0x40
 800369c:	5c9b      	ldrb	r3, [r3, r2]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_I2C_Master_Transmit+0x3a>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e0e1      	b.n	800386a <HAL_I2C_Master_Transmit+0x1fe>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2240      	movs	r2, #64	; 0x40
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036ae:	f7ff fcfb 	bl	80030a8 <HAL_GetTick>
 80036b2:	0003      	movs	r3, r0
 80036b4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	0219      	lsls	r1, r3, #8
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2319      	movs	r3, #25
 80036c2:	2201      	movs	r2, #1
 80036c4:	f000 fa04 	bl	8003ad0 <I2C_WaitOnFlagUntilTimeout>
 80036c8:	1e03      	subs	r3, r0, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0cc      	b.n	800386a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2241      	movs	r2, #65	; 0x41
 80036d4:	2121      	movs	r1, #33	; 0x21
 80036d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2242      	movs	r2, #66	; 0x42
 80036dc:	2110      	movs	r1, #16
 80036de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2208      	movs	r2, #8
 80036f0:	18ba      	adds	r2, r7, r2
 80036f2:	8812      	ldrh	r2, [r2, #0]
 80036f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2bff      	cmp	r3, #255	; 0xff
 8003704:	d911      	bls.n	800372a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	22ff      	movs	r2, #255	; 0xff
 800370a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	b2da      	uxtb	r2, r3
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	045c      	lsls	r4, r3, #17
 8003716:	230a      	movs	r3, #10
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	8819      	ldrh	r1, [r3, #0]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	4b55      	ldr	r3, [pc, #340]	; (8003874 <HAL_I2C_Master_Transmit+0x208>)
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	0023      	movs	r3, r4
 8003724:	f000 fb74 	bl	8003e10 <I2C_TransferConfig>
 8003728:	e075      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003738:	b2da      	uxtb	r2, r3
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	049c      	lsls	r4, r3, #18
 800373e:	230a      	movs	r3, #10
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	8819      	ldrh	r1, [r3, #0]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	4b4b      	ldr	r3, [pc, #300]	; (8003874 <HAL_I2C_Master_Transmit+0x208>)
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	0023      	movs	r3, r4
 800374c:	f000 fb60 	bl	8003e10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003750:	e061      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	0018      	movs	r0, r3
 800375a:	f000 f9f8 	bl	8003b4e <I2C_WaitOnTXISFlagUntilTimeout>
 800375e:	1e03      	subs	r3, r0, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e081      	b.n	800386a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	781a      	ldrb	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d03a      	beq.n	8003816 <HAL_I2C_Master_Transmit+0x1aa>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d136      	bne.n	8003816 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	0013      	movs	r3, r2
 80037b2:	2200      	movs	r2, #0
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	f000 f98b 	bl	8003ad0 <I2C_WaitOnFlagUntilTimeout>
 80037ba:	1e03      	subs	r3, r0, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e053      	b.n	800386a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2bff      	cmp	r3, #255	; 0xff
 80037ca:	d911      	bls.n	80037f0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	22ff      	movs	r2, #255	; 0xff
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	045c      	lsls	r4, r3, #17
 80037dc:	230a      	movs	r3, #10
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	8819      	ldrh	r1, [r3, #0]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	2300      	movs	r3, #0
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	0023      	movs	r3, r4
 80037ea:	f000 fb11 	bl	8003e10 <I2C_TransferConfig>
 80037ee:	e012      	b.n	8003816 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	049c      	lsls	r4, r3, #18
 8003804:	230a      	movs	r3, #10
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	8819      	ldrh	r1, [r3, #0]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	2300      	movs	r3, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	0023      	movs	r3, r4
 8003812:	f000 fafd 	bl	8003e10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d198      	bne.n	8003752 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	0018      	movs	r0, r3
 8003828:	f000 f9d0 	bl	8003bcc <I2C_WaitOnSTOPFlagUntilTimeout>
 800382c:	1e03      	subs	r3, r0, #0
 800382e:	d001      	beq.n	8003834 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e01a      	b.n	800386a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2220      	movs	r2, #32
 800383a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	490c      	ldr	r1, [pc, #48]	; (8003878 <HAL_I2C_Master_Transmit+0x20c>)
 8003848:	400a      	ands	r2, r1
 800384a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2241      	movs	r2, #65	; 0x41
 8003850:	2120      	movs	r1, #32
 8003852:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2242      	movs	r2, #66	; 0x42
 8003858:	2100      	movs	r1, #0
 800385a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2240      	movs	r2, #64	; 0x40
 8003860:	2100      	movs	r1, #0
 8003862:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b007      	add	sp, #28
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	80002000 	.word	0x80002000
 8003878:	fe00e800 	.word	0xfe00e800

0800387c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b089      	sub	sp, #36	; 0x24
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	0008      	movs	r0, r1
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	0019      	movs	r1, r3
 800388a:	230a      	movs	r3, #10
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	1c02      	adds	r2, r0, #0
 8003890:	801a      	strh	r2, [r3, #0]
 8003892:	2308      	movs	r3, #8
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	1c0a      	adds	r2, r1, #0
 8003898:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2241      	movs	r2, #65	; 0x41
 800389e:	5c9b      	ldrb	r3, [r3, r2]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d000      	beq.n	80038a8 <HAL_I2C_Master_Receive+0x2c>
 80038a6:	e0e8      	b.n	8003a7a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2240      	movs	r2, #64	; 0x40
 80038ac:	5c9b      	ldrb	r3, [r3, r2]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_I2C_Master_Receive+0x3a>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e0e2      	b.n	8003a7c <HAL_I2C_Master_Receive+0x200>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2240      	movs	r2, #64	; 0x40
 80038ba:	2101      	movs	r1, #1
 80038bc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038be:	f7ff fbf3 	bl	80030a8 <HAL_GetTick>
 80038c2:	0003      	movs	r3, r0
 80038c4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	0219      	lsls	r1, r3, #8
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2319      	movs	r3, #25
 80038d2:	2201      	movs	r2, #1
 80038d4:	f000 f8fc 	bl	8003ad0 <I2C_WaitOnFlagUntilTimeout>
 80038d8:	1e03      	subs	r3, r0, #0
 80038da:	d001      	beq.n	80038e0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0cd      	b.n	8003a7c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2241      	movs	r2, #65	; 0x41
 80038e4:	2122      	movs	r1, #34	; 0x22
 80038e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2242      	movs	r2, #66	; 0x42
 80038ec:	2110      	movs	r1, #16
 80038ee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2208      	movs	r2, #8
 8003900:	18ba      	adds	r2, r7, r2
 8003902:	8812      	ldrh	r2, [r2, #0]
 8003904:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2bff      	cmp	r3, #255	; 0xff
 8003914:	d911      	bls.n	800393a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	22ff      	movs	r2, #255	; 0xff
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003920:	b2da      	uxtb	r2, r3
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	045c      	lsls	r4, r3, #17
 8003926:	230a      	movs	r3, #10
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	8819      	ldrh	r1, [r3, #0]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	4b55      	ldr	r3, [pc, #340]	; (8003a84 <HAL_I2C_Master_Receive+0x208>)
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	0023      	movs	r3, r4
 8003934:	f000 fa6c 	bl	8003e10 <I2C_TransferConfig>
 8003938:	e076      	b.n	8003a28 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	b2da      	uxtb	r2, r3
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	049c      	lsls	r4, r3, #18
 800394e:	230a      	movs	r3, #10
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	8819      	ldrh	r1, [r3, #0]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	4b4b      	ldr	r3, [pc, #300]	; (8003a84 <HAL_I2C_Master_Receive+0x208>)
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	0023      	movs	r3, r4
 800395c:	f000 fa58 	bl	8003e10 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003960:	e062      	b.n	8003a28 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	0018      	movs	r0, r3
 800396a:	f000 f96b 	bl	8003c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e082      	b.n	8003a7c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d03a      	beq.n	8003a28 <HAL_I2C_Master_Receive+0x1ac>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d136      	bne.n	8003a28 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	0013      	movs	r3, r2
 80039c4:	2200      	movs	r2, #0
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	f000 f882 	bl	8003ad0 <I2C_WaitOnFlagUntilTimeout>
 80039cc:	1e03      	subs	r3, r0, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e053      	b.n	8003a7c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2bff      	cmp	r3, #255	; 0xff
 80039dc:	d911      	bls.n	8003a02 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	22ff      	movs	r2, #255	; 0xff
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	045c      	lsls	r4, r3, #17
 80039ee:	230a      	movs	r3, #10
 80039f0:	18fb      	adds	r3, r7, r3
 80039f2:	8819      	ldrh	r1, [r3, #0]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	2300      	movs	r3, #0
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	0023      	movs	r3, r4
 80039fc:	f000 fa08 	bl	8003e10 <I2C_TransferConfig>
 8003a00:	e012      	b.n	8003a28 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	049c      	lsls	r4, r3, #18
 8003a16:	230a      	movs	r3, #10
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	8819      	ldrh	r1, [r3, #0]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	0023      	movs	r3, r4
 8003a24:	f000 f9f4 	bl	8003e10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d197      	bne.n	8003962 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f000 f8c7 	bl	8003bcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a3e:	1e03      	subs	r3, r0, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e01a      	b.n	8003a7c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	490b      	ldr	r1, [pc, #44]	; (8003a88 <HAL_I2C_Master_Receive+0x20c>)
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2241      	movs	r2, #65	; 0x41
 8003a62:	2120      	movs	r1, #32
 8003a64:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2242      	movs	r2, #66	; 0x42
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2240      	movs	r2, #64	; 0x40
 8003a72:	2100      	movs	r1, #0
 8003a74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
  }
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b007      	add	sp, #28
 8003a82:	bd90      	pop	{r4, r7, pc}
 8003a84:	80002400 	.word	0x80002400
 8003a88:	fe00e800 	.word	0xfe00e800

08003a8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d103      	bne.n	8003aaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d007      	beq.n	8003ac8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	619a      	str	r2, [r3, #24]
  }
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b002      	add	sp, #8
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	1dfb      	adds	r3, r7, #7
 8003ade:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ae0:	e021      	b.n	8003b26 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	d01e      	beq.n	8003b26 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7ff fade 	bl	80030a8 <HAL_GetTick>
 8003aec:	0002      	movs	r2, r0
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d113      	bne.n	8003b26 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	2220      	movs	r2, #32
 8003b04:	431a      	orrs	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2241      	movs	r2, #65	; 0x41
 8003b0e:	2120      	movs	r1, #32
 8003b10:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2242      	movs	r2, #66	; 0x42
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2240      	movs	r2, #64	; 0x40
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e00f      	b.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	425a      	negs	r2, r3
 8003b36:	4153      	adcs	r3, r2
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	1dfb      	adds	r3, r7, #7
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d0ce      	beq.n	8003ae2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b004      	add	sp, #16
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b5a:	e02b      	b.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	0018      	movs	r0, r3
 8003b64:	f000 f8da 	bl	8003d1c <I2C_IsAcknowledgeFailed>
 8003b68:	1e03      	subs	r3, r0, #0
 8003b6a:	d001      	beq.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e029      	b.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	3301      	adds	r3, #1
 8003b74:	d01e      	beq.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7ff fa97 	bl	80030a8 <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d113      	bne.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	2220      	movs	r2, #32
 8003b92:	431a      	orrs	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2241      	movs	r2, #65	; 0x41
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2242      	movs	r2, #66	; 0x42
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2240      	movs	r2, #64	; 0x40
 8003bac:	2100      	movs	r1, #0
 8003bae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e007      	b.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d1cc      	bne.n	8003b5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b004      	add	sp, #16
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd8:	e028      	b.n	8003c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f000 f89b 	bl	8003d1c <I2C_IsAcknowledgeFailed>
 8003be6:	1e03      	subs	r3, r0, #0
 8003be8:	d001      	beq.n	8003bee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e026      	b.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bee:	f7ff fa5b 	bl	80030a8 <HAL_GetTick>
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d302      	bcc.n	8003c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d113      	bne.n	8003c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	2220      	movs	r2, #32
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2241      	movs	r2, #65	; 0x41
 8003c14:	2120      	movs	r1, #32
 8003c16:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2242      	movs	r2, #66	; 0x42
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2240      	movs	r2, #64	; 0x40
 8003c24:	2100      	movs	r1, #0
 8003c26:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e007      	b.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2220      	movs	r2, #32
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d1cf      	bne.n	8003bda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b004      	add	sp, #16
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c50:	e055      	b.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f000 f85f 	bl	8003d1c <I2C_IsAcknowledgeFailed>
 8003c5e:	1e03      	subs	r3, r0, #0
 8003c60:	d001      	beq.n	8003c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e053      	b.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d129      	bne.n	8003cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d105      	bne.n	8003c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e03f      	b.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2220      	movs	r2, #32
 8003c94:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	491d      	ldr	r1, [pc, #116]	; (8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2241      	movs	r2, #65	; 0x41
 8003cb0:	2120      	movs	r1, #32
 8003cb2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2242      	movs	r2, #66	; 0x42
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2240      	movs	r2, #64	; 0x40
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e022      	b.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc8:	f7ff f9ee 	bl	80030a8 <HAL_GetTick>
 8003ccc:	0002      	movs	r2, r0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2241      	movs	r2, #65	; 0x41
 8003cee:	2120      	movs	r1, #32
 8003cf0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2240      	movs	r2, #64	; 0x40
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e007      	b.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2204      	movs	r2, #4
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d1a2      	bne.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b004      	add	sp, #16
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	fe00e800 	.word	0xfe00e800

08003d1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2210      	movs	r2, #16
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d164      	bne.n	8003e00 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	049b      	lsls	r3, r3, #18
 8003d40:	401a      	ands	r2, r3
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	049b      	lsls	r3, r3, #18
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d02b      	beq.n	8003da2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2180      	movs	r1, #128	; 0x80
 8003d56:	01c9      	lsls	r1, r1, #7
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d5c:	e021      	b.n	8003da2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	3301      	adds	r3, #1
 8003d62:	d01e      	beq.n	8003da2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d64:	f7ff f9a0 	bl	80030a8 <HAL_GetTick>
 8003d68:	0002      	movs	r2, r0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d302      	bcc.n	8003d7a <I2C_IsAcknowledgeFailed+0x5e>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d113      	bne.n	8003da2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	2220      	movs	r2, #32
 8003d80:	431a      	orrs	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2241      	movs	r2, #65	; 0x41
 8003d8a:	2120      	movs	r1, #32
 8003d8c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2242      	movs	r2, #66	; 0x42
 8003d92:	2100      	movs	r1, #0
 8003d94:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2240      	movs	r2, #64	; 0x40
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e02f      	b.n	8003e02 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2220      	movs	r2, #32
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d1d6      	bne.n	8003d5e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2210      	movs	r2, #16
 8003db6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7ff fe62 	bl	8003a8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	490e      	ldr	r1, [pc, #56]	; (8003e0c <I2C_IsAcknowledgeFailed+0xf0>)
 8003dd4:	400a      	ands	r2, r1
 8003dd6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	2204      	movs	r2, #4
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2241      	movs	r2, #65	; 0x41
 8003de8:	2120      	movs	r1, #32
 8003dea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2242      	movs	r2, #66	; 0x42
 8003df0:	2100      	movs	r1, #0
 8003df2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	2100      	movs	r1, #0
 8003dfa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	0018      	movs	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b004      	add	sp, #16
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	fe00e800 	.word	0xfe00e800

08003e10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	0008      	movs	r0, r1
 8003e1a:	0011      	movs	r1, r2
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	240a      	movs	r4, #10
 8003e20:	193b      	adds	r3, r7, r4
 8003e22:	1c02      	adds	r2, r0, #0
 8003e24:	801a      	strh	r2, [r3, #0]
 8003e26:	2009      	movs	r0, #9
 8003e28:	183b      	adds	r3, r7, r0
 8003e2a:	1c0a      	adds	r2, r1, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	0d51      	lsrs	r1, r2, #21
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	00d2      	lsls	r2, r2, #3
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	490e      	ldr	r1, [pc, #56]	; (8003e78 <I2C_TransferConfig+0x68>)
 8003e40:	430a      	orrs	r2, r1
 8003e42:	43d2      	mvns	r2, r2
 8003e44:	401a      	ands	r2, r3
 8003e46:	0011      	movs	r1, r2
 8003e48:	193b      	adds	r3, r7, r4
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	059b      	lsls	r3, r3, #22
 8003e4e:	0d9a      	lsrs	r2, r3, #22
 8003e50:	183b      	adds	r3, r7, r0
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	0418      	lsls	r0, r3, #16
 8003e56:	23ff      	movs	r3, #255	; 0xff
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	4003      	ands	r3, r0
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b005      	add	sp, #20
 8003e74:	bd90      	pop	{r4, r7, pc}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	03ff63ff 	.word	0x03ff63ff

08003e7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2241      	movs	r2, #65	; 0x41
 8003e8a:	5c9b      	ldrb	r3, [r3, r2]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d138      	bne.n	8003f04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2240      	movs	r2, #64	; 0x40
 8003e96:	5c9b      	ldrb	r3, [r3, r2]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e032      	b.n	8003f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2240      	movs	r2, #64	; 0x40
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2241      	movs	r2, #65	; 0x41
 8003eac:	2124      	movs	r1, #36	; 0x24
 8003eae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2101      	movs	r1, #1
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4911      	ldr	r1, [pc, #68]	; (8003f10 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ecc:	400a      	ands	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6819      	ldr	r1, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2101      	movs	r1, #1
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2241      	movs	r2, #65	; 0x41
 8003ef4:	2120      	movs	r1, #32
 8003ef6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2240      	movs	r2, #64	; 0x40
 8003efc:	2100      	movs	r1, #0
 8003efe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b002      	add	sp, #8
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	ffffefff 	.word	0xffffefff

08003f14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2241      	movs	r2, #65	; 0x41
 8003f22:	5c9b      	ldrb	r3, [r3, r2]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d139      	bne.n	8003f9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2240      	movs	r2, #64	; 0x40
 8003f2e:	5c9b      	ldrb	r3, [r3, r2]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e033      	b.n	8003fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2240      	movs	r2, #64	; 0x40
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2241      	movs	r2, #65	; 0x41
 8003f44:	2124      	movs	r1, #36	; 0x24
 8003f46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2101      	movs	r1, #1
 8003f54:	438a      	bics	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a11      	ldr	r2, [pc, #68]	; (8003fa8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2101      	movs	r1, #1
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2241      	movs	r2, #65	; 0x41
 8003f8e:	2120      	movs	r1, #32
 8003f90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2240      	movs	r2, #64	; 0x40
 8003f96:	2100      	movs	r1, #0
 8003f98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
  }
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b004      	add	sp, #16
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	fffff0ff 	.word	0xfffff0ff

08003fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e301      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d100      	bne.n	8003fca <HAL_RCC_OscConfig+0x1e>
 8003fc8:	e08d      	b.n	80040e6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003fca:	4bc3      	ldr	r3, [pc, #780]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	220c      	movs	r2, #12
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fd6:	4bc0      	ldr	r3, [pc, #768]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	220c      	movs	r2, #12
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d116      	bne.n	8004010 <HAL_RCC_OscConfig+0x64>
 8003fe2:	4bbd      	ldr	r3, [pc, #756]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	025b      	lsls	r3, r3, #9
 8003fea:	401a      	ands	r2, r3
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	025b      	lsls	r3, r3, #9
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d10d      	bne.n	8004010 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff4:	4bb8      	ldr	r3, [pc, #736]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	029b      	lsls	r3, r3, #10
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d100      	bne.n	8004002 <HAL_RCC_OscConfig+0x56>
 8004000:	e070      	b.n	80040e4 <HAL_RCC_OscConfig+0x138>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d000      	beq.n	800400c <HAL_RCC_OscConfig+0x60>
 800400a:	e06b      	b.n	80040e4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e2d8      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <HAL_RCC_OscConfig+0x7c>
 8004018:	4baf      	ldr	r3, [pc, #700]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4bae      	ldr	r3, [pc, #696]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	0249      	lsls	r1, r1, #9
 8004022:	430a      	orrs	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e02f      	b.n	8004088 <HAL_RCC_OscConfig+0xdc>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x9e>
 8004030:	4ba9      	ldr	r3, [pc, #676]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4ba8      	ldr	r3, [pc, #672]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004036:	49a9      	ldr	r1, [pc, #676]	; (80042dc <HAL_RCC_OscConfig+0x330>)
 8004038:	400a      	ands	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	4ba6      	ldr	r3, [pc, #664]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4ba5      	ldr	r3, [pc, #660]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004042:	49a7      	ldr	r1, [pc, #668]	; (80042e0 <HAL_RCC_OscConfig+0x334>)
 8004044:	400a      	ands	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e01e      	b.n	8004088 <HAL_RCC_OscConfig+0xdc>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b05      	cmp	r3, #5
 8004050:	d10e      	bne.n	8004070 <HAL_RCC_OscConfig+0xc4>
 8004052:	4ba1      	ldr	r3, [pc, #644]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4ba0      	ldr	r3, [pc, #640]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	02c9      	lsls	r1, r1, #11
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	4b9d      	ldr	r3, [pc, #628]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b9c      	ldr	r3, [pc, #624]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004066:	2180      	movs	r1, #128	; 0x80
 8004068:	0249      	lsls	r1, r1, #9
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e00b      	b.n	8004088 <HAL_RCC_OscConfig+0xdc>
 8004070:	4b99      	ldr	r3, [pc, #612]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b98      	ldr	r3, [pc, #608]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004076:	4999      	ldr	r1, [pc, #612]	; (80042dc <HAL_RCC_OscConfig+0x330>)
 8004078:	400a      	ands	r2, r1
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	4b96      	ldr	r3, [pc, #600]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b95      	ldr	r3, [pc, #596]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004082:	4997      	ldr	r1, [pc, #604]	; (80042e0 <HAL_RCC_OscConfig+0x334>)
 8004084:	400a      	ands	r2, r1
 8004086:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d014      	beq.n	80040ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7ff f80a 	bl	80030a8 <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800409a:	f7ff f805 	bl	80030a8 <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b64      	cmp	r3, #100	; 0x64
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e28a      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ac:	4b8a      	ldr	r3, [pc, #552]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	029b      	lsls	r3, r3, #10
 80040b4:	4013      	ands	r3, r2
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0xee>
 80040b8:	e015      	b.n	80040e6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ba:	f7fe fff5 	bl	80030a8 <HAL_GetTick>
 80040be:	0003      	movs	r3, r0
 80040c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c4:	f7fe fff0 	bl	80030a8 <HAL_GetTick>
 80040c8:	0002      	movs	r2, r0
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	; 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e275      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d6:	4b80      	ldr	r3, [pc, #512]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	029b      	lsls	r3, r3, #10
 80040de:	4013      	ands	r3, r2
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x118>
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2202      	movs	r2, #2
 80040ec:	4013      	ands	r3, r2
 80040ee:	d100      	bne.n	80040f2 <HAL_RCC_OscConfig+0x146>
 80040f0:	e069      	b.n	80041c6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80040f2:	4b79      	ldr	r3, [pc, #484]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	220c      	movs	r2, #12
 80040f8:	4013      	ands	r3, r2
 80040fa:	d00b      	beq.n	8004114 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80040fc:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	220c      	movs	r2, #12
 8004102:	4013      	ands	r3, r2
 8004104:	2b08      	cmp	r3, #8
 8004106:	d11c      	bne.n	8004142 <HAL_RCC_OscConfig+0x196>
 8004108:	4b73      	ldr	r3, [pc, #460]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	025b      	lsls	r3, r3, #9
 8004110:	4013      	ands	r3, r2
 8004112:	d116      	bne.n	8004142 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004114:	4b70      	ldr	r3, [pc, #448]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2202      	movs	r2, #2
 800411a:	4013      	ands	r3, r2
 800411c:	d005      	beq.n	800412a <HAL_RCC_OscConfig+0x17e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d001      	beq.n	800412a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e24b      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412a:	4b6b      	ldr	r3, [pc, #428]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	22f8      	movs	r2, #248	; 0xf8
 8004130:	4393      	bics	r3, r2
 8004132:	0019      	movs	r1, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	00da      	lsls	r2, r3, #3
 800413a:	4b67      	ldr	r3, [pc, #412]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004140:	e041      	b.n	80041c6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d024      	beq.n	8004194 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004150:	2101      	movs	r1, #1
 8004152:	430a      	orrs	r2, r1
 8004154:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fe ffa7 	bl	80030a8 <HAL_GetTick>
 800415a:	0003      	movs	r3, r0
 800415c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004160:	f7fe ffa2 	bl	80030a8 <HAL_GetTick>
 8004164:	0002      	movs	r2, r0
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e227      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004172:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2202      	movs	r2, #2
 8004178:	4013      	ands	r3, r2
 800417a:	d0f1      	beq.n	8004160 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417c:	4b56      	ldr	r3, [pc, #344]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	22f8      	movs	r2, #248	; 0xf8
 8004182:	4393      	bics	r3, r2
 8004184:	0019      	movs	r1, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00da      	lsls	r2, r3, #3
 800418c:	4b52      	ldr	r3, [pc, #328]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800418e:	430a      	orrs	r2, r1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e018      	b.n	80041c6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004194:	4b50      	ldr	r3, [pc, #320]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b4f      	ldr	r3, [pc, #316]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800419a:	2101      	movs	r1, #1
 800419c:	438a      	bics	r2, r1
 800419e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fe ff82 	bl	80030a8 <HAL_GetTick>
 80041a4:	0003      	movs	r3, r0
 80041a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fe ff7d 	bl	80030a8 <HAL_GetTick>
 80041ae:	0002      	movs	r2, r0
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e202      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041bc:	4b46      	ldr	r3, [pc, #280]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2202      	movs	r2, #2
 80041c2:	4013      	ands	r3, r2
 80041c4:	d1f1      	bne.n	80041aa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2208      	movs	r2, #8
 80041cc:	4013      	ands	r3, r2
 80041ce:	d036      	beq.n	800423e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d019      	beq.n	800420c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d8:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 80041da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041dc:	4b3e      	ldr	r3, [pc, #248]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 80041de:	2101      	movs	r1, #1
 80041e0:	430a      	orrs	r2, r1
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e4:	f7fe ff60 	bl	80030a8 <HAL_GetTick>
 80041e8:	0003      	movs	r3, r0
 80041ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ee:	f7fe ff5b 	bl	80030a8 <HAL_GetTick>
 80041f2:	0002      	movs	r2, r0
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e1e0      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004200:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2202      	movs	r2, #2
 8004206:	4013      	ands	r3, r2
 8004208:	d0f1      	beq.n	80041ee <HAL_RCC_OscConfig+0x242>
 800420a:	e018      	b.n	800423e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420c:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800420e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004210:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004212:	2101      	movs	r1, #1
 8004214:	438a      	bics	r2, r1
 8004216:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004218:	f7fe ff46 	bl	80030a8 <HAL_GetTick>
 800421c:	0003      	movs	r3, r0
 800421e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004222:	f7fe ff41 	bl	80030a8 <HAL_GetTick>
 8004226:	0002      	movs	r2, r0
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e1c6      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004234:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	2202      	movs	r2, #2
 800423a:	4013      	ands	r3, r2
 800423c:	d1f1      	bne.n	8004222 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2204      	movs	r2, #4
 8004244:	4013      	ands	r3, r2
 8004246:	d100      	bne.n	800424a <HAL_RCC_OscConfig+0x29e>
 8004248:	e0b4      	b.n	80043b4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800424a:	201f      	movs	r0, #31
 800424c:	183b      	adds	r3, r7, r0
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004252:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	055b      	lsls	r3, r3, #21
 800425a:	4013      	ands	r3, r2
 800425c:	d110      	bne.n	8004280 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800425e:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 8004264:	2180      	movs	r1, #128	; 0x80
 8004266:	0549      	lsls	r1, r1, #21
 8004268:	430a      	orrs	r2, r1
 800426a:	61da      	str	r2, [r3, #28]
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	055b      	lsls	r3, r3, #21
 8004274:	4013      	ands	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800427a:	183b      	adds	r3, r7, r0
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	4b18      	ldr	r3, [pc, #96]	; (80042e4 <HAL_RCC_OscConfig+0x338>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4013      	ands	r3, r2
 800428a:	d11a      	bne.n	80042c2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800428c:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <HAL_RCC_OscConfig+0x338>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <HAL_RCC_OscConfig+0x338>)
 8004292:	2180      	movs	r1, #128	; 0x80
 8004294:	0049      	lsls	r1, r1, #1
 8004296:	430a      	orrs	r2, r1
 8004298:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429a:	f7fe ff05 	bl	80030a8 <HAL_GetTick>
 800429e:	0003      	movs	r3, r0
 80042a0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a4:	f7fe ff00 	bl	80030a8 <HAL_GetTick>
 80042a8:	0002      	movs	r2, r0
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e185      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_OscConfig+0x338>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	2380      	movs	r3, #128	; 0x80
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4013      	ands	r3, r2
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d10e      	bne.n	80042e8 <HAL_RCC_OscConfig+0x33c>
 80042ca:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	4b02      	ldr	r3, [pc, #8]	; (80042d8 <HAL_RCC_OscConfig+0x32c>)
 80042d0:	2101      	movs	r1, #1
 80042d2:	430a      	orrs	r2, r1
 80042d4:	621a      	str	r2, [r3, #32]
 80042d6:	e035      	b.n	8004344 <HAL_RCC_OscConfig+0x398>
 80042d8:	40021000 	.word	0x40021000
 80042dc:	fffeffff 	.word	0xfffeffff
 80042e0:	fffbffff 	.word	0xfffbffff
 80042e4:	40007000 	.word	0x40007000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10c      	bne.n	800430a <HAL_RCC_OscConfig+0x35e>
 80042f0:	4bb6      	ldr	r3, [pc, #728]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	4bb5      	ldr	r3, [pc, #724]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80042f6:	2101      	movs	r1, #1
 80042f8:	438a      	bics	r2, r1
 80042fa:	621a      	str	r2, [r3, #32]
 80042fc:	4bb3      	ldr	r3, [pc, #716]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80042fe:	6a1a      	ldr	r2, [r3, #32]
 8004300:	4bb2      	ldr	r3, [pc, #712]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004302:	2104      	movs	r1, #4
 8004304:	438a      	bics	r2, r1
 8004306:	621a      	str	r2, [r3, #32]
 8004308:	e01c      	b.n	8004344 <HAL_RCC_OscConfig+0x398>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b05      	cmp	r3, #5
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x380>
 8004312:	4bae      	ldr	r3, [pc, #696]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004314:	6a1a      	ldr	r2, [r3, #32]
 8004316:	4bad      	ldr	r3, [pc, #692]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004318:	2104      	movs	r1, #4
 800431a:	430a      	orrs	r2, r1
 800431c:	621a      	str	r2, [r3, #32]
 800431e:	4bab      	ldr	r3, [pc, #684]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004320:	6a1a      	ldr	r2, [r3, #32]
 8004322:	4baa      	ldr	r3, [pc, #680]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004324:	2101      	movs	r1, #1
 8004326:	430a      	orrs	r2, r1
 8004328:	621a      	str	r2, [r3, #32]
 800432a:	e00b      	b.n	8004344 <HAL_RCC_OscConfig+0x398>
 800432c:	4ba7      	ldr	r3, [pc, #668]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800432e:	6a1a      	ldr	r2, [r3, #32]
 8004330:	4ba6      	ldr	r3, [pc, #664]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004332:	2101      	movs	r1, #1
 8004334:	438a      	bics	r2, r1
 8004336:	621a      	str	r2, [r3, #32]
 8004338:	4ba4      	ldr	r3, [pc, #656]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800433a:	6a1a      	ldr	r2, [r3, #32]
 800433c:	4ba3      	ldr	r3, [pc, #652]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800433e:	2104      	movs	r1, #4
 8004340:	438a      	bics	r2, r1
 8004342:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d014      	beq.n	8004376 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434c:	f7fe feac 	bl	80030a8 <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004354:	e009      	b.n	800436a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fe fea7 	bl	80030a8 <HAL_GetTick>
 800435a:	0002      	movs	r2, r0
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	4a9b      	ldr	r2, [pc, #620]	; (80045d0 <HAL_RCC_OscConfig+0x624>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e12b      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436a:	4b98      	ldr	r3, [pc, #608]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	2202      	movs	r2, #2
 8004370:	4013      	ands	r3, r2
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x3aa>
 8004374:	e013      	b.n	800439e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004376:	f7fe fe97 	bl	80030a8 <HAL_GetTick>
 800437a:	0003      	movs	r3, r0
 800437c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437e:	e009      	b.n	8004394 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004380:	f7fe fe92 	bl	80030a8 <HAL_GetTick>
 8004384:	0002      	movs	r2, r0
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	4a91      	ldr	r2, [pc, #580]	; (80045d0 <HAL_RCC_OscConfig+0x624>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e116      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004394:	4b8d      	ldr	r3, [pc, #564]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	2202      	movs	r2, #2
 800439a:	4013      	ands	r3, r2
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800439e:	231f      	movs	r3, #31
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a8:	4b88      	ldr	r3, [pc, #544]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	4b87      	ldr	r3, [pc, #540]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80043ae:	4989      	ldr	r1, [pc, #548]	; (80045d4 <HAL_RCC_OscConfig+0x628>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2210      	movs	r2, #16
 80043ba:	4013      	ands	r3, r2
 80043bc:	d063      	beq.n	8004486 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d12a      	bne.n	800441c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80043c6:	4b81      	ldr	r3, [pc, #516]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80043c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ca:	4b80      	ldr	r3, [pc, #512]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80043cc:	2104      	movs	r1, #4
 80043ce:	430a      	orrs	r2, r1
 80043d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80043d2:	4b7e      	ldr	r3, [pc, #504]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80043d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d6:	4b7d      	ldr	r3, [pc, #500]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80043d8:	2101      	movs	r1, #1
 80043da:	430a      	orrs	r2, r1
 80043dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043de:	f7fe fe63 	bl	80030a8 <HAL_GetTick>
 80043e2:	0003      	movs	r3, r0
 80043e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80043e8:	f7fe fe5e 	bl	80030a8 <HAL_GetTick>
 80043ec:	0002      	movs	r2, r0
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0e3      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80043fa:	4b74      	ldr	r3, [pc, #464]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	2202      	movs	r2, #2
 8004400:	4013      	ands	r3, r2
 8004402:	d0f1      	beq.n	80043e8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004404:	4b71      	ldr	r3, [pc, #452]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004408:	22f8      	movs	r2, #248	; 0xf8
 800440a:	4393      	bics	r3, r2
 800440c:	0019      	movs	r1, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	00da      	lsls	r2, r3, #3
 8004414:	4b6d      	ldr	r3, [pc, #436]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004416:	430a      	orrs	r2, r1
 8004418:	635a      	str	r2, [r3, #52]	; 0x34
 800441a:	e034      	b.n	8004486 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	3305      	adds	r3, #5
 8004422:	d111      	bne.n	8004448 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004424:	4b69      	ldr	r3, [pc, #420]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004428:	4b68      	ldr	r3, [pc, #416]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800442a:	2104      	movs	r1, #4
 800442c:	438a      	bics	r2, r1
 800442e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004430:	4b66      	ldr	r3, [pc, #408]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004434:	22f8      	movs	r2, #248	; 0xf8
 8004436:	4393      	bics	r3, r2
 8004438:	0019      	movs	r1, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	00da      	lsls	r2, r3, #3
 8004440:	4b62      	ldr	r3, [pc, #392]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004442:	430a      	orrs	r2, r1
 8004444:	635a      	str	r2, [r3, #52]	; 0x34
 8004446:	e01e      	b.n	8004486 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004448:	4b60      	ldr	r3, [pc, #384]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800444a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800444c:	4b5f      	ldr	r3, [pc, #380]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800444e:	2104      	movs	r1, #4
 8004450:	430a      	orrs	r2, r1
 8004452:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004454:	4b5d      	ldr	r3, [pc, #372]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004458:	4b5c      	ldr	r3, [pc, #368]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800445a:	2101      	movs	r1, #1
 800445c:	438a      	bics	r2, r1
 800445e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004460:	f7fe fe22 	bl	80030a8 <HAL_GetTick>
 8004464:	0003      	movs	r3, r0
 8004466:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800446a:	f7fe fe1d 	bl	80030a8 <HAL_GetTick>
 800446e:	0002      	movs	r2, r0
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e0a2      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	2202      	movs	r2, #2
 8004482:	4013      	ands	r3, r2
 8004484:	d1f1      	bne.n	800446a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d100      	bne.n	8004490 <HAL_RCC_OscConfig+0x4e4>
 800448e:	e097      	b.n	80045c0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004490:	4b4e      	ldr	r3, [pc, #312]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	220c      	movs	r2, #12
 8004496:	4013      	ands	r3, r2
 8004498:	2b08      	cmp	r3, #8
 800449a:	d100      	bne.n	800449e <HAL_RCC_OscConfig+0x4f2>
 800449c:	e06b      	b.n	8004576 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d14c      	bne.n	8004540 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a6:	4b49      	ldr	r3, [pc, #292]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b48      	ldr	r3, [pc, #288]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80044ac:	494a      	ldr	r1, [pc, #296]	; (80045d8 <HAL_RCC_OscConfig+0x62c>)
 80044ae:	400a      	ands	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b2:	f7fe fdf9 	bl	80030a8 <HAL_GetTick>
 80044b6:	0003      	movs	r3, r0
 80044b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fe fdf4 	bl	80030a8 <HAL_GetTick>
 80044c0:	0002      	movs	r2, r0
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e079      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ce:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	049b      	lsls	r3, r3, #18
 80044d6:	4013      	ands	r3, r2
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044da:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	220f      	movs	r2, #15
 80044e0:	4393      	bics	r3, r2
 80044e2:	0019      	movs	r1, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e8:	4b38      	ldr	r3, [pc, #224]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80044ea:	430a      	orrs	r2, r1
 80044ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80044ee:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4a3a      	ldr	r2, [pc, #232]	; (80045dc <HAL_RCC_OscConfig+0x630>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	431a      	orrs	r2, r3
 8004502:	4b32      	ldr	r3, [pc, #200]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004508:	4b30      	ldr	r3, [pc, #192]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b2f      	ldr	r3, [pc, #188]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800450e:	2180      	movs	r1, #128	; 0x80
 8004510:	0449      	lsls	r1, r1, #17
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fe fdc7 	bl	80030a8 <HAL_GetTick>
 800451a:	0003      	movs	r3, r0
 800451c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004520:	f7fe fdc2 	bl	80030a8 <HAL_GetTick>
 8004524:	0002      	movs	r2, r0
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e047      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004532:	4b26      	ldr	r3, [pc, #152]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	049b      	lsls	r3, r3, #18
 800453a:	4013      	ands	r3, r2
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x574>
 800453e:	e03f      	b.n	80045c0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004540:	4b22      	ldr	r3, [pc, #136]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4b21      	ldr	r3, [pc, #132]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004546:	4924      	ldr	r1, [pc, #144]	; (80045d8 <HAL_RCC_OscConfig+0x62c>)
 8004548:	400a      	ands	r2, r1
 800454a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fe fdac 	bl	80030a8 <HAL_GetTick>
 8004550:	0003      	movs	r3, r0
 8004552:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004556:	f7fe fda7 	bl	80030a8 <HAL_GetTick>
 800455a:	0002      	movs	r2, r0
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e02c      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004568:	4b18      	ldr	r3, [pc, #96]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	049b      	lsls	r3, r3, #18
 8004570:	4013      	ands	r3, r2
 8004572:	d1f0      	bne.n	8004556 <HAL_RCC_OscConfig+0x5aa>
 8004574:	e024      	b.n	80045c0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e01f      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004588:	4b10      	ldr	r3, [pc, #64]	; (80045cc <HAL_RCC_OscConfig+0x620>)
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	025b      	lsls	r3, r3, #9
 8004594:	401a      	ands	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	429a      	cmp	r2, r3
 800459c:	d10e      	bne.n	80045bc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	220f      	movs	r2, #15
 80045a2:	401a      	ands	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	23f0      	movs	r3, #240	; 0xf0
 80045b0:	039b      	lsls	r3, r3, #14
 80045b2:	401a      	ands	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b008      	add	sp, #32
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	40021000 	.word	0x40021000
 80045d0:	00001388 	.word	0x00001388
 80045d4:	efffffff 	.word	0xefffffff
 80045d8:	feffffff 	.word	0xfeffffff
 80045dc:	ffc2ffff 	.word	0xffc2ffff

080045e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0b3      	b.n	800475c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f4:	4b5b      	ldr	r3, [pc, #364]	; (8004764 <HAL_RCC_ClockConfig+0x184>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	4013      	ands	r3, r2
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d911      	bls.n	8004626 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b58      	ldr	r3, [pc, #352]	; (8004764 <HAL_RCC_ClockConfig+0x184>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	4393      	bics	r3, r2
 800460a:	0019      	movs	r1, r3
 800460c:	4b55      	ldr	r3, [pc, #340]	; (8004764 <HAL_RCC_ClockConfig+0x184>)
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004614:	4b53      	ldr	r3, [pc, #332]	; (8004764 <HAL_RCC_ClockConfig+0x184>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2201      	movs	r2, #1
 800461a:	4013      	ands	r3, r2
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d001      	beq.n	8004626 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e09a      	b.n	800475c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2202      	movs	r2, #2
 800462c:	4013      	ands	r3, r2
 800462e:	d015      	beq.n	800465c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2204      	movs	r2, #4
 8004636:	4013      	ands	r3, r2
 8004638:	d006      	beq.n	8004648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800463a:	4b4b      	ldr	r3, [pc, #300]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	4b4a      	ldr	r3, [pc, #296]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 8004640:	21e0      	movs	r1, #224	; 0xe0
 8004642:	00c9      	lsls	r1, r1, #3
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004648:	4b47      	ldr	r3, [pc, #284]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	22f0      	movs	r2, #240	; 0xf0
 800464e:	4393      	bics	r3, r2
 8004650:	0019      	movs	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	4b44      	ldr	r3, [pc, #272]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2201      	movs	r2, #1
 8004662:	4013      	ands	r3, r2
 8004664:	d040      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466e:	4b3e      	ldr	r3, [pc, #248]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	029b      	lsls	r3, r3, #10
 8004676:	4013      	ands	r3, r2
 8004678:	d114      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e06e      	b.n	800475c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d107      	bne.n	8004696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004686:	4b38      	ldr	r3, [pc, #224]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	049b      	lsls	r3, r3, #18
 800468e:	4013      	ands	r3, r2
 8004690:	d108      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e062      	b.n	800475c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004696:	4b34      	ldr	r3, [pc, #208]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2202      	movs	r2, #2
 800469c:	4013      	ands	r3, r2
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e05b      	b.n	800475c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a4:	4b30      	ldr	r3, [pc, #192]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2203      	movs	r2, #3
 80046aa:	4393      	bics	r3, r2
 80046ac:	0019      	movs	r1, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4b2d      	ldr	r3, [pc, #180]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 80046b4:	430a      	orrs	r2, r1
 80046b6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b8:	f7fe fcf6 	bl	80030a8 <HAL_GetTick>
 80046bc:	0003      	movs	r3, r0
 80046be:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c0:	e009      	b.n	80046d6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c2:	f7fe fcf1 	bl	80030a8 <HAL_GetTick>
 80046c6:	0002      	movs	r2, r0
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	4a27      	ldr	r2, [pc, #156]	; (800476c <HAL_RCC_ClockConfig+0x18c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e042      	b.n	800475c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d6:	4b24      	ldr	r3, [pc, #144]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	220c      	movs	r2, #12
 80046dc:	401a      	ands	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d1ec      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e8:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <HAL_RCC_ClockConfig+0x184>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2201      	movs	r2, #1
 80046ee:	4013      	ands	r3, r2
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d211      	bcs.n	800471a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <HAL_RCC_ClockConfig+0x184>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2201      	movs	r2, #1
 80046fc:	4393      	bics	r3, r2
 80046fe:	0019      	movs	r1, r3
 8004700:	4b18      	ldr	r3, [pc, #96]	; (8004764 <HAL_RCC_ClockConfig+0x184>)
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004708:	4b16      	ldr	r3, [pc, #88]	; (8004764 <HAL_RCC_ClockConfig+0x184>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2201      	movs	r2, #1
 800470e:	4013      	ands	r3, r2
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d001      	beq.n	800471a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e020      	b.n	800475c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2204      	movs	r2, #4
 8004720:	4013      	ands	r3, r2
 8004722:	d009      	beq.n	8004738 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004724:	4b10      	ldr	r3, [pc, #64]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4a11      	ldr	r2, [pc, #68]	; (8004770 <HAL_RCC_ClockConfig+0x190>)
 800472a:	4013      	ands	r3, r2
 800472c:	0019      	movs	r1, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004738:	f000 f820 	bl	800477c <HAL_RCC_GetSysClockFreq>
 800473c:	0001      	movs	r1, r0
 800473e:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <HAL_RCC_ClockConfig+0x188>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	091b      	lsrs	r3, r3, #4
 8004744:	220f      	movs	r2, #15
 8004746:	4013      	ands	r3, r2
 8004748:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <HAL_RCC_ClockConfig+0x194>)
 800474a:	5cd3      	ldrb	r3, [r2, r3]
 800474c:	000a      	movs	r2, r1
 800474e:	40da      	lsrs	r2, r3
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_RCC_ClockConfig+0x198>)
 8004752:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004754:	2000      	movs	r0, #0
 8004756:	f7fe fc61 	bl	800301c <HAL_InitTick>
  
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	b004      	add	sp, #16
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40022000 	.word	0x40022000
 8004768:	40021000 	.word	0x40021000
 800476c:	00001388 	.word	0x00001388
 8004770:	fffff8ff 	.word	0xfffff8ff
 8004774:	08006e18 	.word	0x08006e18
 8004778:	20000114 	.word	0x20000114

0800477c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b08f      	sub	sp, #60	; 0x3c
 8004780:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004782:	2314      	movs	r3, #20
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	4a2b      	ldr	r2, [pc, #172]	; (8004834 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004788:	ca13      	ldmia	r2!, {r0, r1, r4}
 800478a:	c313      	stmia	r3!, {r0, r1, r4}
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004790:	1d3b      	adds	r3, r7, #4
 8004792:	4a29      	ldr	r2, [pc, #164]	; (8004838 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004794:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004796:	c313      	stmia	r3!, {r0, r1, r4}
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a0:	2300      	movs	r3, #0
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047a4:	2300      	movs	r3, #0
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80047b0:	4b22      	ldr	r3, [pc, #136]	; (800483c <HAL_RCC_GetSysClockFreq+0xc0>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	220c      	movs	r2, #12
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d002      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x4a>
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d003      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x50>
 80047c4:	e02d      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047c6:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047ca:	e02d      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	0c9b      	lsrs	r3, r3, #18
 80047d0:	220f      	movs	r2, #15
 80047d2:	4013      	ands	r3, r2
 80047d4:	2214      	movs	r2, #20
 80047d6:	18ba      	adds	r2, r7, r2
 80047d8:	5cd3      	ldrb	r3, [r2, r3]
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80047dc:	4b17      	ldr	r3, [pc, #92]	; (800483c <HAL_RCC_GetSysClockFreq+0xc0>)
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	220f      	movs	r2, #15
 80047e2:	4013      	ands	r3, r2
 80047e4:	1d3a      	adds	r2, r7, #4
 80047e6:	5cd3      	ldrb	r3, [r2, r3]
 80047e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	025b      	lsls	r3, r3, #9
 80047f0:	4013      	ands	r3, r2
 80047f2:	d009      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047f6:	4812      	ldr	r0, [pc, #72]	; (8004840 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047f8:	f7fb fc98 	bl	800012c <__udivsi3>
 80047fc:	0003      	movs	r3, r0
 80047fe:	001a      	movs	r2, r3
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	4353      	muls	r3, r2
 8004804:	637b      	str	r3, [r7, #52]	; 0x34
 8004806:	e009      	b.n	800481c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800480a:	000a      	movs	r2, r1
 800480c:	0152      	lsls	r2, r2, #5
 800480e:	1a52      	subs	r2, r2, r1
 8004810:	0193      	lsls	r3, r2, #6
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	185b      	adds	r3, r3, r1
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004820:	e002      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004822:	4b07      	ldr	r3, [pc, #28]	; (8004840 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004826:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800482a:	0018      	movs	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	b00f      	add	sp, #60	; 0x3c
 8004830:	bd90      	pop	{r4, r7, pc}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	08006d78 	.word	0x08006d78
 8004838:	08006d88 	.word	0x08006d88
 800483c:	40021000 	.word	0x40021000
 8004840:	007a1200 	.word	0x007a1200

08004844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004848:	4b02      	ldr	r3, [pc, #8]	; (8004854 <HAL_RCC_GetHCLKFreq+0x10>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	0018      	movs	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	20000114 	.word	0x20000114

08004858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800485c:	f7ff fff2 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004860:	0001      	movs	r1, r0
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	2207      	movs	r2, #7
 800486a:	4013      	ands	r3, r2
 800486c:	4a04      	ldr	r2, [pc, #16]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800486e:	5cd3      	ldrb	r3, [r2, r3]
 8004870:	40d9      	lsrs	r1, r3
 8004872:	000b      	movs	r3, r1
}    
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	40021000 	.word	0x40021000
 8004880:	08006e28 	.word	0x08006e28

08004884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	025b      	lsls	r3, r3, #9
 800489c:	4013      	ands	r3, r2
 800489e:	d100      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80048a0:	e08e      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80048a2:	2017      	movs	r0, #23
 80048a4:	183b      	adds	r3, r7, r0
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048aa:	4b57      	ldr	r3, [pc, #348]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80048ac:	69da      	ldr	r2, [r3, #28]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	055b      	lsls	r3, r3, #21
 80048b2:	4013      	ands	r3, r2
 80048b4:	d110      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	4b54      	ldr	r3, [pc, #336]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	0549      	lsls	r1, r1, #21
 80048c0:	430a      	orrs	r2, r1
 80048c2:	61da      	str	r2, [r3, #28]
 80048c4:	4b50      	ldr	r3, [pc, #320]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	055b      	lsls	r3, r3, #21
 80048cc:	4013      	ands	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	183b      	adds	r3, r7, r0
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d8:	4b4c      	ldr	r3, [pc, #304]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4013      	ands	r3, r2
 80048e2:	d11a      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e4:	4b49      	ldr	r3, [pc, #292]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b48      	ldr	r3, [pc, #288]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80048ea:	2180      	movs	r1, #128	; 0x80
 80048ec:	0049      	lsls	r1, r1, #1
 80048ee:	430a      	orrs	r2, r1
 80048f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f2:	f7fe fbd9 	bl	80030a8 <HAL_GetTick>
 80048f6:	0003      	movs	r3, r0
 80048f8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fa:	e008      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fc:	f7fe fbd4 	bl	80030a8 <HAL_GetTick>
 8004900:	0002      	movs	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	; 0x64
 8004908:	d901      	bls.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e077      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490e:	4b3f      	ldr	r3, [pc, #252]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	2380      	movs	r3, #128	; 0x80
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	4013      	ands	r3, r2
 8004918:	d0f0      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800491a:	4b3b      	ldr	r3, [pc, #236]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	23c0      	movs	r3, #192	; 0xc0
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4013      	ands	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d034      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	23c0      	movs	r3, #192	; 0xc0
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4013      	ands	r3, r2
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	429a      	cmp	r2, r3
 800493a:	d02c      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	4a33      	ldr	r2, [pc, #204]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004942:	4013      	ands	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004946:	4b30      	ldr	r3, [pc, #192]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004948:	6a1a      	ldr	r2, [r3, #32]
 800494a:	4b2f      	ldr	r3, [pc, #188]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800494c:	2180      	movs	r1, #128	; 0x80
 800494e:	0249      	lsls	r1, r1, #9
 8004950:	430a      	orrs	r2, r1
 8004952:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004954:	4b2c      	ldr	r3, [pc, #176]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004956:	6a1a      	ldr	r2, [r3, #32]
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800495a:	492e      	ldr	r1, [pc, #184]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800495c:	400a      	ands	r2, r1
 800495e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004960:	4b29      	ldr	r3, [pc, #164]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	4013      	ands	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496e:	f7fe fb9b 	bl	80030a8 <HAL_GetTick>
 8004972:	0003      	movs	r3, r0
 8004974:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004976:	e009      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004978:	f7fe fb96 	bl	80030a8 <HAL_GetTick>
 800497c:	0002      	movs	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	4a25      	ldr	r2, [pc, #148]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d901      	bls.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e038      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498c:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	2202      	movs	r2, #2
 8004992:	4013      	ands	r3, r2
 8004994:	d0f0      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004996:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4a1d      	ldr	r2, [pc, #116]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800499c:	4013      	ands	r3, r2
 800499e:	0019      	movs	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049a6:	430a      	orrs	r2, r1
 80049a8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049aa:	2317      	movs	r3, #23
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d105      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b4:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049ba:	4918      	ldr	r1, [pc, #96]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80049bc:	400a      	ands	r2, r1
 80049be:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2201      	movs	r2, #1
 80049c6:	4013      	ands	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ca:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	2203      	movs	r2, #3
 80049d0:	4393      	bics	r3, r2
 80049d2:	0019      	movs	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049da:	430a      	orrs	r2, r1
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2220      	movs	r2, #32
 80049e4:	4013      	ands	r3, r2
 80049e6:	d009      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	2210      	movs	r2, #16
 80049ee:	4393      	bics	r3, r2
 80049f0:	0019      	movs	r1, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049f8:	430a      	orrs	r2, r1
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	0018      	movs	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b006      	add	sp, #24
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40007000 	.word	0x40007000
 8004a10:	fffffcff 	.word	0xfffffcff
 8004a14:	fffeffff 	.word	0xfffeffff
 8004a18:	00001388 	.word	0x00001388
 8004a1c:	efffffff 	.word	0xefffffff

08004a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e042      	b.n	8004ab8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	223d      	movs	r2, #61	; 0x3d
 8004a36:	5c9b      	ldrb	r3, [r3, r2]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	223c      	movs	r2, #60	; 0x3c
 8004a42:	2100      	movs	r1, #0
 8004a44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7fe f9a1 	bl	8002d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	223d      	movs	r2, #61	; 0x3d
 8004a52:	2102      	movs	r1, #2
 8004a54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	0019      	movs	r1, r3
 8004a60:	0010      	movs	r0, r2
 8004a62:	f000 fa39 	bl	8004ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2246      	movs	r2, #70	; 0x46
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	223e      	movs	r2, #62	; 0x3e
 8004a72:	2101      	movs	r1, #1
 8004a74:	5499      	strb	r1, [r3, r2]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	223f      	movs	r2, #63	; 0x3f
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	5499      	strb	r1, [r3, r2]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2240      	movs	r2, #64	; 0x40
 8004a82:	2101      	movs	r1, #1
 8004a84:	5499      	strb	r1, [r3, r2]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2241      	movs	r2, #65	; 0x41
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2242      	movs	r2, #66	; 0x42
 8004a92:	2101      	movs	r1, #1
 8004a94:	5499      	strb	r1, [r3, r2]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2243      	movs	r2, #67	; 0x43
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	5499      	strb	r1, [r3, r2]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2244      	movs	r2, #68	; 0x44
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	5499      	strb	r1, [r3, r2]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2245      	movs	r2, #69	; 0x45
 8004aaa:	2101      	movs	r1, #1
 8004aac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	223d      	movs	r2, #61	; 0x3d
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b002      	add	sp, #8
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	223d      	movs	r2, #61	; 0x3d
 8004acc:	5c9b      	ldrb	r3, [r3, r2]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d001      	beq.n	8004ad8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e02d      	b.n	8004b34 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	223d      	movs	r2, #61	; 0x3d
 8004adc:	2102      	movs	r1, #2
 8004ade:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <HAL_TIM_Base_Start+0x7c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d009      	beq.n	8004afe <HAL_TIM_Base_Start+0x3e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <HAL_TIM_Base_Start+0x80>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_TIM_Base_Start+0x3e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <HAL_TIM_Base_Start+0x84>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2207      	movs	r2, #7
 8004b06:	4013      	ands	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b06      	cmp	r3, #6
 8004b0e:	d010      	beq.n	8004b32 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b20:	e007      	b.n	8004b32 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	0018      	movs	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	b004      	add	sp, #16
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40014000 	.word	0x40014000

08004b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e042      	b.n	8004be0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	223d      	movs	r2, #61	; 0x3d
 8004b5e:	5c9b      	ldrb	r3, [r3, r2]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d107      	bne.n	8004b76 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	223c      	movs	r2, #60	; 0x3c
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7fe f8ef 	bl	8002d54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	223d      	movs	r2, #61	; 0x3d
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	0019      	movs	r1, r3
 8004b88:	0010      	movs	r0, r2
 8004b8a:	f000 f9a5 	bl	8004ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2246      	movs	r2, #70	; 0x46
 8004b92:	2101      	movs	r1, #1
 8004b94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	223e      	movs	r2, #62	; 0x3e
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	223f      	movs	r2, #63	; 0x3f
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2240      	movs	r2, #64	; 0x40
 8004baa:	2101      	movs	r1, #1
 8004bac:	5499      	strb	r1, [r3, r2]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2241      	movs	r2, #65	; 0x41
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2242      	movs	r2, #66	; 0x42
 8004bba:	2101      	movs	r1, #1
 8004bbc:	5499      	strb	r1, [r3, r2]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2243      	movs	r2, #67	; 0x43
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	5499      	strb	r1, [r3, r2]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2244      	movs	r2, #68	; 0x44
 8004bca:	2101      	movs	r1, #1
 8004bcc:	5499      	strb	r1, [r3, r2]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2245      	movs	r2, #69	; 0x45
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	223d      	movs	r2, #61	; 0x3d
 8004bda:	2101      	movs	r1, #1
 8004bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	0018      	movs	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b002      	add	sp, #8
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d108      	bne.n	8004c0a <HAL_TIM_PWM_Start+0x22>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	223e      	movs	r2, #62	; 0x3e
 8004bfc:	5c9b      	ldrb	r3, [r3, r2]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	1e5a      	subs	r2, r3, #1
 8004c04:	4193      	sbcs	r3, r2
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	e01f      	b.n	8004c4a <HAL_TIM_PWM_Start+0x62>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d108      	bne.n	8004c22 <HAL_TIM_PWM_Start+0x3a>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	223f      	movs	r2, #63	; 0x3f
 8004c14:	5c9b      	ldrb	r3, [r3, r2]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	1e5a      	subs	r2, r3, #1
 8004c1c:	4193      	sbcs	r3, r2
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	e013      	b.n	8004c4a <HAL_TIM_PWM_Start+0x62>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d108      	bne.n	8004c3a <HAL_TIM_PWM_Start+0x52>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2240      	movs	r2, #64	; 0x40
 8004c2c:	5c9b      	ldrb	r3, [r3, r2]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	4193      	sbcs	r3, r2
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	e007      	b.n	8004c4a <HAL_TIM_PWM_Start+0x62>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2241      	movs	r2, #65	; 0x41
 8004c3e:	5c9b      	ldrb	r3, [r3, r2]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	1e5a      	subs	r2, r3, #1
 8004c46:	4193      	sbcs	r3, r2
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e06e      	b.n	8004d30 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d104      	bne.n	8004c62 <HAL_TIM_PWM_Start+0x7a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	223e      	movs	r2, #62	; 0x3e
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	5499      	strb	r1, [r3, r2]
 8004c60:	e013      	b.n	8004c8a <HAL_TIM_PWM_Start+0xa2>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d104      	bne.n	8004c72 <HAL_TIM_PWM_Start+0x8a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	223f      	movs	r2, #63	; 0x3f
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	5499      	strb	r1, [r3, r2]
 8004c70:	e00b      	b.n	8004c8a <HAL_TIM_PWM_Start+0xa2>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d104      	bne.n	8004c82 <HAL_TIM_PWM_Start+0x9a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2240      	movs	r2, #64	; 0x40
 8004c7c:	2102      	movs	r1, #2
 8004c7e:	5499      	strb	r1, [r3, r2]
 8004c80:	e003      	b.n	8004c8a <HAL_TIM_PWM_Start+0xa2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2241      	movs	r2, #65	; 0x41
 8004c86:	2102      	movs	r1, #2
 8004c88:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6839      	ldr	r1, [r7, #0]
 8004c90:	2201      	movs	r2, #1
 8004c92:	0018      	movs	r0, r3
 8004c94:	f000 fb92 	bl	80053bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a26      	ldr	r2, [pc, #152]	; (8004d38 <HAL_TIM_PWM_Start+0x150>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_TIM_PWM_Start+0xd8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a25      	ldr	r2, [pc, #148]	; (8004d3c <HAL_TIM_PWM_Start+0x154>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_TIM_PWM_Start+0xd8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <HAL_TIM_PWM_Start+0x158>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_TIM_PWM_Start+0xd8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <HAL_TIM_PWM_Start+0x15c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIM_PWM_Start+0xdc>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xde>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2180      	movs	r1, #128	; 0x80
 8004cd6:	0209      	lsls	r1, r1, #8
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <HAL_TIM_PWM_Start+0x150>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x112>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <HAL_TIM_PWM_Start+0x160>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x112>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a11      	ldr	r2, [pc, #68]	; (8004d3c <HAL_TIM_PWM_Start+0x154>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d111      	bne.n	8004d1e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2207      	movs	r2, #7
 8004d02:	4013      	ands	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b06      	cmp	r3, #6
 8004d0a:	d010      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2101      	movs	r1, #1
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1c:	e007      	b.n	8004d2e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2101      	movs	r1, #1
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	0018      	movs	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b004      	add	sp, #16
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800
 8004d48:	40000400 	.word	0x40000400

08004d4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d58:	2317      	movs	r3, #23
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	223c      	movs	r2, #60	; 0x3c
 8004d64:	5c9b      	ldrb	r3, [r3, r2]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x22>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e0ad      	b.n	8004eca <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	223c      	movs	r2, #60	; 0x3c
 8004d72:	2101      	movs	r1, #1
 8004d74:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b0c      	cmp	r3, #12
 8004d7a:	d100      	bne.n	8004d7e <HAL_TIM_PWM_ConfigChannel+0x32>
 8004d7c:	e076      	b.n	8004e6c <HAL_TIM_PWM_ConfigChannel+0x120>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b0c      	cmp	r3, #12
 8004d82:	d900      	bls.n	8004d86 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004d84:	e095      	b.n	8004eb2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d04e      	beq.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0xde>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d900      	bls.n	8004d94 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004d92:	e08e      	b.n	8004eb2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d021      	beq.n	8004de4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004da0:	e087      	b.n	8004eb2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	0011      	movs	r1, r2
 8004daa:	0018      	movs	r0, r3
 8004dac:	f000 f90a 	bl	8004fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2108      	movs	r1, #8
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2104      	movs	r1, #4
 8004dcc:	438a      	bics	r2, r1
 8004dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6999      	ldr	r1, [r3, #24]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	619a      	str	r2, [r3, #24]
      break;
 8004de2:	e06b      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	0011      	movs	r1, r2
 8004dec:	0018      	movs	r0, r3
 8004dee:	f000 f971 	bl	80050d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2180      	movs	r1, #128	; 0x80
 8004dfe:	0109      	lsls	r1, r1, #4
 8004e00:	430a      	orrs	r2, r1
 8004e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4931      	ldr	r1, [pc, #196]	; (8004ed4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6999      	ldr	r1, [r3, #24]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	021a      	lsls	r2, r3, #8
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	619a      	str	r2, [r3, #24]
      break;
 8004e28:	e048      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	0011      	movs	r1, r2
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 f9d2 	bl	80051dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2108      	movs	r1, #8
 8004e44:	430a      	orrs	r2, r1
 8004e46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69da      	ldr	r2, [r3, #28]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2104      	movs	r1, #4
 8004e54:	438a      	bics	r2, r1
 8004e56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69d9      	ldr	r1, [r3, #28]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	61da      	str	r2, [r3, #28]
      break;
 8004e6a:	e027      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	0011      	movs	r1, r2
 8004e74:	0018      	movs	r0, r3
 8004e76:	f000 fa37 	bl	80052e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2180      	movs	r1, #128	; 0x80
 8004e86:	0109      	lsls	r1, r1, #4
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	490f      	ldr	r1, [pc, #60]	; (8004ed4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004e98:	400a      	ands	r2, r1
 8004e9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69d9      	ldr	r1, [r3, #28]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	021a      	lsls	r2, r3, #8
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	61da      	str	r2, [r3, #28]
      break;
 8004eb0:	e004      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004eb2:	2317      	movs	r3, #23
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	701a      	strb	r2, [r3, #0]
      break;
 8004eba:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	223c      	movs	r2, #60	; 0x3c
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	5499      	strb	r1, [r3, r2]

  return status;
 8004ec4:	2317      	movs	r3, #23
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	781b      	ldrb	r3, [r3, #0]
}
 8004eca:	0018      	movs	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	b006      	add	sp, #24
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	fffffbff 	.word	0xfffffbff

08004ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a2f      	ldr	r2, [pc, #188]	; (8004fa8 <TIM_Base_SetConfig+0xd0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_Base_SetConfig+0x20>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a2e      	ldr	r2, [pc, #184]	; (8004fac <TIM_Base_SetConfig+0xd4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d108      	bne.n	8004f0a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2270      	movs	r2, #112	; 0x70
 8004efc:	4393      	bics	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a26      	ldr	r2, [pc, #152]	; (8004fa8 <TIM_Base_SetConfig+0xd0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <TIM_Base_SetConfig+0x62>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a25      	ldr	r2, [pc, #148]	; (8004fac <TIM_Base_SetConfig+0xd4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00f      	beq.n	8004f3a <TIM_Base_SetConfig+0x62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a24      	ldr	r2, [pc, #144]	; (8004fb0 <TIM_Base_SetConfig+0xd8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00b      	beq.n	8004f3a <TIM_Base_SetConfig+0x62>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a23      	ldr	r2, [pc, #140]	; (8004fb4 <TIM_Base_SetConfig+0xdc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d007      	beq.n	8004f3a <TIM_Base_SetConfig+0x62>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <TIM_Base_SetConfig+0xe0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_Base_SetConfig+0x62>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <TIM_Base_SetConfig+0xe4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d108      	bne.n	8004f4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a20      	ldr	r2, [pc, #128]	; (8004fc0 <TIM_Base_SetConfig+0xe8>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2280      	movs	r2, #128	; 0x80
 8004f50:	4393      	bics	r3, r2
 8004f52:	001a      	movs	r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <TIM_Base_SetConfig+0xd0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00b      	beq.n	8004f92 <TIM_Base_SetConfig+0xba>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a0d      	ldr	r2, [pc, #52]	; (8004fb4 <TIM_Base_SetConfig+0xdc>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <TIM_Base_SetConfig+0xba>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a0c      	ldr	r2, [pc, #48]	; (8004fb8 <TIM_Base_SetConfig+0xe0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_Base_SetConfig+0xba>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a0b      	ldr	r2, [pc, #44]	; (8004fbc <TIM_Base_SetConfig+0xe4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d103      	bne.n	8004f9a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	615a      	str	r2, [r3, #20]
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b004      	add	sp, #16
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40002000 	.word	0x40002000
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40014400 	.word	0x40014400
 8004fbc:	40014800 	.word	0x40014800
 8004fc0:	fffffcff 	.word	0xfffffcff

08004fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	4393      	bics	r3, r2
 8004fd6:	001a      	movs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2270      	movs	r2, #112	; 0x70
 8004ff2:	4393      	bics	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	4393      	bics	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2202      	movs	r2, #2
 800500c:	4393      	bics	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a27      	ldr	r2, [pc, #156]	; (80050bc <TIM_OC1_SetConfig+0xf8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_OC1_SetConfig+0x76>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a26      	ldr	r2, [pc, #152]	; (80050c0 <TIM_OC1_SetConfig+0xfc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_OC1_SetConfig+0x76>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a25      	ldr	r2, [pc, #148]	; (80050c4 <TIM_OC1_SetConfig+0x100>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_OC1_SetConfig+0x76>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a24      	ldr	r2, [pc, #144]	; (80050c8 <TIM_OC1_SetConfig+0x104>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d10c      	bne.n	8005054 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2208      	movs	r2, #8
 800503e:	4393      	bics	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2204      	movs	r2, #4
 8005050:	4393      	bics	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a19      	ldr	r2, [pc, #100]	; (80050bc <TIM_OC1_SetConfig+0xf8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00b      	beq.n	8005074 <TIM_OC1_SetConfig+0xb0>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <TIM_OC1_SetConfig+0xfc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d007      	beq.n	8005074 <TIM_OC1_SetConfig+0xb0>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <TIM_OC1_SetConfig+0x100>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_OC1_SetConfig+0xb0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a16      	ldr	r2, [pc, #88]	; (80050c8 <TIM_OC1_SetConfig+0x104>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d111      	bne.n	8005098 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4a15      	ldr	r2, [pc, #84]	; (80050cc <TIM_OC1_SetConfig+0x108>)
 8005078:	4013      	ands	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <TIM_OC1_SetConfig+0x10c>)
 8005080:	4013      	ands	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b006      	add	sp, #24
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40014400 	.word	0x40014400
 80050c8:	40014800 	.word	0x40014800
 80050cc:	fffffeff 	.word	0xfffffeff
 80050d0:	fffffdff 	.word	0xfffffdff

080050d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	2210      	movs	r2, #16
 80050e4:	4393      	bics	r3, r2
 80050e6:	001a      	movs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a2e      	ldr	r2, [pc, #184]	; (80051bc <TIM_OC2_SetConfig+0xe8>)
 8005102:	4013      	ands	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4a2d      	ldr	r2, [pc, #180]	; (80051c0 <TIM_OC2_SetConfig+0xec>)
 800510a:	4013      	ands	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2220      	movs	r2, #32
 800511e:	4393      	bics	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a24      	ldr	r2, [pc, #144]	; (80051c4 <TIM_OC2_SetConfig+0xf0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10d      	bne.n	8005152 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2280      	movs	r2, #128	; 0x80
 800513a:	4393      	bics	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2240      	movs	r2, #64	; 0x40
 800514e:	4393      	bics	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <TIM_OC2_SetConfig+0xf0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00b      	beq.n	8005172 <TIM_OC2_SetConfig+0x9e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1a      	ldr	r2, [pc, #104]	; (80051c8 <TIM_OC2_SetConfig+0xf4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d007      	beq.n	8005172 <TIM_OC2_SetConfig+0x9e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a19      	ldr	r2, [pc, #100]	; (80051cc <TIM_OC2_SetConfig+0xf8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_OC2_SetConfig+0x9e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a18      	ldr	r2, [pc, #96]	; (80051d0 <TIM_OC2_SetConfig+0xfc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d113      	bne.n	800519a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4a17      	ldr	r2, [pc, #92]	; (80051d4 <TIM_OC2_SetConfig+0x100>)
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4a16      	ldr	r2, [pc, #88]	; (80051d8 <TIM_OC2_SetConfig+0x104>)
 800517e:	4013      	ands	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	621a      	str	r2, [r3, #32]
}
 80051b4:	46c0      	nop			; (mov r8, r8)
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b006      	add	sp, #24
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	ffff8fff 	.word	0xffff8fff
 80051c0:	fffffcff 	.word	0xfffffcff
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40014400 	.word	0x40014400
 80051d0:	40014800 	.word	0x40014800
 80051d4:	fffffbff 	.word	0xfffffbff
 80051d8:	fffff7ff 	.word	0xfffff7ff

080051dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	4a35      	ldr	r2, [pc, #212]	; (80052c0 <TIM_OC3_SetConfig+0xe4>)
 80051ec:	401a      	ands	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2270      	movs	r2, #112	; 0x70
 8005208:	4393      	bics	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2203      	movs	r2, #3
 8005210:	4393      	bics	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4a28      	ldr	r2, [pc, #160]	; (80052c4 <TIM_OC3_SetConfig+0xe8>)
 8005222:	4013      	ands	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a24      	ldr	r2, [pc, #144]	; (80052c8 <TIM_OC3_SetConfig+0xec>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d10d      	bne.n	8005256 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	4a23      	ldr	r2, [pc, #140]	; (80052cc <TIM_OC3_SetConfig+0xf0>)
 800523e:	4013      	ands	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <TIM_OC3_SetConfig+0xf4>)
 8005252:	4013      	ands	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <TIM_OC3_SetConfig+0xec>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00b      	beq.n	8005276 <TIM_OC3_SetConfig+0x9a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <TIM_OC3_SetConfig+0xf8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <TIM_OC3_SetConfig+0x9a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1b      	ldr	r2, [pc, #108]	; (80052d8 <TIM_OC3_SetConfig+0xfc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_OC3_SetConfig+0x9a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <TIM_OC3_SetConfig+0x100>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d113      	bne.n	800529e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <TIM_OC3_SetConfig+0x104>)
 800527a:	4013      	ands	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <TIM_OC3_SetConfig+0x108>)
 8005282:	4013      	ands	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	621a      	str	r2, [r3, #32]
}
 80052b8:	46c0      	nop			; (mov r8, r8)
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b006      	add	sp, #24
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	fffffeff 	.word	0xfffffeff
 80052c4:	fffffdff 	.word	0xfffffdff
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	fffff7ff 	.word	0xfffff7ff
 80052d0:	fffffbff 	.word	0xfffffbff
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800
 80052e0:	ffffefff 	.word	0xffffefff
 80052e4:	ffffdfff 	.word	0xffffdfff

080052e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	4a28      	ldr	r2, [pc, #160]	; (8005398 <TIM_OC4_SetConfig+0xb0>)
 80052f8:	401a      	ands	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a22      	ldr	r2, [pc, #136]	; (800539c <TIM_OC4_SetConfig+0xb4>)
 8005314:	4013      	ands	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <TIM_OC4_SetConfig+0xb8>)
 800531c:	4013      	ands	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <TIM_OC4_SetConfig+0xbc>)
 8005330:	4013      	ands	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	031b      	lsls	r3, r3, #12
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <TIM_OC4_SetConfig+0xc0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00b      	beq.n	8005360 <TIM_OC4_SetConfig+0x78>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a18      	ldr	r2, [pc, #96]	; (80053ac <TIM_OC4_SetConfig+0xc4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d007      	beq.n	8005360 <TIM_OC4_SetConfig+0x78>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <TIM_OC4_SetConfig+0xc8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_OC4_SetConfig+0x78>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <TIM_OC4_SetConfig+0xcc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d109      	bne.n	8005374 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <TIM_OC4_SetConfig+0xd0>)
 8005364:	4013      	ands	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	019b      	lsls	r3, r3, #6
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	46bd      	mov	sp, r7
 8005392:	b006      	add	sp, #24
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	ffffefff 	.word	0xffffefff
 800539c:	ffff8fff 	.word	0xffff8fff
 80053a0:	fffffcff 	.word	0xfffffcff
 80053a4:	ffffdfff 	.word	0xffffdfff
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800
 80053b8:	ffffbfff 	.word	0xffffbfff

080053bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	221f      	movs	r2, #31
 80053cc:	4013      	ands	r3, r2
 80053ce:	2201      	movs	r2, #1
 80053d0:	409a      	lsls	r2, r3
 80053d2:	0013      	movs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	43d2      	mvns	r2, r2
 80053de:	401a      	ands	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1a      	ldr	r2, [r3, #32]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	211f      	movs	r1, #31
 80053ec:	400b      	ands	r3, r1
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4099      	lsls	r1, r3
 80053f2:	000b      	movs	r3, r1
 80053f4:	431a      	orrs	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	46bd      	mov	sp, r7
 80053fe:	b006      	add	sp, #24
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	223c      	movs	r2, #60	; 0x3c
 8005412:	5c9b      	ldrb	r3, [r3, r2]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005418:	2302      	movs	r3, #2
 800541a:	e041      	b.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	223c      	movs	r2, #60	; 0x3c
 8005420:	2101      	movs	r1, #1
 8005422:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	223d      	movs	r2, #61	; 0x3d
 8005428:	2102      	movs	r1, #2
 800542a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2270      	movs	r2, #112	; 0x70
 8005440:	4393      	bics	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d009      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a11      	ldr	r2, [pc, #68]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a10      	ldr	r2, [pc, #64]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10c      	bne.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2280      	movs	r2, #128	; 0x80
 8005478:	4393      	bics	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	4313      	orrs	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	223d      	movs	r2, #61	; 0x3d
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	223c      	movs	r2, #60	; 0x3c
 800549a:	2100      	movs	r1, #0
 800549c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b004      	add	sp, #16
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40014000 	.word	0x40014000

080054b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e044      	b.n	8005550 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d107      	bne.n	80054de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2274      	movs	r2, #116	; 0x74
 80054d2:	2100      	movs	r1, #0
 80054d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	0018      	movs	r0, r3
 80054da:	f7fd fd15 	bl	8002f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2224      	movs	r2, #36	; 0x24
 80054e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2101      	movs	r1, #1
 80054f0:	438a      	bics	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	0018      	movs	r0, r3
 80054f8:	f000 f8da 	bl	80056b0 <UART_SetConfig>
 80054fc:	0003      	movs	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e024      	b.n	8005550 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	0018      	movs	r0, r3
 8005512:	f000 fa0d 	bl	8005930 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	490d      	ldr	r1, [pc, #52]	; (8005558 <HAL_UART_Init+0xa4>)
 8005522:	400a      	ands	r2, r1
 8005524:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2108      	movs	r1, #8
 8005532:	438a      	bics	r2, r1
 8005534:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2101      	movs	r1, #1
 8005542:	430a      	orrs	r2, r1
 8005544:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	0018      	movs	r0, r3
 800554a:	f000 faa5 	bl	8005a98 <UART_CheckIdleState>
 800554e:	0003      	movs	r3, r0
}
 8005550:	0018      	movs	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	b002      	add	sp, #8
 8005556:	bd80      	pop	{r7, pc}
 8005558:	fffff7ff 	.word	0xfffff7ff

0800555c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	; 0x28
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	1dbb      	adds	r3, r7, #6
 800556a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005570:	2b20      	cmp	r3, #32
 8005572:	d000      	beq.n	8005576 <HAL_UART_Transmit+0x1a>
 8005574:	e096      	b.n	80056a4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_UART_Transmit+0x28>
 800557c:	1dbb      	adds	r3, r7, #6
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e08e      	b.n	80056a6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	015b      	lsls	r3, r3, #5
 8005590:	429a      	cmp	r2, r3
 8005592:	d109      	bne.n	80055a8 <HAL_UART_Transmit+0x4c>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d105      	bne.n	80055a8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2201      	movs	r2, #1
 80055a0:	4013      	ands	r3, r2
 80055a2:	d001      	beq.n	80055a8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e07e      	b.n	80056a6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2274      	movs	r2, #116	; 0x74
 80055ac:	5c9b      	ldrb	r3, [r3, r2]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_UART_Transmit+0x5a>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e077      	b.n	80056a6 <HAL_UART_Transmit+0x14a>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2274      	movs	r2, #116	; 0x74
 80055ba:	2101      	movs	r1, #1
 80055bc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2280      	movs	r2, #128	; 0x80
 80055c2:	2100      	movs	r1, #0
 80055c4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2221      	movs	r2, #33	; 0x21
 80055ca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055cc:	f7fd fd6c 	bl	80030a8 <HAL_GetTick>
 80055d0:	0003      	movs	r3, r0
 80055d2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1dba      	adds	r2, r7, #6
 80055d8:	2150      	movs	r1, #80	; 0x50
 80055da:	8812      	ldrh	r2, [r2, #0]
 80055dc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1dba      	adds	r2, r7, #6
 80055e2:	2152      	movs	r1, #82	; 0x52
 80055e4:	8812      	ldrh	r2, [r2, #0]
 80055e6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	015b      	lsls	r3, r3, #5
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d108      	bne.n	8005606 <HAL_UART_Transmit+0xaa>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	e003      	b.n	800560e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800560a:	2300      	movs	r3, #0
 800560c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2274      	movs	r2, #116	; 0x74
 8005612:	2100      	movs	r1, #0
 8005614:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005616:	e02d      	b.n	8005674 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	0013      	movs	r3, r2
 8005622:	2200      	movs	r2, #0
 8005624:	2180      	movs	r1, #128	; 0x80
 8005626:	f000 fa7f 	bl	8005b28 <UART_WaitOnFlagUntilTimeout>
 800562a:	1e03      	subs	r3, r0, #0
 800562c:	d001      	beq.n	8005632 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e039      	b.n	80056a6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	881a      	ldrh	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	05d2      	lsls	r2, r2, #23
 8005642:	0dd2      	lsrs	r2, r2, #23
 8005644:	b292      	uxth	r2, r2
 8005646:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	3302      	adds	r3, #2
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e008      	b.n	8005662 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	781a      	ldrb	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	b292      	uxth	r2, r2
 800565a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3301      	adds	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2252      	movs	r2, #82	; 0x52
 8005666:	5a9b      	ldrh	r3, [r3, r2]
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b299      	uxth	r1, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2252      	movs	r2, #82	; 0x52
 8005672:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2252      	movs	r2, #82	; 0x52
 8005678:	5a9b      	ldrh	r3, [r3, r2]
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1cb      	bne.n	8005618 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	0013      	movs	r3, r2
 800568a:	2200      	movs	r2, #0
 800568c:	2140      	movs	r1, #64	; 0x40
 800568e:	f000 fa4b 	bl	8005b28 <UART_WaitOnFlagUntilTimeout>
 8005692:	1e03      	subs	r3, r0, #0
 8005694:	d001      	beq.n	800569a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e005      	b.n	80056a6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e000      	b.n	80056a6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
  }
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b008      	add	sp, #32
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056b8:	231e      	movs	r3, #30
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a8d      	ldr	r2, [pc, #564]	; (8005914 <UART_SetConfig+0x264>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	0019      	movs	r1, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a88      	ldr	r2, [pc, #544]	; (8005918 <UART_SetConfig+0x268>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	0019      	movs	r1, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	4a7f      	ldr	r2, [pc, #508]	; (800591c <UART_SetConfig+0x26c>)
 800571e:	4013      	ands	r3, r2
 8005720:	0019      	movs	r1, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	430a      	orrs	r2, r1
 800572a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a7b      	ldr	r2, [pc, #492]	; (8005920 <UART_SetConfig+0x270>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d127      	bne.n	8005786 <UART_SetConfig+0xd6>
 8005736:	4b7b      	ldr	r3, [pc, #492]	; (8005924 <UART_SetConfig+0x274>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	2203      	movs	r2, #3
 800573c:	4013      	ands	r3, r2
 800573e:	2b03      	cmp	r3, #3
 8005740:	d00d      	beq.n	800575e <UART_SetConfig+0xae>
 8005742:	d81b      	bhi.n	800577c <UART_SetConfig+0xcc>
 8005744:	2b02      	cmp	r3, #2
 8005746:	d014      	beq.n	8005772 <UART_SetConfig+0xc2>
 8005748:	d818      	bhi.n	800577c <UART_SetConfig+0xcc>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <UART_SetConfig+0xa4>
 800574e:	2b01      	cmp	r3, #1
 8005750:	d00a      	beq.n	8005768 <UART_SetConfig+0xb8>
 8005752:	e013      	b.n	800577c <UART_SetConfig+0xcc>
 8005754:	231f      	movs	r3, #31
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	e021      	b.n	80057a2 <UART_SetConfig+0xf2>
 800575e:	231f      	movs	r3, #31
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	2202      	movs	r2, #2
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	e01c      	b.n	80057a2 <UART_SetConfig+0xf2>
 8005768:	231f      	movs	r3, #31
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	2204      	movs	r2, #4
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	e017      	b.n	80057a2 <UART_SetConfig+0xf2>
 8005772:	231f      	movs	r3, #31
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	2208      	movs	r2, #8
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	e012      	b.n	80057a2 <UART_SetConfig+0xf2>
 800577c:	231f      	movs	r3, #31
 800577e:	18fb      	adds	r3, r7, r3
 8005780:	2210      	movs	r2, #16
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	e00d      	b.n	80057a2 <UART_SetConfig+0xf2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a67      	ldr	r2, [pc, #412]	; (8005928 <UART_SetConfig+0x278>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d104      	bne.n	800579a <UART_SetConfig+0xea>
 8005790:	231f      	movs	r3, #31
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	e003      	b.n	80057a2 <UART_SetConfig+0xf2>
 800579a:	231f      	movs	r3, #31
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	2210      	movs	r2, #16
 80057a0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d15d      	bne.n	800586a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80057ae:	231f      	movs	r3, #31
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d015      	beq.n	80057e4 <UART_SetConfig+0x134>
 80057b8:	dc18      	bgt.n	80057ec <UART_SetConfig+0x13c>
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d00d      	beq.n	80057da <UART_SetConfig+0x12a>
 80057be:	dc15      	bgt.n	80057ec <UART_SetConfig+0x13c>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <UART_SetConfig+0x11a>
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d005      	beq.n	80057d4 <UART_SetConfig+0x124>
 80057c8:	e010      	b.n	80057ec <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ca:	f7ff f845 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 80057ce:	0003      	movs	r3, r0
 80057d0:	61bb      	str	r3, [r7, #24]
        break;
 80057d2:	e012      	b.n	80057fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d4:	4b55      	ldr	r3, [pc, #340]	; (800592c <UART_SetConfig+0x27c>)
 80057d6:	61bb      	str	r3, [r7, #24]
        break;
 80057d8:	e00f      	b.n	80057fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057da:	f7fe ffcf 	bl	800477c <HAL_RCC_GetSysClockFreq>
 80057de:	0003      	movs	r3, r0
 80057e0:	61bb      	str	r3, [r7, #24]
        break;
 80057e2:	e00a      	b.n	80057fa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	021b      	lsls	r3, r3, #8
 80057e8:	61bb      	str	r3, [r7, #24]
        break;
 80057ea:	e006      	b.n	80057fa <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057f0:	231e      	movs	r3, #30
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	2201      	movs	r2, #1
 80057f6:	701a      	strb	r2, [r3, #0]
        break;
 80057f8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d100      	bne.n	8005802 <UART_SetConfig+0x152>
 8005800:	e07b      	b.n	80058fa <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	005a      	lsls	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	18d2      	adds	r2, r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	0019      	movs	r1, r3
 8005814:	0010      	movs	r0, r2
 8005816:	f7fa fc89 	bl	800012c <__udivsi3>
 800581a:	0003      	movs	r3, r0
 800581c:	b29b      	uxth	r3, r3
 800581e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b0f      	cmp	r3, #15
 8005824:	d91c      	bls.n	8005860 <UART_SetConfig+0x1b0>
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	025b      	lsls	r3, r3, #9
 800582c:	429a      	cmp	r2, r3
 800582e:	d217      	bcs.n	8005860 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	b29a      	uxth	r2, r3
 8005834:	200e      	movs	r0, #14
 8005836:	183b      	adds	r3, r7, r0
 8005838:	210f      	movs	r1, #15
 800583a:	438a      	bics	r2, r1
 800583c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	b29b      	uxth	r3, r3
 8005844:	2207      	movs	r2, #7
 8005846:	4013      	ands	r3, r2
 8005848:	b299      	uxth	r1, r3
 800584a:	183b      	adds	r3, r7, r0
 800584c:	183a      	adds	r2, r7, r0
 800584e:	8812      	ldrh	r2, [r2, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	183a      	adds	r2, r7, r0
 800585a:	8812      	ldrh	r2, [r2, #0]
 800585c:	60da      	str	r2, [r3, #12]
 800585e:	e04c      	b.n	80058fa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005860:	231e      	movs	r3, #30
 8005862:	18fb      	adds	r3, r7, r3
 8005864:	2201      	movs	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	e047      	b.n	80058fa <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800586a:	231f      	movs	r3, #31
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b08      	cmp	r3, #8
 8005872:	d015      	beq.n	80058a0 <UART_SetConfig+0x1f0>
 8005874:	dc18      	bgt.n	80058a8 <UART_SetConfig+0x1f8>
 8005876:	2b04      	cmp	r3, #4
 8005878:	d00d      	beq.n	8005896 <UART_SetConfig+0x1e6>
 800587a:	dc15      	bgt.n	80058a8 <UART_SetConfig+0x1f8>
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <UART_SetConfig+0x1d6>
 8005880:	2b02      	cmp	r3, #2
 8005882:	d005      	beq.n	8005890 <UART_SetConfig+0x1e0>
 8005884:	e010      	b.n	80058a8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005886:	f7fe ffe7 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 800588a:	0003      	movs	r3, r0
 800588c:	61bb      	str	r3, [r7, #24]
        break;
 800588e:	e012      	b.n	80058b6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005890:	4b26      	ldr	r3, [pc, #152]	; (800592c <UART_SetConfig+0x27c>)
 8005892:	61bb      	str	r3, [r7, #24]
        break;
 8005894:	e00f      	b.n	80058b6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005896:	f7fe ff71 	bl	800477c <HAL_RCC_GetSysClockFreq>
 800589a:	0003      	movs	r3, r0
 800589c:	61bb      	str	r3, [r7, #24]
        break;
 800589e:	e00a      	b.n	80058b6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058a0:	2380      	movs	r3, #128	; 0x80
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	61bb      	str	r3, [r7, #24]
        break;
 80058a6:	e006      	b.n	80058b6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058ac:	231e      	movs	r3, #30
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	2201      	movs	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
        break;
 80058b4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01e      	beq.n	80058fa <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	085a      	lsrs	r2, r3, #1
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	18d2      	adds	r2, r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	0019      	movs	r1, r3
 80058cc:	0010      	movs	r0, r2
 80058ce:	f7fa fc2d 	bl	800012c <__udivsi3>
 80058d2:	0003      	movs	r3, r0
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	d909      	bls.n	80058f2 <UART_SetConfig+0x242>
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	2380      	movs	r3, #128	; 0x80
 80058e2:	025b      	lsls	r3, r3, #9
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d204      	bcs.n	80058f2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	e003      	b.n	80058fa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80058f2:	231e      	movs	r3, #30
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	2201      	movs	r2, #1
 80058f8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005906:	231e      	movs	r3, #30
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	781b      	ldrb	r3, [r3, #0]
}
 800590c:	0018      	movs	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	b008      	add	sp, #32
 8005912:	bd80      	pop	{r7, pc}
 8005914:	ffff69f3 	.word	0xffff69f3
 8005918:	ffffcfff 	.word	0xffffcfff
 800591c:	fffff4ff 	.word	0xfffff4ff
 8005920:	40013800 	.word	0x40013800
 8005924:	40021000 	.word	0x40021000
 8005928:	40004400 	.word	0x40004400
 800592c:	007a1200 	.word	0x007a1200

08005930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2201      	movs	r2, #1
 800593e:	4013      	ands	r3, r2
 8005940:	d00b      	beq.n	800595a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a4a      	ldr	r2, [pc, #296]	; (8005a74 <UART_AdvFeatureConfig+0x144>)
 800594a:	4013      	ands	r3, r2
 800594c:	0019      	movs	r1, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	2202      	movs	r2, #2
 8005960:	4013      	ands	r3, r2
 8005962:	d00b      	beq.n	800597c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4a43      	ldr	r2, [pc, #268]	; (8005a78 <UART_AdvFeatureConfig+0x148>)
 800596c:	4013      	ands	r3, r2
 800596e:	0019      	movs	r1, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	2204      	movs	r2, #4
 8005982:	4013      	ands	r3, r2
 8005984:	d00b      	beq.n	800599e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a3b      	ldr	r2, [pc, #236]	; (8005a7c <UART_AdvFeatureConfig+0x14c>)
 800598e:	4013      	ands	r3, r2
 8005990:	0019      	movs	r1, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	2208      	movs	r2, #8
 80059a4:	4013      	ands	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	4a34      	ldr	r2, [pc, #208]	; (8005a80 <UART_AdvFeatureConfig+0x150>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	0019      	movs	r1, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	2210      	movs	r2, #16
 80059c6:	4013      	ands	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	4a2c      	ldr	r2, [pc, #176]	; (8005a84 <UART_AdvFeatureConfig+0x154>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	0019      	movs	r1, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	2220      	movs	r2, #32
 80059e8:	4013      	ands	r3, r2
 80059ea:	d00b      	beq.n	8005a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <UART_AdvFeatureConfig+0x158>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	0019      	movs	r1, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	2240      	movs	r2, #64	; 0x40
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d01d      	beq.n	8005a4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4a1d      	ldr	r2, [pc, #116]	; (8005a8c <UART_AdvFeatureConfig+0x15c>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	0019      	movs	r1, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a2a:	2380      	movs	r3, #128	; 0x80
 8005a2c:	035b      	lsls	r3, r3, #13
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d10b      	bne.n	8005a4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	4a15      	ldr	r2, [pc, #84]	; (8005a90 <UART_AdvFeatureConfig+0x160>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	2280      	movs	r2, #128	; 0x80
 8005a50:	4013      	ands	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	4a0e      	ldr	r2, [pc, #56]	; (8005a94 <UART_AdvFeatureConfig+0x164>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	0019      	movs	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	605a      	str	r2, [r3, #4]
  }
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b002      	add	sp, #8
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	fffdffff 	.word	0xfffdffff
 8005a78:	fffeffff 	.word	0xfffeffff
 8005a7c:	fffbffff 	.word	0xfffbffff
 8005a80:	ffff7fff 	.word	0xffff7fff
 8005a84:	ffffefff 	.word	0xffffefff
 8005a88:	ffffdfff 	.word	0xffffdfff
 8005a8c:	ffefffff 	.word	0xffefffff
 8005a90:	ff9fffff 	.word	0xff9fffff
 8005a94:	fff7ffff 	.word	0xfff7ffff

08005a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2280      	movs	r2, #128	; 0x80
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aa8:	f7fd fafe 	bl	80030a8 <HAL_GetTick>
 8005aac:	0003      	movs	r3, r0
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d10c      	bne.n	8005ad8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2280      	movs	r2, #128	; 0x80
 8005ac2:	0391      	lsls	r1, r2, #14
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <UART_CheckIdleState+0x8c>)
 8005ac8:	9200      	str	r2, [sp, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f000 f82c 	bl	8005b28 <UART_WaitOnFlagUntilTimeout>
 8005ad0:	1e03      	subs	r3, r0, #0
 8005ad2:	d001      	beq.n	8005ad8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e021      	b.n	8005b1c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2204      	movs	r2, #4
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d10c      	bne.n	8005b00 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2280      	movs	r2, #128	; 0x80
 8005aea:	03d1      	lsls	r1, r2, #15
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4a0d      	ldr	r2, [pc, #52]	; (8005b24 <UART_CheckIdleState+0x8c>)
 8005af0:	9200      	str	r2, [sp, #0]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f000 f818 	bl	8005b28 <UART_WaitOnFlagUntilTimeout>
 8005af8:	1e03      	subs	r3, r0, #0
 8005afa:	d001      	beq.n	8005b00 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e00d      	b.n	8005b1c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2274      	movs	r2, #116	; 0x74
 8005b16:	2100      	movs	r1, #0
 8005b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	b004      	add	sp, #16
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	01ffffff 	.word	0x01ffffff

08005b28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b094      	sub	sp, #80	; 0x50
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	1dfb      	adds	r3, r7, #7
 8005b36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b38:	e0a3      	b.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	d100      	bne.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005b40:	e09f      	b.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b42:	f7fd fab1 	bl	80030a8 <HAL_GetTick>
 8005b46:	0002      	movs	r2, r0
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d302      	bcc.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d13d      	bne.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b58:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b60:	647b      	str	r3, [r7, #68]	; 0x44
 8005b62:	2301      	movs	r3, #1
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b68:	f383 8810 	msr	PRIMASK, r3
}
 8005b6c:	46c0      	nop			; (mov r8, r8)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	494c      	ldr	r1, [pc, #304]	; (8005cac <UART_WaitOnFlagUntilTimeout+0x184>)
 8005b7a:	400a      	ands	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b80:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	f383 8810 	msr	PRIMASK, r3
}
 8005b88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b8e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b92:	643b      	str	r3, [r7, #64]	; 0x40
 8005b94:	2301      	movs	r3, #1
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	f383 8810 	msr	PRIMASK, r3
}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2101      	movs	r1, #1
 8005bac:	438a      	bics	r2, r1
 8005bae:	609a      	str	r2, [r3, #8]
 8005bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb6:	f383 8810 	msr	PRIMASK, r3
}
 8005bba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2274      	movs	r2, #116	; 0x74
 8005bcc:	2100      	movs	r1, #0
 8005bce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e067      	b.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	4013      	ands	r3, r2
 8005bde:	d050      	beq.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69da      	ldr	r2, [r3, #28]
 8005be6:	2380      	movs	r3, #128	; 0x80
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	401a      	ands	r2, r3
 8005bec:	2380      	movs	r3, #128	; 0x80
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d146      	bne.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2280      	movs	r2, #128	; 0x80
 8005bfa:	0112      	lsls	r2, r2, #4
 8005bfc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005c02:	613b      	str	r3, [r7, #16]
  return(result);
 8005c04:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c08:	2301      	movs	r3, #1
 8005c0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f383 8810 	msr	PRIMASK, r3
}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4923      	ldr	r1, [pc, #140]	; (8005cac <UART_WaitOnFlagUntilTimeout+0x184>)
 8005c20:	400a      	ands	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f383 8810 	msr	PRIMASK, r3
}
 8005c2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c30:	f3ef 8310 	mrs	r3, PRIMASK
 8005c34:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c36:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	f383 8810 	msr	PRIMASK, r3
}
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2101      	movs	r1, #1
 8005c52:	438a      	bics	r2, r1
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	f383 8810 	msr	PRIMASK, r3
}
 8005c60:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2280      	movs	r2, #128	; 0x80
 8005c72:	2120      	movs	r1, #32
 8005c74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2274      	movs	r2, #116	; 0x74
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e010      	b.n	8005ca4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	425a      	negs	r2, r3
 8005c92:	4153      	adcs	r3, r2
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	001a      	movs	r2, r3
 8005c98:	1dfb      	adds	r3, r7, #7
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d100      	bne.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005ca0:	e74b      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	b014      	add	sp, #80	; 0x50
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	fffffe5f 	.word	0xfffffe5f

08005cb0 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	0002      	movs	r2, r0
 8005cb8:	1dbb      	adds	r3, r7, #6
 8005cba:	801a      	strh	r2, [r3, #0]
 8005cbc:	1d7b      	adds	r3, r7, #5
 8005cbe:	1c0a      	adds	r2, r1, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8005cc2:	240f      	movs	r4, #15
 8005cc4:	193b      	adds	r3, r7, r4
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 8005cca:	1d7b      	adds	r3, r7, #5
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	1dbb      	adds	r3, r7, #6
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 fa0d 	bl	80060f4 <VL53L1_WrByte>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	0019      	movs	r1, r3
 8005cde:	193b      	adds	r3, r7, r4
 8005ce0:	193a      	adds	r2, r7, r4
 8005ce2:	7812      	ldrb	r2, [r2, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	701a      	strb	r2, [r3, #0]
	return status;
 8005ce8:	193b      	adds	r3, r7, r4
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	b25b      	sxtb	r3, r3
}
 8005cee:	0018      	movs	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	b005      	add	sp, #20
 8005cf4:	bd90      	pop	{r4, r7, pc}
	...

08005cf8 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8005cf8:	b590      	push	{r4, r7, lr}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	0002      	movs	r2, r0
 8005d00:	1dbb      	adds	r3, r7, #6
 8005d02:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8005d04:	230f      	movs	r3, #15
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 8005d0c:	210e      	movs	r1, #14
 8005d0e:	187b      	adds	r3, r7, r1
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8005d14:	187b      	adds	r3, r7, r1
 8005d16:	222d      	movs	r2, #45	; 0x2d
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	e01a      	b.n	8005d52 <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8005d1c:	240e      	movs	r4, #14
 8005d1e:	193b      	adds	r3, r7, r4
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	b299      	uxth	r1, r3
 8005d24:	193b      	adds	r3, r7, r4
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	3b2d      	subs	r3, #45	; 0x2d
 8005d2a:	4a3e      	ldr	r2, [pc, #248]	; (8005e24 <VL53L1X_SensorInit+0x12c>)
 8005d2c:	5cd2      	ldrb	r2, [r2, r3]
 8005d2e:	1dbb      	adds	r3, r7, #6
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 f9de 	bl	80060f4 <VL53L1_WrByte>
 8005d38:	0003      	movs	r3, r0
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	220f      	movs	r2, #15
 8005d3e:	18bb      	adds	r3, r7, r2
 8005d40:	18ba      	adds	r2, r7, r2
 8005d42:	7812      	ldrb	r2, [r2, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8005d48:	193b      	adds	r3, r7, r4
 8005d4a:	781a      	ldrb	r2, [r3, #0]
 8005d4c:	193b      	adds	r3, r7, r4
 8005d4e:	3201      	adds	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	230e      	movs	r3, #14
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b87      	cmp	r3, #135	; 0x87
 8005d5a:	d9df      	bls.n	8005d1c <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 8005d5c:	1dbb      	adds	r3, r7, #6
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	0018      	movs	r0, r3
 8005d62:	f000 f8b3 	bl	8005ecc <VL53L1X_StartRanging>
 8005d66:	0003      	movs	r3, r0
 8005d68:	0019      	movs	r1, r3
 8005d6a:	220f      	movs	r2, #15
 8005d6c:	18bb      	adds	r3, r7, r2
 8005d6e:	18ba      	adds	r2, r7, r2
 8005d70:	7812      	ldrb	r2, [r2, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 8005d76:	230d      	movs	r3, #13
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8005d7e:	e00f      	b.n	8005da0 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8005d80:	230d      	movs	r3, #13
 8005d82:	18fa      	adds	r2, r7, r3
 8005d84:	1dbb      	adds	r3, r7, #6
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	0011      	movs	r1, r2
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f000 f8dc 	bl	8005f48 <VL53L1X_CheckForDataReady>
 8005d90:	0003      	movs	r3, r0
 8005d92:	0019      	movs	r1, r3
 8005d94:	220f      	movs	r2, #15
 8005d96:	18bb      	adds	r3, r7, r2
 8005d98:	18ba      	adds	r2, r7, r2
 8005d9a:	7812      	ldrb	r2, [r2, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8005da0:	230d      	movs	r3, #13
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0ea      	beq.n	8005d80 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8005daa:	1dbb      	adds	r3, r7, #6
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	0018      	movs	r0, r3
 8005db0:	f000 f83a 	bl	8005e28 <VL53L1X_ClearInterrupt>
 8005db4:	0003      	movs	r3, r0
 8005db6:	0019      	movs	r1, r3
 8005db8:	240f      	movs	r4, #15
 8005dba:	193b      	adds	r3, r7, r4
 8005dbc:	193a      	adds	r2, r7, r4
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 8005dc4:	1dbb      	adds	r3, r7, #6
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f000 f89e 	bl	8005f0a <VL53L1X_StopRanging>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	0019      	movs	r1, r3
 8005dd2:	193b      	adds	r3, r7, r4
 8005dd4:	193a      	adds	r2, r7, r4
 8005dd6:	7812      	ldrb	r2, [r2, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8005ddc:	1dbb      	adds	r3, r7, #6
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	2209      	movs	r2, #9
 8005de2:	2108      	movs	r1, #8
 8005de4:	0018      	movs	r0, r3
 8005de6:	f000 f985 	bl	80060f4 <VL53L1_WrByte>
 8005dea:	0003      	movs	r3, r0
 8005dec:	0019      	movs	r1, r3
 8005dee:	193b      	adds	r3, r7, r4
 8005df0:	193a      	adds	r2, r7, r4
 8005df2:	7812      	ldrb	r2, [r2, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8005df8:	1dbb      	adds	r3, r7, #6
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	210b      	movs	r1, #11
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 f977 	bl	80060f4 <VL53L1_WrByte>
 8005e06:	0003      	movs	r3, r0
 8005e08:	0019      	movs	r1, r3
 8005e0a:	193b      	adds	r3, r7, r4
 8005e0c:	193a      	adds	r2, r7, r4
 8005e0e:	7812      	ldrb	r2, [r2, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	701a      	strb	r2, [r3, #0]
	return status;
 8005e14:	193b      	adds	r3, r7, r4
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	b25b      	sxtb	r3, r3
}
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b005      	add	sp, #20
 8005e20:	bd90      	pop	{r4, r7, pc}
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	08006e30 	.word	0x08006e30

08005e28 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8005e28:	b590      	push	{r4, r7, lr}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	0002      	movs	r2, r0
 8005e30:	1dbb      	adds	r3, r7, #6
 8005e32:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8005e34:	240f      	movs	r4, #15
 8005e36:	193b      	adds	r3, r7, r4
 8005e38:	2200      	movs	r2, #0
 8005e3a:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8005e3c:	1dbb      	adds	r3, r7, #6
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	2201      	movs	r2, #1
 8005e42:	2186      	movs	r1, #134	; 0x86
 8005e44:	0018      	movs	r0, r3
 8005e46:	f000 f955 	bl	80060f4 <VL53L1_WrByte>
 8005e4a:	0003      	movs	r3, r0
 8005e4c:	0019      	movs	r1, r3
 8005e4e:	193b      	adds	r3, r7, r4
 8005e50:	193a      	adds	r2, r7, r4
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	701a      	strb	r2, [r3, #0]
	return status;
 8005e58:	193b      	adds	r3, r7, r4
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	b25b      	sxtb	r3, r3
}
 8005e5e:	0018      	movs	r0, r3
 8005e60:	46bd      	mov	sp, r7
 8005e62:	b005      	add	sp, #20
 8005e64:	bd90      	pop	{r4, r7, pc}

08005e66 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8005e66:	b5b0      	push	{r4, r5, r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	0002      	movs	r2, r0
 8005e6e:	6039      	str	r1, [r7, #0]
 8005e70:	1dbb      	adds	r3, r7, #6
 8005e72:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8005e74:	240f      	movs	r4, #15
 8005e76:	193b      	adds	r3, r7, r4
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8005e7c:	250e      	movs	r5, #14
 8005e7e:	197a      	adds	r2, r7, r5
 8005e80:	1dbb      	adds	r3, r7, #6
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	2130      	movs	r1, #48	; 0x30
 8005e86:	0018      	movs	r0, r3
 8005e88:	f000 f970 	bl	800616c <VL53L1_RdByte>
 8005e8c:	0003      	movs	r3, r0
 8005e8e:	0019      	movs	r1, r3
 8005e90:	0020      	movs	r0, r4
 8005e92:	183b      	adds	r3, r7, r0
 8005e94:	183a      	adds	r2, r7, r0
 8005e96:	7812      	ldrb	r2, [r2, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8005e9c:	197b      	adds	r3, r7, r5
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2210      	movs	r2, #16
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	197b      	adds	r3, r7, r5
 8005ea8:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8005eaa:	197b      	adds	r3, r7, r5
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	091b      	lsrs	r3, r3, #4
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	425a      	negs	r2, r3
 8005eb4:	4153      	adcs	r3, r2
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	001a      	movs	r2, r3
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	701a      	strb	r2, [r3, #0]
	return status;
 8005ebe:	183b      	adds	r3, r7, r0
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b25b      	sxtb	r3, r3
}
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b004      	add	sp, #16
 8005eca:	bdb0      	pop	{r4, r5, r7, pc}

08005ecc <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8005ecc:	b590      	push	{r4, r7, lr}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	0002      	movs	r2, r0
 8005ed4:	1dbb      	adds	r3, r7, #6
 8005ed6:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8005ed8:	240f      	movs	r4, #15
 8005eda:	193b      	adds	r3, r7, r4
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8005ee0:	1dbb      	adds	r3, r7, #6
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	2240      	movs	r2, #64	; 0x40
 8005ee6:	2187      	movs	r1, #135	; 0x87
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f000 f903 	bl	80060f4 <VL53L1_WrByte>
 8005eee:	0003      	movs	r3, r0
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	193b      	adds	r3, r7, r4
 8005ef4:	193a      	adds	r2, r7, r4
 8005ef6:	7812      	ldrb	r2, [r2, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	701a      	strb	r2, [r3, #0]
	return status;
 8005efc:	193b      	adds	r3, r7, r4
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	b25b      	sxtb	r3, r3
}
 8005f02:	0018      	movs	r0, r3
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b005      	add	sp, #20
 8005f08:	bd90      	pop	{r4, r7, pc}

08005f0a <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8005f0a:	b590      	push	{r4, r7, lr}
 8005f0c:	b085      	sub	sp, #20
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	0002      	movs	r2, r0
 8005f12:	1dbb      	adds	r3, r7, #6
 8005f14:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8005f16:	240f      	movs	r4, #15
 8005f18:	193b      	adds	r3, r7, r4
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8005f1e:	1dbb      	adds	r3, r7, #6
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	2200      	movs	r2, #0
 8005f24:	2187      	movs	r1, #135	; 0x87
 8005f26:	0018      	movs	r0, r3
 8005f28:	f000 f8e4 	bl	80060f4 <VL53L1_WrByte>
 8005f2c:	0003      	movs	r3, r0
 8005f2e:	0019      	movs	r1, r3
 8005f30:	193b      	adds	r3, r7, r4
 8005f32:	193a      	adds	r2, r7, r4
 8005f34:	7812      	ldrb	r2, [r2, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	701a      	strb	r2, [r3, #0]
	return status;
 8005f3a:	193b      	adds	r3, r7, r4
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	b25b      	sxtb	r3, r3
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b005      	add	sp, #20
 8005f46:	bd90      	pop	{r4, r7, pc}

08005f48 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8005f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	0002      	movs	r2, r0
 8005f50:	6039      	str	r1, [r7, #0]
 8005f52:	1dbb      	adds	r3, r7, #6
 8005f54:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8005f56:	240f      	movs	r4, #15
 8005f58:	193b      	adds	r3, r7, r4
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8005f5e:	250d      	movs	r5, #13
 8005f60:	197a      	adds	r2, r7, r5
 8005f62:	1dbb      	adds	r3, r7, #6
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	0011      	movs	r1, r2
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f7ff ff7c 	bl	8005e66 <VL53L1X_GetInterruptPolarity>
 8005f6e:	0003      	movs	r3, r0
 8005f70:	0019      	movs	r1, r3
 8005f72:	193b      	adds	r3, r7, r4
 8005f74:	193a      	adds	r2, r7, r4
 8005f76:	7812      	ldrb	r2, [r2, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8005f7c:	260e      	movs	r6, #14
 8005f7e:	19ba      	adds	r2, r7, r6
 8005f80:	1dbb      	adds	r3, r7, #6
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	2131      	movs	r1, #49	; 0x31
 8005f86:	0018      	movs	r0, r3
 8005f88:	f000 f8f0 	bl	800616c <VL53L1_RdByte>
 8005f8c:	0003      	movs	r3, r0
 8005f8e:	0019      	movs	r1, r3
 8005f90:	193b      	adds	r3, r7, r4
 8005f92:	193a      	adds	r2, r7, r4
 8005f94:	7812      	ldrb	r2, [r2, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8005f9a:	193b      	adds	r3, r7, r4
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	b25b      	sxtb	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10f      	bne.n	8005fc4 <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 8005fa4:	19bb      	adds	r3, r7, r6
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	001a      	movs	r2, r3
 8005faa:	2301      	movs	r3, #1
 8005fac:	4013      	ands	r3, r2
 8005fae:	197a      	adds	r2, r7, r5
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d103      	bne.n	8005fbe <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	e002      	b.n	8005fc4 <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8005fc4:	230f      	movs	r3, #15
 8005fc6:	18fb      	adds	r3, r7, r3
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	b25b      	sxtb	r3, r3
}
 8005fcc:	0018      	movs	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b005      	add	sp, #20
 8005fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fd4 <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 8005fd4:	b5b0      	push	{r4, r5, r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	0002      	movs	r2, r0
 8005fdc:	6039      	str	r1, [r7, #0]
 8005fde:	1dbb      	adds	r3, r7, #6
 8005fe0:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8005fe2:	240f      	movs	r4, #15
 8005fe4:	193b      	adds	r3, r7, r4
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
	uint16_t tmp = 0;
 8005fea:	250c      	movs	r5, #12
 8005fec:	197b      	adds	r3, r7, r5
 8005fee:	2200      	movs	r2, #0
 8005ff0:	801a      	strh	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 8005ff2:	197a      	adds	r2, r7, r5
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	33ff      	adds	r3, #255	; 0xff
 8005ff8:	0019      	movs	r1, r3
 8005ffa:	1dbb      	adds	r3, r7, #6
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	0018      	movs	r0, r3
 8006000:	f000 f8fa 	bl	80061f8 <VL53L1_RdWord>
 8006004:	0003      	movs	r3, r0
 8006006:	0019      	movs	r1, r3
 8006008:	193b      	adds	r3, r7, r4
 800600a:	193a      	adds	r2, r7, r4
 800600c:	7812      	ldrb	r2, [r2, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	701a      	strb	r2, [r3, #0]
	*sensorId = tmp;
 8006012:	197b      	adds	r3, r7, r5
 8006014:	881a      	ldrh	r2, [r3, #0]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	801a      	strh	r2, [r3, #0]
	return status;
 800601a:	193b      	adds	r3, r7, r4
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	b25b      	sxtb	r3, r3
}
 8006020:	0018      	movs	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	b004      	add	sp, #16
 8006026:	bdb0      	pop	{r4, r5, r7, pc}

08006028 <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8006028:	b5b0      	push	{r4, r5, r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	0002      	movs	r2, r0
 8006030:	6039      	str	r1, [r7, #0]
 8006032:	1dbb      	adds	r3, r7, #6
 8006034:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8006036:	240f      	movs	r4, #15
 8006038:	193b      	adds	r3, r7, r4
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 800603e:	250c      	movs	r5, #12
 8006040:	197a      	adds	r2, r7, r5
 8006042:	1dbb      	adds	r3, r7, #6
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	2196      	movs	r1, #150	; 0x96
 8006048:	0018      	movs	r0, r3
 800604a:	f000 f8d5 	bl	80061f8 <VL53L1_RdWord>
 800604e:	0003      	movs	r3, r0
 8006050:	0019      	movs	r1, r3
 8006052:	0020      	movs	r0, r4
 8006054:	183b      	adds	r3, r7, r0
 8006056:	183a      	adds	r2, r7, r0
 8006058:	7812      	ldrb	r2, [r2, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800605e:	197b      	adds	r3, r7, r5
 8006060:	881a      	ldrh	r2, [r3, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	801a      	strh	r2, [r3, #0]
	return status;
 8006066:	183b      	adds	r3, r7, r0
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	b25b      	sxtb	r3, r3
}
 800606c:	0018      	movs	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	b004      	add	sp, #16
 8006072:	bdb0      	pop	{r4, r5, r7, pc}

08006074 <_I2CWrite>:
#include "VL53L1X.h"
extern VL53L1X* active_sensor;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b087      	sub	sp, #28
 8006078:	af02      	add	r7, sp, #8
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
 800607e:	230e      	movs	r3, #14
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	1c02      	adds	r2, r0, #0
 8006084:	801a      	strh	r2, [r3, #0]
	(void) (dev);
	return (int) HAL_I2C_Master_Transmit(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 8006086:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <_I2CWrite+0x3c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <_I2CWrite+0x3c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	791b      	ldrb	r3, [r3, #4]
 8006092:	b29b      	uxth	r3, r3
 8006094:	18db      	adds	r3, r3, r3
 8006096:	b299      	uxth	r1, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	b29b      	uxth	r3, r3
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	2464      	movs	r4, #100	; 0x64
 80060a0:	9400      	str	r4, [sp, #0]
 80060a2:	f7fd fae3 	bl	800366c <HAL_I2C_Master_Transmit>
 80060a6:	0003      	movs	r3, r0
}
 80060a8:	0018      	movs	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b005      	add	sp, #20
 80060ae:	bd90      	pop	{r4, r7, pc}
 80060b0:	2000044c 	.word	0x2000044c

080060b4 <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	230e      	movs	r3, #14
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	1c02      	adds	r2, r0, #0
 80060c4:	801a      	strh	r2, [r3, #0]
	(void) (dev);
    return (int) HAL_I2C_Master_Receive(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 80060c6:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <_I2CRead+0x3c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <_I2CRead+0x3c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	791b      	ldrb	r3, [r3, #4]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	18db      	adds	r3, r3, r3
 80060d6:	b299      	uxth	r1, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	2464      	movs	r4, #100	; 0x64
 80060e0:	9400      	str	r4, [sp, #0]
 80060e2:	f7fd fbcb 	bl	800387c <HAL_I2C_Master_Receive>
 80060e6:	0003      	movs	r3, r0
}
 80060e8:	0018      	movs	r0, r3
 80060ea:	46bd      	mov	sp, r7
 80060ec:	b005      	add	sp, #20
 80060ee:	bd90      	pop	{r4, r7, pc}
 80060f0:	2000044c 	.word	0x2000044c

080060f4 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 80060f4:	b590      	push	{r4, r7, lr}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	0004      	movs	r4, r0
 80060fc:	0008      	movs	r0, r1
 80060fe:	0011      	movs	r1, r2
 8006100:	1dbb      	adds	r3, r7, #6
 8006102:	1c22      	adds	r2, r4, #0
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	1d3b      	adds	r3, r7, #4
 8006108:	1c02      	adds	r2, r0, #0
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	1cfb      	adds	r3, r7, #3
 800610e:	1c0a      	adds	r2, r1, #0
 8006110:	701a      	strb	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006112:	240f      	movs	r4, #15
 8006114:	193b      	adds	r3, r7, r4
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	b29b      	uxth	r3, r3
 8006122:	b2da      	uxtb	r2, r3
 8006124:	4b10      	ldr	r3, [pc, #64]	; (8006168 <VL53L1_WrByte+0x74>)
 8006126:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8006128:	1d3b      	adds	r3, r7, #4
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	4b0e      	ldr	r3, [pc, #56]	; (8006168 <VL53L1_WrByte+0x74>)
 8006130:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8006132:	4b0d      	ldr	r3, [pc, #52]	; (8006168 <VL53L1_WrByte+0x74>)
 8006134:	1cfa      	adds	r2, r7, #3
 8006136:	7812      	ldrb	r2, [r2, #0]
 8006138:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 800613a:	490b      	ldr	r1, [pc, #44]	; (8006168 <VL53L1_WrByte+0x74>)
 800613c:	1dbb      	adds	r3, r7, #6
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	2203      	movs	r2, #3
 8006142:	0018      	movs	r0, r3
 8006144:	f7ff ff96 	bl	8006074 <_I2CWrite>
 8006148:	0003      	movs	r3, r0
 800614a:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <VL53L1_WrByte+0x64>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006152:	193b      	adds	r3, r7, r4
 8006154:	22f3      	movs	r2, #243	; 0xf3
 8006156:	701a      	strb	r2, [r3, #0]
    }
    return Status;}
 8006158:	230f      	movs	r3, #15
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	b25b      	sxtb	r3, r3
 8006160:	0018      	movs	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	b005      	add	sp, #20
 8006166:	bd90      	pop	{r4, r7, pc}
 8006168:	2000034c 	.word	0x2000034c

0800616c <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 800616c:	b590      	push	{r4, r7, lr}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	603a      	str	r2, [r7, #0]
 8006174:	1dbb      	adds	r3, r7, #6
 8006176:	1c02      	adds	r2, r0, #0
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	1d3b      	adds	r3, r7, #4
 800617c:	1c0a      	adds	r2, r1, #0
 800617e:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006180:	240f      	movs	r4, #15
 8006182:	193b      	adds	r3, r7, r4
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8006188:	1d3b      	adds	r3, r7, #4
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	0a1b      	lsrs	r3, r3, #8
 800618e:	b29b      	uxth	r3, r3
 8006190:	b2da      	uxtb	r2, r3
 8006192:	4b18      	ldr	r3, [pc, #96]	; (80061f4 <VL53L1_RdByte+0x88>)
 8006194:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8006196:	1d3b      	adds	r3, r7, #4
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b2da      	uxtb	r2, r3
 800619c:	4b15      	ldr	r3, [pc, #84]	; (80061f4 <VL53L1_RdByte+0x88>)
 800619e:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 80061a0:	4914      	ldr	r1, [pc, #80]	; (80061f4 <VL53L1_RdByte+0x88>)
 80061a2:	1dbb      	adds	r3, r7, #6
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	2202      	movs	r2, #2
 80061a8:	0018      	movs	r0, r3
 80061aa:	f7ff ff63 	bl	8006074 <_I2CWrite>
 80061ae:	0003      	movs	r3, r0
 80061b0:	60bb      	str	r3, [r7, #8]
    if( status_int ){
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80061b8:	193b      	adds	r3, r7, r4
 80061ba:	22f3      	movs	r2, #243	; 0xf3
 80061bc:	701a      	strb	r2, [r3, #0]
        goto done;
 80061be:	e011      	b.n	80061e4 <VL53L1_RdByte+0x78>
    }
    status_int = _I2CRead(dev, data, 1);
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	1dbb      	adds	r3, r7, #6
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	2201      	movs	r2, #1
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7ff ff73 	bl	80060b4 <_I2CRead>
 80061ce:	0003      	movs	r3, r0
 80061d0:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d004      	beq.n	80061e2 <VL53L1_RdByte+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80061d8:	230f      	movs	r3, #15
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	22f3      	movs	r2, #243	; 0xf3
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e000      	b.n	80061e4 <VL53L1_RdByte+0x78>
    }
done:
 80061e2:	46c0      	nop			; (mov r8, r8)

	return Status;
 80061e4:	230f      	movs	r3, #15
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	b25b      	sxtb	r3, r3
}
 80061ec:	0018      	movs	r0, r3
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b005      	add	sp, #20
 80061f2:	bd90      	pop	{r4, r7, pc}
 80061f4:	2000034c 	.word	0x2000034c

080061f8 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 80061f8:	b590      	push	{r4, r7, lr}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	603a      	str	r2, [r7, #0]
 8006200:	1dbb      	adds	r3, r7, #6
 8006202:	1c02      	adds	r2, r0, #0
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	1d3b      	adds	r3, r7, #4
 8006208:	1c0a      	adds	r2, r1, #0
 800620a:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800620c:	240f      	movs	r4, #15
 800620e:	193b      	adds	r3, r7, r4
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8006214:	1d3b      	adds	r3, r7, #4
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	0a1b      	lsrs	r3, r3, #8
 800621a:	b29b      	uxth	r3, r3
 800621c:	b2da      	uxtb	r2, r3
 800621e:	4b1e      	ldr	r3, [pc, #120]	; (8006298 <VL53L1_RdWord+0xa0>)
 8006220:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8006222:	1d3b      	adds	r3, r7, #4
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b2da      	uxtb	r2, r3
 8006228:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <VL53L1_RdWord+0xa0>)
 800622a:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 800622c:	491a      	ldr	r1, [pc, #104]	; (8006298 <VL53L1_RdWord+0xa0>)
 800622e:	1dbb      	adds	r3, r7, #6
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	2202      	movs	r2, #2
 8006234:	0018      	movs	r0, r3
 8006236:	f7ff ff1d 	bl	8006074 <_I2CWrite>
 800623a:	0003      	movs	r3, r0
 800623c:	60bb      	str	r3, [r7, #8]

    if( status_int ){
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d003      	beq.n	800624c <VL53L1_RdWord+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006244:	193b      	adds	r3, r7, r4
 8006246:	22f3      	movs	r2, #243	; 0xf3
 8006248:	701a      	strb	r2, [r3, #0]
        goto done;
 800624a:	e01c      	b.n	8006286 <VL53L1_RdWord+0x8e>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 800624c:	4912      	ldr	r1, [pc, #72]	; (8006298 <VL53L1_RdWord+0xa0>)
 800624e:	1dbb      	adds	r3, r7, #6
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	2202      	movs	r2, #2
 8006254:	0018      	movs	r0, r3
 8006256:	f7ff ff2d 	bl	80060b4 <_I2CRead>
 800625a:	0003      	movs	r3, r0
 800625c:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <VL53L1_RdWord+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8006264:	230f      	movs	r3, #15
 8006266:	18fb      	adds	r3, r7, r3
 8006268:	22f3      	movs	r2, #243	; 0xf3
 800626a:	701a      	strb	r2, [r3, #0]
        goto done;
 800626c:	e00b      	b.n	8006286 <VL53L1_RdWord+0x8e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800626e:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <VL53L1_RdWord+0xa0>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	b29a      	uxth	r2, r3
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <VL53L1_RdWord+0xa0>)
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	b29b      	uxth	r3, r3
 800627e:	18d3      	adds	r3, r2, r3
 8006280:	b29a      	uxth	r2, r3
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 8006286:	230f      	movs	r3, #15
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	b25b      	sxtb	r3, r3
 800628e:	0018      	movs	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	b005      	add	sp, #20
 8006294:	bd90      	pop	{r4, r7, pc}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	2000034c 	.word	0x2000034c

0800629c <TOF_InitStruct>:
#include "VL53L1X.h"
#include "VL53L1X_api.h"

VL53L1X* active_sensor;

void TOF_InitStruct(VL53L1X* const sensor, I2C_HandleTypeDef* hi2c, uint8_t address, GPIO_TypeDef* xshut_port, uint16_t xshut_pin) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	1dfb      	adds	r3, r7, #7
 80062aa:	701a      	strb	r2, [r3, #0]
	sensor->hi2c = hi2c;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	1dfa      	adds	r2, r7, #7
 80062b6:	7812      	ldrb	r2, [r2, #0]
 80062b8:	711a      	strb	r2, [r3, #4]

	sensor->xshut_port = xshut_port;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	609a      	str	r2, [r3, #8]
	sensor->xshut_pin = xshut_pin;
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	2318      	movs	r3, #24
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	8193      	strh	r3, [r2, #12]
}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	46bd      	mov	sp, r7
 80062ce:	b004      	add	sp, #16
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <TOF_TurnOn>:

void TOF_TurnOn(VL53L1X* const sensor) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 80062dc:	4b07      	ldr	r3, [pc, #28]	; (80062fc <TOF_TurnOn+0x28>)
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_SET);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6898      	ldr	r0, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	899b      	ldrh	r3, [r3, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	0019      	movs	r1, r3
 80062ee:	f7fd f909 	bl	8003504 <HAL_GPIO_WritePin>
}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b002      	add	sp, #8
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	2000044c 	.word	0x2000044c

08006300 <TOF_TurnOff>:

void TOF_TurnOff(VL53L1X* const sensor) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <TOF_TurnOff+0x28>)
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_RESET);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6898      	ldr	r0, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	899b      	ldrh	r3, [r3, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	0019      	movs	r1, r3
 800631a:	f7fd f8f3 	bl	8003504 <HAL_GPIO_WritePin>
}
 800631e:	46c0      	nop			; (mov r8, r8)
 8006320:	46bd      	mov	sp, r7
 8006322:	b002      	add	sp, #8
 8006324:	bd80      	pop	{r7, pc}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	2000044c 	.word	0x2000044c

0800632c <TOF_BootSensor>:
	for (uint8_t n = 0; n < count; n++) {
		TOF_BootSensor(sensors[n]);
	}
}

void TOF_BootSensor(VL53L1X* const sensor) {
 800632c:	b590      	push	{r4, r7, lr}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8006334:	4b23      	ldr	r3, [pc, #140]	; (80063c4 <TOF_BootSensor+0x98>)
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	601a      	str	r2, [r3, #0]
	TOF_TurnOn(sensor);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	0018      	movs	r0, r3
 800633e:	f7ff ffc9 	bl	80062d4 <TOF_TurnOn>

	// Assume sensor wasn't initialised and is using default address
	uint8_t correct_address = sensor->address;
 8006342:	240f      	movs	r4, #15
 8006344:	193b      	adds	r3, r7, r4
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	7912      	ldrb	r2, [r2, #4]
 800634a:	701a      	strb	r2, [r3, #0]
	sensor->address = 0x52 >> 1;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2229      	movs	r2, #41	; 0x29
 8006350:	711a      	strb	r2, [r3, #4]

	// Set new address to sensor if necessary
	uint16_t id = 0;
 8006352:	210c      	movs	r1, #12
 8006354:	187b      	adds	r3, r7, r1
 8006356:	2200      	movs	r2, #0
 8006358:	801a      	strh	r2, [r3, #0]
	if (VL53L1X_GetSensorId(sensor->address, &id)) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	791b      	ldrb	r3, [r3, #4]
 800635e:	b29b      	uxth	r3, r3
 8006360:	187a      	adds	r2, r7, r1
 8006362:	0011      	movs	r1, r2
 8006364:	0018      	movs	r0, r3
 8006366:	f7ff fe35 	bl	8005fd4 <VL53L1X_GetSensorId>
 800636a:	1e03      	subs	r3, r0, #0
 800636c:	d008      	beq.n	8006380 <TOF_BootSensor+0x54>
		VL53L1X_SetI2CAddress(sensor->address, correct_address);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	791b      	ldrb	r3, [r3, #4]
 8006372:	b29a      	uxth	r2, r3
 8006374:	193b      	adds	r3, r7, r4
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	0019      	movs	r1, r3
 800637a:	0010      	movs	r0, r2
 800637c:	f7ff fc98 	bl	8005cb0 <VL53L1X_SetI2CAddress>
	}

	// Initialise sensor
	sensor->address = correct_address;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	220f      	movs	r2, #15
 8006384:	18ba      	adds	r2, r7, r2
 8006386:	7812      	ldrb	r2, [r2, #0]
 8006388:	711a      	strb	r2, [r3, #4]
	VL53L1X_GetSensorId(sensor->address, &id);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	791b      	ldrb	r3, [r3, #4]
 800638e:	b29b      	uxth	r3, r3
 8006390:	240c      	movs	r4, #12
 8006392:	193a      	adds	r2, r7, r4
 8006394:	0011      	movs	r1, r2
 8006396:	0018      	movs	r0, r3
 8006398:	f7ff fe1c 	bl	8005fd4 <VL53L1X_GetSensorId>
	if (id != 0) {
 800639c:	193b      	adds	r3, r7, r4
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00b      	beq.n	80063bc <TOF_BootSensor+0x90>
		VL53L1X_SensorInit(sensor->address);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	791b      	ldrb	r3, [r3, #4]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	0018      	movs	r0, r3
 80063ac:	f7ff fca4 	bl	8005cf8 <VL53L1X_SensorInit>
		VL53L1X_StartRanging(sensor->address);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	791b      	ldrb	r3, [r3, #4]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	0018      	movs	r0, r3
 80063b8:	f7ff fd88 	bl	8005ecc <VL53L1X_StartRanging>
	}
}
 80063bc:	46c0      	nop			; (mov r8, r8)
 80063be:	46bd      	mov	sp, r7
 80063c0:	b005      	add	sp, #20
 80063c2:	bd90      	pop	{r4, r7, pc}
 80063c4:	2000044c 	.word	0x2000044c

080063c8 <TOF_GetDistance>:
void TOF_StopRanging(VL53L1X* const sensor) {
	active_sensor = sensor;
	VL53L1X_StopRanging(sensor->address);
}

uint16_t TOF_GetDistance(VL53L1X* const sensor) {
 80063c8:	b590      	push	{r4, r7, lr}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 80063d0:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <TOF_GetDistance+0x34>)
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	601a      	str	r2, [r3, #0]

	uint16_t reading = 0;
 80063d6:	210e      	movs	r1, #14
 80063d8:	187b      	adds	r3, r7, r1
 80063da:	2200      	movs	r2, #0
 80063dc:	801a      	strh	r2, [r3, #0]
	VL53L1X_GetDistance(sensor->address, &reading);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	791b      	ldrb	r3, [r3, #4]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	000c      	movs	r4, r1
 80063e6:	187a      	adds	r2, r7, r1
 80063e8:	0011      	movs	r1, r2
 80063ea:	0018      	movs	r0, r3
 80063ec:	f7ff fe1c 	bl	8006028 <VL53L1X_GetDistance>
	return reading;
 80063f0:	193b      	adds	r3, r7, r4
 80063f2:	881b      	ldrh	r3, [r3, #0]
}
 80063f4:	0018      	movs	r0, r3
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b005      	add	sp, #20
 80063fa:	bd90      	pop	{r4, r7, pc}
 80063fc:	2000044c 	.word	0x2000044c

08006400 <__errno>:
 8006400:	4b01      	ldr	r3, [pc, #4]	; (8006408 <__errno+0x8>)
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	4770      	bx	lr
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	20000120 	.word	0x20000120

0800640c <__libc_init_array>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	2600      	movs	r6, #0
 8006410:	4d0c      	ldr	r5, [pc, #48]	; (8006444 <__libc_init_array+0x38>)
 8006412:	4c0d      	ldr	r4, [pc, #52]	; (8006448 <__libc_init_array+0x3c>)
 8006414:	1b64      	subs	r4, r4, r5
 8006416:	10a4      	asrs	r4, r4, #2
 8006418:	42a6      	cmp	r6, r4
 800641a:	d109      	bne.n	8006430 <__libc_init_array+0x24>
 800641c:	2600      	movs	r6, #0
 800641e:	f000 fc8b 	bl	8006d38 <_init>
 8006422:	4d0a      	ldr	r5, [pc, #40]	; (800644c <__libc_init_array+0x40>)
 8006424:	4c0a      	ldr	r4, [pc, #40]	; (8006450 <__libc_init_array+0x44>)
 8006426:	1b64      	subs	r4, r4, r5
 8006428:	10a4      	asrs	r4, r4, #2
 800642a:	42a6      	cmp	r6, r4
 800642c:	d105      	bne.n	800643a <__libc_init_array+0x2e>
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	00b3      	lsls	r3, r6, #2
 8006432:	58eb      	ldr	r3, [r5, r3]
 8006434:	4798      	blx	r3
 8006436:	3601      	adds	r6, #1
 8006438:	e7ee      	b.n	8006418 <__libc_init_array+0xc>
 800643a:	00b3      	lsls	r3, r6, #2
 800643c:	58eb      	ldr	r3, [r5, r3]
 800643e:	4798      	blx	r3
 8006440:	3601      	adds	r6, #1
 8006442:	e7f2      	b.n	800642a <__libc_init_array+0x1e>
 8006444:	08006ec0 	.word	0x08006ec0
 8006448:	08006ec0 	.word	0x08006ec0
 800644c:	08006ec0 	.word	0x08006ec0
 8006450:	08006ec4 	.word	0x08006ec4

08006454 <memcpy>:
 8006454:	2300      	movs	r3, #0
 8006456:	b510      	push	{r4, lr}
 8006458:	429a      	cmp	r2, r3
 800645a:	d100      	bne.n	800645e <memcpy+0xa>
 800645c:	bd10      	pop	{r4, pc}
 800645e:	5ccc      	ldrb	r4, [r1, r3]
 8006460:	54c4      	strb	r4, [r0, r3]
 8006462:	3301      	adds	r3, #1
 8006464:	e7f8      	b.n	8006458 <memcpy+0x4>

08006466 <memset>:
 8006466:	0003      	movs	r3, r0
 8006468:	1882      	adds	r2, r0, r2
 800646a:	4293      	cmp	r3, r2
 800646c:	d100      	bne.n	8006470 <memset+0xa>
 800646e:	4770      	bx	lr
 8006470:	7019      	strb	r1, [r3, #0]
 8006472:	3301      	adds	r3, #1
 8006474:	e7f9      	b.n	800646a <memset+0x4>
	...

08006478 <siprintf>:
 8006478:	b40e      	push	{r1, r2, r3}
 800647a:	b500      	push	{lr}
 800647c:	490b      	ldr	r1, [pc, #44]	; (80064ac <siprintf+0x34>)
 800647e:	b09c      	sub	sp, #112	; 0x70
 8006480:	ab1d      	add	r3, sp, #116	; 0x74
 8006482:	9002      	str	r0, [sp, #8]
 8006484:	9006      	str	r0, [sp, #24]
 8006486:	9107      	str	r1, [sp, #28]
 8006488:	9104      	str	r1, [sp, #16]
 800648a:	4809      	ldr	r0, [pc, #36]	; (80064b0 <siprintf+0x38>)
 800648c:	4909      	ldr	r1, [pc, #36]	; (80064b4 <siprintf+0x3c>)
 800648e:	cb04      	ldmia	r3!, {r2}
 8006490:	9105      	str	r1, [sp, #20]
 8006492:	6800      	ldr	r0, [r0, #0]
 8006494:	a902      	add	r1, sp, #8
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	f000 f870 	bl	800657c <_svfiprintf_r>
 800649c:	2300      	movs	r3, #0
 800649e:	9a02      	ldr	r2, [sp, #8]
 80064a0:	7013      	strb	r3, [r2, #0]
 80064a2:	b01c      	add	sp, #112	; 0x70
 80064a4:	bc08      	pop	{r3}
 80064a6:	b003      	add	sp, #12
 80064a8:	4718      	bx	r3
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	7fffffff 	.word	0x7fffffff
 80064b0:	20000120 	.word	0x20000120
 80064b4:	ffff0208 	.word	0xffff0208

080064b8 <__ssputs_r>:
 80064b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ba:	688e      	ldr	r6, [r1, #8]
 80064bc:	b085      	sub	sp, #20
 80064be:	0007      	movs	r7, r0
 80064c0:	000c      	movs	r4, r1
 80064c2:	9203      	str	r2, [sp, #12]
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	429e      	cmp	r6, r3
 80064c8:	d83c      	bhi.n	8006544 <__ssputs_r+0x8c>
 80064ca:	2390      	movs	r3, #144	; 0x90
 80064cc:	898a      	ldrh	r2, [r1, #12]
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	421a      	tst	r2, r3
 80064d2:	d034      	beq.n	800653e <__ssputs_r+0x86>
 80064d4:	6909      	ldr	r1, [r1, #16]
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	6960      	ldr	r0, [r4, #20]
 80064da:	1a5b      	subs	r3, r3, r1
 80064dc:	9302      	str	r3, [sp, #8]
 80064de:	2303      	movs	r3, #3
 80064e0:	4343      	muls	r3, r0
 80064e2:	0fdd      	lsrs	r5, r3, #31
 80064e4:	18ed      	adds	r5, r5, r3
 80064e6:	9b01      	ldr	r3, [sp, #4]
 80064e8:	9802      	ldr	r0, [sp, #8]
 80064ea:	3301      	adds	r3, #1
 80064ec:	181b      	adds	r3, r3, r0
 80064ee:	106d      	asrs	r5, r5, #1
 80064f0:	42ab      	cmp	r3, r5
 80064f2:	d900      	bls.n	80064f6 <__ssputs_r+0x3e>
 80064f4:	001d      	movs	r5, r3
 80064f6:	0553      	lsls	r3, r2, #21
 80064f8:	d532      	bpl.n	8006560 <__ssputs_r+0xa8>
 80064fa:	0029      	movs	r1, r5
 80064fc:	0038      	movs	r0, r7
 80064fe:	f000 fb49 	bl	8006b94 <_malloc_r>
 8006502:	1e06      	subs	r6, r0, #0
 8006504:	d109      	bne.n	800651a <__ssputs_r+0x62>
 8006506:	230c      	movs	r3, #12
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	2340      	movs	r3, #64	; 0x40
 800650c:	2001      	movs	r0, #1
 800650e:	89a2      	ldrh	r2, [r4, #12]
 8006510:	4240      	negs	r0, r0
 8006512:	4313      	orrs	r3, r2
 8006514:	81a3      	strh	r3, [r4, #12]
 8006516:	b005      	add	sp, #20
 8006518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800651a:	9a02      	ldr	r2, [sp, #8]
 800651c:	6921      	ldr	r1, [r4, #16]
 800651e:	f7ff ff99 	bl	8006454 <memcpy>
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	4a14      	ldr	r2, [pc, #80]	; (8006578 <__ssputs_r+0xc0>)
 8006526:	401a      	ands	r2, r3
 8006528:	2380      	movs	r3, #128	; 0x80
 800652a:	4313      	orrs	r3, r2
 800652c:	81a3      	strh	r3, [r4, #12]
 800652e:	9b02      	ldr	r3, [sp, #8]
 8006530:	6126      	str	r6, [r4, #16]
 8006532:	18f6      	adds	r6, r6, r3
 8006534:	6026      	str	r6, [r4, #0]
 8006536:	6165      	str	r5, [r4, #20]
 8006538:	9e01      	ldr	r6, [sp, #4]
 800653a:	1aed      	subs	r5, r5, r3
 800653c:	60a5      	str	r5, [r4, #8]
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	429e      	cmp	r6, r3
 8006542:	d900      	bls.n	8006546 <__ssputs_r+0x8e>
 8006544:	9e01      	ldr	r6, [sp, #4]
 8006546:	0032      	movs	r2, r6
 8006548:	9903      	ldr	r1, [sp, #12]
 800654a:	6820      	ldr	r0, [r4, #0]
 800654c:	f000 faa3 	bl	8006a96 <memmove>
 8006550:	68a3      	ldr	r3, [r4, #8]
 8006552:	2000      	movs	r0, #0
 8006554:	1b9b      	subs	r3, r3, r6
 8006556:	60a3      	str	r3, [r4, #8]
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	199e      	adds	r6, r3, r6
 800655c:	6026      	str	r6, [r4, #0]
 800655e:	e7da      	b.n	8006516 <__ssputs_r+0x5e>
 8006560:	002a      	movs	r2, r5
 8006562:	0038      	movs	r0, r7
 8006564:	f000 fb8c 	bl	8006c80 <_realloc_r>
 8006568:	1e06      	subs	r6, r0, #0
 800656a:	d1e0      	bne.n	800652e <__ssputs_r+0x76>
 800656c:	0038      	movs	r0, r7
 800656e:	6921      	ldr	r1, [r4, #16]
 8006570:	f000 faa4 	bl	8006abc <_free_r>
 8006574:	e7c7      	b.n	8006506 <__ssputs_r+0x4e>
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	fffffb7f 	.word	0xfffffb7f

0800657c <_svfiprintf_r>:
 800657c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657e:	b0a1      	sub	sp, #132	; 0x84
 8006580:	9003      	str	r0, [sp, #12]
 8006582:	001d      	movs	r5, r3
 8006584:	898b      	ldrh	r3, [r1, #12]
 8006586:	000f      	movs	r7, r1
 8006588:	0016      	movs	r6, r2
 800658a:	061b      	lsls	r3, r3, #24
 800658c:	d511      	bpl.n	80065b2 <_svfiprintf_r+0x36>
 800658e:	690b      	ldr	r3, [r1, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10e      	bne.n	80065b2 <_svfiprintf_r+0x36>
 8006594:	2140      	movs	r1, #64	; 0x40
 8006596:	f000 fafd 	bl	8006b94 <_malloc_r>
 800659a:	6038      	str	r0, [r7, #0]
 800659c:	6138      	str	r0, [r7, #16]
 800659e:	2800      	cmp	r0, #0
 80065a0:	d105      	bne.n	80065ae <_svfiprintf_r+0x32>
 80065a2:	230c      	movs	r3, #12
 80065a4:	9a03      	ldr	r2, [sp, #12]
 80065a6:	3801      	subs	r0, #1
 80065a8:	6013      	str	r3, [r2, #0]
 80065aa:	b021      	add	sp, #132	; 0x84
 80065ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ae:	2340      	movs	r3, #64	; 0x40
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	2300      	movs	r3, #0
 80065b4:	ac08      	add	r4, sp, #32
 80065b6:	6163      	str	r3, [r4, #20]
 80065b8:	3320      	adds	r3, #32
 80065ba:	7663      	strb	r3, [r4, #25]
 80065bc:	3310      	adds	r3, #16
 80065be:	76a3      	strb	r3, [r4, #26]
 80065c0:	9507      	str	r5, [sp, #28]
 80065c2:	0035      	movs	r5, r6
 80065c4:	782b      	ldrb	r3, [r5, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <_svfiprintf_r+0x52>
 80065ca:	2b25      	cmp	r3, #37	; 0x25
 80065cc:	d147      	bne.n	800665e <_svfiprintf_r+0xe2>
 80065ce:	1bab      	subs	r3, r5, r6
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	42b5      	cmp	r5, r6
 80065d4:	d00c      	beq.n	80065f0 <_svfiprintf_r+0x74>
 80065d6:	0032      	movs	r2, r6
 80065d8:	0039      	movs	r1, r7
 80065da:	9803      	ldr	r0, [sp, #12]
 80065dc:	f7ff ff6c 	bl	80064b8 <__ssputs_r>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d100      	bne.n	80065e6 <_svfiprintf_r+0x6a>
 80065e4:	e0ae      	b.n	8006744 <_svfiprintf_r+0x1c8>
 80065e6:	6962      	ldr	r2, [r4, #20]
 80065e8:	9b05      	ldr	r3, [sp, #20]
 80065ea:	4694      	mov	ip, r2
 80065ec:	4463      	add	r3, ip
 80065ee:	6163      	str	r3, [r4, #20]
 80065f0:	782b      	ldrb	r3, [r5, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d100      	bne.n	80065f8 <_svfiprintf_r+0x7c>
 80065f6:	e0a5      	b.n	8006744 <_svfiprintf_r+0x1c8>
 80065f8:	2201      	movs	r2, #1
 80065fa:	2300      	movs	r3, #0
 80065fc:	4252      	negs	r2, r2
 80065fe:	6062      	str	r2, [r4, #4]
 8006600:	a904      	add	r1, sp, #16
 8006602:	3254      	adds	r2, #84	; 0x54
 8006604:	1852      	adds	r2, r2, r1
 8006606:	1c6e      	adds	r6, r5, #1
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	60e3      	str	r3, [r4, #12]
 800660c:	60a3      	str	r3, [r4, #8]
 800660e:	7013      	strb	r3, [r2, #0]
 8006610:	65a3      	str	r3, [r4, #88]	; 0x58
 8006612:	2205      	movs	r2, #5
 8006614:	7831      	ldrb	r1, [r6, #0]
 8006616:	4854      	ldr	r0, [pc, #336]	; (8006768 <_svfiprintf_r+0x1ec>)
 8006618:	f000 fa32 	bl	8006a80 <memchr>
 800661c:	1c75      	adds	r5, r6, #1
 800661e:	2800      	cmp	r0, #0
 8006620:	d11f      	bne.n	8006662 <_svfiprintf_r+0xe6>
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	06d3      	lsls	r3, r2, #27
 8006626:	d504      	bpl.n	8006632 <_svfiprintf_r+0xb6>
 8006628:	2353      	movs	r3, #83	; 0x53
 800662a:	a904      	add	r1, sp, #16
 800662c:	185b      	adds	r3, r3, r1
 800662e:	2120      	movs	r1, #32
 8006630:	7019      	strb	r1, [r3, #0]
 8006632:	0713      	lsls	r3, r2, #28
 8006634:	d504      	bpl.n	8006640 <_svfiprintf_r+0xc4>
 8006636:	2353      	movs	r3, #83	; 0x53
 8006638:	a904      	add	r1, sp, #16
 800663a:	185b      	adds	r3, r3, r1
 800663c:	212b      	movs	r1, #43	; 0x2b
 800663e:	7019      	strb	r1, [r3, #0]
 8006640:	7833      	ldrb	r3, [r6, #0]
 8006642:	2b2a      	cmp	r3, #42	; 0x2a
 8006644:	d016      	beq.n	8006674 <_svfiprintf_r+0xf8>
 8006646:	0035      	movs	r5, r6
 8006648:	2100      	movs	r1, #0
 800664a:	200a      	movs	r0, #10
 800664c:	68e3      	ldr	r3, [r4, #12]
 800664e:	782a      	ldrb	r2, [r5, #0]
 8006650:	1c6e      	adds	r6, r5, #1
 8006652:	3a30      	subs	r2, #48	; 0x30
 8006654:	2a09      	cmp	r2, #9
 8006656:	d94e      	bls.n	80066f6 <_svfiprintf_r+0x17a>
 8006658:	2900      	cmp	r1, #0
 800665a:	d111      	bne.n	8006680 <_svfiprintf_r+0x104>
 800665c:	e017      	b.n	800668e <_svfiprintf_r+0x112>
 800665e:	3501      	adds	r5, #1
 8006660:	e7b0      	b.n	80065c4 <_svfiprintf_r+0x48>
 8006662:	4b41      	ldr	r3, [pc, #260]	; (8006768 <_svfiprintf_r+0x1ec>)
 8006664:	6822      	ldr	r2, [r4, #0]
 8006666:	1ac0      	subs	r0, r0, r3
 8006668:	2301      	movs	r3, #1
 800666a:	4083      	lsls	r3, r0
 800666c:	4313      	orrs	r3, r2
 800666e:	002e      	movs	r6, r5
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	e7ce      	b.n	8006612 <_svfiprintf_r+0x96>
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	1d19      	adds	r1, r3, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	9107      	str	r1, [sp, #28]
 800667c:	2b00      	cmp	r3, #0
 800667e:	db01      	blt.n	8006684 <_svfiprintf_r+0x108>
 8006680:	930b      	str	r3, [sp, #44]	; 0x2c
 8006682:	e004      	b.n	800668e <_svfiprintf_r+0x112>
 8006684:	425b      	negs	r3, r3
 8006686:	60e3      	str	r3, [r4, #12]
 8006688:	2302      	movs	r3, #2
 800668a:	4313      	orrs	r3, r2
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	782b      	ldrb	r3, [r5, #0]
 8006690:	2b2e      	cmp	r3, #46	; 0x2e
 8006692:	d10a      	bne.n	80066aa <_svfiprintf_r+0x12e>
 8006694:	786b      	ldrb	r3, [r5, #1]
 8006696:	2b2a      	cmp	r3, #42	; 0x2a
 8006698:	d135      	bne.n	8006706 <_svfiprintf_r+0x18a>
 800669a:	9b07      	ldr	r3, [sp, #28]
 800669c:	3502      	adds	r5, #2
 800669e:	1d1a      	adds	r2, r3, #4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	9207      	str	r2, [sp, #28]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	db2b      	blt.n	8006700 <_svfiprintf_r+0x184>
 80066a8:	9309      	str	r3, [sp, #36]	; 0x24
 80066aa:	4e30      	ldr	r6, [pc, #192]	; (800676c <_svfiprintf_r+0x1f0>)
 80066ac:	2203      	movs	r2, #3
 80066ae:	0030      	movs	r0, r6
 80066b0:	7829      	ldrb	r1, [r5, #0]
 80066b2:	f000 f9e5 	bl	8006a80 <memchr>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d006      	beq.n	80066c8 <_svfiprintf_r+0x14c>
 80066ba:	2340      	movs	r3, #64	; 0x40
 80066bc:	1b80      	subs	r0, r0, r6
 80066be:	4083      	lsls	r3, r0
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	3501      	adds	r5, #1
 80066c4:	4313      	orrs	r3, r2
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	7829      	ldrb	r1, [r5, #0]
 80066ca:	2206      	movs	r2, #6
 80066cc:	4828      	ldr	r0, [pc, #160]	; (8006770 <_svfiprintf_r+0x1f4>)
 80066ce:	1c6e      	adds	r6, r5, #1
 80066d0:	7621      	strb	r1, [r4, #24]
 80066d2:	f000 f9d5 	bl	8006a80 <memchr>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d03c      	beq.n	8006754 <_svfiprintf_r+0x1d8>
 80066da:	4b26      	ldr	r3, [pc, #152]	; (8006774 <_svfiprintf_r+0x1f8>)
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d125      	bne.n	800672c <_svfiprintf_r+0x1b0>
 80066e0:	2207      	movs	r2, #7
 80066e2:	9b07      	ldr	r3, [sp, #28]
 80066e4:	3307      	adds	r3, #7
 80066e6:	4393      	bics	r3, r2
 80066e8:	3308      	adds	r3, #8
 80066ea:	9307      	str	r3, [sp, #28]
 80066ec:	6963      	ldr	r3, [r4, #20]
 80066ee:	9a04      	ldr	r2, [sp, #16]
 80066f0:	189b      	adds	r3, r3, r2
 80066f2:	6163      	str	r3, [r4, #20]
 80066f4:	e765      	b.n	80065c2 <_svfiprintf_r+0x46>
 80066f6:	4343      	muls	r3, r0
 80066f8:	0035      	movs	r5, r6
 80066fa:	2101      	movs	r1, #1
 80066fc:	189b      	adds	r3, r3, r2
 80066fe:	e7a6      	b.n	800664e <_svfiprintf_r+0xd2>
 8006700:	2301      	movs	r3, #1
 8006702:	425b      	negs	r3, r3
 8006704:	e7d0      	b.n	80066a8 <_svfiprintf_r+0x12c>
 8006706:	2300      	movs	r3, #0
 8006708:	200a      	movs	r0, #10
 800670a:	001a      	movs	r2, r3
 800670c:	3501      	adds	r5, #1
 800670e:	6063      	str	r3, [r4, #4]
 8006710:	7829      	ldrb	r1, [r5, #0]
 8006712:	1c6e      	adds	r6, r5, #1
 8006714:	3930      	subs	r1, #48	; 0x30
 8006716:	2909      	cmp	r1, #9
 8006718:	d903      	bls.n	8006722 <_svfiprintf_r+0x1a6>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0c5      	beq.n	80066aa <_svfiprintf_r+0x12e>
 800671e:	9209      	str	r2, [sp, #36]	; 0x24
 8006720:	e7c3      	b.n	80066aa <_svfiprintf_r+0x12e>
 8006722:	4342      	muls	r2, r0
 8006724:	0035      	movs	r5, r6
 8006726:	2301      	movs	r3, #1
 8006728:	1852      	adds	r2, r2, r1
 800672a:	e7f1      	b.n	8006710 <_svfiprintf_r+0x194>
 800672c:	ab07      	add	r3, sp, #28
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	003a      	movs	r2, r7
 8006732:	0021      	movs	r1, r4
 8006734:	4b10      	ldr	r3, [pc, #64]	; (8006778 <_svfiprintf_r+0x1fc>)
 8006736:	9803      	ldr	r0, [sp, #12]
 8006738:	e000      	b.n	800673c <_svfiprintf_r+0x1c0>
 800673a:	bf00      	nop
 800673c:	9004      	str	r0, [sp, #16]
 800673e:	9b04      	ldr	r3, [sp, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	d1d3      	bne.n	80066ec <_svfiprintf_r+0x170>
 8006744:	89bb      	ldrh	r3, [r7, #12]
 8006746:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006748:	065b      	lsls	r3, r3, #25
 800674a:	d400      	bmi.n	800674e <_svfiprintf_r+0x1d2>
 800674c:	e72d      	b.n	80065aa <_svfiprintf_r+0x2e>
 800674e:	2001      	movs	r0, #1
 8006750:	4240      	negs	r0, r0
 8006752:	e72a      	b.n	80065aa <_svfiprintf_r+0x2e>
 8006754:	ab07      	add	r3, sp, #28
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	003a      	movs	r2, r7
 800675a:	0021      	movs	r1, r4
 800675c:	4b06      	ldr	r3, [pc, #24]	; (8006778 <_svfiprintf_r+0x1fc>)
 800675e:	9803      	ldr	r0, [sp, #12]
 8006760:	f000 f87c 	bl	800685c <_printf_i>
 8006764:	e7ea      	b.n	800673c <_svfiprintf_r+0x1c0>
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	08006e8b 	.word	0x08006e8b
 800676c:	08006e91 	.word	0x08006e91
 8006770:	08006e95 	.word	0x08006e95
 8006774:	00000000 	.word	0x00000000
 8006778:	080064b9 	.word	0x080064b9

0800677c <_printf_common>:
 800677c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800677e:	0015      	movs	r5, r2
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	688a      	ldr	r2, [r1, #8]
 8006784:	690b      	ldr	r3, [r1, #16]
 8006786:	000c      	movs	r4, r1
 8006788:	9000      	str	r0, [sp, #0]
 800678a:	4293      	cmp	r3, r2
 800678c:	da00      	bge.n	8006790 <_printf_common+0x14>
 800678e:	0013      	movs	r3, r2
 8006790:	0022      	movs	r2, r4
 8006792:	602b      	str	r3, [r5, #0]
 8006794:	3243      	adds	r2, #67	; 0x43
 8006796:	7812      	ldrb	r2, [r2, #0]
 8006798:	2a00      	cmp	r2, #0
 800679a:	d001      	beq.n	80067a0 <_printf_common+0x24>
 800679c:	3301      	adds	r3, #1
 800679e:	602b      	str	r3, [r5, #0]
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	069b      	lsls	r3, r3, #26
 80067a4:	d502      	bpl.n	80067ac <_printf_common+0x30>
 80067a6:	682b      	ldr	r3, [r5, #0]
 80067a8:	3302      	adds	r3, #2
 80067aa:	602b      	str	r3, [r5, #0]
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	2306      	movs	r3, #6
 80067b0:	0017      	movs	r7, r2
 80067b2:	401f      	ands	r7, r3
 80067b4:	421a      	tst	r2, r3
 80067b6:	d027      	beq.n	8006808 <_printf_common+0x8c>
 80067b8:	0023      	movs	r3, r4
 80067ba:	3343      	adds	r3, #67	; 0x43
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	1e5a      	subs	r2, r3, #1
 80067c0:	4193      	sbcs	r3, r2
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	0692      	lsls	r2, r2, #26
 80067c6:	d430      	bmi.n	800682a <_printf_common+0xae>
 80067c8:	0022      	movs	r2, r4
 80067ca:	9901      	ldr	r1, [sp, #4]
 80067cc:	9800      	ldr	r0, [sp, #0]
 80067ce:	9e08      	ldr	r6, [sp, #32]
 80067d0:	3243      	adds	r2, #67	; 0x43
 80067d2:	47b0      	blx	r6
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d025      	beq.n	8006824 <_printf_common+0xa8>
 80067d8:	2306      	movs	r3, #6
 80067da:	6820      	ldr	r0, [r4, #0]
 80067dc:	682a      	ldr	r2, [r5, #0]
 80067de:	68e1      	ldr	r1, [r4, #12]
 80067e0:	2500      	movs	r5, #0
 80067e2:	4003      	ands	r3, r0
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d103      	bne.n	80067f0 <_printf_common+0x74>
 80067e8:	1a8d      	subs	r5, r1, r2
 80067ea:	43eb      	mvns	r3, r5
 80067ec:	17db      	asrs	r3, r3, #31
 80067ee:	401d      	ands	r5, r3
 80067f0:	68a3      	ldr	r3, [r4, #8]
 80067f2:	6922      	ldr	r2, [r4, #16]
 80067f4:	4293      	cmp	r3, r2
 80067f6:	dd01      	ble.n	80067fc <_printf_common+0x80>
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	18ed      	adds	r5, r5, r3
 80067fc:	2700      	movs	r7, #0
 80067fe:	42bd      	cmp	r5, r7
 8006800:	d120      	bne.n	8006844 <_printf_common+0xc8>
 8006802:	2000      	movs	r0, #0
 8006804:	e010      	b.n	8006828 <_printf_common+0xac>
 8006806:	3701      	adds	r7, #1
 8006808:	68e3      	ldr	r3, [r4, #12]
 800680a:	682a      	ldr	r2, [r5, #0]
 800680c:	1a9b      	subs	r3, r3, r2
 800680e:	42bb      	cmp	r3, r7
 8006810:	ddd2      	ble.n	80067b8 <_printf_common+0x3c>
 8006812:	0022      	movs	r2, r4
 8006814:	2301      	movs	r3, #1
 8006816:	9901      	ldr	r1, [sp, #4]
 8006818:	9800      	ldr	r0, [sp, #0]
 800681a:	9e08      	ldr	r6, [sp, #32]
 800681c:	3219      	adds	r2, #25
 800681e:	47b0      	blx	r6
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d1f0      	bne.n	8006806 <_printf_common+0x8a>
 8006824:	2001      	movs	r0, #1
 8006826:	4240      	negs	r0, r0
 8006828:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800682a:	2030      	movs	r0, #48	; 0x30
 800682c:	18e1      	adds	r1, r4, r3
 800682e:	3143      	adds	r1, #67	; 0x43
 8006830:	7008      	strb	r0, [r1, #0]
 8006832:	0021      	movs	r1, r4
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	3145      	adds	r1, #69	; 0x45
 8006838:	7809      	ldrb	r1, [r1, #0]
 800683a:	18a2      	adds	r2, r4, r2
 800683c:	3243      	adds	r2, #67	; 0x43
 800683e:	3302      	adds	r3, #2
 8006840:	7011      	strb	r1, [r2, #0]
 8006842:	e7c1      	b.n	80067c8 <_printf_common+0x4c>
 8006844:	0022      	movs	r2, r4
 8006846:	2301      	movs	r3, #1
 8006848:	9901      	ldr	r1, [sp, #4]
 800684a:	9800      	ldr	r0, [sp, #0]
 800684c:	9e08      	ldr	r6, [sp, #32]
 800684e:	321a      	adds	r2, #26
 8006850:	47b0      	blx	r6
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	d0e6      	beq.n	8006824 <_printf_common+0xa8>
 8006856:	3701      	adds	r7, #1
 8006858:	e7d1      	b.n	80067fe <_printf_common+0x82>
	...

0800685c <_printf_i>:
 800685c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800685e:	b08b      	sub	sp, #44	; 0x2c
 8006860:	9206      	str	r2, [sp, #24]
 8006862:	000a      	movs	r2, r1
 8006864:	3243      	adds	r2, #67	; 0x43
 8006866:	9307      	str	r3, [sp, #28]
 8006868:	9005      	str	r0, [sp, #20]
 800686a:	9204      	str	r2, [sp, #16]
 800686c:	7e0a      	ldrb	r2, [r1, #24]
 800686e:	000c      	movs	r4, r1
 8006870:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006872:	2a78      	cmp	r2, #120	; 0x78
 8006874:	d807      	bhi.n	8006886 <_printf_i+0x2a>
 8006876:	2a62      	cmp	r2, #98	; 0x62
 8006878:	d809      	bhi.n	800688e <_printf_i+0x32>
 800687a:	2a00      	cmp	r2, #0
 800687c:	d100      	bne.n	8006880 <_printf_i+0x24>
 800687e:	e0c1      	b.n	8006a04 <_printf_i+0x1a8>
 8006880:	2a58      	cmp	r2, #88	; 0x58
 8006882:	d100      	bne.n	8006886 <_printf_i+0x2a>
 8006884:	e08c      	b.n	80069a0 <_printf_i+0x144>
 8006886:	0026      	movs	r6, r4
 8006888:	3642      	adds	r6, #66	; 0x42
 800688a:	7032      	strb	r2, [r6, #0]
 800688c:	e022      	b.n	80068d4 <_printf_i+0x78>
 800688e:	0010      	movs	r0, r2
 8006890:	3863      	subs	r0, #99	; 0x63
 8006892:	2815      	cmp	r0, #21
 8006894:	d8f7      	bhi.n	8006886 <_printf_i+0x2a>
 8006896:	f7f9 fc3f 	bl	8000118 <__gnu_thumb1_case_shi>
 800689a:	0016      	.short	0x0016
 800689c:	fff6001f 	.word	0xfff6001f
 80068a0:	fff6fff6 	.word	0xfff6fff6
 80068a4:	001ffff6 	.word	0x001ffff6
 80068a8:	fff6fff6 	.word	0xfff6fff6
 80068ac:	fff6fff6 	.word	0xfff6fff6
 80068b0:	003600a8 	.word	0x003600a8
 80068b4:	fff6009a 	.word	0xfff6009a
 80068b8:	00b9fff6 	.word	0x00b9fff6
 80068bc:	0036fff6 	.word	0x0036fff6
 80068c0:	fff6fff6 	.word	0xfff6fff6
 80068c4:	009e      	.short	0x009e
 80068c6:	0026      	movs	r6, r4
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	3642      	adds	r6, #66	; 0x42
 80068cc:	1d11      	adds	r1, r2, #4
 80068ce:	6019      	str	r1, [r3, #0]
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	7033      	strb	r3, [r6, #0]
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0a7      	b.n	8006a28 <_printf_i+0x1cc>
 80068d8:	6808      	ldr	r0, [r1, #0]
 80068da:	6819      	ldr	r1, [r3, #0]
 80068dc:	1d0a      	adds	r2, r1, #4
 80068de:	0605      	lsls	r5, r0, #24
 80068e0:	d50b      	bpl.n	80068fa <_printf_i+0x9e>
 80068e2:	680d      	ldr	r5, [r1, #0]
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	2d00      	cmp	r5, #0
 80068e8:	da03      	bge.n	80068f2 <_printf_i+0x96>
 80068ea:	232d      	movs	r3, #45	; 0x2d
 80068ec:	9a04      	ldr	r2, [sp, #16]
 80068ee:	426d      	negs	r5, r5
 80068f0:	7013      	strb	r3, [r2, #0]
 80068f2:	4b61      	ldr	r3, [pc, #388]	; (8006a78 <_printf_i+0x21c>)
 80068f4:	270a      	movs	r7, #10
 80068f6:	9303      	str	r3, [sp, #12]
 80068f8:	e01b      	b.n	8006932 <_printf_i+0xd6>
 80068fa:	680d      	ldr	r5, [r1, #0]
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	0641      	lsls	r1, r0, #25
 8006900:	d5f1      	bpl.n	80068e6 <_printf_i+0x8a>
 8006902:	b22d      	sxth	r5, r5
 8006904:	e7ef      	b.n	80068e6 <_printf_i+0x8a>
 8006906:	680d      	ldr	r5, [r1, #0]
 8006908:	6819      	ldr	r1, [r3, #0]
 800690a:	1d08      	adds	r0, r1, #4
 800690c:	6018      	str	r0, [r3, #0]
 800690e:	062e      	lsls	r6, r5, #24
 8006910:	d501      	bpl.n	8006916 <_printf_i+0xba>
 8006912:	680d      	ldr	r5, [r1, #0]
 8006914:	e003      	b.n	800691e <_printf_i+0xc2>
 8006916:	066d      	lsls	r5, r5, #25
 8006918:	d5fb      	bpl.n	8006912 <_printf_i+0xb6>
 800691a:	680d      	ldr	r5, [r1, #0]
 800691c:	b2ad      	uxth	r5, r5
 800691e:	4b56      	ldr	r3, [pc, #344]	; (8006a78 <_printf_i+0x21c>)
 8006920:	2708      	movs	r7, #8
 8006922:	9303      	str	r3, [sp, #12]
 8006924:	2a6f      	cmp	r2, #111	; 0x6f
 8006926:	d000      	beq.n	800692a <_printf_i+0xce>
 8006928:	3702      	adds	r7, #2
 800692a:	0023      	movs	r3, r4
 800692c:	2200      	movs	r2, #0
 800692e:	3343      	adds	r3, #67	; 0x43
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	60a3      	str	r3, [r4, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	db03      	blt.n	8006942 <_printf_i+0xe6>
 800693a:	2204      	movs	r2, #4
 800693c:	6821      	ldr	r1, [r4, #0]
 800693e:	4391      	bics	r1, r2
 8006940:	6021      	str	r1, [r4, #0]
 8006942:	2d00      	cmp	r5, #0
 8006944:	d102      	bne.n	800694c <_printf_i+0xf0>
 8006946:	9e04      	ldr	r6, [sp, #16]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00c      	beq.n	8006966 <_printf_i+0x10a>
 800694c:	9e04      	ldr	r6, [sp, #16]
 800694e:	0028      	movs	r0, r5
 8006950:	0039      	movs	r1, r7
 8006952:	f7f9 fc71 	bl	8000238 <__aeabi_uidivmod>
 8006956:	9b03      	ldr	r3, [sp, #12]
 8006958:	3e01      	subs	r6, #1
 800695a:	5c5b      	ldrb	r3, [r3, r1]
 800695c:	7033      	strb	r3, [r6, #0]
 800695e:	002b      	movs	r3, r5
 8006960:	0005      	movs	r5, r0
 8006962:	429f      	cmp	r7, r3
 8006964:	d9f3      	bls.n	800694e <_printf_i+0xf2>
 8006966:	2f08      	cmp	r7, #8
 8006968:	d109      	bne.n	800697e <_printf_i+0x122>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	07db      	lsls	r3, r3, #31
 800696e:	d506      	bpl.n	800697e <_printf_i+0x122>
 8006970:	6863      	ldr	r3, [r4, #4]
 8006972:	6922      	ldr	r2, [r4, #16]
 8006974:	4293      	cmp	r3, r2
 8006976:	dc02      	bgt.n	800697e <_printf_i+0x122>
 8006978:	2330      	movs	r3, #48	; 0x30
 800697a:	3e01      	subs	r6, #1
 800697c:	7033      	strb	r3, [r6, #0]
 800697e:	9b04      	ldr	r3, [sp, #16]
 8006980:	1b9b      	subs	r3, r3, r6
 8006982:	6123      	str	r3, [r4, #16]
 8006984:	9b07      	ldr	r3, [sp, #28]
 8006986:	0021      	movs	r1, r4
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	9805      	ldr	r0, [sp, #20]
 800698c:	9b06      	ldr	r3, [sp, #24]
 800698e:	aa09      	add	r2, sp, #36	; 0x24
 8006990:	f7ff fef4 	bl	800677c <_printf_common>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d14c      	bne.n	8006a32 <_printf_i+0x1d6>
 8006998:	2001      	movs	r0, #1
 800699a:	4240      	negs	r0, r0
 800699c:	b00b      	add	sp, #44	; 0x2c
 800699e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069a0:	3145      	adds	r1, #69	; 0x45
 80069a2:	700a      	strb	r2, [r1, #0]
 80069a4:	4a34      	ldr	r2, [pc, #208]	; (8006a78 <_printf_i+0x21c>)
 80069a6:	9203      	str	r2, [sp, #12]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	6821      	ldr	r1, [r4, #0]
 80069ac:	ca20      	ldmia	r2!, {r5}
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	0608      	lsls	r0, r1, #24
 80069b2:	d516      	bpl.n	80069e2 <_printf_i+0x186>
 80069b4:	07cb      	lsls	r3, r1, #31
 80069b6:	d502      	bpl.n	80069be <_printf_i+0x162>
 80069b8:	2320      	movs	r3, #32
 80069ba:	4319      	orrs	r1, r3
 80069bc:	6021      	str	r1, [r4, #0]
 80069be:	2710      	movs	r7, #16
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	d1b2      	bne.n	800692a <_printf_i+0xce>
 80069c4:	2320      	movs	r3, #32
 80069c6:	6822      	ldr	r2, [r4, #0]
 80069c8:	439a      	bics	r2, r3
 80069ca:	6022      	str	r2, [r4, #0]
 80069cc:	e7ad      	b.n	800692a <_printf_i+0xce>
 80069ce:	2220      	movs	r2, #32
 80069d0:	6809      	ldr	r1, [r1, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	6022      	str	r2, [r4, #0]
 80069d6:	0022      	movs	r2, r4
 80069d8:	2178      	movs	r1, #120	; 0x78
 80069da:	3245      	adds	r2, #69	; 0x45
 80069dc:	7011      	strb	r1, [r2, #0]
 80069de:	4a27      	ldr	r2, [pc, #156]	; (8006a7c <_printf_i+0x220>)
 80069e0:	e7e1      	b.n	80069a6 <_printf_i+0x14a>
 80069e2:	0648      	lsls	r0, r1, #25
 80069e4:	d5e6      	bpl.n	80069b4 <_printf_i+0x158>
 80069e6:	b2ad      	uxth	r5, r5
 80069e8:	e7e4      	b.n	80069b4 <_printf_i+0x158>
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	680d      	ldr	r5, [r1, #0]
 80069ee:	1d10      	adds	r0, r2, #4
 80069f0:	6949      	ldr	r1, [r1, #20]
 80069f2:	6018      	str	r0, [r3, #0]
 80069f4:	6813      	ldr	r3, [r2, #0]
 80069f6:	062e      	lsls	r6, r5, #24
 80069f8:	d501      	bpl.n	80069fe <_printf_i+0x1a2>
 80069fa:	6019      	str	r1, [r3, #0]
 80069fc:	e002      	b.n	8006a04 <_printf_i+0x1a8>
 80069fe:	066d      	lsls	r5, r5, #25
 8006a00:	d5fb      	bpl.n	80069fa <_printf_i+0x19e>
 8006a02:	8019      	strh	r1, [r3, #0]
 8006a04:	2300      	movs	r3, #0
 8006a06:	9e04      	ldr	r6, [sp, #16]
 8006a08:	6123      	str	r3, [r4, #16]
 8006a0a:	e7bb      	b.n	8006984 <_printf_i+0x128>
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	1d11      	adds	r1, r2, #4
 8006a10:	6019      	str	r1, [r3, #0]
 8006a12:	6816      	ldr	r6, [r2, #0]
 8006a14:	2100      	movs	r1, #0
 8006a16:	0030      	movs	r0, r6
 8006a18:	6862      	ldr	r2, [r4, #4]
 8006a1a:	f000 f831 	bl	8006a80 <memchr>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d001      	beq.n	8006a26 <_printf_i+0x1ca>
 8006a22:	1b80      	subs	r0, r0, r6
 8006a24:	6060      	str	r0, [r4, #4]
 8006a26:	6863      	ldr	r3, [r4, #4]
 8006a28:	6123      	str	r3, [r4, #16]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9a04      	ldr	r2, [sp, #16]
 8006a2e:	7013      	strb	r3, [r2, #0]
 8006a30:	e7a8      	b.n	8006984 <_printf_i+0x128>
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	0032      	movs	r2, r6
 8006a36:	9906      	ldr	r1, [sp, #24]
 8006a38:	9805      	ldr	r0, [sp, #20]
 8006a3a:	9d07      	ldr	r5, [sp, #28]
 8006a3c:	47a8      	blx	r5
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	d0aa      	beq.n	8006998 <_printf_i+0x13c>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	079b      	lsls	r3, r3, #30
 8006a46:	d415      	bmi.n	8006a74 <_printf_i+0x218>
 8006a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a4a:	68e0      	ldr	r0, [r4, #12]
 8006a4c:	4298      	cmp	r0, r3
 8006a4e:	daa5      	bge.n	800699c <_printf_i+0x140>
 8006a50:	0018      	movs	r0, r3
 8006a52:	e7a3      	b.n	800699c <_printf_i+0x140>
 8006a54:	0022      	movs	r2, r4
 8006a56:	2301      	movs	r3, #1
 8006a58:	9906      	ldr	r1, [sp, #24]
 8006a5a:	9805      	ldr	r0, [sp, #20]
 8006a5c:	9e07      	ldr	r6, [sp, #28]
 8006a5e:	3219      	adds	r2, #25
 8006a60:	47b0      	blx	r6
 8006a62:	1c43      	adds	r3, r0, #1
 8006a64:	d098      	beq.n	8006998 <_printf_i+0x13c>
 8006a66:	3501      	adds	r5, #1
 8006a68:	68e3      	ldr	r3, [r4, #12]
 8006a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a6c:	1a9b      	subs	r3, r3, r2
 8006a6e:	42ab      	cmp	r3, r5
 8006a70:	dcf0      	bgt.n	8006a54 <_printf_i+0x1f8>
 8006a72:	e7e9      	b.n	8006a48 <_printf_i+0x1ec>
 8006a74:	2500      	movs	r5, #0
 8006a76:	e7f7      	b.n	8006a68 <_printf_i+0x20c>
 8006a78:	08006e9c 	.word	0x08006e9c
 8006a7c:	08006ead 	.word	0x08006ead

08006a80 <memchr>:
 8006a80:	b2c9      	uxtb	r1, r1
 8006a82:	1882      	adds	r2, r0, r2
 8006a84:	4290      	cmp	r0, r2
 8006a86:	d101      	bne.n	8006a8c <memchr+0xc>
 8006a88:	2000      	movs	r0, #0
 8006a8a:	4770      	bx	lr
 8006a8c:	7803      	ldrb	r3, [r0, #0]
 8006a8e:	428b      	cmp	r3, r1
 8006a90:	d0fb      	beq.n	8006a8a <memchr+0xa>
 8006a92:	3001      	adds	r0, #1
 8006a94:	e7f6      	b.n	8006a84 <memchr+0x4>

08006a96 <memmove>:
 8006a96:	b510      	push	{r4, lr}
 8006a98:	4288      	cmp	r0, r1
 8006a9a:	d902      	bls.n	8006aa2 <memmove+0xc>
 8006a9c:	188b      	adds	r3, r1, r2
 8006a9e:	4298      	cmp	r0, r3
 8006aa0:	d303      	bcc.n	8006aaa <memmove+0x14>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e007      	b.n	8006ab6 <memmove+0x20>
 8006aa6:	5c8b      	ldrb	r3, [r1, r2]
 8006aa8:	5483      	strb	r3, [r0, r2]
 8006aaa:	3a01      	subs	r2, #1
 8006aac:	d2fb      	bcs.n	8006aa6 <memmove+0x10>
 8006aae:	bd10      	pop	{r4, pc}
 8006ab0:	5ccc      	ldrb	r4, [r1, r3]
 8006ab2:	54c4      	strb	r4, [r0, r3]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d1fa      	bne.n	8006ab0 <memmove+0x1a>
 8006aba:	e7f8      	b.n	8006aae <memmove+0x18>

08006abc <_free_r>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	0005      	movs	r5, r0
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	d010      	beq.n	8006ae6 <_free_r+0x2a>
 8006ac4:	1f0c      	subs	r4, r1, #4
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	da00      	bge.n	8006ace <_free_r+0x12>
 8006acc:	18e4      	adds	r4, r4, r3
 8006ace:	0028      	movs	r0, r5
 8006ad0:	f000 f918 	bl	8006d04 <__malloc_lock>
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <_free_r+0x90>)
 8006ad6:	6813      	ldr	r3, [r2, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d105      	bne.n	8006ae8 <_free_r+0x2c>
 8006adc:	6063      	str	r3, [r4, #4]
 8006ade:	6014      	str	r4, [r2, #0]
 8006ae0:	0028      	movs	r0, r5
 8006ae2:	f000 f917 	bl	8006d14 <__malloc_unlock>
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
 8006ae8:	42a3      	cmp	r3, r4
 8006aea:	d908      	bls.n	8006afe <_free_r+0x42>
 8006aec:	6821      	ldr	r1, [r4, #0]
 8006aee:	1860      	adds	r0, r4, r1
 8006af0:	4283      	cmp	r3, r0
 8006af2:	d1f3      	bne.n	8006adc <_free_r+0x20>
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	1841      	adds	r1, r0, r1
 8006afa:	6021      	str	r1, [r4, #0]
 8006afc:	e7ee      	b.n	8006adc <_free_r+0x20>
 8006afe:	001a      	movs	r2, r3
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <_free_r+0x4e>
 8006b06:	42a3      	cmp	r3, r4
 8006b08:	d9f9      	bls.n	8006afe <_free_r+0x42>
 8006b0a:	6811      	ldr	r1, [r2, #0]
 8006b0c:	1850      	adds	r0, r2, r1
 8006b0e:	42a0      	cmp	r0, r4
 8006b10:	d10b      	bne.n	8006b2a <_free_r+0x6e>
 8006b12:	6820      	ldr	r0, [r4, #0]
 8006b14:	1809      	adds	r1, r1, r0
 8006b16:	1850      	adds	r0, r2, r1
 8006b18:	6011      	str	r1, [r2, #0]
 8006b1a:	4283      	cmp	r3, r0
 8006b1c:	d1e0      	bne.n	8006ae0 <_free_r+0x24>
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	1841      	adds	r1, r0, r1
 8006b24:	6011      	str	r1, [r2, #0]
 8006b26:	6053      	str	r3, [r2, #4]
 8006b28:	e7da      	b.n	8006ae0 <_free_r+0x24>
 8006b2a:	42a0      	cmp	r0, r4
 8006b2c:	d902      	bls.n	8006b34 <_free_r+0x78>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	e7d5      	b.n	8006ae0 <_free_r+0x24>
 8006b34:	6821      	ldr	r1, [r4, #0]
 8006b36:	1860      	adds	r0, r4, r1
 8006b38:	4283      	cmp	r3, r0
 8006b3a:	d103      	bne.n	8006b44 <_free_r+0x88>
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	1841      	adds	r1, r0, r1
 8006b42:	6021      	str	r1, [r4, #0]
 8006b44:	6063      	str	r3, [r4, #4]
 8006b46:	6054      	str	r4, [r2, #4]
 8006b48:	e7ca      	b.n	8006ae0 <_free_r+0x24>
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	20000450 	.word	0x20000450

08006b50 <sbrk_aligned>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	4e0f      	ldr	r6, [pc, #60]	; (8006b90 <sbrk_aligned+0x40>)
 8006b54:	000d      	movs	r5, r1
 8006b56:	6831      	ldr	r1, [r6, #0]
 8006b58:	0004      	movs	r4, r0
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	d102      	bne.n	8006b64 <sbrk_aligned+0x14>
 8006b5e:	f000 f8bf 	bl	8006ce0 <_sbrk_r>
 8006b62:	6030      	str	r0, [r6, #0]
 8006b64:	0029      	movs	r1, r5
 8006b66:	0020      	movs	r0, r4
 8006b68:	f000 f8ba 	bl	8006ce0 <_sbrk_r>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d00a      	beq.n	8006b86 <sbrk_aligned+0x36>
 8006b70:	2303      	movs	r3, #3
 8006b72:	1cc5      	adds	r5, r0, #3
 8006b74:	439d      	bics	r5, r3
 8006b76:	42a8      	cmp	r0, r5
 8006b78:	d007      	beq.n	8006b8a <sbrk_aligned+0x3a>
 8006b7a:	1a29      	subs	r1, r5, r0
 8006b7c:	0020      	movs	r0, r4
 8006b7e:	f000 f8af 	bl	8006ce0 <_sbrk_r>
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	d101      	bne.n	8006b8a <sbrk_aligned+0x3a>
 8006b86:	2501      	movs	r5, #1
 8006b88:	426d      	negs	r5, r5
 8006b8a:	0028      	movs	r0, r5
 8006b8c:	bd70      	pop	{r4, r5, r6, pc}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	20000454 	.word	0x20000454

08006b94 <_malloc_r>:
 8006b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b96:	2203      	movs	r2, #3
 8006b98:	1ccb      	adds	r3, r1, #3
 8006b9a:	4393      	bics	r3, r2
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	0006      	movs	r6, r0
 8006ba0:	001f      	movs	r7, r3
 8006ba2:	2b0c      	cmp	r3, #12
 8006ba4:	d232      	bcs.n	8006c0c <_malloc_r+0x78>
 8006ba6:	270c      	movs	r7, #12
 8006ba8:	42b9      	cmp	r1, r7
 8006baa:	d831      	bhi.n	8006c10 <_malloc_r+0x7c>
 8006bac:	0030      	movs	r0, r6
 8006bae:	f000 f8a9 	bl	8006d04 <__malloc_lock>
 8006bb2:	4d32      	ldr	r5, [pc, #200]	; (8006c7c <_malloc_r+0xe8>)
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	001c      	movs	r4, r3
 8006bb8:	2c00      	cmp	r4, #0
 8006bba:	d12e      	bne.n	8006c1a <_malloc_r+0x86>
 8006bbc:	0039      	movs	r1, r7
 8006bbe:	0030      	movs	r0, r6
 8006bc0:	f7ff ffc6 	bl	8006b50 <sbrk_aligned>
 8006bc4:	0004      	movs	r4, r0
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d11e      	bne.n	8006c08 <_malloc_r+0x74>
 8006bca:	682c      	ldr	r4, [r5, #0]
 8006bcc:	0025      	movs	r5, r4
 8006bce:	2d00      	cmp	r5, #0
 8006bd0:	d14a      	bne.n	8006c68 <_malloc_r+0xd4>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	0029      	movs	r1, r5
 8006bd6:	18e3      	adds	r3, r4, r3
 8006bd8:	0030      	movs	r0, r6
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	f000 f880 	bl	8006ce0 <_sbrk_r>
 8006be0:	9b01      	ldr	r3, [sp, #4]
 8006be2:	4283      	cmp	r3, r0
 8006be4:	d143      	bne.n	8006c6e <_malloc_r+0xda>
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	3703      	adds	r7, #3
 8006bea:	1aff      	subs	r7, r7, r3
 8006bec:	2303      	movs	r3, #3
 8006bee:	439f      	bics	r7, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	2f0c      	cmp	r7, #12
 8006bf4:	d200      	bcs.n	8006bf8 <_malloc_r+0x64>
 8006bf6:	270c      	movs	r7, #12
 8006bf8:	0039      	movs	r1, r7
 8006bfa:	0030      	movs	r0, r6
 8006bfc:	f7ff ffa8 	bl	8006b50 <sbrk_aligned>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d034      	beq.n	8006c6e <_malloc_r+0xda>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	19df      	adds	r7, r3, r7
 8006c08:	6027      	str	r7, [r4, #0]
 8006c0a:	e013      	b.n	8006c34 <_malloc_r+0xa0>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	dacb      	bge.n	8006ba8 <_malloc_r+0x14>
 8006c10:	230c      	movs	r3, #12
 8006c12:	2500      	movs	r5, #0
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	0028      	movs	r0, r5
 8006c18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c1a:	6822      	ldr	r2, [r4, #0]
 8006c1c:	1bd1      	subs	r1, r2, r7
 8006c1e:	d420      	bmi.n	8006c62 <_malloc_r+0xce>
 8006c20:	290b      	cmp	r1, #11
 8006c22:	d917      	bls.n	8006c54 <_malloc_r+0xc0>
 8006c24:	19e2      	adds	r2, r4, r7
 8006c26:	6027      	str	r7, [r4, #0]
 8006c28:	42a3      	cmp	r3, r4
 8006c2a:	d111      	bne.n	8006c50 <_malloc_r+0xbc>
 8006c2c:	602a      	str	r2, [r5, #0]
 8006c2e:	6863      	ldr	r3, [r4, #4]
 8006c30:	6011      	str	r1, [r2, #0]
 8006c32:	6053      	str	r3, [r2, #4]
 8006c34:	0030      	movs	r0, r6
 8006c36:	0025      	movs	r5, r4
 8006c38:	f000 f86c 	bl	8006d14 <__malloc_unlock>
 8006c3c:	2207      	movs	r2, #7
 8006c3e:	350b      	adds	r5, #11
 8006c40:	1d23      	adds	r3, r4, #4
 8006c42:	4395      	bics	r5, r2
 8006c44:	1aea      	subs	r2, r5, r3
 8006c46:	429d      	cmp	r5, r3
 8006c48:	d0e5      	beq.n	8006c16 <_malloc_r+0x82>
 8006c4a:	1b5b      	subs	r3, r3, r5
 8006c4c:	50a3      	str	r3, [r4, r2]
 8006c4e:	e7e2      	b.n	8006c16 <_malloc_r+0x82>
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	e7ec      	b.n	8006c2e <_malloc_r+0x9a>
 8006c54:	6862      	ldr	r2, [r4, #4]
 8006c56:	42a3      	cmp	r3, r4
 8006c58:	d101      	bne.n	8006c5e <_malloc_r+0xca>
 8006c5a:	602a      	str	r2, [r5, #0]
 8006c5c:	e7ea      	b.n	8006c34 <_malloc_r+0xa0>
 8006c5e:	605a      	str	r2, [r3, #4]
 8006c60:	e7e8      	b.n	8006c34 <_malloc_r+0xa0>
 8006c62:	0023      	movs	r3, r4
 8006c64:	6864      	ldr	r4, [r4, #4]
 8006c66:	e7a7      	b.n	8006bb8 <_malloc_r+0x24>
 8006c68:	002c      	movs	r4, r5
 8006c6a:	686d      	ldr	r5, [r5, #4]
 8006c6c:	e7af      	b.n	8006bce <_malloc_r+0x3a>
 8006c6e:	230c      	movs	r3, #12
 8006c70:	0030      	movs	r0, r6
 8006c72:	6033      	str	r3, [r6, #0]
 8006c74:	f000 f84e 	bl	8006d14 <__malloc_unlock>
 8006c78:	e7cd      	b.n	8006c16 <_malloc_r+0x82>
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	20000450 	.word	0x20000450

08006c80 <_realloc_r>:
 8006c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c82:	0007      	movs	r7, r0
 8006c84:	000e      	movs	r6, r1
 8006c86:	0014      	movs	r4, r2
 8006c88:	2900      	cmp	r1, #0
 8006c8a:	d105      	bne.n	8006c98 <_realloc_r+0x18>
 8006c8c:	0011      	movs	r1, r2
 8006c8e:	f7ff ff81 	bl	8006b94 <_malloc_r>
 8006c92:	0005      	movs	r5, r0
 8006c94:	0028      	movs	r0, r5
 8006c96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c98:	2a00      	cmp	r2, #0
 8006c9a:	d103      	bne.n	8006ca4 <_realloc_r+0x24>
 8006c9c:	f7ff ff0e 	bl	8006abc <_free_r>
 8006ca0:	0025      	movs	r5, r4
 8006ca2:	e7f7      	b.n	8006c94 <_realloc_r+0x14>
 8006ca4:	f000 f83e 	bl	8006d24 <_malloc_usable_size_r>
 8006ca8:	9001      	str	r0, [sp, #4]
 8006caa:	4284      	cmp	r4, r0
 8006cac:	d803      	bhi.n	8006cb6 <_realloc_r+0x36>
 8006cae:	0035      	movs	r5, r6
 8006cb0:	0843      	lsrs	r3, r0, #1
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	d3ee      	bcc.n	8006c94 <_realloc_r+0x14>
 8006cb6:	0021      	movs	r1, r4
 8006cb8:	0038      	movs	r0, r7
 8006cba:	f7ff ff6b 	bl	8006b94 <_malloc_r>
 8006cbe:	1e05      	subs	r5, r0, #0
 8006cc0:	d0e8      	beq.n	8006c94 <_realloc_r+0x14>
 8006cc2:	9b01      	ldr	r3, [sp, #4]
 8006cc4:	0022      	movs	r2, r4
 8006cc6:	429c      	cmp	r4, r3
 8006cc8:	d900      	bls.n	8006ccc <_realloc_r+0x4c>
 8006cca:	001a      	movs	r2, r3
 8006ccc:	0031      	movs	r1, r6
 8006cce:	0028      	movs	r0, r5
 8006cd0:	f7ff fbc0 	bl	8006454 <memcpy>
 8006cd4:	0031      	movs	r1, r6
 8006cd6:	0038      	movs	r0, r7
 8006cd8:	f7ff fef0 	bl	8006abc <_free_r>
 8006cdc:	e7da      	b.n	8006c94 <_realloc_r+0x14>
	...

08006ce0 <_sbrk_r>:
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	b570      	push	{r4, r5, r6, lr}
 8006ce4:	4d06      	ldr	r5, [pc, #24]	; (8006d00 <_sbrk_r+0x20>)
 8006ce6:	0004      	movs	r4, r0
 8006ce8:	0008      	movs	r0, r1
 8006cea:	602b      	str	r3, [r5, #0]
 8006cec:	f7fb ff38 	bl	8002b60 <_sbrk>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d103      	bne.n	8006cfc <_sbrk_r+0x1c>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d000      	beq.n	8006cfc <_sbrk_r+0x1c>
 8006cfa:	6023      	str	r3, [r4, #0]
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	20000458 	.word	0x20000458

08006d04 <__malloc_lock>:
 8006d04:	b510      	push	{r4, lr}
 8006d06:	4802      	ldr	r0, [pc, #8]	; (8006d10 <__malloc_lock+0xc>)
 8006d08:	f000 f814 	bl	8006d34 <__retarget_lock_acquire_recursive>
 8006d0c:	bd10      	pop	{r4, pc}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	2000045c 	.word	0x2000045c

08006d14 <__malloc_unlock>:
 8006d14:	b510      	push	{r4, lr}
 8006d16:	4802      	ldr	r0, [pc, #8]	; (8006d20 <__malloc_unlock+0xc>)
 8006d18:	f000 f80d 	bl	8006d36 <__retarget_lock_release_recursive>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	2000045c 	.word	0x2000045c

08006d24 <_malloc_usable_size_r>:
 8006d24:	1f0b      	subs	r3, r1, #4
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	1f18      	subs	r0, r3, #4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	da01      	bge.n	8006d32 <_malloc_usable_size_r+0xe>
 8006d2e:	580b      	ldr	r3, [r1, r0]
 8006d30:	18c0      	adds	r0, r0, r3
 8006d32:	4770      	bx	lr

08006d34 <__retarget_lock_acquire_recursive>:
 8006d34:	4770      	bx	lr

08006d36 <__retarget_lock_release_recursive>:
 8006d36:	4770      	bx	lr

08006d38 <_init>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3e:	bc08      	pop	{r3}
 8006d40:	469e      	mov	lr, r3
 8006d42:	4770      	bx	lr

08006d44 <_fini>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr
