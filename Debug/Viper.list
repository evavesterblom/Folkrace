
Viper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000477c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004940  08004940  000202c8  2**0
                  CONTENTS
  4 .ARM          00000000  08004940  08004940  000202c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004940  08004940  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  08004948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200002c8  08004c10  000202c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08004c10  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001274d  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a9  00000000  00000000  00032a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000352e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00036398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001224d  00000000  00000000  00037310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001512a  00000000  00000000  0004955d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000689bf  00000000  00000000  0005e687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa0  00000000  00000000  000c7098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002c8 	.word	0x200002c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004824 	.word	0x08004824

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002cc 	.word	0x200002cc
 8000104:	08004824 	.word	0x08004824

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b08b      	sub	sp, #44	; 0x2c
 8000248:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024a:	2414      	movs	r4, #20
 800024c:	193b      	adds	r3, r7, r4
 800024e:	0018      	movs	r0, r3
 8000250:	2314      	movs	r3, #20
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f003 fe7c 	bl	8003f52 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025a:	4b4d      	ldr	r3, [pc, #308]	; (8000390 <MX_GPIO_Init+0x14c>)
 800025c:	695a      	ldr	r2, [r3, #20]
 800025e:	4b4c      	ldr	r3, [pc, #304]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000260:	2180      	movs	r1, #128	; 0x80
 8000262:	0309      	lsls	r1, r1, #12
 8000264:	430a      	orrs	r2, r1
 8000266:	615a      	str	r2, [r3, #20]
 8000268:	4b49      	ldr	r3, [pc, #292]	; (8000390 <MX_GPIO_Init+0x14c>)
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	031b      	lsls	r3, r3, #12
 8000270:	4013      	ands	r3, r2
 8000272:	613b      	str	r3, [r7, #16]
 8000274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000276:	4b46      	ldr	r3, [pc, #280]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000278:	695a      	ldr	r2, [r3, #20]
 800027a:	4b45      	ldr	r3, [pc, #276]	; (8000390 <MX_GPIO_Init+0x14c>)
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	03c9      	lsls	r1, r1, #15
 8000280:	430a      	orrs	r2, r1
 8000282:	615a      	str	r2, [r3, #20]
 8000284:	4b42      	ldr	r3, [pc, #264]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000286:	695a      	ldr	r2, [r3, #20]
 8000288:	2380      	movs	r3, #128	; 0x80
 800028a:	03db      	lsls	r3, r3, #15
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000292:	4b3f      	ldr	r3, [pc, #252]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000294:	695a      	ldr	r2, [r3, #20]
 8000296:	4b3e      	ldr	r3, [pc, #248]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	0289      	lsls	r1, r1, #10
 800029c:	430a      	orrs	r2, r1
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	4b3b      	ldr	r3, [pc, #236]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002a2:	695a      	ldr	r2, [r3, #20]
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	029b      	lsls	r3, r3, #10
 80002a8:	4013      	ands	r3, r2
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b38      	ldr	r3, [pc, #224]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002b0:	695a      	ldr	r2, [r3, #20]
 80002b2:	4b37      	ldr	r3, [pc, #220]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002b4:	2180      	movs	r1, #128	; 0x80
 80002b6:	02c9      	lsls	r1, r1, #11
 80002b8:	430a      	orrs	r2, r1
 80002ba:	615a      	str	r2, [r3, #20]
 80002bc:	4b34      	ldr	r3, [pc, #208]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	02db      	lsls	r3, r3, #11
 80002c4:	4013      	ands	r3, r2
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_DIR_1_Pin|MOTOR_DIR_2_Pin, GPIO_PIN_RESET);
 80002ca:	4b32      	ldr	r3, [pc, #200]	; (8000394 <MX_GPIO_Init+0x150>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	2103      	movs	r1, #3
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fedd 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	2200      	movs	r2, #0
 80002dc:	2120      	movs	r1, #32
 80002de:	0018      	movs	r0, r3
 80002e0:	f000 fed6 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_1_Pin|TOF_2_Pin|TOF_3_Pin, GPIO_PIN_RESET);
 80002e4:	23e0      	movs	r3, #224	; 0xe0
 80002e6:	021b      	lsls	r3, r3, #8
 80002e8:	482b      	ldr	r0, [pc, #172]	; (8000398 <MX_GPIO_Init+0x154>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	0019      	movs	r1, r3
 80002ee:	f000 fecf 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	0192      	lsls	r2, r2, #6
 80002f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2284      	movs	r2, #132	; 0x84
 80002fe:	0392      	lsls	r2, r2, #14
 8000300:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	193b      	adds	r3, r7, r4
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000308:	193b      	adds	r3, r7, r4
 800030a:	4a22      	ldr	r2, [pc, #136]	; (8000394 <MX_GPIO_Init+0x150>)
 800030c:	0019      	movs	r1, r3
 800030e:	0010      	movs	r0, r2
 8000310:	f000 fd4e 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_DIR_1_Pin|MOTOR_DIR_2_Pin;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2203      	movs	r2, #3
 8000318:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2201      	movs	r2, #1
 800031e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	193b      	adds	r3, r7, r4
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032c:	193b      	adds	r3, r7, r4
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <MX_GPIO_Init+0x150>)
 8000330:	0019      	movs	r1, r3
 8000332:	0010      	movs	r0, r2
 8000334:	f000 fd3c 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2220      	movs	r2, #32
 800033c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	193b      	adds	r3, r7, r4
 8000340:	2201      	movs	r2, #1
 8000342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	193b      	adds	r3, r7, r4
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034a:	193b      	adds	r3, r7, r4
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000350:	193a      	adds	r2, r7, r4
 8000352:	2390      	movs	r3, #144	; 0x90
 8000354:	05db      	lsls	r3, r3, #23
 8000356:	0011      	movs	r1, r2
 8000358:	0018      	movs	r0, r3
 800035a:	f000 fd29 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_1_Pin|TOF_2_Pin|TOF_3_Pin;
 800035e:	0021      	movs	r1, r4
 8000360:	187b      	adds	r3, r7, r1
 8000362:	22e0      	movs	r2, #224	; 0xe0
 8000364:	0212      	lsls	r2, r2, #8
 8000366:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2201      	movs	r2, #1
 800036c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037a:	187b      	adds	r3, r7, r1
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <MX_GPIO_Init+0x154>)
 800037e:	0019      	movs	r1, r3
 8000380:	0010      	movs	r0, r2
 8000382:	f000 fd15 	bl	8000db0 <HAL_GPIO_Init>

}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b00b      	add	sp, #44	; 0x2c
 800038c:	bd90      	pop	{r4, r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	40021000 	.word	0x40021000
 8000394:	48000800 	.word	0x48000800
 8000398:	48000400 	.word	0x48000400

0800039c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_I2C1_Init+0x74>)
 80003a2:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <MX_I2C1_Init+0x78>)
 80003a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <MX_I2C1_Init+0x74>)
 80003a8:	4a1b      	ldr	r2, [pc, #108]	; (8000418 <MX_I2C1_Init+0x7c>)
 80003aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b2:	4b17      	ldr	r3, [pc, #92]	; (8000410 <MX_I2C1_Init+0x74>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_I2C1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_I2C1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_I2C1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_I2C1_Init+0x74>)
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 fe77 	bl	80010cc <HAL_I2C_Init>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003e2:	f000 f9be 	bl	8000762 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <MX_I2C1_Init+0x74>)
 80003e8:	2100      	movs	r1, #0
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 fb0c 	bl	8001a08 <HAL_I2CEx_ConfigAnalogFilter>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f4:	f000 f9b5 	bl	8000762 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <MX_I2C1_Init+0x74>)
 80003fa:	2100      	movs	r1, #0
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fb4f 	bl	8001aa0 <HAL_I2CEx_ConfigDigitalFilter>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000406:	f000 f9ac 	bl	8000762 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	200002e4 	.word	0x200002e4
 8000414:	40005400 	.word	0x40005400
 8000418:	2000090e 	.word	0x2000090e

0800041c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	2414      	movs	r4, #20
 8000426:	193b      	adds	r3, r7, r4
 8000428:	0018      	movs	r0, r3
 800042a:	2314      	movs	r3, #20
 800042c:	001a      	movs	r2, r3
 800042e:	2100      	movs	r1, #0
 8000430:	f003 fd8f 	bl	8003f52 <memset>
  if(i2cHandle->Instance==I2C1)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <HAL_I2C_MspInit+0x90>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d132      	bne.n	80004a4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	02c9      	lsls	r1, r1, #11
 8000448:	430a      	orrs	r2, r1
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	02db      	lsls	r3, r3, #11
 8000454:	4013      	ands	r3, r2
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_CLOCK_Pin|TOF_DATA_Pin;
 800045a:	193b      	adds	r3, r7, r4
 800045c:	22c0      	movs	r2, #192	; 0xc0
 800045e:	0092      	lsls	r2, r2, #2
 8000460:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000462:	0021      	movs	r1, r4
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2212      	movs	r2, #18
 8000468:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2203      	movs	r2, #3
 8000474:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2201      	movs	r2, #1
 800047a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047c:	187b      	adds	r3, r7, r1
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <HAL_I2C_MspInit+0x98>)
 8000480:	0019      	movs	r1, r3
 8000482:	0010      	movs	r0, r2
 8000484:	f000 fc94 	bl	8000db0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 800048a:	69da      	ldr	r2, [r3, #28]
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	0389      	lsls	r1, r1, #14
 8000492:	430a      	orrs	r2, r1
 8000494:	61da      	str	r2, [r3, #28]
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 8000498:	69da      	ldr	r2, [r3, #28]
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	039b      	lsls	r3, r3, #14
 800049e:	4013      	ands	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b00b      	add	sp, #44	; 0x2c
 80004aa:	bd90      	pop	{r4, r7, pc}
 80004ac:	40005400 	.word	0x40005400
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000400 	.word	0x48000400

080004b8 <init>:
enum State {
	DRIVE,
	REVERSE
};

void init() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af02      	add	r7, sp, #8
	  HAL_TIM_Base_Start(&htim3);
 80004be:	4b23      	ldr	r3, [pc, #140]	; (800054c <init+0x94>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 f873 	bl	80025ac <HAL_TIM_Base_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <init+0x94>)
 80004c8:	2100      	movs	r1, #0
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 f902 	bl	80026d4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004d0:	4b1e      	ldr	r3, [pc, #120]	; (800054c <init+0x94>)
 80004d2:	2104      	movs	r1, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 f8fd 	bl	80026d4 <HAL_TIM_PWM_Start>

	  TOF_InitStruct(&sensor1, &hi2c1, 0x32, TOF_1_GPIO_Port, TOF_1_Pin);
 80004da:	4a1d      	ldr	r2, [pc, #116]	; (8000550 <init+0x98>)
 80004dc:	491d      	ldr	r1, [pc, #116]	; (8000554 <init+0x9c>)
 80004de:	481e      	ldr	r0, [pc, #120]	; (8000558 <init+0xa0>)
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	019b      	lsls	r3, r3, #6
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	0013      	movs	r3, r2
 80004e8:	2232      	movs	r2, #50	; 0x32
 80004ea:	f003 fc4d 	bl	8003d88 <TOF_InitStruct>
	  TOF_InitStruct(&sensor2, &hi2c1, 0x33, TOF_2_GPIO_Port, TOF_2_Pin);
 80004ee:	4a18      	ldr	r2, [pc, #96]	; (8000550 <init+0x98>)
 80004f0:	4918      	ldr	r1, [pc, #96]	; (8000554 <init+0x9c>)
 80004f2:	481a      	ldr	r0, [pc, #104]	; (800055c <init+0xa4>)
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	01db      	lsls	r3, r3, #7
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	0013      	movs	r3, r2
 80004fc:	2233      	movs	r2, #51	; 0x33
 80004fe:	f003 fc43 	bl	8003d88 <TOF_InitStruct>
	  TOF_InitStruct(&sensor3, &hi2c1, 0x34, TOF_3_GPIO_Port, TOF_3_Pin);
 8000502:	4a13      	ldr	r2, [pc, #76]	; (8000550 <init+0x98>)
 8000504:	4913      	ldr	r1, [pc, #76]	; (8000554 <init+0x9c>)
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <init+0xa8>)
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	021b      	lsls	r3, r3, #8
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	0013      	movs	r3, r2
 8000510:	2234      	movs	r2, #52	; 0x34
 8000512:	f003 fc39 	bl	8003d88 <TOF_InitStruct>

	  TOF_TurnOff(&sensor1);
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <init+0xa0>)
 8000518:	0018      	movs	r0, r3
 800051a:	f003 fc67 	bl	8003dec <TOF_TurnOff>
	  TOF_TurnOff(&sensor2);
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <init+0xa4>)
 8000520:	0018      	movs	r0, r3
 8000522:	f003 fc63 	bl	8003dec <TOF_TurnOff>
	  TOF_TurnOff(&sensor3);
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <init+0xa8>)
 8000528:	0018      	movs	r0, r3
 800052a:	f003 fc5f 	bl	8003dec <TOF_TurnOff>

	  TOF_BootSensor(&sensor1);
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <init+0xa0>)
 8000530:	0018      	movs	r0, r3
 8000532:	f003 fc71 	bl	8003e18 <TOF_BootSensor>
	  TOF_BootSensor(&sensor2);
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <init+0xa4>)
 8000538:	0018      	movs	r0, r3
 800053a:	f003 fc6d 	bl	8003e18 <TOF_BootSensor>
	  TOF_BootSensor(&sensor3);
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <init+0xa8>)
 8000540:	0018      	movs	r0, r3
 8000542:	f003 fc69 	bl	8003e18 <TOF_BootSensor>
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000036c 	.word	0x2000036c
 8000550:	48000400 	.word	0x48000400
 8000554:	200002e4 	.word	0x200002e4
 8000558:	20000330 	.word	0x20000330
 800055c:	20000340 	.word	0x20000340
 8000560:	20000350 	.word	0x20000350

08000564 <sense>:
char distanceStr3[200] = "wasd";
uint16_t dist1 = 0;
uint16_t dist2 = 0;
uint16_t dist3 = 0;

void sense() {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	  //TOF kuulamine
	dist1 = TOF_GetDistance(&sensor1);
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <sense+0x3c>)
 800056a:	0018      	movs	r0, r3
 800056c:	f003 fca2 	bl	8003eb4 <TOF_GetDistance>
 8000570:	0003      	movs	r3, r0
 8000572:	001a      	movs	r2, r3
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <sense+0x40>)
 8000576:	801a      	strh	r2, [r3, #0]
	dist2 = TOF_GetDistance(&sensor2);
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <sense+0x44>)
 800057a:	0018      	movs	r0, r3
 800057c:	f003 fc9a 	bl	8003eb4 <TOF_GetDistance>
 8000580:	0003      	movs	r3, r0
 8000582:	001a      	movs	r2, r3
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <sense+0x48>)
 8000586:	801a      	strh	r2, [r3, #0]
	dist3 = TOF_GetDistance(&sensor3);
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <sense+0x4c>)
 800058a:	0018      	movs	r0, r3
 800058c:	f003 fc92 	bl	8003eb4 <TOF_GetDistance>
 8000590:	0003      	movs	r3, r0
 8000592:	001a      	movs	r2, r3
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <sense+0x50>)
 8000596:	801a      	strh	r2, [r3, #0]
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	20000330 	.word	0x20000330
 80005a4:	20000360 	.word	0x20000360
 80005a8:	20000340 	.word	0x20000340
 80005ac:	20000362 	.word	0x20000362
 80005b0:	20000350 	.word	0x20000350
 80005b4:	20000364 	.word	0x20000364

080005b8 <plan>:

void plan() {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <act>:

void act() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	sprintf(distanceStr1, "Distance 1: %d\n\r", dist1);
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <act+0x7c>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	001a      	movs	r2, r3
 80005ce:	491d      	ldr	r1, [pc, #116]	; (8000644 <act+0x80>)
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <act+0x84>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f003 fcc6 	bl	8003f64 <siprintf>
	sprintf(distanceStr2, "Distance 2: %d\n\r", dist2);
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <act+0x88>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	001a      	movs	r2, r3
 80005de:	491c      	ldr	r1, [pc, #112]	; (8000650 <act+0x8c>)
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <act+0x90>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f003 fcbe 	bl	8003f64 <siprintf>
	sprintf(distanceStr3, "Distance 3: %d\n\r", dist3);
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <act+0x94>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	001a      	movs	r2, r3
 80005ee:	491b      	ldr	r1, [pc, #108]	; (800065c <act+0x98>)
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <act+0x9c>)
 80005f2:	0018      	movs	r0, r3
 80005f4:	f003 fcb6 	bl	8003f64 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)distanceStr1, strlen(distanceStr1), 100);
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <act+0x84>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff fd84 	bl	8000108 <strlen>
 8000600:	0003      	movs	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <act+0x84>)
 8000606:	4817      	ldr	r0, [pc, #92]	; (8000664 <act+0xa0>)
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	f002 fd1d 	bl	8003048 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)distanceStr2, strlen(distanceStr2), 100);
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <act+0x90>)
 8000610:	0018      	movs	r0, r3
 8000612:	f7ff fd79 	bl	8000108 <strlen>
 8000616:	0003      	movs	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	490e      	ldr	r1, [pc, #56]	; (8000654 <act+0x90>)
 800061c:	4811      	ldr	r0, [pc, #68]	; (8000664 <act+0xa0>)
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	f002 fd12 	bl	8003048 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)distanceStr3, strlen(distanceStr3), 100);
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <act+0x9c>)
 8000626:	0018      	movs	r0, r3
 8000628:	f7ff fd6e 	bl	8000108 <strlen>
 800062c:	0003      	movs	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	490b      	ldr	r1, [pc, #44]	; (8000660 <act+0x9c>)
 8000632:	480c      	ldr	r0, [pc, #48]	; (8000664 <act+0xa0>)
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	f002 fd07 	bl	8003048 <HAL_UART_Transmit>

	  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 75);
	  //HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin, 1);

	  //HAL_Delay(500);
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000360 	.word	0x20000360
 8000644:	0800483c 	.word	0x0800483c
 8000648:	20000000 	.word	0x20000000
 800064c:	20000362 	.word	0x20000362
 8000650:	08004850 	.word	0x08004850
 8000654:	200000c8 	.word	0x200000c8
 8000658:	20000364 	.word	0x20000364
 800065c:	08004864 	.word	0x08004864
 8000660:	20000190 	.word	0x20000190
 8000664:	200003b4 	.word	0x200003b4

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fa64 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f816 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f7ff fde6 	bl	8000244 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000678:	f000 f9b8 	bl	80009ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800067c:	f7ff fe8e 	bl	800039c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000680:	f000 f8ec 	bl	800085c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000684:	f7ff ff18 	bl	80004b8 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sense();
 8000688:	f7ff ff6c 	bl	8000564 <sense>
	  plan();
 800068c:	f7ff ff94 	bl	80005b8 <plan>
	  act();
 8000690:	f7ff ff98 	bl	80005c4 <act>
	  HAL_Delay(500);
 8000694:	23fa      	movs	r3, #250	; 0xfa
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fab1 	bl	8000c00 <HAL_Delay>
	  sense();
 800069e:	e7f3      	b.n	8000688 <main+0x20>

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b095      	sub	sp, #84	; 0x54
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	2420      	movs	r4, #32
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	0018      	movs	r0, r3
 80006ac:	2330      	movs	r3, #48	; 0x30
 80006ae:	001a      	movs	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	f003 fc4e 	bl	8003f52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b6:	2310      	movs	r3, #16
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	0018      	movs	r0, r3
 80006bc:	2310      	movs	r3, #16
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f003 fc46 	bl	8003f52 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c6:	003b      	movs	r3, r7
 80006c8:	0018      	movs	r0, r3
 80006ca:	2310      	movs	r3, #16
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f003 fc3f 	bl	8003f52 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	0021      	movs	r1, r4
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2202      	movs	r2, #2
 80006da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2201      	movs	r2, #1
 80006e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2210      	movs	r2, #16
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2202      	movs	r2, #2
 80006ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	22a0      	movs	r2, #160	; 0xa0
 80006f8:	0392      	lsls	r2, r2, #14
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	187b      	adds	r3, r7, r1
 8000704:	0018      	movs	r0, r3
 8000706:	f001 fa17 	bl	8001b38 <HAL_RCC_OscConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800070e:	f000 f828 	bl	8000762 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	2110      	movs	r1, #16
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2207      	movs	r2, #7
 8000718:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2101      	movs	r1, #1
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fd1b 	bl	800216c <HAL_RCC_ClockConfig>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800073a:	f000 f812 	bl	8000762 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800073e:	003b      	movs	r3, r7
 8000740:	2220      	movs	r2, #32
 8000742:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000744:	003b      	movs	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074a:	003b      	movs	r3, r7
 800074c:	0018      	movs	r0, r3
 800074e:	f001 fe5f 	bl	8002410 <HAL_RCCEx_PeriphCLKConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000756:	f000 f804 	bl	8000762 <Error_Handler>
  }
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b015      	add	sp, #84	; 0x54
 8000760:	bd90      	pop	{r4, r7, pc}

08000762 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000766:	b672      	cpsid	i
}
 8000768:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076a:	e7fe      	b.n	800076a <Error_Handler+0x8>

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x44>)
 8000774:	699a      	ldr	r2, [r3, #24]
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_MspInit+0x44>)
 8000778:	2101      	movs	r1, #1
 800077a:	430a      	orrs	r2, r1
 800077c:	619a      	str	r2, [r3, #24]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_MspInit+0x44>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	2201      	movs	r2, #1
 8000784:	4013      	ands	r3, r2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x44>)
 800078c:	69da      	ldr	r2, [r3, #28]
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_MspInit+0x44>)
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	0549      	lsls	r1, r1, #21
 8000794:	430a      	orrs	r2, r1
 8000796:	61da      	str	r2, [r3, #28]
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_MspInit+0x44>)
 800079a:	69da      	ldr	r2, [r3, #28]
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	055b      	lsls	r3, r3, #21
 80007a0:	4013      	ands	r3, r2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b002      	add	sp, #8
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	40021000 	.word	0x40021000

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 f9f6 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <_sbrk+0x5c>)
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <_sbrk+0x60>)
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <_sbrk+0x64>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <_sbrk+0x64>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <_sbrk+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	18d3      	adds	r3, r2, r3
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	429a      	cmp	r2, r3
 8000812:	d207      	bcs.n	8000824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000814:	f003 fb6a 	bl	8003eec <__errno>
 8000818:	0003      	movs	r3, r0
 800081a:	220c      	movs	r2, #12
 800081c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800081e:	2301      	movs	r3, #1
 8000820:	425b      	negs	r3, r3
 8000822:	e009      	b.n	8000838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <_sbrk+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	18d2      	adds	r2, r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <_sbrk+0x64>)
 8000834:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b006      	add	sp, #24
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20002000 	.word	0x20002000
 8000844:	00000400 	.word	0x00000400
 8000848:	20000368 	.word	0x20000368
 800084c:	20000550 	.word	0x20000550

08000850 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	2320      	movs	r3, #32
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	0018      	movs	r0, r3
 8000868:	2308      	movs	r3, #8
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f003 fb70 	bl	8003f52 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	0018      	movs	r0, r3
 8000876:	231c      	movs	r3, #28
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f003 fb69 	bl	8003f52 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_TIM3_Init+0xd0>)
 8000882:	4a2b      	ldr	r2, [pc, #172]	; (8000930 <MX_TIM3_Init+0xd4>)
 8000884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 960;
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_TIM3_Init+0xd0>)
 8000888:	22f0      	movs	r2, #240	; 0xf0
 800088a:	0092      	lsls	r2, r2, #2
 800088c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_TIM3_Init+0xd0>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_TIM3_Init+0xd0>)
 8000896:	22fa      	movs	r2, #250	; 0xfa
 8000898:	0092      	lsls	r2, r2, #2
 800089a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_TIM3_Init+0xd0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_TIM3_Init+0xd0>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_TIM3_Init+0xd0>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 fec2 	bl	8002634 <HAL_TIM_PWM_Init>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f7ff ff55 	bl	8000762 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b8:	2120      	movs	r1, #32
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c6:	187a      	adds	r2, r7, r1
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_TIM3_Init+0xd0>)
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f002 fb0f 	bl	8002ef0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008d6:	f7ff ff44 	bl	8000762 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2260      	movs	r2, #96	; 0x60
 80008de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f2:	1d39      	adds	r1, r7, #4
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_TIM3_Init+0xd0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 ff9d 	bl	8002838 <HAL_TIM_PWM_ConfigChannel>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000902:	f7ff ff2e 	bl	8000762 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000906:	1d39      	adds	r1, r7, #4
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_TIM3_Init+0xd0>)
 800090a:	2204      	movs	r2, #4
 800090c:	0018      	movs	r0, r3
 800090e:	f001 ff93 	bl	8002838 <HAL_TIM_PWM_ConfigChannel>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8000916:	f7ff ff24 	bl	8000762 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <MX_TIM3_Init+0xd0>)
 800091c:	0018      	movs	r0, r3
 800091e:	f000 f827 	bl	8000970 <HAL_TIM_MspPostInit>

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b00a      	add	sp, #40	; 0x28
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	2000036c 	.word	0x2000036c
 8000930:	40000400 	.word	0x40000400

08000934 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <HAL_TIM_PWM_MspInit+0x34>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d10b      	bne.n	800095e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_TIM_PWM_MspInit+0x38>)
 8000948:	69da      	ldr	r2, [r3, #28]
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_TIM_PWM_MspInit+0x38>)
 800094c:	2102      	movs	r1, #2
 800094e:	430a      	orrs	r2, r1
 8000950:	61da      	str	r2, [r3, #28]
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_TIM_PWM_MspInit+0x38>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	2202      	movs	r2, #2
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b004      	add	sp, #16
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40000400 	.word	0x40000400
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	240c      	movs	r4, #12
 800097a:	193b      	adds	r3, r7, r4
 800097c:	0018      	movs	r0, r3
 800097e:	2314      	movs	r3, #20
 8000980:	001a      	movs	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	f003 fae5 	bl	8003f52 <memset>
  if(timHandle->Instance==TIM3)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <HAL_TIM_MspPostInit+0x74>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d124      	bne.n	80009dc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_TIM_MspPostInit+0x78>)
 8000994:	695a      	ldr	r2, [r3, #20]
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_TIM_MspPostInit+0x78>)
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	0289      	lsls	r1, r1, #10
 800099c:	430a      	orrs	r2, r1
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_TIM_MspPostInit+0x78>)
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	029b      	lsls	r3, r3, #10
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_1_Pin|MOTOR_PWM_2_Pin;
 80009ae:	0021      	movs	r1, r4
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	22c0      	movs	r2, #192	; 0xc0
 80009b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2202      	movs	r2, #2
 80009ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2201      	movs	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	187a      	adds	r2, r7, r1
 80009d0:	2390      	movs	r3, #144	; 0x90
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 f9ea 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b009      	add	sp, #36	; 0x24
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	40000400 	.word	0x40000400
 80009e8:	40021000 	.word	0x40021000

080009ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_USART2_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 80009f8:	22e1      	movs	r2, #225	; 0xe1
 80009fa:	0252      	lsls	r2, r2, #9
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a30:	0018      	movs	r0, r3
 8000a32:	f002 fab5 	bl	8002fa0 <HAL_UART_Init>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f7ff fe92 	bl	8000762 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200003b4 	.word	0x200003b4
 8000a48:	40004400 	.word	0x40004400

08000a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b08b      	sub	sp, #44	; 0x2c
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	2414      	movs	r4, #20
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	0018      	movs	r0, r3
 8000a5a:	2314      	movs	r3, #20
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f003 fa77 	bl	8003f52 <memset>
  if(uartHandle->Instance==USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <HAL_UART_MspInit+0x90>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d132      	bne.n	8000ad4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_UART_MspInit+0x94>)
 8000a70:	69da      	ldr	r2, [r3, #28]
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0x94>)
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	0289      	lsls	r1, r1, #10
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	61da      	str	r2, [r3, #28]
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_UART_MspInit+0x94>)
 8000a7e:	69da      	ldr	r2, [r3, #28]
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	029b      	lsls	r3, r3, #10
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_UART_MspInit+0x94>)
 8000a8c:	695a      	ldr	r2, [r3, #20]
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0x94>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	0289      	lsls	r1, r1, #10
 8000a94:	430a      	orrs	r2, r1
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0x94>)
 8000a9a:	695a      	ldr	r2, [r3, #20]
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	029b      	lsls	r3, r3, #10
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa6:	0021      	movs	r1, r4
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	187a      	adds	r2, r7, r1
 8000ac8:	2390      	movs	r3, #144	; 0x90
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	0011      	movs	r1, r2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 f96e 	bl	8000db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b00b      	add	sp, #44	; 0x2c
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aea:	490e      	ldr	r1, [pc, #56]	; (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aec:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b00:	4c0b      	ldr	r4, [pc, #44]	; (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b0e:	f7ff fe9f 	bl	8000850 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b12:	f003 f9f1 	bl	8003ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b16:	f7ff fda7 	bl	8000668 <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   r0, =_estack
 8000b1c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8000b28:	08004948 	.word	0x08004948
  ldr r2, =_sbss
 8000b2c:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8000b30:	20000550 	.word	0x20000550

08000b34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_IRQHandler>
	...

08000b38 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_Init+0x24>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_Init+0x24>)
 8000b42:	2110      	movs	r1, #16
 8000b44:	430a      	orrs	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 f809 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4e:	f7ff fe0d 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	40022000 	.word	0x40022000

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_InitTick+0x5c>)
 8000b6a:	681c      	ldr	r4, [r3, #0]
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_InitTick+0x60>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	0019      	movs	r1, r3
 8000b72:	23fa      	movs	r3, #250	; 0xfa
 8000b74:	0098      	lsls	r0, r3, #2
 8000b76:	f7ff fad9 	bl	800012c <__udivsi3>
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	0020      	movs	r0, r4
 8000b80:	f7ff fad4 	bl	800012c <__udivsi3>
 8000b84:	0003      	movs	r3, r0
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 f905 	bl	8000d96 <HAL_SYSTICK_Config>
 8000b8c:	1e03      	subs	r3, r0, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e00f      	b.n	8000bb4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d80b      	bhi.n	8000bb2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	425b      	negs	r3, r3
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 f8e2 	bl	8000d6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_InitTick+0x64>)
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b003      	add	sp, #12
 8000bba:	bd90      	pop	{r4, r7, pc}
 8000bbc:	20000258 	.word	0x20000258
 8000bc0:	20000260 	.word	0x20000260
 8000bc4:	2000025c 	.word	0x2000025c

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x20>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	18d2      	adds	r2, r2, r3
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_IncTick+0x20>)
 8000bda:	601a      	str	r2, [r3, #0]
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	20000260 	.word	0x20000260
 8000be8:	20000438 	.word	0x20000438

08000bec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	20000438 	.word	0x20000438

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff fff0 	bl	8000bec <HAL_GetTick>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3301      	adds	r3, #1
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_Delay+0x44>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	001a      	movs	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	189b      	adds	r3, r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	f7ff ffe0 	bl	8000bec <HAL_GetTick>
 8000c2c:	0002      	movs	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	20000260 	.word	0x20000260

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	0002      	movs	r2, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c5c:	d828      	bhi.n	8000cb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5e:	4a2f      	ldr	r2, [pc, #188]	; (8000d1c <__NVIC_SetPriority+0xd4>)
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	33c0      	adds	r3, #192	; 0xc0
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	589b      	ldr	r3, [r3, r2]
 8000c6e:	1dfa      	adds	r2, r7, #7
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	0011      	movs	r1, r2
 8000c74:	2203      	movs	r2, #3
 8000c76:	400a      	ands	r2, r1
 8000c78:	00d2      	lsls	r2, r2, #3
 8000c7a:	21ff      	movs	r1, #255	; 0xff
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	000a      	movs	r2, r1
 8000c80:	43d2      	mvns	r2, r2
 8000c82:	401a      	ands	r2, r3
 8000c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	019b      	lsls	r3, r3, #6
 8000c8a:	22ff      	movs	r2, #255	; 0xff
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	2303      	movs	r3, #3
 8000c96:	4003      	ands	r3, r0
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9c:	481f      	ldr	r0, [pc, #124]	; (8000d1c <__NVIC_SetPriority+0xd4>)
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	33c0      	adds	r3, #192	; 0xc0
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cae:	e031      	b.n	8000d14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <__NVIC_SetPriority+0xd8>)
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	230f      	movs	r3, #15
 8000cba:	400b      	ands	r3, r1
 8000cbc:	3b08      	subs	r3, #8
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3306      	adds	r3, #6
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	18d3      	adds	r3, r2, r3
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	1dfa      	adds	r2, r7, #7
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	0011      	movs	r1, r2
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	00d2      	lsls	r2, r2, #3
 8000cd6:	21ff      	movs	r1, #255	; 0xff
 8000cd8:	4091      	lsls	r1, r2
 8000cda:	000a      	movs	r2, r1
 8000cdc:	43d2      	mvns	r2, r2
 8000cde:	401a      	ands	r2, r3
 8000ce0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	401a      	ands	r2, r3
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	0018      	movs	r0, r3
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	4003      	ands	r3, r0
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <__NVIC_SetPriority+0xd8>)
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	001c      	movs	r4, r3
 8000d00:	230f      	movs	r3, #15
 8000d02:	4023      	ands	r3, r4
 8000d04:	3b08      	subs	r3, #8
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	3306      	adds	r3, #6
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	18c3      	adds	r3, r0, r3
 8000d10:	3304      	adds	r3, #4
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b003      	add	sp, #12
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	1e5a      	subs	r2, r3, #1
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	045b      	lsls	r3, r3, #17
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d301      	bcc.n	8000d3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e010      	b.n	8000d5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SysTick_Config+0x44>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	3a01      	subs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d44:	2301      	movs	r3, #1
 8000d46:	425b      	negs	r3, r3
 8000d48:	2103      	movs	r1, #3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff ff7c 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x44>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x44>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	210f      	movs	r1, #15
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	1c02      	adds	r2, r0, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ff5d 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b004      	add	sp, #16
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff ffbf 	bl	8000d24 <SysTick_Config>
 8000da6:	0003      	movs	r3, r0
}
 8000da8:	0018      	movs	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e14f      	b.n	8001060 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d100      	bne.n	8000dd8 <HAL_GPIO_Init+0x28>
 8000dd6:	e140      	b.n	800105a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d005      	beq.n	8000df0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d130      	bne.n	8000e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	409a      	lsls	r2, r3
 8000e12:	0013      	movs	r3, r2
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e26:	2201      	movs	r2, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d017      	beq.n	8000e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d123      	bne.n	8000ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	58d3      	ldr	r3, [r2, r3]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2207      	movs	r2, #7
 8000eac:	4013      	ands	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2107      	movs	r1, #7
 8000ec6:	400b      	ands	r3, r1
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	6939      	ldr	r1, [r7, #16]
 8000ee0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	401a      	ands	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	23c0      	movs	r3, #192	; 0xc0
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x174>
 8000f22:	e09a      	b.n	800105a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f24:	4b54      	ldr	r3, [pc, #336]	; (8001078 <HAL_GPIO_Init+0x2c8>)
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	4b53      	ldr	r3, [pc, #332]	; (8001078 <HAL_GPIO_Init+0x2c8>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	619a      	str	r2, [r3, #24]
 8000f30:	4b51      	ldr	r3, [pc, #324]	; (8001078 <HAL_GPIO_Init+0x2c8>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	2201      	movs	r2, #1
 8000f36:	4013      	ands	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	; (800107c <HAL_GPIO_Init+0x2cc>)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	589b      	ldr	r3, [r3, r2]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	409a      	lsls	r2, r3
 8000f56:	0013      	movs	r3, r2
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	2390      	movs	r3, #144	; 0x90
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d013      	beq.n	8000f92 <HAL_GPIO_Init+0x1e2>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a44      	ldr	r2, [pc, #272]	; (8001080 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d00d      	beq.n	8000f8e <HAL_GPIO_Init+0x1de>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a43      	ldr	r2, [pc, #268]	; (8001084 <HAL_GPIO_Init+0x2d4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x1da>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a42      	ldr	r2, [pc, #264]	; (8001088 <HAL_GPIO_Init+0x2d8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d101      	bne.n	8000f86 <HAL_GPIO_Init+0x1d6>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x1e4>
 8000f86:	2305      	movs	r3, #5
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x1e4>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x1e4>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x1e4>
 8000f92:	2300      	movs	r3, #0
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	2103      	movs	r1, #3
 8000f98:	400a      	ands	r2, r1
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa4:	4935      	ldr	r1, [pc, #212]	; (800107c <HAL_GPIO_Init+0x2cc>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	025b      	lsls	r3, r3, #9
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	029b      	lsls	r3, r3, #10
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	035b      	lsls	r3, r3, #13
 800101e:	4013      	ands	r3, r2
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_GPIO_Init+0x2dc>)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43da      	mvns	r2, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	039b      	lsls	r3, r3, #14
 8001048:	4013      	ands	r3, r2
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e13      	subs	r3, r2, #0
 800106a:	d000      	beq.n	800106e <HAL_GPIO_Init+0x2be>
 800106c:	e6a8      	b.n	8000dc0 <HAL_GPIO_Init+0x10>
  } 
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b006      	add	sp, #24
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000
 8001080:	48000400 	.word	0x48000400
 8001084:	48000800 	.word	0x48000800
 8001088:	48000c00 	.word	0x48000c00
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	0008      	movs	r0, r1
 800109a:	0011      	movs	r1, r2
 800109c:	1cbb      	adds	r3, r7, #2
 800109e:	1c02      	adds	r2, r0, #0
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	1c7b      	adds	r3, r7, #1
 80010a4:	1c0a      	adds	r2, r1, #0
 80010a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a8:	1c7b      	adds	r3, r7, #1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b0:	1cbb      	adds	r3, r7, #2
 80010b2:	881a      	ldrh	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b8:	e003      	b.n	80010c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ba:	1cbb      	adds	r3, r7, #2
 80010bc:	881a      	ldrh	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e082      	b.n	80011e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2241      	movs	r2, #65	; 0x41
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d107      	bne.n	80010fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2240      	movs	r2, #64	; 0x40
 80010ee:	2100      	movs	r1, #0
 80010f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff f991 	bl	800041c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2241      	movs	r2, #65	; 0x41
 80010fe:	2124      	movs	r1, #36	; 0x24
 8001100:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	438a      	bics	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4934      	ldr	r1, [pc, #208]	; (80011ec <HAL_I2C_Init+0x120>)
 800111c:	400a      	ands	r2, r1
 800111e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4931      	ldr	r1, [pc, #196]	; (80011f0 <HAL_I2C_Init+0x124>)
 800112c:	400a      	ands	r2, r1
 800112e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d108      	bne.n	800114a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0209      	lsls	r1, r1, #8
 8001144:	430a      	orrs	r2, r1
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	e007      	b.n	800115a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2184      	movs	r1, #132	; 0x84
 8001154:	0209      	lsls	r1, r1, #8
 8001156:	430a      	orrs	r2, r1
 8001158:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d104      	bne.n	800116c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	491f      	ldr	r1, [pc, #124]	; (80011f4 <HAL_I2C_Init+0x128>)
 8001178:	430a      	orrs	r2, r1
 800117a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	491a      	ldr	r1, [pc, #104]	; (80011f0 <HAL_I2C_Init+0x124>)
 8001188:	400a      	ands	r2, r1
 800118a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	431a      	orrs	r2, r3
 8001196:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69d9      	ldr	r1, [r3, #28]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1a      	ldr	r2, [r3, #32]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	430a      	orrs	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2241      	movs	r2, #65	; 0x41
 80011d0:	2120      	movs	r1, #32
 80011d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2242      	movs	r2, #66	; 0x42
 80011de:	2100      	movs	r1, #0
 80011e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b002      	add	sp, #8
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	f0ffffff 	.word	0xf0ffffff
 80011f0:	ffff7fff 	.word	0xffff7fff
 80011f4:	02008000 	.word	0x02008000

080011f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	0008      	movs	r0, r1
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	0019      	movs	r1, r3
 8001206:	230a      	movs	r3, #10
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	1c02      	adds	r2, r0, #0
 800120c:	801a      	strh	r2, [r3, #0]
 800120e:	2308      	movs	r3, #8
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	1c0a      	adds	r2, r1, #0
 8001214:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2241      	movs	r2, #65	; 0x41
 800121a:	5c9b      	ldrb	r3, [r3, r2]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b20      	cmp	r3, #32
 8001220:	d000      	beq.n	8001224 <HAL_I2C_Master_Transmit+0x2c>
 8001222:	e0e7      	b.n	80013f4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2240      	movs	r2, #64	; 0x40
 8001228:	5c9b      	ldrb	r3, [r3, r2]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_I2C_Master_Transmit+0x3a>
 800122e:	2302      	movs	r3, #2
 8001230:	e0e1      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2240      	movs	r2, #64	; 0x40
 8001236:	2101      	movs	r1, #1
 8001238:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800123a:	f7ff fcd7 	bl	8000bec <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	0219      	lsls	r1, r3, #8
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2319      	movs	r3, #25
 800124e:	2201      	movs	r2, #1
 8001250:	f000 fa04 	bl	800165c <I2C_WaitOnFlagUntilTimeout>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0cc      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2241      	movs	r2, #65	; 0x41
 8001260:	2121      	movs	r1, #33	; 0x21
 8001262:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2242      	movs	r2, #66	; 0x42
 8001268:	2110      	movs	r1, #16
 800126a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2208      	movs	r2, #8
 800127c:	18ba      	adds	r2, r7, r2
 800127e:	8812      	ldrh	r2, [r2, #0]
 8001280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800128c:	b29b      	uxth	r3, r3
 800128e:	2bff      	cmp	r3, #255	; 0xff
 8001290:	d911      	bls.n	80012b6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	22ff      	movs	r2, #255	; 0xff
 8001296:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129c:	b2da      	uxtb	r2, r3
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	045c      	lsls	r4, r3, #17
 80012a2:	230a      	movs	r3, #10
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	8819      	ldrh	r1, [r3, #0]
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	4b55      	ldr	r3, [pc, #340]	; (8001400 <HAL_I2C_Master_Transmit+0x208>)
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	0023      	movs	r3, r4
 80012b0:	f000 fb74 	bl	800199c <I2C_TransferConfig>
 80012b4:	e075      	b.n	80013a2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	049c      	lsls	r4, r3, #18
 80012ca:	230a      	movs	r3, #10
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	8819      	ldrh	r1, [r3, #0]
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_I2C_Master_Transmit+0x208>)
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	0023      	movs	r3, r4
 80012d8:	f000 fb60 	bl	800199c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80012dc:	e061      	b.n	80013a2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	0018      	movs	r0, r3
 80012e6:	f000 f9f8 	bl	80016da <I2C_WaitOnTXISFlagUntilTimeout>
 80012ea:	1e03      	subs	r3, r0, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e081      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131a:	3b01      	subs	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001326:	b29b      	uxth	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d03a      	beq.n	80013a2 <HAL_I2C_Master_Transmit+0x1aa>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001330:	2b00      	cmp	r3, #0
 8001332:	d136      	bne.n	80013a2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	0013      	movs	r3, r2
 800133e:	2200      	movs	r2, #0
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	f000 f98b 	bl	800165c <I2C_WaitOnFlagUntilTimeout>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d001      	beq.n	800134e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e053      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001352:	b29b      	uxth	r3, r3
 8001354:	2bff      	cmp	r3, #255	; 0xff
 8001356:	d911      	bls.n	800137c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	22ff      	movs	r2, #255	; 0xff
 800135c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001362:	b2da      	uxtb	r2, r3
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	045c      	lsls	r4, r3, #17
 8001368:	230a      	movs	r3, #10
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	8819      	ldrh	r1, [r3, #0]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	2300      	movs	r3, #0
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	0023      	movs	r3, r4
 8001376:	f000 fb11 	bl	800199c <I2C_TransferConfig>
 800137a:	e012      	b.n	80013a2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001380:	b29a      	uxth	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138a:	b2da      	uxtb	r2, r3
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	049c      	lsls	r4, r3, #18
 8001390:	230a      	movs	r3, #10
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	8819      	ldrh	r1, [r3, #0]
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	2300      	movs	r3, #0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	0023      	movs	r3, r4
 800139e:	f000 fafd 	bl	800199c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d198      	bne.n	80012de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 f9d0 	bl	8001758 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e01a      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2220      	movs	r2, #32
 80013c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	490c      	ldr	r1, [pc, #48]	; (8001404 <HAL_I2C_Master_Transmit+0x20c>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2241      	movs	r2, #65	; 0x41
 80013dc:	2120      	movs	r1, #32
 80013de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2242      	movs	r2, #66	; 0x42
 80013e4:	2100      	movs	r1, #0
 80013e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	2100      	movs	r1, #0
 80013ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e000      	b.n	80013f6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80013f4:	2302      	movs	r3, #2
  }
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b007      	add	sp, #28
 80013fc:	bd90      	pop	{r4, r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	80002000 	.word	0x80002000
 8001404:	fe00e800 	.word	0xfe00e800

08001408 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af02      	add	r7, sp, #8
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	0008      	movs	r0, r1
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	0019      	movs	r1, r3
 8001416:	230a      	movs	r3, #10
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	1c02      	adds	r2, r0, #0
 800141c:	801a      	strh	r2, [r3, #0]
 800141e:	2308      	movs	r3, #8
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	1c0a      	adds	r2, r1, #0
 8001424:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2241      	movs	r2, #65	; 0x41
 800142a:	5c9b      	ldrb	r3, [r3, r2]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b20      	cmp	r3, #32
 8001430:	d000      	beq.n	8001434 <HAL_I2C_Master_Receive+0x2c>
 8001432:	e0e8      	b.n	8001606 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	5c9b      	ldrb	r3, [r3, r2]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_I2C_Master_Receive+0x3a>
 800143e:	2302      	movs	r3, #2
 8001440:	e0e2      	b.n	8001608 <HAL_I2C_Master_Receive+0x200>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2240      	movs	r2, #64	; 0x40
 8001446:	2101      	movs	r1, #1
 8001448:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800144a:	f7ff fbcf 	bl	8000bec <HAL_GetTick>
 800144e:	0003      	movs	r3, r0
 8001450:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	0219      	lsls	r1, r3, #8
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2319      	movs	r3, #25
 800145e:	2201      	movs	r2, #1
 8001460:	f000 f8fc 	bl	800165c <I2C_WaitOnFlagUntilTimeout>
 8001464:	1e03      	subs	r3, r0, #0
 8001466:	d001      	beq.n	800146c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0cd      	b.n	8001608 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2241      	movs	r2, #65	; 0x41
 8001470:	2122      	movs	r1, #34	; 0x22
 8001472:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2242      	movs	r2, #66	; 0x42
 8001478:	2110      	movs	r1, #16
 800147a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2208      	movs	r2, #8
 800148c:	18ba      	adds	r2, r7, r2
 800148e:	8812      	ldrh	r2, [r2, #0]
 8001490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149c:	b29b      	uxth	r3, r3
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d911      	bls.n	80014c6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	22ff      	movs	r2, #255	; 0xff
 80014a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	045c      	lsls	r4, r3, #17
 80014b2:	230a      	movs	r3, #10
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	8819      	ldrh	r1, [r3, #0]
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	4b55      	ldr	r3, [pc, #340]	; (8001610 <HAL_I2C_Master_Receive+0x208>)
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	0023      	movs	r3, r4
 80014c0:	f000 fa6c 	bl	800199c <I2C_TransferConfig>
 80014c4:	e076      	b.n	80015b4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	049c      	lsls	r4, r3, #18
 80014da:	230a      	movs	r3, #10
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	8819      	ldrh	r1, [r3, #0]
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	4b4b      	ldr	r3, [pc, #300]	; (8001610 <HAL_I2C_Master_Receive+0x208>)
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	0023      	movs	r3, r4
 80014e8:	f000 fa58 	bl	800199c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80014ec:	e062      	b.n	80015b4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	0018      	movs	r0, r3
 80014f6:	f000 f96b 	bl	80017d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014fa:	1e03      	subs	r3, r0, #0
 80014fc:	d001      	beq.n	8001502 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e082      	b.n	8001608 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151e:	3b01      	subs	r3, #1
 8001520:	b29a      	uxth	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152a:	b29b      	uxth	r3, r3
 800152c:	3b01      	subs	r3, #1
 800152e:	b29a      	uxth	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d03a      	beq.n	80015b4 <HAL_I2C_Master_Receive+0x1ac>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001542:	2b00      	cmp	r3, #0
 8001544:	d136      	bne.n	80015b4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	0013      	movs	r3, r2
 8001550:	2200      	movs	r2, #0
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	f000 f882 	bl	800165c <I2C_WaitOnFlagUntilTimeout>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e053      	b.n	8001608 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001564:	b29b      	uxth	r3, r3
 8001566:	2bff      	cmp	r3, #255	; 0xff
 8001568:	d911      	bls.n	800158e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	22ff      	movs	r2, #255	; 0xff
 800156e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001574:	b2da      	uxtb	r2, r3
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	045c      	lsls	r4, r3, #17
 800157a:	230a      	movs	r3, #10
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	8819      	ldrh	r1, [r3, #0]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	2300      	movs	r3, #0
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	0023      	movs	r3, r4
 8001588:	f000 fa08 	bl	800199c <I2C_TransferConfig>
 800158c:	e012      	b.n	80015b4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29a      	uxth	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800159c:	b2da      	uxtb	r2, r3
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	049c      	lsls	r4, r3, #18
 80015a2:	230a      	movs	r3, #10
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	8819      	ldrh	r1, [r3, #0]
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	2300      	movs	r3, #0
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	0023      	movs	r3, r4
 80015b0:	f000 f9f4 	bl	800199c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d197      	bne.n	80014ee <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f000 f8c7 	bl	8001758 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015ca:	1e03      	subs	r3, r0, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e01a      	b.n	8001608 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2220      	movs	r2, #32
 80015d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	490b      	ldr	r1, [pc, #44]	; (8001614 <HAL_I2C_Master_Receive+0x20c>)
 80015e6:	400a      	ands	r2, r1
 80015e8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2241      	movs	r2, #65	; 0x41
 80015ee:	2120      	movs	r1, #32
 80015f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2242      	movs	r2, #66	; 0x42
 80015f6:	2100      	movs	r1, #0
 80015f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	2100      	movs	r1, #0
 8001600:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001606:	2302      	movs	r3, #2
  }
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b007      	add	sp, #28
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	80002400 	.word	0x80002400
 8001614:	fe00e800 	.word	0xfe00e800

08001618 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2202      	movs	r2, #2
 8001628:	4013      	ands	r3, r2
 800162a:	2b02      	cmp	r3, #2
 800162c:	d103      	bne.n	8001636 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2201      	movs	r2, #1
 800163e:	4013      	ands	r3, r2
 8001640:	2b01      	cmp	r3, #1
 8001642:	d007      	beq.n	8001654 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699a      	ldr	r2, [r3, #24]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2101      	movs	r1, #1
 8001650:	430a      	orrs	r2, r1
 8001652:	619a      	str	r2, [r3, #24]
  }
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}

0800165c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	1dfb      	adds	r3, r7, #7
 800166a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800166c:	e021      	b.n	80016b2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	d01e      	beq.n	80016b2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001674:	f7ff faba 	bl	8000bec <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d302      	bcc.n	800168a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d113      	bne.n	80016b2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	2220      	movs	r2, #32
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2241      	movs	r2, #65	; 0x41
 800169a:	2120      	movs	r1, #32
 800169c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2242      	movs	r2, #66	; 0x42
 80016a2:	2100      	movs	r1, #0
 80016a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2240      	movs	r2, #64	; 0x40
 80016aa:	2100      	movs	r1, #0
 80016ac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	4013      	ands	r3, r2
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	425a      	negs	r2, r3
 80016c2:	4153      	adcs	r3, r2
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	001a      	movs	r2, r3
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d0ce      	beq.n	800166e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bd80      	pop	{r7, pc}

080016da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016e6:	e02b      	b.n	8001740 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	0018      	movs	r0, r3
 80016f0:	f000 f8da 	bl	80018a8 <I2C_IsAcknowledgeFailed>
 80016f4:	1e03      	subs	r3, r0, #0
 80016f6:	d001      	beq.n	80016fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e029      	b.n	8001750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	3301      	adds	r3, #1
 8001700:	d01e      	beq.n	8001740 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001702:	f7ff fa73 	bl	8000bec <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	429a      	cmp	r2, r3
 8001710:	d302      	bcc.n	8001718 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d113      	bne.n	8001740 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	2220      	movs	r2, #32
 800171e:	431a      	orrs	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2241      	movs	r2, #65	; 0x41
 8001728:	2120      	movs	r1, #32
 800172a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2242      	movs	r2, #66	; 0x42
 8001730:	2100      	movs	r1, #0
 8001732:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2240      	movs	r2, #64	; 0x40
 8001738:	2100      	movs	r1, #0
 800173a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e007      	b.n	8001750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2202      	movs	r2, #2
 8001748:	4013      	ands	r3, r2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d1cc      	bne.n	80016e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b004      	add	sp, #16
 8001756:	bd80      	pop	{r7, pc}

08001758 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001764:	e028      	b.n	80017b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	0018      	movs	r0, r3
 800176e:	f000 f89b 	bl	80018a8 <I2C_IsAcknowledgeFailed>
 8001772:	1e03      	subs	r3, r0, #0
 8001774:	d001      	beq.n	800177a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e026      	b.n	80017c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800177a:	f7ff fa37 	bl	8000bec <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	429a      	cmp	r2, r3
 8001788:	d302      	bcc.n	8001790 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d113      	bne.n	80017b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	2220      	movs	r2, #32
 8001796:	431a      	orrs	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2241      	movs	r2, #65	; 0x41
 80017a0:	2120      	movs	r1, #32
 80017a2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2242      	movs	r2, #66	; 0x42
 80017a8:	2100      	movs	r1, #0
 80017aa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	2100      	movs	r1, #0
 80017b2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e007      	b.n	80017c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2220      	movs	r2, #32
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	d1cf      	bne.n	8001766 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b004      	add	sp, #16
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80017dc:	e055      	b.n	800188a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f000 f85f 	bl	80018a8 <I2C_IsAcknowledgeFailed>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d001      	beq.n	80017f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e053      	b.n	800189a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2220      	movs	r2, #32
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b20      	cmp	r3, #32
 80017fe:	d129      	bne.n	8001854 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2204      	movs	r2, #4
 8001808:	4013      	ands	r3, r2
 800180a:	2b04      	cmp	r3, #4
 800180c:	d105      	bne.n	800181a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e03f      	b.n	800189a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2220      	movs	r2, #32
 8001820:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	491d      	ldr	r1, [pc, #116]	; (80018a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800182e:	400a      	ands	r2, r1
 8001830:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2241      	movs	r2, #65	; 0x41
 800183c:	2120      	movs	r1, #32
 800183e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2242      	movs	r2, #66	; 0x42
 8001844:	2100      	movs	r1, #0
 8001846:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2240      	movs	r2, #64	; 0x40
 800184c:	2100      	movs	r1, #0
 800184e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e022      	b.n	800189a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001854:	f7ff f9ca 	bl	8000bec <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	429a      	cmp	r2, r3
 8001862:	d302      	bcc.n	800186a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10f      	bne.n	800188a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	2220      	movs	r2, #32
 8001870:	431a      	orrs	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2241      	movs	r2, #65	; 0x41
 800187a:	2120      	movs	r1, #32
 800187c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2240      	movs	r2, #64	; 0x40
 8001882:	2100      	movs	r1, #0
 8001884:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e007      	b.n	800189a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2204      	movs	r2, #4
 8001892:	4013      	ands	r3, r2
 8001894:	2b04      	cmp	r3, #4
 8001896:	d1a2      	bne.n	80017de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b004      	add	sp, #16
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	fe00e800 	.word	0xfe00e800

080018a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2210      	movs	r2, #16
 80018bc:	4013      	ands	r3, r2
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d164      	bne.n	800198c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	049b      	lsls	r3, r3, #18
 80018cc:	401a      	ands	r2, r3
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	049b      	lsls	r3, r3, #18
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d02b      	beq.n	800192e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	01c9      	lsls	r1, r1, #7
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018e8:	e021      	b.n	800192e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	3301      	adds	r3, #1
 80018ee:	d01e      	beq.n	800192e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f0:	f7ff f97c 	bl	8000bec <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d302      	bcc.n	8001906 <I2C_IsAcknowledgeFailed+0x5e>
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d113      	bne.n	800192e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	2220      	movs	r2, #32
 800190c:	431a      	orrs	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2241      	movs	r2, #65	; 0x41
 8001916:	2120      	movs	r1, #32
 8001918:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2242      	movs	r2, #66	; 0x42
 800191e:	2100      	movs	r1, #0
 8001920:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2240      	movs	r2, #64	; 0x40
 8001926:	2100      	movs	r1, #0
 8001928:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e02f      	b.n	800198e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2220      	movs	r2, #32
 8001936:	4013      	ands	r3, r2
 8001938:	2b20      	cmp	r3, #32
 800193a:	d1d6      	bne.n	80018ea <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2210      	movs	r2, #16
 8001942:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2220      	movs	r2, #32
 800194a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	0018      	movs	r0, r3
 8001950:	f7ff fe62 	bl	8001618 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	490e      	ldr	r1, [pc, #56]	; (8001998 <I2C_IsAcknowledgeFailed+0xf0>)
 8001960:	400a      	ands	r2, r1
 8001962:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	2204      	movs	r2, #4
 800196a:	431a      	orrs	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2241      	movs	r2, #65	; 0x41
 8001974:	2120      	movs	r1, #32
 8001976:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2242      	movs	r2, #66	; 0x42
 800197c:	2100      	movs	r1, #0
 800197e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2240      	movs	r2, #64	; 0x40
 8001984:	2100      	movs	r1, #0
 8001986:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	fe00e800 	.word	0xfe00e800

0800199c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	0008      	movs	r0, r1
 80019a6:	0011      	movs	r1, r2
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	240a      	movs	r4, #10
 80019ac:	193b      	adds	r3, r7, r4
 80019ae:	1c02      	adds	r2, r0, #0
 80019b0:	801a      	strh	r2, [r3, #0]
 80019b2:	2009      	movs	r0, #9
 80019b4:	183b      	adds	r3, r7, r0
 80019b6:	1c0a      	adds	r2, r1, #0
 80019b8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	6a3a      	ldr	r2, [r7, #32]
 80019c2:	0d51      	lsrs	r1, r2, #21
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	00d2      	lsls	r2, r2, #3
 80019c8:	400a      	ands	r2, r1
 80019ca:	490e      	ldr	r1, [pc, #56]	; (8001a04 <I2C_TransferConfig+0x68>)
 80019cc:	430a      	orrs	r2, r1
 80019ce:	43d2      	mvns	r2, r2
 80019d0:	401a      	ands	r2, r3
 80019d2:	0011      	movs	r1, r2
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	059b      	lsls	r3, r3, #22
 80019da:	0d9a      	lsrs	r2, r3, #22
 80019dc:	183b      	adds	r3, r7, r0
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	0418      	lsls	r0, r3, #16
 80019e2:	23ff      	movs	r3, #255	; 0xff
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	4003      	ands	r3, r0
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b005      	add	sp, #20
 8001a00:	bd90      	pop	{r4, r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	03ff63ff 	.word	0x03ff63ff

08001a08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2241      	movs	r2, #65	; 0x41
 8001a16:	5c9b      	ldrb	r3, [r3, r2]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d138      	bne.n	8001a90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2240      	movs	r2, #64	; 0x40
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e032      	b.n	8001a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2240      	movs	r2, #64	; 0x40
 8001a30:	2101      	movs	r1, #1
 8001a32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2241      	movs	r2, #65	; 0x41
 8001a38:	2124      	movs	r1, #36	; 0x24
 8001a3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2101      	movs	r1, #1
 8001a48:	438a      	bics	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4911      	ldr	r1, [pc, #68]	; (8001a9c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a58:	400a      	ands	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6819      	ldr	r1, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2101      	movs	r1, #1
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2241      	movs	r2, #65	; 0x41
 8001a80:	2120      	movs	r1, #32
 8001a82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
  }
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b002      	add	sp, #8
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	ffffefff 	.word	0xffffefff

08001aa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2241      	movs	r2, #65	; 0x41
 8001aae:	5c9b      	ldrb	r3, [r3, r2]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	d139      	bne.n	8001b2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2240      	movs	r2, #64	; 0x40
 8001aba:	5c9b      	ldrb	r3, [r3, r2]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e033      	b.n	8001b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	2101      	movs	r1, #1
 8001aca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2241      	movs	r2, #65	; 0x41
 8001ad0:	2124      	movs	r1, #36	; 0x24
 8001ad2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2101      	movs	r1, #1
 8001ae0:	438a      	bics	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2101      	movs	r1, #1
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2241      	movs	r2, #65	; 0x41
 8001b1a:	2120      	movs	r1, #32
 8001b1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2240      	movs	r2, #64	; 0x40
 8001b22:	2100      	movs	r1, #0
 8001b24:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b2a:	2302      	movs	r3, #2
  }
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b004      	add	sp, #16
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	fffff0ff 	.word	0xfffff0ff

08001b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e301      	b.n	800214e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	d100      	bne.n	8001b56 <HAL_RCC_OscConfig+0x1e>
 8001b54:	e08d      	b.n	8001c72 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b56:	4bc3      	ldr	r3, [pc, #780]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d00e      	beq.n	8001b80 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b62:	4bc0      	ldr	r3, [pc, #768]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	220c      	movs	r2, #12
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d116      	bne.n	8001b9c <HAL_RCC_OscConfig+0x64>
 8001b6e:	4bbd      	ldr	r3, [pc, #756]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	025b      	lsls	r3, r3, #9
 8001b76:	401a      	ands	r2, r3
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	025b      	lsls	r3, r3, #9
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d10d      	bne.n	8001b9c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	4bb8      	ldr	r3, [pc, #736]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	029b      	lsls	r3, r3, #10
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d100      	bne.n	8001b8e <HAL_RCC_OscConfig+0x56>
 8001b8c:	e070      	b.n	8001c70 <HAL_RCC_OscConfig+0x138>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d000      	beq.n	8001b98 <HAL_RCC_OscConfig+0x60>
 8001b96:	e06b      	b.n	8001c70 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e2d8      	b.n	800214e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x7c>
 8001ba4:	4baf      	ldr	r3, [pc, #700]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4bae      	ldr	r3, [pc, #696]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	0249      	lsls	r1, r1, #9
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e02f      	b.n	8001c14 <HAL_RCC_OscConfig+0xdc>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10c      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x9e>
 8001bbc:	4ba9      	ldr	r3, [pc, #676]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4ba8      	ldr	r3, [pc, #672]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	49a9      	ldr	r1, [pc, #676]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	4ba6      	ldr	r3, [pc, #664]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4ba5      	ldr	r3, [pc, #660]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	49a7      	ldr	r1, [pc, #668]	; (8001e6c <HAL_RCC_OscConfig+0x334>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	e01e      	b.n	8001c14 <HAL_RCC_OscConfig+0xdc>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d10e      	bne.n	8001bfc <HAL_RCC_OscConfig+0xc4>
 8001bde:	4ba1      	ldr	r3, [pc, #644]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4ba0      	ldr	r3, [pc, #640]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	02c9      	lsls	r1, r1, #11
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	4b9d      	ldr	r3, [pc, #628]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b9c      	ldr	r3, [pc, #624]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	2180      	movs	r1, #128	; 0x80
 8001bf4:	0249      	lsls	r1, r1, #9
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0xdc>
 8001bfc:	4b99      	ldr	r3, [pc, #612]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b98      	ldr	r3, [pc, #608]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	4999      	ldr	r1, [pc, #612]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	4b96      	ldr	r3, [pc, #600]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b95      	ldr	r3, [pc, #596]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001c0e:	4997      	ldr	r1, [pc, #604]	; (8001e6c <HAL_RCC_OscConfig+0x334>)
 8001c10:	400a      	ands	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d014      	beq.n	8001c46 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7fe ffe6 	bl	8000bec <HAL_GetTick>
 8001c20:	0003      	movs	r3, r0
 8001c22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c26:	f7fe ffe1 	bl	8000bec <HAL_GetTick>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b64      	cmp	r3, #100	; 0x64
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e28a      	b.n	800214e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	4b8a      	ldr	r3, [pc, #552]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	029b      	lsls	r3, r3, #10
 8001c40:	4013      	ands	r3, r2
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0xee>
 8001c44:	e015      	b.n	8001c72 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7fe ffd1 	bl	8000bec <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c50:	f7fe ffcc 	bl	8000bec <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e275      	b.n	800214e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	4b80      	ldr	r3, [pc, #512]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	029b      	lsls	r3, r3, #10
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x118>
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2202      	movs	r2, #2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d100      	bne.n	8001c7e <HAL_RCC_OscConfig+0x146>
 8001c7c:	e069      	b.n	8001d52 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c7e:	4b79      	ldr	r3, [pc, #484]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	220c      	movs	r2, #12
 8001c84:	4013      	ands	r3, r2
 8001c86:	d00b      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c88:	4b76      	ldr	r3, [pc, #472]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	220c      	movs	r2, #12
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d11c      	bne.n	8001cce <HAL_RCC_OscConfig+0x196>
 8001c94:	4b73      	ldr	r3, [pc, #460]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	025b      	lsls	r3, r3, #9
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d116      	bne.n	8001cce <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca0:	4b70      	ldr	r3, [pc, #448]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x17e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e24b      	b.n	800214e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb6:	4b6b      	ldr	r3, [pc, #428]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	22f8      	movs	r2, #248	; 0xf8
 8001cbc:	4393      	bics	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	00da      	lsls	r2, r3, #3
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ccc:	e041      	b.n	8001d52 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d024      	beq.n	8001d20 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd6:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7fe ff83 	bl	8000bec <HAL_GetTick>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cec:	f7fe ff7e 	bl	8000bec <HAL_GetTick>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e227      	b.n	800214e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfe:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2202      	movs	r2, #2
 8001d04:	4013      	ands	r3, r2
 8001d06:	d0f1      	beq.n	8001cec <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b56      	ldr	r3, [pc, #344]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	22f8      	movs	r2, #248	; 0xf8
 8001d0e:	4393      	bics	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00da      	lsls	r2, r3, #3
 8001d18:	4b52      	ldr	r3, [pc, #328]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e018      	b.n	8001d52 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d20:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001d26:	2101      	movs	r1, #1
 8001d28:	438a      	bics	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7fe ff5e 	bl	8000bec <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d36:	f7fe ff59 	bl	8000bec <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e202      	b.n	800214e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d48:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d1f1      	bne.n	8001d36 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2208      	movs	r2, #8
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d036      	beq.n	8001dca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d019      	beq.n	8001d98 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d64:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d68:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d70:	f7fe ff3c 	bl	8000bec <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7a:	f7fe ff37 	bl	8000bec <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e1e0      	b.n	800214e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2202      	movs	r2, #2
 8001d92:	4013      	ands	r3, r2
 8001d94:	d0f1      	beq.n	8001d7a <HAL_RCC_OscConfig+0x242>
 8001d96:	e018      	b.n	8001dca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d98:	4b32      	ldr	r3, [pc, #200]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9c:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	438a      	bics	r2, r1
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da4:	f7fe ff22 	bl	8000bec <HAL_GetTick>
 8001da8:	0003      	movs	r3, r0
 8001daa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dae:	f7fe ff1d 	bl	8000bec <HAL_GetTick>
 8001db2:	0002      	movs	r2, r0
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e1c6      	b.n	800214e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc0:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d1f1      	bne.n	8001dae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x29e>
 8001dd4:	e0b4      	b.n	8001f40 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	201f      	movs	r0, #31
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	055b      	lsls	r3, r3, #21
 8001de6:	4013      	ands	r3, r2
 8001de8:	d110      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	0549      	lsls	r1, r1, #21
 8001df4:	430a      	orrs	r2, r1
 8001df6:	61da      	str	r2, [r3, #28]
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	055b      	lsls	r3, r3, #21
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_RCC_OscConfig+0x338>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4013      	ands	r3, r2
 8001e16:	d11a      	bne.n	8001e4e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e18:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_RCC_OscConfig+0x338>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_RCC_OscConfig+0x338>)
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	0049      	lsls	r1, r1, #1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e26:	f7fe fee1 	bl	8000bec <HAL_GetTick>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e30:	f7fe fedc 	bl	8000bec <HAL_GetTick>
 8001e34:	0002      	movs	r2, r0
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e185      	b.n	800214e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_OscConfig+0x338>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d10e      	bne.n	8001e74 <HAL_RCC_OscConfig+0x33c>
 8001e56:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001e58:	6a1a      	ldr	r2, [r3, #32]
 8001e5a:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <HAL_RCC_OscConfig+0x32c>)
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	621a      	str	r2, [r3, #32]
 8001e62:	e035      	b.n	8001ed0 <HAL_RCC_OscConfig+0x398>
 8001e64:	40021000 	.word	0x40021000
 8001e68:	fffeffff 	.word	0xfffeffff
 8001e6c:	fffbffff 	.word	0xfffbffff
 8001e70:	40007000 	.word	0x40007000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10c      	bne.n	8001e96 <HAL_RCC_OscConfig+0x35e>
 8001e7c:	4bb6      	ldr	r3, [pc, #728]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001e7e:	6a1a      	ldr	r2, [r3, #32]
 8001e80:	4bb5      	ldr	r3, [pc, #724]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001e82:	2101      	movs	r1, #1
 8001e84:	438a      	bics	r2, r1
 8001e86:	621a      	str	r2, [r3, #32]
 8001e88:	4bb3      	ldr	r3, [pc, #716]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001e8a:	6a1a      	ldr	r2, [r3, #32]
 8001e8c:	4bb2      	ldr	r3, [pc, #712]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001e8e:	2104      	movs	r1, #4
 8001e90:	438a      	bics	r2, r1
 8001e92:	621a      	str	r2, [r3, #32]
 8001e94:	e01c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x398>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x380>
 8001e9e:	4bae      	ldr	r3, [pc, #696]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001ea0:	6a1a      	ldr	r2, [r3, #32]
 8001ea2:	4bad      	ldr	r3, [pc, #692]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	621a      	str	r2, [r3, #32]
 8001eaa:	4bab      	ldr	r3, [pc, #684]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001eac:	6a1a      	ldr	r2, [r3, #32]
 8001eae:	4baa      	ldr	r3, [pc, #680]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	621a      	str	r2, [r3, #32]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x398>
 8001eb8:	4ba7      	ldr	r3, [pc, #668]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001eba:	6a1a      	ldr	r2, [r3, #32]
 8001ebc:	4ba6      	ldr	r3, [pc, #664]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	438a      	bics	r2, r1
 8001ec2:	621a      	str	r2, [r3, #32]
 8001ec4:	4ba4      	ldr	r3, [pc, #656]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001ec6:	6a1a      	ldr	r2, [r3, #32]
 8001ec8:	4ba3      	ldr	r3, [pc, #652]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001eca:	2104      	movs	r1, #4
 8001ecc:	438a      	bics	r2, r1
 8001ece:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d014      	beq.n	8001f02 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7fe fe88 	bl	8000bec <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	e009      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7fe fe83 	bl	8000bec <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4a9b      	ldr	r2, [pc, #620]	; (800215c <HAL_RCC_OscConfig+0x624>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e12b      	b.n	800214e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef6:	4b98      	ldr	r3, [pc, #608]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3aa>
 8001f00:	e013      	b.n	8001f2a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7fe fe73 	bl	8000bec <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0a:	e009      	b.n	8001f20 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7fe fe6e 	bl	8000bec <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	4a91      	ldr	r2, [pc, #580]	; (800215c <HAL_RCC_OscConfig+0x624>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e116      	b.n	800214e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f20:	4b8d      	ldr	r3, [pc, #564]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	2202      	movs	r2, #2
 8001f26:	4013      	ands	r3, r2
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f2a:	231f      	movs	r3, #31
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d105      	bne.n	8001f40 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f34:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	4b87      	ldr	r3, [pc, #540]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001f3a:	4989      	ldr	r1, [pc, #548]	; (8002160 <HAL_RCC_OscConfig+0x628>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2210      	movs	r2, #16
 8001f46:	4013      	ands	r3, r2
 8001f48:	d063      	beq.n	8002012 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d12a      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f52:	4b81      	ldr	r3, [pc, #516]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f56:	4b80      	ldr	r3, [pc, #512]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001f58:	2104      	movs	r1, #4
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001f5e:	4b7e      	ldr	r3, [pc, #504]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f62:	4b7d      	ldr	r3, [pc, #500]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001f64:	2101      	movs	r1, #1
 8001f66:	430a      	orrs	r2, r1
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe fe3f 	bl	8000bec <HAL_GetTick>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f74:	f7fe fe3a 	bl	8000bec <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0e3      	b.n	800214e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f86:	4b74      	ldr	r3, [pc, #464]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d0f1      	beq.n	8001f74 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f90:	4b71      	ldr	r3, [pc, #452]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	22f8      	movs	r2, #248	; 0xf8
 8001f96:	4393      	bics	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	00da      	lsls	r2, r3, #3
 8001fa0:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fa6:	e034      	b.n	8002012 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	3305      	adds	r3, #5
 8001fae:	d111      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001fb0:	4b69      	ldr	r3, [pc, #420]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb4:	4b68      	ldr	r3, [pc, #416]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	438a      	bics	r2, r1
 8001fba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001fbc:	4b66      	ldr	r3, [pc, #408]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc0:	22f8      	movs	r2, #248	; 0xf8
 8001fc2:	4393      	bics	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	00da      	lsls	r2, r3, #3
 8001fcc:	4b62      	ldr	r3, [pc, #392]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001fd2:	e01e      	b.n	8002012 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fd4:	4b60      	ldr	r3, [pc, #384]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd8:	4b5f      	ldr	r3, [pc, #380]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001fda:	2104      	movs	r1, #4
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001fe0:	4b5d      	ldr	r3, [pc, #372]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe4:	4b5c      	ldr	r3, [pc, #368]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	438a      	bics	r2, r1
 8001fea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7fe fdfe 	bl	8000bec <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ff6:	f7fe fdf9 	bl	8000bec <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0a2      	b.n	800214e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002008:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	2202      	movs	r2, #2
 800200e:	4013      	ands	r3, r2
 8002010:	d1f1      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d100      	bne.n	800201c <HAL_RCC_OscConfig+0x4e4>
 800201a:	e097      	b.n	800214c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800201c:	4b4e      	ldr	r3, [pc, #312]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	220c      	movs	r2, #12
 8002022:	4013      	ands	r3, r2
 8002024:	2b08      	cmp	r3, #8
 8002026:	d100      	bne.n	800202a <HAL_RCC_OscConfig+0x4f2>
 8002028:	e06b      	b.n	8002102 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d14c      	bne.n	80020cc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b49      	ldr	r3, [pc, #292]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b48      	ldr	r3, [pc, #288]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8002038:	494a      	ldr	r1, [pc, #296]	; (8002164 <HAL_RCC_OscConfig+0x62c>)
 800203a:	400a      	ands	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7fe fdd5 	bl	8000bec <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe fdd0 	bl	8000bec <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e079      	b.n	800214e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205a:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	049b      	lsls	r3, r3, #18
 8002062:	4013      	ands	r3, r2
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002066:	4b3c      	ldr	r3, [pc, #240]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	220f      	movs	r2, #15
 800206c:	4393      	bics	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8002076:	430a      	orrs	r2, r1
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c
 800207a:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4a3a      	ldr	r2, [pc, #232]	; (8002168 <HAL_RCC_OscConfig+0x630>)
 8002080:	4013      	ands	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	431a      	orrs	r2, r3
 800208e:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8002090:	430a      	orrs	r2, r1
 8002092:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	0449      	lsls	r1, r1, #17
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7fe fda3 	bl	8000bec <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ac:	f7fe fd9e 	bl	8000bec <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e047      	b.n	800214e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	049b      	lsls	r3, r3, #18
 80020c6:	4013      	ands	r3, r2
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x574>
 80020ca:	e03f      	b.n	800214c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	4b22      	ldr	r3, [pc, #136]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b21      	ldr	r3, [pc, #132]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 80020d2:	4924      	ldr	r1, [pc, #144]	; (8002164 <HAL_RCC_OscConfig+0x62c>)
 80020d4:	400a      	ands	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe fd88 	bl	8000bec <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e2:	f7fe fd83 	bl	8000bec <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e02c      	b.n	800214e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	049b      	lsls	r3, r3, #18
 80020fc:	4013      	ands	r3, r2
 80020fe:	d1f0      	bne.n	80020e2 <HAL_RCC_OscConfig+0x5aa>
 8002100:	e024      	b.n	800214c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e01f      	b.n	800214e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800210e:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_RCC_OscConfig+0x620>)
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	025b      	lsls	r3, r3, #9
 8002120:	401a      	ands	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	429a      	cmp	r2, r3
 8002128:	d10e      	bne.n	8002148 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	220f      	movs	r2, #15
 800212e:	401a      	ands	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d107      	bne.n	8002148 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	23f0      	movs	r3, #240	; 0xf0
 800213c:	039b      	lsls	r3, r3, #14
 800213e:	401a      	ands	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	0018      	movs	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	b008      	add	sp, #32
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	40021000 	.word	0x40021000
 800215c:	00001388 	.word	0x00001388
 8002160:	efffffff 	.word	0xefffffff
 8002164:	feffffff 	.word	0xfeffffff
 8002168:	ffc2ffff 	.word	0xffc2ffff

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0b3      	b.n	80022e8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <HAL_RCC_ClockConfig+0x184>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2201      	movs	r2, #1
 8002186:	4013      	ands	r3, r2
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d911      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b58      	ldr	r3, [pc, #352]	; (80022f0 <HAL_RCC_ClockConfig+0x184>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2201      	movs	r2, #1
 8002194:	4393      	bics	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	4b55      	ldr	r3, [pc, #340]	; (80022f0 <HAL_RCC_ClockConfig+0x184>)
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_ClockConfig+0x184>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2201      	movs	r2, #1
 80021a6:	4013      	ands	r3, r2
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d001      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e09a      	b.n	80022e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2202      	movs	r2, #2
 80021b8:	4013      	ands	r3, r2
 80021ba:	d015      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2204      	movs	r2, #4
 80021c2:	4013      	ands	r3, r2
 80021c4:	d006      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021c6:	4b4b      	ldr	r3, [pc, #300]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 80021cc:	21e0      	movs	r1, #224	; 0xe0
 80021ce:	00c9      	lsls	r1, r1, #3
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d4:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	22f0      	movs	r2, #240	; 0xf0
 80021da:	4393      	bics	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	d040      	beq.n	8002274 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	4013      	ands	r3, r2
 8002204:	d114      	bne.n	8002230 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06e      	b.n	80022e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	049b      	lsls	r3, r3, #18
 800221a:	4013      	ands	r3, r2
 800221c:	d108      	bne.n	8002230 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e062      	b.n	80022e8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002222:	4b34      	ldr	r3, [pc, #208]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2202      	movs	r2, #2
 8002228:	4013      	ands	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e05b      	b.n	80022e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002230:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2203      	movs	r2, #3
 8002236:	4393      	bics	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 8002240:	430a      	orrs	r2, r1
 8002242:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002244:	f7fe fcd2 	bl	8000bec <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224c:	e009      	b.n	8002262 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224e:	f7fe fccd 	bl	8000bec <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <HAL_RCC_ClockConfig+0x18c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e042      	b.n	80022e8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	220c      	movs	r2, #12
 8002268:	401a      	ands	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	429a      	cmp	r2, r3
 8002272:	d1ec      	bne.n	800224e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <HAL_RCC_ClockConfig+0x184>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2201      	movs	r2, #1
 800227a:	4013      	ands	r3, r2
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d211      	bcs.n	80022a6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_RCC_ClockConfig+0x184>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2201      	movs	r2, #1
 8002288:	4393      	bics	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <HAL_RCC_ClockConfig+0x184>)
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_RCC_ClockConfig+0x184>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2201      	movs	r2, #1
 800229a:	4013      	ands	r3, r2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e020      	b.n	80022e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2204      	movs	r2, #4
 80022ac:	4013      	ands	r3, r2
 80022ae:	d009      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <HAL_RCC_ClockConfig+0x190>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022c4:	f000 f820 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 80022c8:	0001      	movs	r1, r0
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x188>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	220f      	movs	r2, #15
 80022d2:	4013      	ands	r3, r2
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_RCC_ClockConfig+0x194>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	000a      	movs	r2, r1
 80022da:	40da      	lsrs	r2, r3
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x198>)
 80022de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022e0:	2000      	movs	r0, #0
 80022e2:	f7fe fc3d 	bl	8000b60 <HAL_InitTick>
  
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b004      	add	sp, #16
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40022000 	.word	0x40022000
 80022f4:	40021000 	.word	0x40021000
 80022f8:	00001388 	.word	0x00001388
 80022fc:	fffff8ff 	.word	0xfffff8ff
 8002300:	08004898 	.word	0x08004898
 8002304:	20000258 	.word	0x20000258

08002308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b08f      	sub	sp, #60	; 0x3c
 800230c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800230e:	2314      	movs	r3, #20
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	4a2b      	ldr	r2, [pc, #172]	; (80023c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002314:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002316:	c313      	stmia	r3!, {r0, r1, r4}
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	4a29      	ldr	r2, [pc, #164]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002320:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002322:	c313      	stmia	r3!, {r0, r1, r4}
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002330:	2300      	movs	r3, #0
 8002332:	637b      	str	r3, [r7, #52]	; 0x34
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800233c:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	220c      	movs	r2, #12
 8002346:	4013      	ands	r3, r2
 8002348:	2b04      	cmp	r3, #4
 800234a:	d002      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x4a>
 800234c:	2b08      	cmp	r3, #8
 800234e:	d003      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x50>
 8002350:	e02d      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002352:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002356:	e02d      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235a:	0c9b      	lsrs	r3, r3, #18
 800235c:	220f      	movs	r2, #15
 800235e:	4013      	ands	r3, r2
 8002360:	2214      	movs	r2, #20
 8002362:	18ba      	adds	r2, r7, r2
 8002364:	5cd3      	ldrb	r3, [r2, r3]
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	220f      	movs	r2, #15
 800236e:	4013      	ands	r3, r2
 8002370:	1d3a      	adds	r2, r7, #4
 8002372:	5cd3      	ldrb	r3, [r2, r3]
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	025b      	lsls	r3, r3, #9
 800237c:	4013      	ands	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002382:	4812      	ldr	r0, [pc, #72]	; (80023cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002384:	f7fd fed2 	bl	800012c <__udivsi3>
 8002388:	0003      	movs	r3, r0
 800238a:	001a      	movs	r2, r3
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	4353      	muls	r3, r2
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
 8002392:	e009      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002396:	000a      	movs	r2, r1
 8002398:	0152      	lsls	r2, r2, #5
 800239a:	1a52      	subs	r2, r2, r1
 800239c:	0193      	lsls	r3, r2, #6
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	185b      	adds	r3, r3, r1
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80023a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023ac:	e002      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b00f      	add	sp, #60	; 0x3c
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	08004878 	.word	0x08004878
 80023c4:	08004888 	.word	0x08004888
 80023c8:	40021000 	.word	0x40021000
 80023cc:	007a1200 	.word	0x007a1200

080023d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	20000258 	.word	0x20000258

080023e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80023e8:	f7ff fff2 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023ec:	0001      	movs	r1, r0
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	2207      	movs	r2, #7
 80023f6:	4013      	ands	r3, r2
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_RCC_GetPCLK1Freq+0x28>)
 80023fa:	5cd3      	ldrb	r3, [r2, r3]
 80023fc:	40d9      	lsrs	r1, r3
 80023fe:	000b      	movs	r3, r1
}    
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	40021000 	.word	0x40021000
 800240c:	080048a8 	.word	0x080048a8

08002410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	025b      	lsls	r3, r3, #9
 8002428:	4013      	ands	r3, r2
 800242a:	d100      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800242c:	e08e      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800242e:	2017      	movs	r0, #23
 8002430:	183b      	adds	r3, r7, r0
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002436:	4b57      	ldr	r3, [pc, #348]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	055b      	lsls	r3, r3, #21
 800243e:	4013      	ands	r3, r2
 8002440:	d110      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b54      	ldr	r3, [pc, #336]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	0549      	lsls	r1, r1, #21
 800244c:	430a      	orrs	r2, r1
 800244e:	61da      	str	r2, [r3, #28]
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	055b      	lsls	r3, r3, #21
 8002458:	4013      	ands	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245e:	183b      	adds	r3, r7, r0
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4013      	ands	r3, r2
 800246e:	d11a      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002470:	4b49      	ldr	r3, [pc, #292]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b48      	ldr	r3, [pc, #288]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002476:	2180      	movs	r1, #128	; 0x80
 8002478:	0049      	lsls	r1, r1, #1
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247e:	f7fe fbb5 	bl	8000bec <HAL_GetTick>
 8002482:	0003      	movs	r3, r0
 8002484:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002486:	e008      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002488:	f7fe fbb0 	bl	8000bec <HAL_GetTick>
 800248c:	0002      	movs	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e077      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4013      	ands	r3, r2
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024a8:	6a1a      	ldr	r2, [r3, #32]
 80024aa:	23c0      	movs	r3, #192	; 0xc0
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4013      	ands	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d034      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	23c0      	movs	r3, #192	; 0xc0
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4013      	ands	r3, r2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d02c      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4a33      	ldr	r2, [pc, #204]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024d4:	6a1a      	ldr	r2, [r3, #32]
 80024d6:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	0249      	lsls	r1, r1, #9
 80024dc:	430a      	orrs	r2, r1
 80024de:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024e0:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024e2:	6a1a      	ldr	r2, [r3, #32]
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024e6:	492e      	ldr	r1, [pc, #184]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024ec:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	4013      	ands	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7fe fb77 	bl	8000bec <HAL_GetTick>
 80024fe:	0003      	movs	r3, r0
 8002500:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002502:	e009      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002504:	f7fe fb72 	bl	8000bec <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e038      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	2202      	movs	r2, #2
 800251e:	4013      	ands	r3, r2
 8002520:	d0f0      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a1d      	ldr	r2, [pc, #116]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	4b18      	ldr	r3, [pc, #96]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002532:	430a      	orrs	r2, r1
 8002534:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002536:	2317      	movs	r3, #23
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d105      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002546:	4918      	ldr	r1, [pc, #96]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002548:	400a      	ands	r2, r1
 800254a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	2203      	movs	r2, #3
 800255c:	4393      	bics	r3, r2
 800255e:	0019      	movs	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002566:	430a      	orrs	r2, r1
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2220      	movs	r2, #32
 8002570:	4013      	ands	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	2210      	movs	r2, #16
 800257a:	4393      	bics	r3, r2
 800257c:	0019      	movs	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002584:	430a      	orrs	r2, r1
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b006      	add	sp, #24
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40021000 	.word	0x40021000
 8002598:	40007000 	.word	0x40007000
 800259c:	fffffcff 	.word	0xfffffcff
 80025a0:	fffeffff 	.word	0xfffeffff
 80025a4:	00001388 	.word	0x00001388
 80025a8:	efffffff 	.word	0xefffffff

080025ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	223d      	movs	r2, #61	; 0x3d
 80025b8:	5c9b      	ldrb	r3, [r3, r2]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d001      	beq.n	80025c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e02d      	b.n	8002620 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	223d      	movs	r2, #61	; 0x3d
 80025c8:	2102      	movs	r1, #2
 80025ca:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a15      	ldr	r2, [pc, #84]	; (8002628 <HAL_TIM_Base_Start+0x7c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_TIM_Base_Start+0x3e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a14      	ldr	r2, [pc, #80]	; (800262c <HAL_TIM_Base_Start+0x80>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d004      	beq.n	80025ea <HAL_TIM_Base_Start+0x3e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_TIM_Base_Start+0x84>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d111      	bne.n	800260e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2207      	movs	r2, #7
 80025f2:	4013      	ands	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d010      	beq.n	800261e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2101      	movs	r1, #1
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260c:	e007      	b.n	800261e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40000400 	.word	0x40000400
 8002630:	40014000 	.word	0x40014000

08002634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e042      	b.n	80026cc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	223d      	movs	r2, #61	; 0x3d
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	223c      	movs	r2, #60	; 0x3c
 8002656:	2100      	movs	r1, #0
 8002658:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f7fe f969 	bl	8000934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	223d      	movs	r2, #61	; 0x3d
 8002666:	2102      	movs	r1, #2
 8002668:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	0019      	movs	r1, r3
 8002674:	0010      	movs	r0, r2
 8002676:	f000 f9a5 	bl	80029c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2246      	movs	r2, #70	; 0x46
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	223e      	movs	r2, #62	; 0x3e
 8002686:	2101      	movs	r1, #1
 8002688:	5499      	strb	r1, [r3, r2]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	223f      	movs	r2, #63	; 0x3f
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2240      	movs	r2, #64	; 0x40
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2241      	movs	r2, #65	; 0x41
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2242      	movs	r2, #66	; 0x42
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2243      	movs	r2, #67	; 0x43
 80026ae:	2101      	movs	r1, #1
 80026b0:	5499      	strb	r1, [r3, r2]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2244      	movs	r2, #68	; 0x44
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2245      	movs	r2, #69	; 0x45
 80026be:	2101      	movs	r1, #1
 80026c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	223d      	movs	r2, #61	; 0x3d
 80026c6:	2101      	movs	r1, #1
 80026c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	0018      	movs	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d108      	bne.n	80026f6 <HAL_TIM_PWM_Start+0x22>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	223e      	movs	r2, #62	; 0x3e
 80026e8:	5c9b      	ldrb	r3, [r3, r2]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	1e5a      	subs	r2, r3, #1
 80026f0:	4193      	sbcs	r3, r2
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	e01f      	b.n	8002736 <HAL_TIM_PWM_Start+0x62>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d108      	bne.n	800270e <HAL_TIM_PWM_Start+0x3a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	223f      	movs	r2, #63	; 0x3f
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	1e5a      	subs	r2, r3, #1
 8002708:	4193      	sbcs	r3, r2
 800270a:	b2db      	uxtb	r3, r3
 800270c:	e013      	b.n	8002736 <HAL_TIM_PWM_Start+0x62>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d108      	bne.n	8002726 <HAL_TIM_PWM_Start+0x52>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2240      	movs	r2, #64	; 0x40
 8002718:	5c9b      	ldrb	r3, [r3, r2]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	1e5a      	subs	r2, r3, #1
 8002720:	4193      	sbcs	r3, r2
 8002722:	b2db      	uxtb	r3, r3
 8002724:	e007      	b.n	8002736 <HAL_TIM_PWM_Start+0x62>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2241      	movs	r2, #65	; 0x41
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	1e5a      	subs	r2, r3, #1
 8002732:	4193      	sbcs	r3, r2
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06e      	b.n	800281c <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d104      	bne.n	800274e <HAL_TIM_PWM_Start+0x7a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	223e      	movs	r2, #62	; 0x3e
 8002748:	2102      	movs	r1, #2
 800274a:	5499      	strb	r1, [r3, r2]
 800274c:	e013      	b.n	8002776 <HAL_TIM_PWM_Start+0xa2>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d104      	bne.n	800275e <HAL_TIM_PWM_Start+0x8a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	223f      	movs	r2, #63	; 0x3f
 8002758:	2102      	movs	r1, #2
 800275a:	5499      	strb	r1, [r3, r2]
 800275c:	e00b      	b.n	8002776 <HAL_TIM_PWM_Start+0xa2>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d104      	bne.n	800276e <HAL_TIM_PWM_Start+0x9a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2240      	movs	r2, #64	; 0x40
 8002768:	2102      	movs	r1, #2
 800276a:	5499      	strb	r1, [r3, r2]
 800276c:	e003      	b.n	8002776 <HAL_TIM_PWM_Start+0xa2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2241      	movs	r2, #65	; 0x41
 8002772:	2102      	movs	r1, #2
 8002774:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	2201      	movs	r2, #1
 800277e:	0018      	movs	r0, r3
 8002780:	f000 fb92 	bl	8002ea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a26      	ldr	r2, [pc, #152]	; (8002824 <HAL_TIM_PWM_Start+0x150>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00e      	beq.n	80027ac <HAL_TIM_PWM_Start+0xd8>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a25      	ldr	r2, [pc, #148]	; (8002828 <HAL_TIM_PWM_Start+0x154>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d009      	beq.n	80027ac <HAL_TIM_PWM_Start+0xd8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a23      	ldr	r2, [pc, #140]	; (800282c <HAL_TIM_PWM_Start+0x158>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_TIM_PWM_Start+0xd8>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a22      	ldr	r2, [pc, #136]	; (8002830 <HAL_TIM_PWM_Start+0x15c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_TIM_PWM_Start+0xdc>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_TIM_PWM_Start+0xde>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	0209      	lsls	r1, r1, #8
 80027c4:	430a      	orrs	r2, r1
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a15      	ldr	r2, [pc, #84]	; (8002824 <HAL_TIM_PWM_Start+0x150>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_TIM_PWM_Start+0x112>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a17      	ldr	r2, [pc, #92]	; (8002834 <HAL_TIM_PWM_Start+0x160>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_TIM_PWM_Start+0x112>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a11      	ldr	r2, [pc, #68]	; (8002828 <HAL_TIM_PWM_Start+0x154>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d111      	bne.n	800280a <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2207      	movs	r2, #7
 80027ee:	4013      	ands	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d010      	beq.n	800281a <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002808:	e007      	b.n	800281a <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b004      	add	sp, #16
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40014000 	.word	0x40014000
 800282c:	40014400 	.word	0x40014400
 8002830:	40014800 	.word	0x40014800
 8002834:	40000400 	.word	0x40000400

08002838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2317      	movs	r3, #23
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	223c      	movs	r2, #60	; 0x3c
 8002850:	5c9b      	ldrb	r3, [r3, r2]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002856:	2302      	movs	r3, #2
 8002858:	e0ad      	b.n	80029b6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	223c      	movs	r2, #60	; 0x3c
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d100      	bne.n	800286a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002868:	e076      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x120>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b0c      	cmp	r3, #12
 800286e:	d900      	bls.n	8002872 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002870:	e095      	b.n	800299e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b08      	cmp	r3, #8
 8002876:	d04e      	beq.n	8002916 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b08      	cmp	r3, #8
 800287c:	d900      	bls.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x48>
 800287e:	e08e      	b.n	800299e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d021      	beq.n	80028d0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800288c:	e087      	b.n	800299e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	0011      	movs	r1, r2
 8002896:	0018      	movs	r0, r3
 8002898:	f000 f90a 	bl	8002ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2108      	movs	r1, #8
 80028a8:	430a      	orrs	r2, r1
 80028aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2104      	movs	r1, #4
 80028b8:	438a      	bics	r2, r1
 80028ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6999      	ldr	r1, [r3, #24]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	619a      	str	r2, [r3, #24]
      break;
 80028ce:	e06b      	b.n	80029a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	0011      	movs	r1, r2
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 f971 	bl	8002bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	0109      	lsls	r1, r1, #4
 80028ec:	430a      	orrs	r2, r1
 80028ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4931      	ldr	r1, [pc, #196]	; (80029c0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6999      	ldr	r1, [r3, #24]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	619a      	str	r2, [r3, #24]
      break;
 8002914:	e048      	b.n	80029a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	0011      	movs	r1, r2
 800291e:	0018      	movs	r0, r3
 8002920:	f000 f9d2 	bl	8002cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2108      	movs	r1, #8
 8002930:	430a      	orrs	r2, r1
 8002932:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2104      	movs	r1, #4
 8002940:	438a      	bics	r2, r1
 8002942:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69d9      	ldr	r1, [r3, #28]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	61da      	str	r2, [r3, #28]
      break;
 8002956:	e027      	b.n	80029a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	0011      	movs	r1, r2
 8002960:	0018      	movs	r0, r3
 8002962:	f000 fa37 	bl	8002dd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	0109      	lsls	r1, r1, #4
 8002974:	430a      	orrs	r2, r1
 8002976:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	490f      	ldr	r1, [pc, #60]	; (80029c0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002984:	400a      	ands	r2, r1
 8002986:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69d9      	ldr	r1, [r3, #28]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	021a      	lsls	r2, r3, #8
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	61da      	str	r2, [r3, #28]
      break;
 800299c:	e004      	b.n	80029a8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800299e:	2317      	movs	r3, #23
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
      break;
 80029a6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	223c      	movs	r2, #60	; 0x3c
 80029ac:	2100      	movs	r1, #0
 80029ae:	5499      	strb	r1, [r3, r2]

  return status;
 80029b0:	2317      	movs	r3, #23
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	781b      	ldrb	r3, [r3, #0]
}
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b006      	add	sp, #24
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	fffffbff 	.word	0xfffffbff

080029c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a2f      	ldr	r2, [pc, #188]	; (8002a94 <TIM_Base_SetConfig+0xd0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d003      	beq.n	80029e4 <TIM_Base_SetConfig+0x20>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a2e      	ldr	r2, [pc, #184]	; (8002a98 <TIM_Base_SetConfig+0xd4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d108      	bne.n	80029f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2270      	movs	r2, #112	; 0x70
 80029e8:	4393      	bics	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a26      	ldr	r2, [pc, #152]	; (8002a94 <TIM_Base_SetConfig+0xd0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <TIM_Base_SetConfig+0x62>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <TIM_Base_SetConfig+0xd4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00f      	beq.n	8002a26 <TIM_Base_SetConfig+0x62>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a24      	ldr	r2, [pc, #144]	; (8002a9c <TIM_Base_SetConfig+0xd8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00b      	beq.n	8002a26 <TIM_Base_SetConfig+0x62>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <TIM_Base_SetConfig+0xdc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d007      	beq.n	8002a26 <TIM_Base_SetConfig+0x62>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <TIM_Base_SetConfig+0xe0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d003      	beq.n	8002a26 <TIM_Base_SetConfig+0x62>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a21      	ldr	r2, [pc, #132]	; (8002aa8 <TIM_Base_SetConfig+0xe4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d108      	bne.n	8002a38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a20      	ldr	r2, [pc, #128]	; (8002aac <TIM_Base_SetConfig+0xe8>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2280      	movs	r2, #128	; 0x80
 8002a3c:	4393      	bics	r3, r2
 8002a3e:	001a      	movs	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <TIM_Base_SetConfig+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <TIM_Base_SetConfig+0xba>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <TIM_Base_SetConfig+0xdc>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <TIM_Base_SetConfig+0xba>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <TIM_Base_SetConfig+0xe0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_Base_SetConfig+0xba>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <TIM_Base_SetConfig+0xe4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d103      	bne.n	8002a86 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	615a      	str	r2, [r3, #20]
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b004      	add	sp, #16
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40002000 	.word	0x40002000
 8002aa0:	40014000 	.word	0x40014000
 8002aa4:	40014400 	.word	0x40014400
 8002aa8:	40014800 	.word	0x40014800
 8002aac:	fffffcff 	.word	0xfffffcff

08002ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4393      	bics	r3, r2
 8002ac2:	001a      	movs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2270      	movs	r2, #112	; 0x70
 8002ade:	4393      	bics	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	4393      	bics	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2202      	movs	r2, #2
 8002af8:	4393      	bics	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <TIM_OC1_SetConfig+0xf8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00b      	beq.n	8002b26 <TIM_OC1_SetConfig+0x76>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <TIM_OC1_SetConfig+0xfc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <TIM_OC1_SetConfig+0x76>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a25      	ldr	r2, [pc, #148]	; (8002bb0 <TIM_OC1_SetConfig+0x100>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d003      	beq.n	8002b26 <TIM_OC1_SetConfig+0x76>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <TIM_OC1_SetConfig+0x104>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10c      	bne.n	8002b40 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2208      	movs	r2, #8
 8002b2a:	4393      	bics	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <TIM_OC1_SetConfig+0xf8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00b      	beq.n	8002b60 <TIM_OC1_SetConfig+0xb0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <TIM_OC1_SetConfig+0xfc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d007      	beq.n	8002b60 <TIM_OC1_SetConfig+0xb0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <TIM_OC1_SetConfig+0x100>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d003      	beq.n	8002b60 <TIM_OC1_SetConfig+0xb0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <TIM_OC1_SetConfig+0x104>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d111      	bne.n	8002b84 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <TIM_OC1_SetConfig+0x108>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <TIM_OC1_SetConfig+0x10c>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b006      	add	sp, #24
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40014000 	.word	0x40014000
 8002bb0:	40014400 	.word	0x40014400
 8002bb4:	40014800 	.word	0x40014800
 8002bb8:	fffffeff 	.word	0xfffffeff
 8002bbc:	fffffdff 	.word	0xfffffdff

08002bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	2210      	movs	r2, #16
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4a2e      	ldr	r2, [pc, #184]	; (8002ca8 <TIM_OC2_SetConfig+0xe8>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4a2d      	ldr	r2, [pc, #180]	; (8002cac <TIM_OC2_SetConfig+0xec>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a24      	ldr	r2, [pc, #144]	; (8002cb0 <TIM_OC2_SetConfig+0xf0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10d      	bne.n	8002c3e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	4393      	bics	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2240      	movs	r2, #64	; 0x40
 8002c3a:	4393      	bics	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1b      	ldr	r2, [pc, #108]	; (8002cb0 <TIM_OC2_SetConfig+0xf0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00b      	beq.n	8002c5e <TIM_OC2_SetConfig+0x9e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <TIM_OC2_SetConfig+0xf4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <TIM_OC2_SetConfig+0x9e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <TIM_OC2_SetConfig+0xf8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d003      	beq.n	8002c5e <TIM_OC2_SetConfig+0x9e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <TIM_OC2_SetConfig+0xfc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d113      	bne.n	8002c86 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <TIM_OC2_SetConfig+0x100>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <TIM_OC2_SetConfig+0x104>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	621a      	str	r2, [r3, #32]
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b006      	add	sp, #24
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	ffff8fff 	.word	0xffff8fff
 8002cac:	fffffcff 	.word	0xfffffcff
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	40014000 	.word	0x40014000
 8002cb8:	40014400 	.word	0x40014400
 8002cbc:	40014800 	.word	0x40014800
 8002cc0:	fffffbff 	.word	0xfffffbff
 8002cc4:	fffff7ff 	.word	0xfffff7ff

08002cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4a35      	ldr	r2, [pc, #212]	; (8002dac <TIM_OC3_SetConfig+0xe4>)
 8002cd8:	401a      	ands	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2270      	movs	r2, #112	; 0x70
 8002cf4:	4393      	bics	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	4393      	bics	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <TIM_OC3_SetConfig+0xe8>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <TIM_OC3_SetConfig+0xec>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10d      	bne.n	8002d42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <TIM_OC3_SetConfig+0xf0>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <TIM_OC3_SetConfig+0xf4>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <TIM_OC3_SetConfig+0xec>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00b      	beq.n	8002d62 <TIM_OC3_SetConfig+0x9a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <TIM_OC3_SetConfig+0xf8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d007      	beq.n	8002d62 <TIM_OC3_SetConfig+0x9a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <TIM_OC3_SetConfig+0xfc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d003      	beq.n	8002d62 <TIM_OC3_SetConfig+0x9a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <TIM_OC3_SetConfig+0x100>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d113      	bne.n	8002d8a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <TIM_OC3_SetConfig+0x104>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <TIM_OC3_SetConfig+0x108>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	621a      	str	r2, [r3, #32]
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b006      	add	sp, #24
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	fffffeff 	.word	0xfffffeff
 8002db0:	fffffdff 	.word	0xfffffdff
 8002db4:	40012c00 	.word	0x40012c00
 8002db8:	fffff7ff 	.word	0xfffff7ff
 8002dbc:	fffffbff 	.word	0xfffffbff
 8002dc0:	40014000 	.word	0x40014000
 8002dc4:	40014400 	.word	0x40014400
 8002dc8:	40014800 	.word	0x40014800
 8002dcc:	ffffefff 	.word	0xffffefff
 8002dd0:	ffffdfff 	.word	0xffffdfff

08002dd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <TIM_OC4_SetConfig+0xb0>)
 8002de4:	401a      	ands	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a22      	ldr	r2, [pc, #136]	; (8002e88 <TIM_OC4_SetConfig+0xb4>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <TIM_OC4_SetConfig+0xb8>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <TIM_OC4_SetConfig+0xbc>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	031b      	lsls	r3, r3, #12
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <TIM_OC4_SetConfig+0xc0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00b      	beq.n	8002e4c <TIM_OC4_SetConfig+0x78>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <TIM_OC4_SetConfig+0xc4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <TIM_OC4_SetConfig+0x78>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <TIM_OC4_SetConfig+0xc8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d003      	beq.n	8002e4c <TIM_OC4_SetConfig+0x78>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <TIM_OC4_SetConfig+0xcc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d109      	bne.n	8002e60 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	4a15      	ldr	r2, [pc, #84]	; (8002ea4 <TIM_OC4_SetConfig+0xd0>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	019b      	lsls	r3, r3, #6
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b006      	add	sp, #24
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	ffffefff 	.word	0xffffefff
 8002e88:	ffff8fff 	.word	0xffff8fff
 8002e8c:	fffffcff 	.word	0xfffffcff
 8002e90:	ffffdfff 	.word	0xffffdfff
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40014000 	.word	0x40014000
 8002e9c:	40014400 	.word	0x40014400
 8002ea0:	40014800 	.word	0x40014800
 8002ea4:	ffffbfff 	.word	0xffffbfff

08002ea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	221f      	movs	r2, #31
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2201      	movs	r2, #1
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	0013      	movs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	43d2      	mvns	r2, r2
 8002eca:	401a      	ands	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a1a      	ldr	r2, [r3, #32]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	211f      	movs	r1, #31
 8002ed8:	400b      	ands	r3, r1
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4099      	lsls	r1, r3
 8002ede:	000b      	movs	r3, r1
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	621a      	str	r2, [r3, #32]
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b006      	add	sp, #24
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	223c      	movs	r2, #60	; 0x3c
 8002efe:	5c9b      	ldrb	r3, [r3, r2]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e041      	b.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	223c      	movs	r2, #60	; 0x3c
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	223d      	movs	r2, #61	; 0x3d
 8002f14:	2102      	movs	r1, #2
 8002f16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2270      	movs	r2, #112	; 0x70
 8002f2c:	4393      	bics	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d10c      	bne.n	8002f7a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	4393      	bics	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	223d      	movs	r2, #61	; 0x3d
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	223c      	movs	r2, #60	; 0x3c
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40014000 	.word	0x40014000

08002fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e044      	b.n	800303c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d107      	bne.n	8002fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2274      	movs	r2, #116	; 0x74
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7fd fd41 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2224      	movs	r2, #36	; 0x24
 8002fce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2101      	movs	r1, #1
 8002fdc:	438a      	bics	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 f8da 	bl	800319c <UART_SetConfig>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e024      	b.n	800303c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f000 fa0d 	bl	800341c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	490d      	ldr	r1, [pc, #52]	; (8003044 <HAL_UART_Init+0xa4>)
 800300e:	400a      	ands	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2108      	movs	r1, #8
 800301e:	438a      	bics	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0018      	movs	r0, r3
 8003036:	f000 faa5 	bl	8003584 <UART_CheckIdleState>
 800303a:	0003      	movs	r3, r0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}
 8003044:	fffff7ff 	.word	0xfffff7ff

08003048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	1dbb      	adds	r3, r7, #6
 8003056:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305c:	2b20      	cmp	r3, #32
 800305e:	d000      	beq.n	8003062 <HAL_UART_Transmit+0x1a>
 8003060:	e096      	b.n	8003190 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_UART_Transmit+0x28>
 8003068:	1dbb      	adds	r3, r7, #6
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e08e      	b.n	8003192 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	429a      	cmp	r2, r3
 800307e:	d109      	bne.n	8003094 <HAL_UART_Transmit+0x4c>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2201      	movs	r2, #1
 800308c:	4013      	ands	r3, r2
 800308e:	d001      	beq.n	8003094 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e07e      	b.n	8003192 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2274      	movs	r2, #116	; 0x74
 8003098:	5c9b      	ldrb	r3, [r3, r2]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Transmit+0x5a>
 800309e:	2302      	movs	r3, #2
 80030a0:	e077      	b.n	8003192 <HAL_UART_Transmit+0x14a>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2274      	movs	r2, #116	; 0x74
 80030a6:	2101      	movs	r1, #1
 80030a8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2280      	movs	r2, #128	; 0x80
 80030ae:	2100      	movs	r1, #0
 80030b0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2221      	movs	r2, #33	; 0x21
 80030b6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b8:	f7fd fd98 	bl	8000bec <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1dba      	adds	r2, r7, #6
 80030c4:	2150      	movs	r1, #80	; 0x50
 80030c6:	8812      	ldrh	r2, [r2, #0]
 80030c8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1dba      	adds	r2, r7, #6
 80030ce:	2152      	movs	r1, #82	; 0x52
 80030d0:	8812      	ldrh	r2, [r2, #0]
 80030d2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	015b      	lsls	r3, r3, #5
 80030dc:	429a      	cmp	r2, r3
 80030de:	d108      	bne.n	80030f2 <HAL_UART_Transmit+0xaa>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	e003      	b.n	80030fa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2274      	movs	r2, #116	; 0x74
 80030fe:	2100      	movs	r1, #0
 8003100:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003102:	e02d      	b.n	8003160 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	0013      	movs	r3, r2
 800310e:	2200      	movs	r2, #0
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	f000 fa7f 	bl	8003614 <UART_WaitOnFlagUntilTimeout>
 8003116:	1e03      	subs	r3, r0, #0
 8003118:	d001      	beq.n	800311e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e039      	b.n	8003192 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10b      	bne.n	800313c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	881a      	ldrh	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	05d2      	lsls	r2, r2, #23
 800312e:	0dd2      	lsrs	r2, r2, #23
 8003130:	b292      	uxth	r2, r2
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	3302      	adds	r3, #2
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	e008      	b.n	800314e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b292      	uxth	r2, r2
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3301      	adds	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2252      	movs	r2, #82	; 0x52
 8003152:	5a9b      	ldrh	r3, [r3, r2]
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b299      	uxth	r1, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2252      	movs	r2, #82	; 0x52
 800315e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2252      	movs	r2, #82	; 0x52
 8003164:	5a9b      	ldrh	r3, [r3, r2]
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1cb      	bne.n	8003104 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	0013      	movs	r3, r2
 8003176:	2200      	movs	r2, #0
 8003178:	2140      	movs	r1, #64	; 0x40
 800317a:	f000 fa4b 	bl	8003614 <UART_WaitOnFlagUntilTimeout>
 800317e:	1e03      	subs	r3, r0, #0
 8003180:	d001      	beq.n	8003186 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e005      	b.n	8003192 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	0018      	movs	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	b008      	add	sp, #32
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a4:	231e      	movs	r3, #30
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a8d      	ldr	r2, [pc, #564]	; (8003400 <UART_SetConfig+0x264>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	0019      	movs	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a88      	ldr	r2, [pc, #544]	; (8003404 <UART_SetConfig+0x268>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a7f      	ldr	r2, [pc, #508]	; (8003408 <UART_SetConfig+0x26c>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	430a      	orrs	r2, r1
 8003216:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a7b      	ldr	r2, [pc, #492]	; (800340c <UART_SetConfig+0x270>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d127      	bne.n	8003272 <UART_SetConfig+0xd6>
 8003222:	4b7b      	ldr	r3, [pc, #492]	; (8003410 <UART_SetConfig+0x274>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	2203      	movs	r2, #3
 8003228:	4013      	ands	r3, r2
 800322a:	2b03      	cmp	r3, #3
 800322c:	d00d      	beq.n	800324a <UART_SetConfig+0xae>
 800322e:	d81b      	bhi.n	8003268 <UART_SetConfig+0xcc>
 8003230:	2b02      	cmp	r3, #2
 8003232:	d014      	beq.n	800325e <UART_SetConfig+0xc2>
 8003234:	d818      	bhi.n	8003268 <UART_SetConfig+0xcc>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <UART_SetConfig+0xa4>
 800323a:	2b01      	cmp	r3, #1
 800323c:	d00a      	beq.n	8003254 <UART_SetConfig+0xb8>
 800323e:	e013      	b.n	8003268 <UART_SetConfig+0xcc>
 8003240:	231f      	movs	r3, #31
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	e021      	b.n	800328e <UART_SetConfig+0xf2>
 800324a:	231f      	movs	r3, #31
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	2202      	movs	r2, #2
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e01c      	b.n	800328e <UART_SetConfig+0xf2>
 8003254:	231f      	movs	r3, #31
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2204      	movs	r2, #4
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e017      	b.n	800328e <UART_SetConfig+0xf2>
 800325e:	231f      	movs	r3, #31
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2208      	movs	r2, #8
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e012      	b.n	800328e <UART_SetConfig+0xf2>
 8003268:	231f      	movs	r3, #31
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2210      	movs	r2, #16
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e00d      	b.n	800328e <UART_SetConfig+0xf2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a67      	ldr	r2, [pc, #412]	; (8003414 <UART_SetConfig+0x278>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d104      	bne.n	8003286 <UART_SetConfig+0xea>
 800327c:	231f      	movs	r3, #31
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e003      	b.n	800328e <UART_SetConfig+0xf2>
 8003286:	231f      	movs	r3, #31
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	2210      	movs	r2, #16
 800328c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	429a      	cmp	r2, r3
 8003298:	d15d      	bne.n	8003356 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800329a:	231f      	movs	r3, #31
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d015      	beq.n	80032d0 <UART_SetConfig+0x134>
 80032a4:	dc18      	bgt.n	80032d8 <UART_SetConfig+0x13c>
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d00d      	beq.n	80032c6 <UART_SetConfig+0x12a>
 80032aa:	dc15      	bgt.n	80032d8 <UART_SetConfig+0x13c>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <UART_SetConfig+0x11a>
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d005      	beq.n	80032c0 <UART_SetConfig+0x124>
 80032b4:	e010      	b.n	80032d8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b6:	f7ff f895 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 80032ba:	0003      	movs	r3, r0
 80032bc:	61bb      	str	r3, [r7, #24]
        break;
 80032be:	e012      	b.n	80032e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c0:	4b55      	ldr	r3, [pc, #340]	; (8003418 <UART_SetConfig+0x27c>)
 80032c2:	61bb      	str	r3, [r7, #24]
        break;
 80032c4:	e00f      	b.n	80032e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032c6:	f7ff f81f 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 80032ca:	0003      	movs	r3, r0
 80032cc:	61bb      	str	r3, [r7, #24]
        break;
 80032ce:	e00a      	b.n	80032e6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	61bb      	str	r3, [r7, #24]
        break;
 80032d6:	e006      	b.n	80032e6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032dc:	231e      	movs	r3, #30
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
        break;
 80032e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d100      	bne.n	80032ee <UART_SetConfig+0x152>
 80032ec:	e07b      	b.n	80033e6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	005a      	lsls	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	18d2      	adds	r2, r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	0019      	movs	r1, r3
 8003300:	0010      	movs	r0, r2
 8003302:	f7fc ff13 	bl	800012c <__udivsi3>
 8003306:	0003      	movs	r3, r0
 8003308:	b29b      	uxth	r3, r3
 800330a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b0f      	cmp	r3, #15
 8003310:	d91c      	bls.n	800334c <UART_SetConfig+0x1b0>
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	429a      	cmp	r2, r3
 800331a:	d217      	bcs.n	800334c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	b29a      	uxth	r2, r3
 8003320:	200e      	movs	r0, #14
 8003322:	183b      	adds	r3, r7, r0
 8003324:	210f      	movs	r1, #15
 8003326:	438a      	bics	r2, r1
 8003328:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	b29b      	uxth	r3, r3
 8003330:	2207      	movs	r2, #7
 8003332:	4013      	ands	r3, r2
 8003334:	b299      	uxth	r1, r3
 8003336:	183b      	adds	r3, r7, r0
 8003338:	183a      	adds	r2, r7, r0
 800333a:	8812      	ldrh	r2, [r2, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	183a      	adds	r2, r7, r0
 8003346:	8812      	ldrh	r2, [r2, #0]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	e04c      	b.n	80033e6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800334c:	231e      	movs	r3, #30
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	e047      	b.n	80033e6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003356:	231f      	movs	r3, #31
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d015      	beq.n	800338c <UART_SetConfig+0x1f0>
 8003360:	dc18      	bgt.n	8003394 <UART_SetConfig+0x1f8>
 8003362:	2b04      	cmp	r3, #4
 8003364:	d00d      	beq.n	8003382 <UART_SetConfig+0x1e6>
 8003366:	dc15      	bgt.n	8003394 <UART_SetConfig+0x1f8>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <UART_SetConfig+0x1d6>
 800336c:	2b02      	cmp	r3, #2
 800336e:	d005      	beq.n	800337c <UART_SetConfig+0x1e0>
 8003370:	e010      	b.n	8003394 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003372:	f7ff f837 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8003376:	0003      	movs	r3, r0
 8003378:	61bb      	str	r3, [r7, #24]
        break;
 800337a:	e012      	b.n	80033a2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800337c:	4b26      	ldr	r3, [pc, #152]	; (8003418 <UART_SetConfig+0x27c>)
 800337e:	61bb      	str	r3, [r7, #24]
        break;
 8003380:	e00f      	b.n	80033a2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003382:	f7fe ffc1 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 8003386:	0003      	movs	r3, r0
 8003388:	61bb      	str	r3, [r7, #24]
        break;
 800338a:	e00a      	b.n	80033a2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	61bb      	str	r3, [r7, #24]
        break;
 8003392:	e006      	b.n	80033a2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003398:	231e      	movs	r3, #30
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
        break;
 80033a0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01e      	beq.n	80033e6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	085a      	lsrs	r2, r3, #1
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	18d2      	adds	r2, r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	0019      	movs	r1, r3
 80033b8:	0010      	movs	r0, r2
 80033ba:	f7fc feb7 	bl	800012c <__udivsi3>
 80033be:	0003      	movs	r3, r0
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b0f      	cmp	r3, #15
 80033c8:	d909      	bls.n	80033de <UART_SetConfig+0x242>
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	025b      	lsls	r3, r3, #9
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d204      	bcs.n	80033de <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	e003      	b.n	80033e6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80033de:	231e      	movs	r3, #30
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033f2:	231e      	movs	r3, #30
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	781b      	ldrb	r3, [r3, #0]
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b008      	add	sp, #32
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	ffff69f3 	.word	0xffff69f3
 8003404:	ffffcfff 	.word	0xffffcfff
 8003408:	fffff4ff 	.word	0xfffff4ff
 800340c:	40013800 	.word	0x40013800
 8003410:	40021000 	.word	0x40021000
 8003414:	40004400 	.word	0x40004400
 8003418:	007a1200 	.word	0x007a1200

0800341c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	2201      	movs	r2, #1
 800342a:	4013      	ands	r3, r2
 800342c:	d00b      	beq.n	8003446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a4a      	ldr	r2, [pc, #296]	; (8003560 <UART_AdvFeatureConfig+0x144>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	2202      	movs	r2, #2
 800344c:	4013      	ands	r3, r2
 800344e:	d00b      	beq.n	8003468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4a43      	ldr	r2, [pc, #268]	; (8003564 <UART_AdvFeatureConfig+0x148>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2204      	movs	r2, #4
 800346e:	4013      	ands	r3, r2
 8003470:	d00b      	beq.n	800348a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a3b      	ldr	r2, [pc, #236]	; (8003568 <UART_AdvFeatureConfig+0x14c>)
 800347a:	4013      	ands	r3, r2
 800347c:	0019      	movs	r1, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	2208      	movs	r2, #8
 8003490:	4013      	ands	r3, r2
 8003492:	d00b      	beq.n	80034ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4a34      	ldr	r2, [pc, #208]	; (800356c <UART_AdvFeatureConfig+0x150>)
 800349c:	4013      	ands	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	2210      	movs	r2, #16
 80034b2:	4013      	ands	r3, r2
 80034b4:	d00b      	beq.n	80034ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a2c      	ldr	r2, [pc, #176]	; (8003570 <UART_AdvFeatureConfig+0x154>)
 80034be:	4013      	ands	r3, r2
 80034c0:	0019      	movs	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	2220      	movs	r2, #32
 80034d4:	4013      	ands	r3, r2
 80034d6:	d00b      	beq.n	80034f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	4a25      	ldr	r2, [pc, #148]	; (8003574 <UART_AdvFeatureConfig+0x158>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2240      	movs	r2, #64	; 0x40
 80034f6:	4013      	ands	r3, r2
 80034f8:	d01d      	beq.n	8003536 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <UART_AdvFeatureConfig+0x15c>)
 8003502:	4013      	ands	r3, r2
 8003504:	0019      	movs	r1, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	035b      	lsls	r3, r3, #13
 800351a:	429a      	cmp	r2, r3
 800351c:	d10b      	bne.n	8003536 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a15      	ldr	r2, [pc, #84]	; (800357c <UART_AdvFeatureConfig+0x160>)
 8003526:	4013      	ands	r3, r2
 8003528:	0019      	movs	r1, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	4013      	ands	r3, r2
 800353e:	d00b      	beq.n	8003558 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4a0e      	ldr	r2, [pc, #56]	; (8003580 <UART_AdvFeatureConfig+0x164>)
 8003548:	4013      	ands	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b002      	add	sp, #8
 800355e:	bd80      	pop	{r7, pc}
 8003560:	fffdffff 	.word	0xfffdffff
 8003564:	fffeffff 	.word	0xfffeffff
 8003568:	fffbffff 	.word	0xfffbffff
 800356c:	ffff7fff 	.word	0xffff7fff
 8003570:	ffffefff 	.word	0xffffefff
 8003574:	ffffdfff 	.word	0xffffdfff
 8003578:	ffefffff 	.word	0xffefffff
 800357c:	ff9fffff 	.word	0xff9fffff
 8003580:	fff7ffff 	.word	0xfff7ffff

08003584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af02      	add	r7, sp, #8
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	2100      	movs	r1, #0
 8003592:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003594:	f7fd fb2a 	bl	8000bec <HAL_GetTick>
 8003598:	0003      	movs	r3, r0
 800359a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2208      	movs	r2, #8
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d10c      	bne.n	80035c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	0391      	lsls	r1, r2, #14
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4a17      	ldr	r2, [pc, #92]	; (8003610 <UART_CheckIdleState+0x8c>)
 80035b4:	9200      	str	r2, [sp, #0]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f000 f82c 	bl	8003614 <UART_WaitOnFlagUntilTimeout>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d001      	beq.n	80035c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e021      	b.n	8003608 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2204      	movs	r2, #4
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d10c      	bne.n	80035ec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2280      	movs	r2, #128	; 0x80
 80035d6:	03d1      	lsls	r1, r2, #15
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4a0d      	ldr	r2, [pc, #52]	; (8003610 <UART_CheckIdleState+0x8c>)
 80035dc:	9200      	str	r2, [sp, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	f000 f818 	bl	8003614 <UART_WaitOnFlagUntilTimeout>
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d001      	beq.n	80035ec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e00d      	b.n	8003608 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2274      	movs	r2, #116	; 0x74
 8003602:	2100      	movs	r1, #0
 8003604:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}
 8003610:	01ffffff 	.word	0x01ffffff

08003614 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b094      	sub	sp, #80	; 0x50
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	1dfb      	adds	r3, r7, #7
 8003622:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003624:	e0a3      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003628:	3301      	adds	r3, #1
 800362a:	d100      	bne.n	800362e <UART_WaitOnFlagUntilTimeout+0x1a>
 800362c:	e09f      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7fd fadd 	bl	8000bec <HAL_GetTick>
 8003632:	0002      	movs	r2, r0
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <UART_WaitOnFlagUntilTimeout+0x30>
 800363e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003640:	2b00      	cmp	r3, #0
 8003642:	d13d      	bne.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003644:	f3ef 8310 	mrs	r3, PRIMASK
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800364c:	647b      	str	r3, [r7, #68]	; 0x44
 800364e:	2301      	movs	r3, #1
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	f383 8810 	msr	PRIMASK, r3
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	494c      	ldr	r1, [pc, #304]	; (8003798 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003666:	400a      	ands	r2, r1
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	f383 8810 	msr	PRIMASK, r3
}
 8003674:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003676:	f3ef 8310 	mrs	r3, PRIMASK
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367e:	643b      	str	r3, [r7, #64]	; 0x40
 8003680:	2301      	movs	r3, #1
 8003682:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003686:	f383 8810 	msr	PRIMASK, r3
}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2101      	movs	r1, #1
 8003698:	438a      	bics	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a2:	f383 8810 	msr	PRIMASK, r3
}
 80036a6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2274      	movs	r2, #116	; 0x74
 80036b8:	2100      	movs	r1, #0
 80036ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e067      	b.n	8003790 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2204      	movs	r2, #4
 80036c8:	4013      	ands	r3, r2
 80036ca:	d050      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	401a      	ands	r2, r3
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	429a      	cmp	r2, r3
 80036de:	d146      	bne.n	800376e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2280      	movs	r2, #128	; 0x80
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ea:	f3ef 8310 	mrs	r3, PRIMASK
 80036ee:	613b      	str	r3, [r7, #16]
  return(result);
 80036f0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f4:	2301      	movs	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f383 8810 	msr	PRIMASK, r3
}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4923      	ldr	r1, [pc, #140]	; (8003798 <UART_WaitOnFlagUntilTimeout+0x184>)
 800370c:	400a      	ands	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003712:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f383 8810 	msr	PRIMASK, r3
}
 800371a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371c:	f3ef 8310 	mrs	r3, PRIMASK
 8003720:	61fb      	str	r3, [r7, #28]
  return(result);
 8003722:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003724:	64bb      	str	r3, [r7, #72]	; 0x48
 8003726:	2301      	movs	r3, #1
 8003728:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f383 8810 	msr	PRIMASK, r3
}
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	438a      	bics	r2, r1
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	f383 8810 	msr	PRIMASK, r3
}
 800374c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2280      	movs	r2, #128	; 0x80
 800375e:	2120      	movs	r1, #32
 8003760:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2274      	movs	r2, #116	; 0x74
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e010      	b.n	8003790 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	4013      	ands	r3, r2
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	425a      	negs	r2, r3
 800377e:	4153      	adcs	r3, r2
 8003780:	b2db      	uxtb	r3, r3
 8003782:	001a      	movs	r2, r3
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d100      	bne.n	800378e <UART_WaitOnFlagUntilTimeout+0x17a>
 800378c:	e74b      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b014      	add	sp, #80	; 0x50
 8003796:	bd80      	pop	{r7, pc}
 8003798:	fffffe5f 	.word	0xfffffe5f

0800379c <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	0002      	movs	r2, r0
 80037a4:	1dbb      	adds	r3, r7, #6
 80037a6:	801a      	strh	r2, [r3, #0]
 80037a8:	1d7b      	adds	r3, r7, #5
 80037aa:	1c0a      	adds	r2, r1, #0
 80037ac:	701a      	strb	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80037ae:	240f      	movs	r4, #15
 80037b0:	193b      	adds	r3, r7, r4
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 80037b6:	1d7b      	adds	r3, r7, #5
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	1dbb      	adds	r3, r7, #6
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	2101      	movs	r1, #1
 80037c0:	0018      	movs	r0, r3
 80037c2:	f000 fa0d 	bl	8003be0 <VL53L1_WrByte>
 80037c6:	0003      	movs	r3, r0
 80037c8:	0019      	movs	r1, r3
 80037ca:	193b      	adds	r3, r7, r4
 80037cc:	193a      	adds	r2, r7, r4
 80037ce:	7812      	ldrb	r2, [r2, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	701a      	strb	r2, [r3, #0]
	return status;
 80037d4:	193b      	adds	r3, r7, r4
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	b25b      	sxtb	r3, r3
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b005      	add	sp, #20
 80037e0:	bd90      	pop	{r4, r7, pc}
	...

080037e4 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	0002      	movs	r2, r0
 80037ec:	1dbb      	adds	r3, r7, #6
 80037ee:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80037f0:	230f      	movs	r3, #15
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 80037f8:	210e      	movs	r1, #14
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8003800:	187b      	adds	r3, r7, r1
 8003802:	222d      	movs	r2, #45	; 0x2d
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e01a      	b.n	800383e <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8003808:	240e      	movs	r4, #14
 800380a:	193b      	adds	r3, r7, r4
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	b299      	uxth	r1, r3
 8003810:	193b      	adds	r3, r7, r4
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	3b2d      	subs	r3, #45	; 0x2d
 8003816:	4a3e      	ldr	r2, [pc, #248]	; (8003910 <VL53L1X_SensorInit+0x12c>)
 8003818:	5cd2      	ldrb	r2, [r2, r3]
 800381a:	1dbb      	adds	r3, r7, #6
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	0018      	movs	r0, r3
 8003820:	f000 f9de 	bl	8003be0 <VL53L1_WrByte>
 8003824:	0003      	movs	r3, r0
 8003826:	0019      	movs	r1, r3
 8003828:	220f      	movs	r2, #15
 800382a:	18bb      	adds	r3, r7, r2
 800382c:	18ba      	adds	r2, r7, r2
 800382e:	7812      	ldrb	r2, [r2, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8003834:	193b      	adds	r3, r7, r4
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	193b      	adds	r3, r7, r4
 800383a:	3201      	adds	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	230e      	movs	r3, #14
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b87      	cmp	r3, #135	; 0x87
 8003846:	d9df      	bls.n	8003808 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 8003848:	1dbb      	adds	r3, r7, #6
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	0018      	movs	r0, r3
 800384e:	f000 f8b3 	bl	80039b8 <VL53L1X_StartRanging>
 8003852:	0003      	movs	r3, r0
 8003854:	0019      	movs	r1, r3
 8003856:	220f      	movs	r2, #15
 8003858:	18bb      	adds	r3, r7, r2
 800385a:	18ba      	adds	r2, r7, r2
 800385c:	7812      	ldrb	r2, [r2, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 8003862:	230d      	movs	r3, #13
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 800386a:	e00f      	b.n	800388c <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 800386c:	230d      	movs	r3, #13
 800386e:	18fa      	adds	r2, r7, r3
 8003870:	1dbb      	adds	r3, r7, #6
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	0011      	movs	r1, r2
 8003876:	0018      	movs	r0, r3
 8003878:	f000 f8dc 	bl	8003a34 <VL53L1X_CheckForDataReady>
 800387c:	0003      	movs	r3, r0
 800387e:	0019      	movs	r1, r3
 8003880:	220f      	movs	r2, #15
 8003882:	18bb      	adds	r3, r7, r2
 8003884:	18ba      	adds	r2, r7, r2
 8003886:	7812      	ldrb	r2, [r2, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 800388c:	230d      	movs	r3, #13
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0ea      	beq.n	800386c <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8003896:	1dbb      	adds	r3, r7, #6
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	0018      	movs	r0, r3
 800389c:	f000 f83a 	bl	8003914 <VL53L1X_ClearInterrupt>
 80038a0:	0003      	movs	r3, r0
 80038a2:	0019      	movs	r1, r3
 80038a4:	240f      	movs	r4, #15
 80038a6:	193b      	adds	r3, r7, r4
 80038a8:	193a      	adds	r2, r7, r4
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 80038b0:	1dbb      	adds	r3, r7, #6
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 f89e 	bl	80039f6 <VL53L1X_StopRanging>
 80038ba:	0003      	movs	r3, r0
 80038bc:	0019      	movs	r1, r3
 80038be:	193b      	adds	r3, r7, r4
 80038c0:	193a      	adds	r2, r7, r4
 80038c2:	7812      	ldrb	r2, [r2, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 80038c8:	1dbb      	adds	r3, r7, #6
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	2209      	movs	r2, #9
 80038ce:	2108      	movs	r1, #8
 80038d0:	0018      	movs	r0, r3
 80038d2:	f000 f985 	bl	8003be0 <VL53L1_WrByte>
 80038d6:	0003      	movs	r3, r0
 80038d8:	0019      	movs	r1, r3
 80038da:	193b      	adds	r3, r7, r4
 80038dc:	193a      	adds	r2, r7, r4
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	210b      	movs	r1, #11
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 f977 	bl	8003be0 <VL53L1_WrByte>
 80038f2:	0003      	movs	r3, r0
 80038f4:	0019      	movs	r1, r3
 80038f6:	193b      	adds	r3, r7, r4
 80038f8:	193a      	adds	r2, r7, r4
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	701a      	strb	r2, [r3, #0]
	return status;
 8003900:	193b      	adds	r3, r7, r4
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b25b      	sxtb	r3, r3
}
 8003906:	0018      	movs	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	b005      	add	sp, #20
 800390c:	bd90      	pop	{r4, r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	080048b0 	.word	0x080048b0

08003914 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	0002      	movs	r2, r0
 800391c:	1dbb      	adds	r3, r7, #6
 800391e:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003920:	240f      	movs	r4, #15
 8003922:	193b      	adds	r3, r7, r4
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8003928:	1dbb      	adds	r3, r7, #6
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	2201      	movs	r2, #1
 800392e:	2186      	movs	r1, #134	; 0x86
 8003930:	0018      	movs	r0, r3
 8003932:	f000 f955 	bl	8003be0 <VL53L1_WrByte>
 8003936:	0003      	movs	r3, r0
 8003938:	0019      	movs	r1, r3
 800393a:	193b      	adds	r3, r7, r4
 800393c:	193a      	adds	r2, r7, r4
 800393e:	7812      	ldrb	r2, [r2, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	701a      	strb	r2, [r3, #0]
	return status;
 8003944:	193b      	adds	r3, r7, r4
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	b25b      	sxtb	r3, r3
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b005      	add	sp, #20
 8003950:	bd90      	pop	{r4, r7, pc}

08003952 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8003952:	b5b0      	push	{r4, r5, r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	0002      	movs	r2, r0
 800395a:	6039      	str	r1, [r7, #0]
 800395c:	1dbb      	adds	r3, r7, #6
 800395e:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8003960:	240f      	movs	r4, #15
 8003962:	193b      	adds	r3, r7, r4
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8003968:	250e      	movs	r5, #14
 800396a:	197a      	adds	r2, r7, r5
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	2130      	movs	r1, #48	; 0x30
 8003972:	0018      	movs	r0, r3
 8003974:	f000 f970 	bl	8003c58 <VL53L1_RdByte>
 8003978:	0003      	movs	r3, r0
 800397a:	0019      	movs	r1, r3
 800397c:	0020      	movs	r0, r4
 800397e:	183b      	adds	r3, r7, r0
 8003980:	183a      	adds	r2, r7, r0
 8003982:	7812      	ldrb	r2, [r2, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8003988:	197b      	adds	r3, r7, r5
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2210      	movs	r2, #16
 800398e:	4013      	ands	r3, r2
 8003990:	b2da      	uxtb	r2, r3
 8003992:	197b      	adds	r3, r7, r5
 8003994:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8003996:	197b      	adds	r3, r7, r5
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	091b      	lsrs	r3, r3, #4
 800399c:	b2db      	uxtb	r3, r3
 800399e:	425a      	negs	r2, r3
 80039a0:	4153      	adcs	r3, r2
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	001a      	movs	r2, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	701a      	strb	r2, [r3, #0]
	return status;
 80039aa:	183b      	adds	r3, r7, r0
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b25b      	sxtb	r3, r3
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b004      	add	sp, #16
 80039b6:	bdb0      	pop	{r4, r5, r7, pc}

080039b8 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	0002      	movs	r2, r0
 80039c0:	1dbb      	adds	r3, r7, #6
 80039c2:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80039c4:	240f      	movs	r4, #15
 80039c6:	193b      	adds	r3, r7, r4
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 80039cc:	1dbb      	adds	r3, r7, #6
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	2240      	movs	r2, #64	; 0x40
 80039d2:	2187      	movs	r1, #135	; 0x87
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 f903 	bl	8003be0 <VL53L1_WrByte>
 80039da:	0003      	movs	r3, r0
 80039dc:	0019      	movs	r1, r3
 80039de:	193b      	adds	r3, r7, r4
 80039e0:	193a      	adds	r2, r7, r4
 80039e2:	7812      	ldrb	r2, [r2, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	701a      	strb	r2, [r3, #0]
	return status;
 80039e8:	193b      	adds	r3, r7, r4
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b25b      	sxtb	r3, r3
}
 80039ee:	0018      	movs	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b005      	add	sp, #20
 80039f4:	bd90      	pop	{r4, r7, pc}

080039f6 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80039f6:	b590      	push	{r4, r7, lr}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	0002      	movs	r2, r0
 80039fe:	1dbb      	adds	r3, r7, #6
 8003a00:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003a02:	240f      	movs	r4, #15
 8003a04:	193b      	adds	r3, r7, r4
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8003a0a:	1dbb      	adds	r3, r7, #6
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2187      	movs	r1, #135	; 0x87
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 f8e4 	bl	8003be0 <VL53L1_WrByte>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	193b      	adds	r3, r7, r4
 8003a1e:	193a      	adds	r2, r7, r4
 8003a20:	7812      	ldrb	r2, [r2, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	701a      	strb	r2, [r3, #0]
	return status;
 8003a26:	193b      	adds	r3, r7, r4
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	b25b      	sxtb	r3, r3
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b005      	add	sp, #20
 8003a32:	bd90      	pop	{r4, r7, pc}

08003a34 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8003a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	0002      	movs	r2, r0
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	1dbb      	adds	r3, r7, #6
 8003a40:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8003a42:	240f      	movs	r4, #15
 8003a44:	193b      	adds	r3, r7, r4
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8003a4a:	250d      	movs	r5, #13
 8003a4c:	197a      	adds	r2, r7, r5
 8003a4e:	1dbb      	adds	r3, r7, #6
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	0011      	movs	r1, r2
 8003a54:	0018      	movs	r0, r3
 8003a56:	f7ff ff7c 	bl	8003952 <VL53L1X_GetInterruptPolarity>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	193b      	adds	r3, r7, r4
 8003a60:	193a      	adds	r2, r7, r4
 8003a62:	7812      	ldrb	r2, [r2, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8003a68:	260e      	movs	r6, #14
 8003a6a:	19ba      	adds	r2, r7, r6
 8003a6c:	1dbb      	adds	r3, r7, #6
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	2131      	movs	r1, #49	; 0x31
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 f8f0 	bl	8003c58 <VL53L1_RdByte>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	193b      	adds	r3, r7, r4
 8003a7e:	193a      	adds	r2, r7, r4
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8003a86:	193b      	adds	r3, r7, r4
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	b25b      	sxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10f      	bne.n	8003ab0 <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 8003a90:	19bb      	adds	r3, r7, r6
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	001a      	movs	r2, r3
 8003a96:	2301      	movs	r3, #1
 8003a98:	4013      	ands	r3, r2
 8003a9a:	197a      	adds	r2, r7, r5
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d103      	bne.n	8003aaa <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	e002      	b.n	8003ab0 <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8003ab0:	230f      	movs	r3, #15
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b25b      	sxtb	r3, r3
}
 8003ab8:	0018      	movs	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b005      	add	sp, #20
 8003abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ac0 <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 8003ac0:	b5b0      	push	{r4, r5, r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	6039      	str	r1, [r7, #0]
 8003aca:	1dbb      	adds	r3, r7, #6
 8003acc:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003ace:	240f      	movs	r4, #15
 8003ad0:	193b      	adds	r3, r7, r4
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
	uint16_t tmp = 0;
 8003ad6:	250c      	movs	r5, #12
 8003ad8:	197b      	adds	r3, r7, r5
 8003ada:	2200      	movs	r2, #0
 8003adc:	801a      	strh	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 8003ade:	197a      	adds	r2, r7, r5
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	33ff      	adds	r3, #255	; 0xff
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	1dbb      	adds	r3, r7, #6
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 f8fa 	bl	8003ce4 <VL53L1_RdWord>
 8003af0:	0003      	movs	r3, r0
 8003af2:	0019      	movs	r1, r3
 8003af4:	193b      	adds	r3, r7, r4
 8003af6:	193a      	adds	r2, r7, r4
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	701a      	strb	r2, [r3, #0]
	*sensorId = tmp;
 8003afe:	197b      	adds	r3, r7, r5
 8003b00:	881a      	ldrh	r2, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	801a      	strh	r2, [r3, #0]
	return status;
 8003b06:	193b      	adds	r3, r7, r4
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	b25b      	sxtb	r3, r3
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b004      	add	sp, #16
 8003b12:	bdb0      	pop	{r4, r5, r7, pc}

08003b14 <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8003b14:	b5b0      	push	{r4, r5, r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	6039      	str	r1, [r7, #0]
 8003b1e:	1dbb      	adds	r3, r7, #6
 8003b20:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003b22:	240f      	movs	r4, #15
 8003b24:	193b      	adds	r3, r7, r4
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8003b2a:	250c      	movs	r5, #12
 8003b2c:	197a      	adds	r2, r7, r5
 8003b2e:	1dbb      	adds	r3, r7, #6
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	2196      	movs	r1, #150	; 0x96
 8003b34:	0018      	movs	r0, r3
 8003b36:	f000 f8d5 	bl	8003ce4 <VL53L1_RdWord>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	0020      	movs	r0, r4
 8003b40:	183b      	adds	r3, r7, r0
 8003b42:	183a      	adds	r2, r7, r0
 8003b44:	7812      	ldrb	r2, [r2, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8003b4a:	197b      	adds	r3, r7, r5
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	801a      	strh	r2, [r3, #0]
	return status;
 8003b52:	183b      	adds	r3, r7, r0
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	b25b      	sxtb	r3, r3
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b004      	add	sp, #16
 8003b5e:	bdb0      	pop	{r4, r5, r7, pc}

08003b60 <_I2CWrite>:
#include "VL53L1X.h"
extern VL53L1X* active_sensor;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	230e      	movs	r3, #14
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	1c02      	adds	r2, r0, #0
 8003b70:	801a      	strh	r2, [r3, #0]
	(void) (dev);
	return (int) HAL_I2C_Master_Transmit(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <_I2CWrite+0x3c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <_I2CWrite+0x3c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	791b      	ldrb	r3, [r3, #4]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	18db      	adds	r3, r3, r3
 8003b82:	b299      	uxth	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	2464      	movs	r4, #100	; 0x64
 8003b8c:	9400      	str	r4, [sp, #0]
 8003b8e:	f7fd fb33 	bl	80011f8 <HAL_I2C_Master_Transmit>
 8003b92:	0003      	movs	r3, r0
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b005      	add	sp, #20
 8003b9a:	bd90      	pop	{r4, r7, pc}
 8003b9c:	2000053c 	.word	0x2000053c

08003ba0 <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	230e      	movs	r3, #14
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	1c02      	adds	r2, r0, #0
 8003bb0:	801a      	strh	r2, [r3, #0]
	(void) (dev);
    return (int) HAL_I2C_Master_Receive(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <_I2CRead+0x3c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <_I2CRead+0x3c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	791b      	ldrb	r3, [r3, #4]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	18db      	adds	r3, r3, r3
 8003bc2:	b299      	uxth	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	2464      	movs	r4, #100	; 0x64
 8003bcc:	9400      	str	r4, [sp, #0]
 8003bce:	f7fd fc1b 	bl	8001408 <HAL_I2C_Master_Receive>
 8003bd2:	0003      	movs	r3, r0
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b005      	add	sp, #20
 8003bda:	bd90      	pop	{r4, r7, pc}
 8003bdc:	2000053c 	.word	0x2000053c

08003be0 <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8003be0:	b590      	push	{r4, r7, lr}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	0004      	movs	r4, r0
 8003be8:	0008      	movs	r0, r1
 8003bea:	0011      	movs	r1, r2
 8003bec:	1dbb      	adds	r3, r7, #6
 8003bee:	1c22      	adds	r2, r4, #0
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	1d3b      	adds	r3, r7, #4
 8003bf4:	1c02      	adds	r2, r0, #0
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	1cfb      	adds	r3, r7, #3
 8003bfa:	1c0a      	adds	r2, r1, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003bfe:	240f      	movs	r4, #15
 8003c00:	193b      	adds	r3, r7, r4
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <VL53L1_WrByte+0x74>)
 8003c12:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8003c14:	1d3b      	adds	r3, r7, #4
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <VL53L1_WrByte+0x74>)
 8003c1c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <VL53L1_WrByte+0x74>)
 8003c20:	1cfa      	adds	r2, r7, #3
 8003c22:	7812      	ldrb	r2, [r2, #0]
 8003c24:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 8003c26:	490b      	ldr	r1, [pc, #44]	; (8003c54 <VL53L1_WrByte+0x74>)
 8003c28:	1dbb      	adds	r3, r7, #6
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f7ff ff96 	bl	8003b60 <_I2CWrite>
 8003c34:	0003      	movs	r3, r0
 8003c36:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <VL53L1_WrByte+0x64>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003c3e:	193b      	adds	r3, r7, r4
 8003c40:	22f3      	movs	r2, #243	; 0xf3
 8003c42:	701a      	strb	r2, [r3, #0]
    }
    return Status;}
 8003c44:	230f      	movs	r3, #15
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b25b      	sxtb	r3, r3
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b005      	add	sp, #20
 8003c52:	bd90      	pop	{r4, r7, pc}
 8003c54:	2000043c 	.word	0x2000043c

08003c58 <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	603a      	str	r2, [r7, #0]
 8003c60:	1dbb      	adds	r3, r7, #6
 8003c62:	1c02      	adds	r2, r0, #0
 8003c64:	801a      	strh	r2, [r3, #0]
 8003c66:	1d3b      	adds	r3, r7, #4
 8003c68:	1c0a      	adds	r2, r1, #0
 8003c6a:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003c6c:	240f      	movs	r4, #15
 8003c6e:	193b      	adds	r3, r7, r4
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <VL53L1_RdByte+0x88>)
 8003c80:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <VL53L1_RdByte+0x88>)
 8003c8a:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8003c8c:	4914      	ldr	r1, [pc, #80]	; (8003ce0 <VL53L1_RdByte+0x88>)
 8003c8e:	1dbb      	adds	r3, r7, #6
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	2202      	movs	r2, #2
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7ff ff63 	bl	8003b60 <_I2CWrite>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	60bb      	str	r3, [r7, #8]
    if( status_int ){
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003ca4:	193b      	adds	r3, r7, r4
 8003ca6:	22f3      	movs	r2, #243	; 0xf3
 8003ca8:	701a      	strb	r2, [r3, #0]
        goto done;
 8003caa:	e011      	b.n	8003cd0 <VL53L1_RdByte+0x78>
    }
    status_int = _I2CRead(dev, data, 1);
 8003cac:	6839      	ldr	r1, [r7, #0]
 8003cae:	1dbb      	adds	r3, r7, #6
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff ff73 	bl	8003ba0 <_I2CRead>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <VL53L1_RdByte+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003cc4:	230f      	movs	r3, #15
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	22f3      	movs	r2, #243	; 0xf3
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e000      	b.n	8003cd0 <VL53L1_RdByte+0x78>
    }
done:
 8003cce:	46c0      	nop			; (mov r8, r8)

	return Status;
 8003cd0:	230f      	movs	r3, #15
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b25b      	sxtb	r3, r3
}
 8003cd8:	0018      	movs	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b005      	add	sp, #20
 8003cde:	bd90      	pop	{r4, r7, pc}
 8003ce0:	2000043c 	.word	0x2000043c

08003ce4 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	603a      	str	r2, [r7, #0]
 8003cec:	1dbb      	adds	r3, r7, #6
 8003cee:	1c02      	adds	r2, r0, #0
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	1d3b      	adds	r3, r7, #4
 8003cf4:	1c0a      	adds	r2, r1, #0
 8003cf6:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003cf8:	240f      	movs	r4, #15
 8003cfa:	193b      	adds	r3, r7, r4
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8003d00:	1d3b      	adds	r3, r7, #4
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <VL53L1_RdWord+0xa0>)
 8003d0c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8003d0e:	1d3b      	adds	r3, r7, #4
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <VL53L1_RdWord+0xa0>)
 8003d16:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8003d18:	491a      	ldr	r1, [pc, #104]	; (8003d84 <VL53L1_RdWord+0xa0>)
 8003d1a:	1dbb      	adds	r3, r7, #6
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7ff ff1d 	bl	8003b60 <_I2CWrite>
 8003d26:	0003      	movs	r3, r0
 8003d28:	60bb      	str	r3, [r7, #8]

    if( status_int ){
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <VL53L1_RdWord+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003d30:	193b      	adds	r3, r7, r4
 8003d32:	22f3      	movs	r2, #243	; 0xf3
 8003d34:	701a      	strb	r2, [r3, #0]
        goto done;
 8003d36:	e01c      	b.n	8003d72 <VL53L1_RdWord+0x8e>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 8003d38:	4912      	ldr	r1, [pc, #72]	; (8003d84 <VL53L1_RdWord+0xa0>)
 8003d3a:	1dbb      	adds	r3, r7, #6
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7ff ff2d 	bl	8003ba0 <_I2CRead>
 8003d46:	0003      	movs	r3, r0
 8003d48:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <VL53L1_RdWord+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003d50:	230f      	movs	r3, #15
 8003d52:	18fb      	adds	r3, r7, r3
 8003d54:	22f3      	movs	r2, #243	; 0xf3
 8003d56:	701a      	strb	r2, [r3, #0]
        goto done;
 8003d58:	e00b      	b.n	8003d72 <VL53L1_RdWord+0x8e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <VL53L1_RdWord+0xa0>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <VL53L1_RdWord+0xa0>)
 8003d66:	785b      	ldrb	r3, [r3, #1]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	18d3      	adds	r3, r2, r3
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 8003d72:	230f      	movs	r3, #15
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	b25b      	sxtb	r3, r3
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b005      	add	sp, #20
 8003d80:	bd90      	pop	{r4, r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	2000043c 	.word	0x2000043c

08003d88 <TOF_InitStruct>:
#include "VL53L1X.h"
#include "VL53L1X_api.h"

VL53L1X* active_sensor;

void TOF_InitStruct(VL53L1X* const sensor, I2C_HandleTypeDef* hi2c, uint8_t address, GPIO_TypeDef* xshut_port, uint16_t xshut_pin) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	1dfb      	adds	r3, r7, #7
 8003d96:	701a      	strb	r2, [r3, #0]
	sensor->hi2c = hi2c;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1dfa      	adds	r2, r7, #7
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	711a      	strb	r2, [r3, #4]

	sensor->xshut_port = xshut_port;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	609a      	str	r2, [r3, #8]
	sensor->xshut_pin = xshut_pin;
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	2318      	movs	r3, #24
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	8193      	strh	r3, [r2, #12]
}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b004      	add	sp, #16
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <TOF_TurnOn>:

void TOF_TurnOn(VL53L1X* const sensor) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8003dc8:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <TOF_TurnOn+0x28>)
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_SET);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6898      	ldr	r0, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	899b      	ldrh	r3, [r3, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	0019      	movs	r1, r3
 8003dda:	f7fd f959 	bl	8001090 <HAL_GPIO_WritePin>
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b002      	add	sp, #8
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	2000053c 	.word	0x2000053c

08003dec <TOF_TurnOff>:

void TOF_TurnOff(VL53L1X* const sensor) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8003df4:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <TOF_TurnOff+0x28>)
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_RESET);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6898      	ldr	r0, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	899b      	ldrh	r3, [r3, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	0019      	movs	r1, r3
 8003e06:	f7fd f943 	bl	8001090 <HAL_GPIO_WritePin>
}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b002      	add	sp, #8
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	2000053c 	.word	0x2000053c

08003e18 <TOF_BootSensor>:
	for (uint8_t n = 0; n < count; n++) {
		TOF_BootSensor(sensors[n]);
	}
}

void TOF_BootSensor(VL53L1X* const sensor) {
 8003e18:	b590      	push	{r4, r7, lr}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8003e20:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <TOF_BootSensor+0x98>)
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
	TOF_TurnOn(sensor);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f7ff ffc9 	bl	8003dc0 <TOF_TurnOn>

	// Assume sensor wasn't initialised and is using default address
	uint8_t correct_address = sensor->address;
 8003e2e:	240f      	movs	r4, #15
 8003e30:	193b      	adds	r3, r7, r4
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	7912      	ldrb	r2, [r2, #4]
 8003e36:	701a      	strb	r2, [r3, #0]
	sensor->address = 0x52 >> 1;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2229      	movs	r2, #41	; 0x29
 8003e3c:	711a      	strb	r2, [r3, #4]

	// Set new address to sensor if necessary
	uint16_t id = 0;
 8003e3e:	210c      	movs	r1, #12
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	2200      	movs	r2, #0
 8003e44:	801a      	strh	r2, [r3, #0]
	if (VL53L1X_GetSensorId(sensor->address, &id)) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	791b      	ldrb	r3, [r3, #4]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	187a      	adds	r2, r7, r1
 8003e4e:	0011      	movs	r1, r2
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7ff fe35 	bl	8003ac0 <VL53L1X_GetSensorId>
 8003e56:	1e03      	subs	r3, r0, #0
 8003e58:	d008      	beq.n	8003e6c <TOF_BootSensor+0x54>
		VL53L1X_SetI2CAddress(sensor->address, correct_address);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	791b      	ldrb	r3, [r3, #4]
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	193b      	adds	r3, r7, r4
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	0019      	movs	r1, r3
 8003e66:	0010      	movs	r0, r2
 8003e68:	f7ff fc98 	bl	800379c <VL53L1X_SetI2CAddress>
	}

	// Initialise sensor
	sensor->address = correct_address;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	220f      	movs	r2, #15
 8003e70:	18ba      	adds	r2, r7, r2
 8003e72:	7812      	ldrb	r2, [r2, #0]
 8003e74:	711a      	strb	r2, [r3, #4]
	VL53L1X_GetSensorId(sensor->address, &id);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	791b      	ldrb	r3, [r3, #4]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	240c      	movs	r4, #12
 8003e7e:	193a      	adds	r2, r7, r4
 8003e80:	0011      	movs	r1, r2
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7ff fe1c 	bl	8003ac0 <VL53L1X_GetSensorId>
	if (id != 0) {
 8003e88:	193b      	adds	r3, r7, r4
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00b      	beq.n	8003ea8 <TOF_BootSensor+0x90>
		VL53L1X_SensorInit(sensor->address);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	791b      	ldrb	r3, [r3, #4]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	0018      	movs	r0, r3
 8003e98:	f7ff fca4 	bl	80037e4 <VL53L1X_SensorInit>
		VL53L1X_StartRanging(sensor->address);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	791b      	ldrb	r3, [r3, #4]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f7ff fd88 	bl	80039b8 <VL53L1X_StartRanging>
	}
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b005      	add	sp, #20
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	2000053c 	.word	0x2000053c

08003eb4 <TOF_GetDistance>:
void TOF_StopRanging(VL53L1X* const sensor) {
	active_sensor = sensor;
	VL53L1X_StopRanging(sensor->address);
}

uint16_t TOF_GetDistance(VL53L1X* const sensor) {
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <TOF_GetDistance+0x34>)
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	601a      	str	r2, [r3, #0]

	uint16_t reading = 0;
 8003ec2:	210e      	movs	r1, #14
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	801a      	strh	r2, [r3, #0]
	VL53L1X_GetDistance(sensor->address, &reading);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	791b      	ldrb	r3, [r3, #4]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	000c      	movs	r4, r1
 8003ed2:	187a      	adds	r2, r7, r1
 8003ed4:	0011      	movs	r1, r2
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7ff fe1c 	bl	8003b14 <VL53L1X_GetDistance>
	return reading;
 8003edc:	193b      	adds	r3, r7, r4
 8003ede:	881b      	ldrh	r3, [r3, #0]
}
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b005      	add	sp, #20
 8003ee6:	bd90      	pop	{r4, r7, pc}
 8003ee8:	2000053c 	.word	0x2000053c

08003eec <__errno>:
 8003eec:	4b01      	ldr	r3, [pc, #4]	; (8003ef4 <__errno+0x8>)
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	4770      	bx	lr
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	20000264 	.word	0x20000264

08003ef8 <__libc_init_array>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	2600      	movs	r6, #0
 8003efc:	4d0c      	ldr	r5, [pc, #48]	; (8003f30 <__libc_init_array+0x38>)
 8003efe:	4c0d      	ldr	r4, [pc, #52]	; (8003f34 <__libc_init_array+0x3c>)
 8003f00:	1b64      	subs	r4, r4, r5
 8003f02:	10a4      	asrs	r4, r4, #2
 8003f04:	42a6      	cmp	r6, r4
 8003f06:	d109      	bne.n	8003f1c <__libc_init_array+0x24>
 8003f08:	2600      	movs	r6, #0
 8003f0a:	f000 fc8b 	bl	8004824 <_init>
 8003f0e:	4d0a      	ldr	r5, [pc, #40]	; (8003f38 <__libc_init_array+0x40>)
 8003f10:	4c0a      	ldr	r4, [pc, #40]	; (8003f3c <__libc_init_array+0x44>)
 8003f12:	1b64      	subs	r4, r4, r5
 8003f14:	10a4      	asrs	r4, r4, #2
 8003f16:	42a6      	cmp	r6, r4
 8003f18:	d105      	bne.n	8003f26 <__libc_init_array+0x2e>
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	00b3      	lsls	r3, r6, #2
 8003f1e:	58eb      	ldr	r3, [r5, r3]
 8003f20:	4798      	blx	r3
 8003f22:	3601      	adds	r6, #1
 8003f24:	e7ee      	b.n	8003f04 <__libc_init_array+0xc>
 8003f26:	00b3      	lsls	r3, r6, #2
 8003f28:	58eb      	ldr	r3, [r5, r3]
 8003f2a:	4798      	blx	r3
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	e7f2      	b.n	8003f16 <__libc_init_array+0x1e>
 8003f30:	08004940 	.word	0x08004940
 8003f34:	08004940 	.word	0x08004940
 8003f38:	08004940 	.word	0x08004940
 8003f3c:	08004944 	.word	0x08004944

08003f40 <memcpy>:
 8003f40:	2300      	movs	r3, #0
 8003f42:	b510      	push	{r4, lr}
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d100      	bne.n	8003f4a <memcpy+0xa>
 8003f48:	bd10      	pop	{r4, pc}
 8003f4a:	5ccc      	ldrb	r4, [r1, r3]
 8003f4c:	54c4      	strb	r4, [r0, r3]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	e7f8      	b.n	8003f44 <memcpy+0x4>

08003f52 <memset>:
 8003f52:	0003      	movs	r3, r0
 8003f54:	1882      	adds	r2, r0, r2
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d100      	bne.n	8003f5c <memset+0xa>
 8003f5a:	4770      	bx	lr
 8003f5c:	7019      	strb	r1, [r3, #0]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	e7f9      	b.n	8003f56 <memset+0x4>
	...

08003f64 <siprintf>:
 8003f64:	b40e      	push	{r1, r2, r3}
 8003f66:	b500      	push	{lr}
 8003f68:	490b      	ldr	r1, [pc, #44]	; (8003f98 <siprintf+0x34>)
 8003f6a:	b09c      	sub	sp, #112	; 0x70
 8003f6c:	ab1d      	add	r3, sp, #116	; 0x74
 8003f6e:	9002      	str	r0, [sp, #8]
 8003f70:	9006      	str	r0, [sp, #24]
 8003f72:	9107      	str	r1, [sp, #28]
 8003f74:	9104      	str	r1, [sp, #16]
 8003f76:	4809      	ldr	r0, [pc, #36]	; (8003f9c <siprintf+0x38>)
 8003f78:	4909      	ldr	r1, [pc, #36]	; (8003fa0 <siprintf+0x3c>)
 8003f7a:	cb04      	ldmia	r3!, {r2}
 8003f7c:	9105      	str	r1, [sp, #20]
 8003f7e:	6800      	ldr	r0, [r0, #0]
 8003f80:	a902      	add	r1, sp, #8
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	f000 f870 	bl	8004068 <_svfiprintf_r>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9a02      	ldr	r2, [sp, #8]
 8003f8c:	7013      	strb	r3, [r2, #0]
 8003f8e:	b01c      	add	sp, #112	; 0x70
 8003f90:	bc08      	pop	{r3}
 8003f92:	b003      	add	sp, #12
 8003f94:	4718      	bx	r3
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	7fffffff 	.word	0x7fffffff
 8003f9c:	20000264 	.word	0x20000264
 8003fa0:	ffff0208 	.word	0xffff0208

08003fa4 <__ssputs_r>:
 8003fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa6:	688e      	ldr	r6, [r1, #8]
 8003fa8:	b085      	sub	sp, #20
 8003faa:	0007      	movs	r7, r0
 8003fac:	000c      	movs	r4, r1
 8003fae:	9203      	str	r2, [sp, #12]
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	429e      	cmp	r6, r3
 8003fb4:	d83c      	bhi.n	8004030 <__ssputs_r+0x8c>
 8003fb6:	2390      	movs	r3, #144	; 0x90
 8003fb8:	898a      	ldrh	r2, [r1, #12]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	421a      	tst	r2, r3
 8003fbe:	d034      	beq.n	800402a <__ssputs_r+0x86>
 8003fc0:	6909      	ldr	r1, [r1, #16]
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	6960      	ldr	r0, [r4, #20]
 8003fc6:	1a5b      	subs	r3, r3, r1
 8003fc8:	9302      	str	r3, [sp, #8]
 8003fca:	2303      	movs	r3, #3
 8003fcc:	4343      	muls	r3, r0
 8003fce:	0fdd      	lsrs	r5, r3, #31
 8003fd0:	18ed      	adds	r5, r5, r3
 8003fd2:	9b01      	ldr	r3, [sp, #4]
 8003fd4:	9802      	ldr	r0, [sp, #8]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	181b      	adds	r3, r3, r0
 8003fda:	106d      	asrs	r5, r5, #1
 8003fdc:	42ab      	cmp	r3, r5
 8003fde:	d900      	bls.n	8003fe2 <__ssputs_r+0x3e>
 8003fe0:	001d      	movs	r5, r3
 8003fe2:	0553      	lsls	r3, r2, #21
 8003fe4:	d532      	bpl.n	800404c <__ssputs_r+0xa8>
 8003fe6:	0029      	movs	r1, r5
 8003fe8:	0038      	movs	r0, r7
 8003fea:	f000 fb49 	bl	8004680 <_malloc_r>
 8003fee:	1e06      	subs	r6, r0, #0
 8003ff0:	d109      	bne.n	8004006 <__ssputs_r+0x62>
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	2340      	movs	r3, #64	; 0x40
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	89a2      	ldrh	r2, [r4, #12]
 8003ffc:	4240      	negs	r0, r0
 8003ffe:	4313      	orrs	r3, r2
 8004000:	81a3      	strh	r3, [r4, #12]
 8004002:	b005      	add	sp, #20
 8004004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004006:	9a02      	ldr	r2, [sp, #8]
 8004008:	6921      	ldr	r1, [r4, #16]
 800400a:	f7ff ff99 	bl	8003f40 <memcpy>
 800400e:	89a3      	ldrh	r3, [r4, #12]
 8004010:	4a14      	ldr	r2, [pc, #80]	; (8004064 <__ssputs_r+0xc0>)
 8004012:	401a      	ands	r2, r3
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	4313      	orrs	r3, r2
 8004018:	81a3      	strh	r3, [r4, #12]
 800401a:	9b02      	ldr	r3, [sp, #8]
 800401c:	6126      	str	r6, [r4, #16]
 800401e:	18f6      	adds	r6, r6, r3
 8004020:	6026      	str	r6, [r4, #0]
 8004022:	6165      	str	r5, [r4, #20]
 8004024:	9e01      	ldr	r6, [sp, #4]
 8004026:	1aed      	subs	r5, r5, r3
 8004028:	60a5      	str	r5, [r4, #8]
 800402a:	9b01      	ldr	r3, [sp, #4]
 800402c:	429e      	cmp	r6, r3
 800402e:	d900      	bls.n	8004032 <__ssputs_r+0x8e>
 8004030:	9e01      	ldr	r6, [sp, #4]
 8004032:	0032      	movs	r2, r6
 8004034:	9903      	ldr	r1, [sp, #12]
 8004036:	6820      	ldr	r0, [r4, #0]
 8004038:	f000 faa3 	bl	8004582 <memmove>
 800403c:	68a3      	ldr	r3, [r4, #8]
 800403e:	2000      	movs	r0, #0
 8004040:	1b9b      	subs	r3, r3, r6
 8004042:	60a3      	str	r3, [r4, #8]
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	199e      	adds	r6, r3, r6
 8004048:	6026      	str	r6, [r4, #0]
 800404a:	e7da      	b.n	8004002 <__ssputs_r+0x5e>
 800404c:	002a      	movs	r2, r5
 800404e:	0038      	movs	r0, r7
 8004050:	f000 fb8c 	bl	800476c <_realloc_r>
 8004054:	1e06      	subs	r6, r0, #0
 8004056:	d1e0      	bne.n	800401a <__ssputs_r+0x76>
 8004058:	0038      	movs	r0, r7
 800405a:	6921      	ldr	r1, [r4, #16]
 800405c:	f000 faa4 	bl	80045a8 <_free_r>
 8004060:	e7c7      	b.n	8003ff2 <__ssputs_r+0x4e>
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	fffffb7f 	.word	0xfffffb7f

08004068 <_svfiprintf_r>:
 8004068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406a:	b0a1      	sub	sp, #132	; 0x84
 800406c:	9003      	str	r0, [sp, #12]
 800406e:	001d      	movs	r5, r3
 8004070:	898b      	ldrh	r3, [r1, #12]
 8004072:	000f      	movs	r7, r1
 8004074:	0016      	movs	r6, r2
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	d511      	bpl.n	800409e <_svfiprintf_r+0x36>
 800407a:	690b      	ldr	r3, [r1, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10e      	bne.n	800409e <_svfiprintf_r+0x36>
 8004080:	2140      	movs	r1, #64	; 0x40
 8004082:	f000 fafd 	bl	8004680 <_malloc_r>
 8004086:	6038      	str	r0, [r7, #0]
 8004088:	6138      	str	r0, [r7, #16]
 800408a:	2800      	cmp	r0, #0
 800408c:	d105      	bne.n	800409a <_svfiprintf_r+0x32>
 800408e:	230c      	movs	r3, #12
 8004090:	9a03      	ldr	r2, [sp, #12]
 8004092:	3801      	subs	r0, #1
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	b021      	add	sp, #132	; 0x84
 8004098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800409a:	2340      	movs	r3, #64	; 0x40
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	2300      	movs	r3, #0
 80040a0:	ac08      	add	r4, sp, #32
 80040a2:	6163      	str	r3, [r4, #20]
 80040a4:	3320      	adds	r3, #32
 80040a6:	7663      	strb	r3, [r4, #25]
 80040a8:	3310      	adds	r3, #16
 80040aa:	76a3      	strb	r3, [r4, #26]
 80040ac:	9507      	str	r5, [sp, #28]
 80040ae:	0035      	movs	r5, r6
 80040b0:	782b      	ldrb	r3, [r5, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <_svfiprintf_r+0x52>
 80040b6:	2b25      	cmp	r3, #37	; 0x25
 80040b8:	d147      	bne.n	800414a <_svfiprintf_r+0xe2>
 80040ba:	1bab      	subs	r3, r5, r6
 80040bc:	9305      	str	r3, [sp, #20]
 80040be:	42b5      	cmp	r5, r6
 80040c0:	d00c      	beq.n	80040dc <_svfiprintf_r+0x74>
 80040c2:	0032      	movs	r2, r6
 80040c4:	0039      	movs	r1, r7
 80040c6:	9803      	ldr	r0, [sp, #12]
 80040c8:	f7ff ff6c 	bl	8003fa4 <__ssputs_r>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d100      	bne.n	80040d2 <_svfiprintf_r+0x6a>
 80040d0:	e0ae      	b.n	8004230 <_svfiprintf_r+0x1c8>
 80040d2:	6962      	ldr	r2, [r4, #20]
 80040d4:	9b05      	ldr	r3, [sp, #20]
 80040d6:	4694      	mov	ip, r2
 80040d8:	4463      	add	r3, ip
 80040da:	6163      	str	r3, [r4, #20]
 80040dc:	782b      	ldrb	r3, [r5, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d100      	bne.n	80040e4 <_svfiprintf_r+0x7c>
 80040e2:	e0a5      	b.n	8004230 <_svfiprintf_r+0x1c8>
 80040e4:	2201      	movs	r2, #1
 80040e6:	2300      	movs	r3, #0
 80040e8:	4252      	negs	r2, r2
 80040ea:	6062      	str	r2, [r4, #4]
 80040ec:	a904      	add	r1, sp, #16
 80040ee:	3254      	adds	r2, #84	; 0x54
 80040f0:	1852      	adds	r2, r2, r1
 80040f2:	1c6e      	adds	r6, r5, #1
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	60e3      	str	r3, [r4, #12]
 80040f8:	60a3      	str	r3, [r4, #8]
 80040fa:	7013      	strb	r3, [r2, #0]
 80040fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80040fe:	2205      	movs	r2, #5
 8004100:	7831      	ldrb	r1, [r6, #0]
 8004102:	4854      	ldr	r0, [pc, #336]	; (8004254 <_svfiprintf_r+0x1ec>)
 8004104:	f000 fa32 	bl	800456c <memchr>
 8004108:	1c75      	adds	r5, r6, #1
 800410a:	2800      	cmp	r0, #0
 800410c:	d11f      	bne.n	800414e <_svfiprintf_r+0xe6>
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	06d3      	lsls	r3, r2, #27
 8004112:	d504      	bpl.n	800411e <_svfiprintf_r+0xb6>
 8004114:	2353      	movs	r3, #83	; 0x53
 8004116:	a904      	add	r1, sp, #16
 8004118:	185b      	adds	r3, r3, r1
 800411a:	2120      	movs	r1, #32
 800411c:	7019      	strb	r1, [r3, #0]
 800411e:	0713      	lsls	r3, r2, #28
 8004120:	d504      	bpl.n	800412c <_svfiprintf_r+0xc4>
 8004122:	2353      	movs	r3, #83	; 0x53
 8004124:	a904      	add	r1, sp, #16
 8004126:	185b      	adds	r3, r3, r1
 8004128:	212b      	movs	r1, #43	; 0x2b
 800412a:	7019      	strb	r1, [r3, #0]
 800412c:	7833      	ldrb	r3, [r6, #0]
 800412e:	2b2a      	cmp	r3, #42	; 0x2a
 8004130:	d016      	beq.n	8004160 <_svfiprintf_r+0xf8>
 8004132:	0035      	movs	r5, r6
 8004134:	2100      	movs	r1, #0
 8004136:	200a      	movs	r0, #10
 8004138:	68e3      	ldr	r3, [r4, #12]
 800413a:	782a      	ldrb	r2, [r5, #0]
 800413c:	1c6e      	adds	r6, r5, #1
 800413e:	3a30      	subs	r2, #48	; 0x30
 8004140:	2a09      	cmp	r2, #9
 8004142:	d94e      	bls.n	80041e2 <_svfiprintf_r+0x17a>
 8004144:	2900      	cmp	r1, #0
 8004146:	d111      	bne.n	800416c <_svfiprintf_r+0x104>
 8004148:	e017      	b.n	800417a <_svfiprintf_r+0x112>
 800414a:	3501      	adds	r5, #1
 800414c:	e7b0      	b.n	80040b0 <_svfiprintf_r+0x48>
 800414e:	4b41      	ldr	r3, [pc, #260]	; (8004254 <_svfiprintf_r+0x1ec>)
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	1ac0      	subs	r0, r0, r3
 8004154:	2301      	movs	r3, #1
 8004156:	4083      	lsls	r3, r0
 8004158:	4313      	orrs	r3, r2
 800415a:	002e      	movs	r6, r5
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	e7ce      	b.n	80040fe <_svfiprintf_r+0x96>
 8004160:	9b07      	ldr	r3, [sp, #28]
 8004162:	1d19      	adds	r1, r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	9107      	str	r1, [sp, #28]
 8004168:	2b00      	cmp	r3, #0
 800416a:	db01      	blt.n	8004170 <_svfiprintf_r+0x108>
 800416c:	930b      	str	r3, [sp, #44]	; 0x2c
 800416e:	e004      	b.n	800417a <_svfiprintf_r+0x112>
 8004170:	425b      	negs	r3, r3
 8004172:	60e3      	str	r3, [r4, #12]
 8004174:	2302      	movs	r3, #2
 8004176:	4313      	orrs	r3, r2
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	782b      	ldrb	r3, [r5, #0]
 800417c:	2b2e      	cmp	r3, #46	; 0x2e
 800417e:	d10a      	bne.n	8004196 <_svfiprintf_r+0x12e>
 8004180:	786b      	ldrb	r3, [r5, #1]
 8004182:	2b2a      	cmp	r3, #42	; 0x2a
 8004184:	d135      	bne.n	80041f2 <_svfiprintf_r+0x18a>
 8004186:	9b07      	ldr	r3, [sp, #28]
 8004188:	3502      	adds	r5, #2
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	9207      	str	r2, [sp, #28]
 8004190:	2b00      	cmp	r3, #0
 8004192:	db2b      	blt.n	80041ec <_svfiprintf_r+0x184>
 8004194:	9309      	str	r3, [sp, #36]	; 0x24
 8004196:	4e30      	ldr	r6, [pc, #192]	; (8004258 <_svfiprintf_r+0x1f0>)
 8004198:	2203      	movs	r2, #3
 800419a:	0030      	movs	r0, r6
 800419c:	7829      	ldrb	r1, [r5, #0]
 800419e:	f000 f9e5 	bl	800456c <memchr>
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d006      	beq.n	80041b4 <_svfiprintf_r+0x14c>
 80041a6:	2340      	movs	r3, #64	; 0x40
 80041a8:	1b80      	subs	r0, r0, r6
 80041aa:	4083      	lsls	r3, r0
 80041ac:	6822      	ldr	r2, [r4, #0]
 80041ae:	3501      	adds	r5, #1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	7829      	ldrb	r1, [r5, #0]
 80041b6:	2206      	movs	r2, #6
 80041b8:	4828      	ldr	r0, [pc, #160]	; (800425c <_svfiprintf_r+0x1f4>)
 80041ba:	1c6e      	adds	r6, r5, #1
 80041bc:	7621      	strb	r1, [r4, #24]
 80041be:	f000 f9d5 	bl	800456c <memchr>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d03c      	beq.n	8004240 <_svfiprintf_r+0x1d8>
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <_svfiprintf_r+0x1f8>)
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d125      	bne.n	8004218 <_svfiprintf_r+0x1b0>
 80041cc:	2207      	movs	r2, #7
 80041ce:	9b07      	ldr	r3, [sp, #28]
 80041d0:	3307      	adds	r3, #7
 80041d2:	4393      	bics	r3, r2
 80041d4:	3308      	adds	r3, #8
 80041d6:	9307      	str	r3, [sp, #28]
 80041d8:	6963      	ldr	r3, [r4, #20]
 80041da:	9a04      	ldr	r2, [sp, #16]
 80041dc:	189b      	adds	r3, r3, r2
 80041de:	6163      	str	r3, [r4, #20]
 80041e0:	e765      	b.n	80040ae <_svfiprintf_r+0x46>
 80041e2:	4343      	muls	r3, r0
 80041e4:	0035      	movs	r5, r6
 80041e6:	2101      	movs	r1, #1
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	e7a6      	b.n	800413a <_svfiprintf_r+0xd2>
 80041ec:	2301      	movs	r3, #1
 80041ee:	425b      	negs	r3, r3
 80041f0:	e7d0      	b.n	8004194 <_svfiprintf_r+0x12c>
 80041f2:	2300      	movs	r3, #0
 80041f4:	200a      	movs	r0, #10
 80041f6:	001a      	movs	r2, r3
 80041f8:	3501      	adds	r5, #1
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	7829      	ldrb	r1, [r5, #0]
 80041fe:	1c6e      	adds	r6, r5, #1
 8004200:	3930      	subs	r1, #48	; 0x30
 8004202:	2909      	cmp	r1, #9
 8004204:	d903      	bls.n	800420e <_svfiprintf_r+0x1a6>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0c5      	beq.n	8004196 <_svfiprintf_r+0x12e>
 800420a:	9209      	str	r2, [sp, #36]	; 0x24
 800420c:	e7c3      	b.n	8004196 <_svfiprintf_r+0x12e>
 800420e:	4342      	muls	r2, r0
 8004210:	0035      	movs	r5, r6
 8004212:	2301      	movs	r3, #1
 8004214:	1852      	adds	r2, r2, r1
 8004216:	e7f1      	b.n	80041fc <_svfiprintf_r+0x194>
 8004218:	ab07      	add	r3, sp, #28
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	003a      	movs	r2, r7
 800421e:	0021      	movs	r1, r4
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <_svfiprintf_r+0x1fc>)
 8004222:	9803      	ldr	r0, [sp, #12]
 8004224:	e000      	b.n	8004228 <_svfiprintf_r+0x1c0>
 8004226:	bf00      	nop
 8004228:	9004      	str	r0, [sp, #16]
 800422a:	9b04      	ldr	r3, [sp, #16]
 800422c:	3301      	adds	r3, #1
 800422e:	d1d3      	bne.n	80041d8 <_svfiprintf_r+0x170>
 8004230:	89bb      	ldrh	r3, [r7, #12]
 8004232:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004234:	065b      	lsls	r3, r3, #25
 8004236:	d400      	bmi.n	800423a <_svfiprintf_r+0x1d2>
 8004238:	e72d      	b.n	8004096 <_svfiprintf_r+0x2e>
 800423a:	2001      	movs	r0, #1
 800423c:	4240      	negs	r0, r0
 800423e:	e72a      	b.n	8004096 <_svfiprintf_r+0x2e>
 8004240:	ab07      	add	r3, sp, #28
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	003a      	movs	r2, r7
 8004246:	0021      	movs	r1, r4
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <_svfiprintf_r+0x1fc>)
 800424a:	9803      	ldr	r0, [sp, #12]
 800424c:	f000 f87c 	bl	8004348 <_printf_i>
 8004250:	e7ea      	b.n	8004228 <_svfiprintf_r+0x1c0>
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	0800490b 	.word	0x0800490b
 8004258:	08004911 	.word	0x08004911
 800425c:	08004915 	.word	0x08004915
 8004260:	00000000 	.word	0x00000000
 8004264:	08003fa5 	.word	0x08003fa5

08004268 <_printf_common>:
 8004268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800426a:	0015      	movs	r5, r2
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	688a      	ldr	r2, [r1, #8]
 8004270:	690b      	ldr	r3, [r1, #16]
 8004272:	000c      	movs	r4, r1
 8004274:	9000      	str	r0, [sp, #0]
 8004276:	4293      	cmp	r3, r2
 8004278:	da00      	bge.n	800427c <_printf_common+0x14>
 800427a:	0013      	movs	r3, r2
 800427c:	0022      	movs	r2, r4
 800427e:	602b      	str	r3, [r5, #0]
 8004280:	3243      	adds	r2, #67	; 0x43
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	2a00      	cmp	r2, #0
 8004286:	d001      	beq.n	800428c <_printf_common+0x24>
 8004288:	3301      	adds	r3, #1
 800428a:	602b      	str	r3, [r5, #0]
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	069b      	lsls	r3, r3, #26
 8004290:	d502      	bpl.n	8004298 <_printf_common+0x30>
 8004292:	682b      	ldr	r3, [r5, #0]
 8004294:	3302      	adds	r3, #2
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	2306      	movs	r3, #6
 800429c:	0017      	movs	r7, r2
 800429e:	401f      	ands	r7, r3
 80042a0:	421a      	tst	r2, r3
 80042a2:	d027      	beq.n	80042f4 <_printf_common+0x8c>
 80042a4:	0023      	movs	r3, r4
 80042a6:	3343      	adds	r3, #67	; 0x43
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	4193      	sbcs	r3, r2
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	0692      	lsls	r2, r2, #26
 80042b2:	d430      	bmi.n	8004316 <_printf_common+0xae>
 80042b4:	0022      	movs	r2, r4
 80042b6:	9901      	ldr	r1, [sp, #4]
 80042b8:	9800      	ldr	r0, [sp, #0]
 80042ba:	9e08      	ldr	r6, [sp, #32]
 80042bc:	3243      	adds	r2, #67	; 0x43
 80042be:	47b0      	blx	r6
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d025      	beq.n	8004310 <_printf_common+0xa8>
 80042c4:	2306      	movs	r3, #6
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	682a      	ldr	r2, [r5, #0]
 80042ca:	68e1      	ldr	r1, [r4, #12]
 80042cc:	2500      	movs	r5, #0
 80042ce:	4003      	ands	r3, r0
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d103      	bne.n	80042dc <_printf_common+0x74>
 80042d4:	1a8d      	subs	r5, r1, r2
 80042d6:	43eb      	mvns	r3, r5
 80042d8:	17db      	asrs	r3, r3, #31
 80042da:	401d      	ands	r5, r3
 80042dc:	68a3      	ldr	r3, [r4, #8]
 80042de:	6922      	ldr	r2, [r4, #16]
 80042e0:	4293      	cmp	r3, r2
 80042e2:	dd01      	ble.n	80042e8 <_printf_common+0x80>
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	18ed      	adds	r5, r5, r3
 80042e8:	2700      	movs	r7, #0
 80042ea:	42bd      	cmp	r5, r7
 80042ec:	d120      	bne.n	8004330 <_printf_common+0xc8>
 80042ee:	2000      	movs	r0, #0
 80042f0:	e010      	b.n	8004314 <_printf_common+0xac>
 80042f2:	3701      	adds	r7, #1
 80042f4:	68e3      	ldr	r3, [r4, #12]
 80042f6:	682a      	ldr	r2, [r5, #0]
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	42bb      	cmp	r3, r7
 80042fc:	ddd2      	ble.n	80042a4 <_printf_common+0x3c>
 80042fe:	0022      	movs	r2, r4
 8004300:	2301      	movs	r3, #1
 8004302:	9901      	ldr	r1, [sp, #4]
 8004304:	9800      	ldr	r0, [sp, #0]
 8004306:	9e08      	ldr	r6, [sp, #32]
 8004308:	3219      	adds	r2, #25
 800430a:	47b0      	blx	r6
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d1f0      	bne.n	80042f2 <_printf_common+0x8a>
 8004310:	2001      	movs	r0, #1
 8004312:	4240      	negs	r0, r0
 8004314:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004316:	2030      	movs	r0, #48	; 0x30
 8004318:	18e1      	adds	r1, r4, r3
 800431a:	3143      	adds	r1, #67	; 0x43
 800431c:	7008      	strb	r0, [r1, #0]
 800431e:	0021      	movs	r1, r4
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	3145      	adds	r1, #69	; 0x45
 8004324:	7809      	ldrb	r1, [r1, #0]
 8004326:	18a2      	adds	r2, r4, r2
 8004328:	3243      	adds	r2, #67	; 0x43
 800432a:	3302      	adds	r3, #2
 800432c:	7011      	strb	r1, [r2, #0]
 800432e:	e7c1      	b.n	80042b4 <_printf_common+0x4c>
 8004330:	0022      	movs	r2, r4
 8004332:	2301      	movs	r3, #1
 8004334:	9901      	ldr	r1, [sp, #4]
 8004336:	9800      	ldr	r0, [sp, #0]
 8004338:	9e08      	ldr	r6, [sp, #32]
 800433a:	321a      	adds	r2, #26
 800433c:	47b0      	blx	r6
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	d0e6      	beq.n	8004310 <_printf_common+0xa8>
 8004342:	3701      	adds	r7, #1
 8004344:	e7d1      	b.n	80042ea <_printf_common+0x82>
	...

08004348 <_printf_i>:
 8004348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800434a:	b08b      	sub	sp, #44	; 0x2c
 800434c:	9206      	str	r2, [sp, #24]
 800434e:	000a      	movs	r2, r1
 8004350:	3243      	adds	r2, #67	; 0x43
 8004352:	9307      	str	r3, [sp, #28]
 8004354:	9005      	str	r0, [sp, #20]
 8004356:	9204      	str	r2, [sp, #16]
 8004358:	7e0a      	ldrb	r2, [r1, #24]
 800435a:	000c      	movs	r4, r1
 800435c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800435e:	2a78      	cmp	r2, #120	; 0x78
 8004360:	d807      	bhi.n	8004372 <_printf_i+0x2a>
 8004362:	2a62      	cmp	r2, #98	; 0x62
 8004364:	d809      	bhi.n	800437a <_printf_i+0x32>
 8004366:	2a00      	cmp	r2, #0
 8004368:	d100      	bne.n	800436c <_printf_i+0x24>
 800436a:	e0c1      	b.n	80044f0 <_printf_i+0x1a8>
 800436c:	2a58      	cmp	r2, #88	; 0x58
 800436e:	d100      	bne.n	8004372 <_printf_i+0x2a>
 8004370:	e08c      	b.n	800448c <_printf_i+0x144>
 8004372:	0026      	movs	r6, r4
 8004374:	3642      	adds	r6, #66	; 0x42
 8004376:	7032      	strb	r2, [r6, #0]
 8004378:	e022      	b.n	80043c0 <_printf_i+0x78>
 800437a:	0010      	movs	r0, r2
 800437c:	3863      	subs	r0, #99	; 0x63
 800437e:	2815      	cmp	r0, #21
 8004380:	d8f7      	bhi.n	8004372 <_printf_i+0x2a>
 8004382:	f7fb fec9 	bl	8000118 <__gnu_thumb1_case_shi>
 8004386:	0016      	.short	0x0016
 8004388:	fff6001f 	.word	0xfff6001f
 800438c:	fff6fff6 	.word	0xfff6fff6
 8004390:	001ffff6 	.word	0x001ffff6
 8004394:	fff6fff6 	.word	0xfff6fff6
 8004398:	fff6fff6 	.word	0xfff6fff6
 800439c:	003600a8 	.word	0x003600a8
 80043a0:	fff6009a 	.word	0xfff6009a
 80043a4:	00b9fff6 	.word	0x00b9fff6
 80043a8:	0036fff6 	.word	0x0036fff6
 80043ac:	fff6fff6 	.word	0xfff6fff6
 80043b0:	009e      	.short	0x009e
 80043b2:	0026      	movs	r6, r4
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	3642      	adds	r6, #66	; 0x42
 80043b8:	1d11      	adds	r1, r2, #4
 80043ba:	6019      	str	r1, [r3, #0]
 80043bc:	6813      	ldr	r3, [r2, #0]
 80043be:	7033      	strb	r3, [r6, #0]
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0a7      	b.n	8004514 <_printf_i+0x1cc>
 80043c4:	6808      	ldr	r0, [r1, #0]
 80043c6:	6819      	ldr	r1, [r3, #0]
 80043c8:	1d0a      	adds	r2, r1, #4
 80043ca:	0605      	lsls	r5, r0, #24
 80043cc:	d50b      	bpl.n	80043e6 <_printf_i+0x9e>
 80043ce:	680d      	ldr	r5, [r1, #0]
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	2d00      	cmp	r5, #0
 80043d4:	da03      	bge.n	80043de <_printf_i+0x96>
 80043d6:	232d      	movs	r3, #45	; 0x2d
 80043d8:	9a04      	ldr	r2, [sp, #16]
 80043da:	426d      	negs	r5, r5
 80043dc:	7013      	strb	r3, [r2, #0]
 80043de:	4b61      	ldr	r3, [pc, #388]	; (8004564 <_printf_i+0x21c>)
 80043e0:	270a      	movs	r7, #10
 80043e2:	9303      	str	r3, [sp, #12]
 80043e4:	e01b      	b.n	800441e <_printf_i+0xd6>
 80043e6:	680d      	ldr	r5, [r1, #0]
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	0641      	lsls	r1, r0, #25
 80043ec:	d5f1      	bpl.n	80043d2 <_printf_i+0x8a>
 80043ee:	b22d      	sxth	r5, r5
 80043f0:	e7ef      	b.n	80043d2 <_printf_i+0x8a>
 80043f2:	680d      	ldr	r5, [r1, #0]
 80043f4:	6819      	ldr	r1, [r3, #0]
 80043f6:	1d08      	adds	r0, r1, #4
 80043f8:	6018      	str	r0, [r3, #0]
 80043fa:	062e      	lsls	r6, r5, #24
 80043fc:	d501      	bpl.n	8004402 <_printf_i+0xba>
 80043fe:	680d      	ldr	r5, [r1, #0]
 8004400:	e003      	b.n	800440a <_printf_i+0xc2>
 8004402:	066d      	lsls	r5, r5, #25
 8004404:	d5fb      	bpl.n	80043fe <_printf_i+0xb6>
 8004406:	680d      	ldr	r5, [r1, #0]
 8004408:	b2ad      	uxth	r5, r5
 800440a:	4b56      	ldr	r3, [pc, #344]	; (8004564 <_printf_i+0x21c>)
 800440c:	2708      	movs	r7, #8
 800440e:	9303      	str	r3, [sp, #12]
 8004410:	2a6f      	cmp	r2, #111	; 0x6f
 8004412:	d000      	beq.n	8004416 <_printf_i+0xce>
 8004414:	3702      	adds	r7, #2
 8004416:	0023      	movs	r3, r4
 8004418:	2200      	movs	r2, #0
 800441a:	3343      	adds	r3, #67	; 0x43
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	6863      	ldr	r3, [r4, #4]
 8004420:	60a3      	str	r3, [r4, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	db03      	blt.n	800442e <_printf_i+0xe6>
 8004426:	2204      	movs	r2, #4
 8004428:	6821      	ldr	r1, [r4, #0]
 800442a:	4391      	bics	r1, r2
 800442c:	6021      	str	r1, [r4, #0]
 800442e:	2d00      	cmp	r5, #0
 8004430:	d102      	bne.n	8004438 <_printf_i+0xf0>
 8004432:	9e04      	ldr	r6, [sp, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00c      	beq.n	8004452 <_printf_i+0x10a>
 8004438:	9e04      	ldr	r6, [sp, #16]
 800443a:	0028      	movs	r0, r5
 800443c:	0039      	movs	r1, r7
 800443e:	f7fb fefb 	bl	8000238 <__aeabi_uidivmod>
 8004442:	9b03      	ldr	r3, [sp, #12]
 8004444:	3e01      	subs	r6, #1
 8004446:	5c5b      	ldrb	r3, [r3, r1]
 8004448:	7033      	strb	r3, [r6, #0]
 800444a:	002b      	movs	r3, r5
 800444c:	0005      	movs	r5, r0
 800444e:	429f      	cmp	r7, r3
 8004450:	d9f3      	bls.n	800443a <_printf_i+0xf2>
 8004452:	2f08      	cmp	r7, #8
 8004454:	d109      	bne.n	800446a <_printf_i+0x122>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	07db      	lsls	r3, r3, #31
 800445a:	d506      	bpl.n	800446a <_printf_i+0x122>
 800445c:	6863      	ldr	r3, [r4, #4]
 800445e:	6922      	ldr	r2, [r4, #16]
 8004460:	4293      	cmp	r3, r2
 8004462:	dc02      	bgt.n	800446a <_printf_i+0x122>
 8004464:	2330      	movs	r3, #48	; 0x30
 8004466:	3e01      	subs	r6, #1
 8004468:	7033      	strb	r3, [r6, #0]
 800446a:	9b04      	ldr	r3, [sp, #16]
 800446c:	1b9b      	subs	r3, r3, r6
 800446e:	6123      	str	r3, [r4, #16]
 8004470:	9b07      	ldr	r3, [sp, #28]
 8004472:	0021      	movs	r1, r4
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	9805      	ldr	r0, [sp, #20]
 8004478:	9b06      	ldr	r3, [sp, #24]
 800447a:	aa09      	add	r2, sp, #36	; 0x24
 800447c:	f7ff fef4 	bl	8004268 <_printf_common>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d14c      	bne.n	800451e <_printf_i+0x1d6>
 8004484:	2001      	movs	r0, #1
 8004486:	4240      	negs	r0, r0
 8004488:	b00b      	add	sp, #44	; 0x2c
 800448a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800448c:	3145      	adds	r1, #69	; 0x45
 800448e:	700a      	strb	r2, [r1, #0]
 8004490:	4a34      	ldr	r2, [pc, #208]	; (8004564 <_printf_i+0x21c>)
 8004492:	9203      	str	r2, [sp, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	6821      	ldr	r1, [r4, #0]
 8004498:	ca20      	ldmia	r2!, {r5}
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	0608      	lsls	r0, r1, #24
 800449e:	d516      	bpl.n	80044ce <_printf_i+0x186>
 80044a0:	07cb      	lsls	r3, r1, #31
 80044a2:	d502      	bpl.n	80044aa <_printf_i+0x162>
 80044a4:	2320      	movs	r3, #32
 80044a6:	4319      	orrs	r1, r3
 80044a8:	6021      	str	r1, [r4, #0]
 80044aa:	2710      	movs	r7, #16
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	d1b2      	bne.n	8004416 <_printf_i+0xce>
 80044b0:	2320      	movs	r3, #32
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	439a      	bics	r2, r3
 80044b6:	6022      	str	r2, [r4, #0]
 80044b8:	e7ad      	b.n	8004416 <_printf_i+0xce>
 80044ba:	2220      	movs	r2, #32
 80044bc:	6809      	ldr	r1, [r1, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	6022      	str	r2, [r4, #0]
 80044c2:	0022      	movs	r2, r4
 80044c4:	2178      	movs	r1, #120	; 0x78
 80044c6:	3245      	adds	r2, #69	; 0x45
 80044c8:	7011      	strb	r1, [r2, #0]
 80044ca:	4a27      	ldr	r2, [pc, #156]	; (8004568 <_printf_i+0x220>)
 80044cc:	e7e1      	b.n	8004492 <_printf_i+0x14a>
 80044ce:	0648      	lsls	r0, r1, #25
 80044d0:	d5e6      	bpl.n	80044a0 <_printf_i+0x158>
 80044d2:	b2ad      	uxth	r5, r5
 80044d4:	e7e4      	b.n	80044a0 <_printf_i+0x158>
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	680d      	ldr	r5, [r1, #0]
 80044da:	1d10      	adds	r0, r2, #4
 80044dc:	6949      	ldr	r1, [r1, #20]
 80044de:	6018      	str	r0, [r3, #0]
 80044e0:	6813      	ldr	r3, [r2, #0]
 80044e2:	062e      	lsls	r6, r5, #24
 80044e4:	d501      	bpl.n	80044ea <_printf_i+0x1a2>
 80044e6:	6019      	str	r1, [r3, #0]
 80044e8:	e002      	b.n	80044f0 <_printf_i+0x1a8>
 80044ea:	066d      	lsls	r5, r5, #25
 80044ec:	d5fb      	bpl.n	80044e6 <_printf_i+0x19e>
 80044ee:	8019      	strh	r1, [r3, #0]
 80044f0:	2300      	movs	r3, #0
 80044f2:	9e04      	ldr	r6, [sp, #16]
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	e7bb      	b.n	8004470 <_printf_i+0x128>
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	1d11      	adds	r1, r2, #4
 80044fc:	6019      	str	r1, [r3, #0]
 80044fe:	6816      	ldr	r6, [r2, #0]
 8004500:	2100      	movs	r1, #0
 8004502:	0030      	movs	r0, r6
 8004504:	6862      	ldr	r2, [r4, #4]
 8004506:	f000 f831 	bl	800456c <memchr>
 800450a:	2800      	cmp	r0, #0
 800450c:	d001      	beq.n	8004512 <_printf_i+0x1ca>
 800450e:	1b80      	subs	r0, r0, r6
 8004510:	6060      	str	r0, [r4, #4]
 8004512:	6863      	ldr	r3, [r4, #4]
 8004514:	6123      	str	r3, [r4, #16]
 8004516:	2300      	movs	r3, #0
 8004518:	9a04      	ldr	r2, [sp, #16]
 800451a:	7013      	strb	r3, [r2, #0]
 800451c:	e7a8      	b.n	8004470 <_printf_i+0x128>
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	0032      	movs	r2, r6
 8004522:	9906      	ldr	r1, [sp, #24]
 8004524:	9805      	ldr	r0, [sp, #20]
 8004526:	9d07      	ldr	r5, [sp, #28]
 8004528:	47a8      	blx	r5
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	d0aa      	beq.n	8004484 <_printf_i+0x13c>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	079b      	lsls	r3, r3, #30
 8004532:	d415      	bmi.n	8004560 <_printf_i+0x218>
 8004534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004536:	68e0      	ldr	r0, [r4, #12]
 8004538:	4298      	cmp	r0, r3
 800453a:	daa5      	bge.n	8004488 <_printf_i+0x140>
 800453c:	0018      	movs	r0, r3
 800453e:	e7a3      	b.n	8004488 <_printf_i+0x140>
 8004540:	0022      	movs	r2, r4
 8004542:	2301      	movs	r3, #1
 8004544:	9906      	ldr	r1, [sp, #24]
 8004546:	9805      	ldr	r0, [sp, #20]
 8004548:	9e07      	ldr	r6, [sp, #28]
 800454a:	3219      	adds	r2, #25
 800454c:	47b0      	blx	r6
 800454e:	1c43      	adds	r3, r0, #1
 8004550:	d098      	beq.n	8004484 <_printf_i+0x13c>
 8004552:	3501      	adds	r5, #1
 8004554:	68e3      	ldr	r3, [r4, #12]
 8004556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	42ab      	cmp	r3, r5
 800455c:	dcf0      	bgt.n	8004540 <_printf_i+0x1f8>
 800455e:	e7e9      	b.n	8004534 <_printf_i+0x1ec>
 8004560:	2500      	movs	r5, #0
 8004562:	e7f7      	b.n	8004554 <_printf_i+0x20c>
 8004564:	0800491c 	.word	0x0800491c
 8004568:	0800492d 	.word	0x0800492d

0800456c <memchr>:
 800456c:	b2c9      	uxtb	r1, r1
 800456e:	1882      	adds	r2, r0, r2
 8004570:	4290      	cmp	r0, r2
 8004572:	d101      	bne.n	8004578 <memchr+0xc>
 8004574:	2000      	movs	r0, #0
 8004576:	4770      	bx	lr
 8004578:	7803      	ldrb	r3, [r0, #0]
 800457a:	428b      	cmp	r3, r1
 800457c:	d0fb      	beq.n	8004576 <memchr+0xa>
 800457e:	3001      	adds	r0, #1
 8004580:	e7f6      	b.n	8004570 <memchr+0x4>

08004582 <memmove>:
 8004582:	b510      	push	{r4, lr}
 8004584:	4288      	cmp	r0, r1
 8004586:	d902      	bls.n	800458e <memmove+0xc>
 8004588:	188b      	adds	r3, r1, r2
 800458a:	4298      	cmp	r0, r3
 800458c:	d303      	bcc.n	8004596 <memmove+0x14>
 800458e:	2300      	movs	r3, #0
 8004590:	e007      	b.n	80045a2 <memmove+0x20>
 8004592:	5c8b      	ldrb	r3, [r1, r2]
 8004594:	5483      	strb	r3, [r0, r2]
 8004596:	3a01      	subs	r2, #1
 8004598:	d2fb      	bcs.n	8004592 <memmove+0x10>
 800459a:	bd10      	pop	{r4, pc}
 800459c:	5ccc      	ldrb	r4, [r1, r3]
 800459e:	54c4      	strb	r4, [r0, r3]
 80045a0:	3301      	adds	r3, #1
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d1fa      	bne.n	800459c <memmove+0x1a>
 80045a6:	e7f8      	b.n	800459a <memmove+0x18>

080045a8 <_free_r>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	0005      	movs	r5, r0
 80045ac:	2900      	cmp	r1, #0
 80045ae:	d010      	beq.n	80045d2 <_free_r+0x2a>
 80045b0:	1f0c      	subs	r4, r1, #4
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	da00      	bge.n	80045ba <_free_r+0x12>
 80045b8:	18e4      	adds	r4, r4, r3
 80045ba:	0028      	movs	r0, r5
 80045bc:	f000 f918 	bl	80047f0 <__malloc_lock>
 80045c0:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <_free_r+0x90>)
 80045c2:	6813      	ldr	r3, [r2, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <_free_r+0x2c>
 80045c8:	6063      	str	r3, [r4, #4]
 80045ca:	6014      	str	r4, [r2, #0]
 80045cc:	0028      	movs	r0, r5
 80045ce:	f000 f917 	bl	8004800 <__malloc_unlock>
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
 80045d4:	42a3      	cmp	r3, r4
 80045d6:	d908      	bls.n	80045ea <_free_r+0x42>
 80045d8:	6821      	ldr	r1, [r4, #0]
 80045da:	1860      	adds	r0, r4, r1
 80045dc:	4283      	cmp	r3, r0
 80045de:	d1f3      	bne.n	80045c8 <_free_r+0x20>
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	1841      	adds	r1, r0, r1
 80045e6:	6021      	str	r1, [r4, #0]
 80045e8:	e7ee      	b.n	80045c8 <_free_r+0x20>
 80045ea:	001a      	movs	r2, r3
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <_free_r+0x4e>
 80045f2:	42a3      	cmp	r3, r4
 80045f4:	d9f9      	bls.n	80045ea <_free_r+0x42>
 80045f6:	6811      	ldr	r1, [r2, #0]
 80045f8:	1850      	adds	r0, r2, r1
 80045fa:	42a0      	cmp	r0, r4
 80045fc:	d10b      	bne.n	8004616 <_free_r+0x6e>
 80045fe:	6820      	ldr	r0, [r4, #0]
 8004600:	1809      	adds	r1, r1, r0
 8004602:	1850      	adds	r0, r2, r1
 8004604:	6011      	str	r1, [r2, #0]
 8004606:	4283      	cmp	r3, r0
 8004608:	d1e0      	bne.n	80045cc <_free_r+0x24>
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	1841      	adds	r1, r0, r1
 8004610:	6011      	str	r1, [r2, #0]
 8004612:	6053      	str	r3, [r2, #4]
 8004614:	e7da      	b.n	80045cc <_free_r+0x24>
 8004616:	42a0      	cmp	r0, r4
 8004618:	d902      	bls.n	8004620 <_free_r+0x78>
 800461a:	230c      	movs	r3, #12
 800461c:	602b      	str	r3, [r5, #0]
 800461e:	e7d5      	b.n	80045cc <_free_r+0x24>
 8004620:	6821      	ldr	r1, [r4, #0]
 8004622:	1860      	adds	r0, r4, r1
 8004624:	4283      	cmp	r3, r0
 8004626:	d103      	bne.n	8004630 <_free_r+0x88>
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	1841      	adds	r1, r0, r1
 800462e:	6021      	str	r1, [r4, #0]
 8004630:	6063      	str	r3, [r4, #4]
 8004632:	6054      	str	r4, [r2, #4]
 8004634:	e7ca      	b.n	80045cc <_free_r+0x24>
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	20000540 	.word	0x20000540

0800463c <sbrk_aligned>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	4e0f      	ldr	r6, [pc, #60]	; (800467c <sbrk_aligned+0x40>)
 8004640:	000d      	movs	r5, r1
 8004642:	6831      	ldr	r1, [r6, #0]
 8004644:	0004      	movs	r4, r0
 8004646:	2900      	cmp	r1, #0
 8004648:	d102      	bne.n	8004650 <sbrk_aligned+0x14>
 800464a:	f000 f8bf 	bl	80047cc <_sbrk_r>
 800464e:	6030      	str	r0, [r6, #0]
 8004650:	0029      	movs	r1, r5
 8004652:	0020      	movs	r0, r4
 8004654:	f000 f8ba 	bl	80047cc <_sbrk_r>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d00a      	beq.n	8004672 <sbrk_aligned+0x36>
 800465c:	2303      	movs	r3, #3
 800465e:	1cc5      	adds	r5, r0, #3
 8004660:	439d      	bics	r5, r3
 8004662:	42a8      	cmp	r0, r5
 8004664:	d007      	beq.n	8004676 <sbrk_aligned+0x3a>
 8004666:	1a29      	subs	r1, r5, r0
 8004668:	0020      	movs	r0, r4
 800466a:	f000 f8af 	bl	80047cc <_sbrk_r>
 800466e:	1c43      	adds	r3, r0, #1
 8004670:	d101      	bne.n	8004676 <sbrk_aligned+0x3a>
 8004672:	2501      	movs	r5, #1
 8004674:	426d      	negs	r5, r5
 8004676:	0028      	movs	r0, r5
 8004678:	bd70      	pop	{r4, r5, r6, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	20000544 	.word	0x20000544

08004680 <_malloc_r>:
 8004680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004682:	2203      	movs	r2, #3
 8004684:	1ccb      	adds	r3, r1, #3
 8004686:	4393      	bics	r3, r2
 8004688:	3308      	adds	r3, #8
 800468a:	0006      	movs	r6, r0
 800468c:	001f      	movs	r7, r3
 800468e:	2b0c      	cmp	r3, #12
 8004690:	d232      	bcs.n	80046f8 <_malloc_r+0x78>
 8004692:	270c      	movs	r7, #12
 8004694:	42b9      	cmp	r1, r7
 8004696:	d831      	bhi.n	80046fc <_malloc_r+0x7c>
 8004698:	0030      	movs	r0, r6
 800469a:	f000 f8a9 	bl	80047f0 <__malloc_lock>
 800469e:	4d32      	ldr	r5, [pc, #200]	; (8004768 <_malloc_r+0xe8>)
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	001c      	movs	r4, r3
 80046a4:	2c00      	cmp	r4, #0
 80046a6:	d12e      	bne.n	8004706 <_malloc_r+0x86>
 80046a8:	0039      	movs	r1, r7
 80046aa:	0030      	movs	r0, r6
 80046ac:	f7ff ffc6 	bl	800463c <sbrk_aligned>
 80046b0:	0004      	movs	r4, r0
 80046b2:	1c43      	adds	r3, r0, #1
 80046b4:	d11e      	bne.n	80046f4 <_malloc_r+0x74>
 80046b6:	682c      	ldr	r4, [r5, #0]
 80046b8:	0025      	movs	r5, r4
 80046ba:	2d00      	cmp	r5, #0
 80046bc:	d14a      	bne.n	8004754 <_malloc_r+0xd4>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	0029      	movs	r1, r5
 80046c2:	18e3      	adds	r3, r4, r3
 80046c4:	0030      	movs	r0, r6
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	f000 f880 	bl	80047cc <_sbrk_r>
 80046cc:	9b01      	ldr	r3, [sp, #4]
 80046ce:	4283      	cmp	r3, r0
 80046d0:	d143      	bne.n	800475a <_malloc_r+0xda>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	3703      	adds	r7, #3
 80046d6:	1aff      	subs	r7, r7, r3
 80046d8:	2303      	movs	r3, #3
 80046da:	439f      	bics	r7, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	2f0c      	cmp	r7, #12
 80046e0:	d200      	bcs.n	80046e4 <_malloc_r+0x64>
 80046e2:	270c      	movs	r7, #12
 80046e4:	0039      	movs	r1, r7
 80046e6:	0030      	movs	r0, r6
 80046e8:	f7ff ffa8 	bl	800463c <sbrk_aligned>
 80046ec:	1c43      	adds	r3, r0, #1
 80046ee:	d034      	beq.n	800475a <_malloc_r+0xda>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	19df      	adds	r7, r3, r7
 80046f4:	6027      	str	r7, [r4, #0]
 80046f6:	e013      	b.n	8004720 <_malloc_r+0xa0>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dacb      	bge.n	8004694 <_malloc_r+0x14>
 80046fc:	230c      	movs	r3, #12
 80046fe:	2500      	movs	r5, #0
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	0028      	movs	r0, r5
 8004704:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004706:	6822      	ldr	r2, [r4, #0]
 8004708:	1bd1      	subs	r1, r2, r7
 800470a:	d420      	bmi.n	800474e <_malloc_r+0xce>
 800470c:	290b      	cmp	r1, #11
 800470e:	d917      	bls.n	8004740 <_malloc_r+0xc0>
 8004710:	19e2      	adds	r2, r4, r7
 8004712:	6027      	str	r7, [r4, #0]
 8004714:	42a3      	cmp	r3, r4
 8004716:	d111      	bne.n	800473c <_malloc_r+0xbc>
 8004718:	602a      	str	r2, [r5, #0]
 800471a:	6863      	ldr	r3, [r4, #4]
 800471c:	6011      	str	r1, [r2, #0]
 800471e:	6053      	str	r3, [r2, #4]
 8004720:	0030      	movs	r0, r6
 8004722:	0025      	movs	r5, r4
 8004724:	f000 f86c 	bl	8004800 <__malloc_unlock>
 8004728:	2207      	movs	r2, #7
 800472a:	350b      	adds	r5, #11
 800472c:	1d23      	adds	r3, r4, #4
 800472e:	4395      	bics	r5, r2
 8004730:	1aea      	subs	r2, r5, r3
 8004732:	429d      	cmp	r5, r3
 8004734:	d0e5      	beq.n	8004702 <_malloc_r+0x82>
 8004736:	1b5b      	subs	r3, r3, r5
 8004738:	50a3      	str	r3, [r4, r2]
 800473a:	e7e2      	b.n	8004702 <_malloc_r+0x82>
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	e7ec      	b.n	800471a <_malloc_r+0x9a>
 8004740:	6862      	ldr	r2, [r4, #4]
 8004742:	42a3      	cmp	r3, r4
 8004744:	d101      	bne.n	800474a <_malloc_r+0xca>
 8004746:	602a      	str	r2, [r5, #0]
 8004748:	e7ea      	b.n	8004720 <_malloc_r+0xa0>
 800474a:	605a      	str	r2, [r3, #4]
 800474c:	e7e8      	b.n	8004720 <_malloc_r+0xa0>
 800474e:	0023      	movs	r3, r4
 8004750:	6864      	ldr	r4, [r4, #4]
 8004752:	e7a7      	b.n	80046a4 <_malloc_r+0x24>
 8004754:	002c      	movs	r4, r5
 8004756:	686d      	ldr	r5, [r5, #4]
 8004758:	e7af      	b.n	80046ba <_malloc_r+0x3a>
 800475a:	230c      	movs	r3, #12
 800475c:	0030      	movs	r0, r6
 800475e:	6033      	str	r3, [r6, #0]
 8004760:	f000 f84e 	bl	8004800 <__malloc_unlock>
 8004764:	e7cd      	b.n	8004702 <_malloc_r+0x82>
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	20000540 	.word	0x20000540

0800476c <_realloc_r>:
 800476c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800476e:	0007      	movs	r7, r0
 8004770:	000e      	movs	r6, r1
 8004772:	0014      	movs	r4, r2
 8004774:	2900      	cmp	r1, #0
 8004776:	d105      	bne.n	8004784 <_realloc_r+0x18>
 8004778:	0011      	movs	r1, r2
 800477a:	f7ff ff81 	bl	8004680 <_malloc_r>
 800477e:	0005      	movs	r5, r0
 8004780:	0028      	movs	r0, r5
 8004782:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004784:	2a00      	cmp	r2, #0
 8004786:	d103      	bne.n	8004790 <_realloc_r+0x24>
 8004788:	f7ff ff0e 	bl	80045a8 <_free_r>
 800478c:	0025      	movs	r5, r4
 800478e:	e7f7      	b.n	8004780 <_realloc_r+0x14>
 8004790:	f000 f83e 	bl	8004810 <_malloc_usable_size_r>
 8004794:	9001      	str	r0, [sp, #4]
 8004796:	4284      	cmp	r4, r0
 8004798:	d803      	bhi.n	80047a2 <_realloc_r+0x36>
 800479a:	0035      	movs	r5, r6
 800479c:	0843      	lsrs	r3, r0, #1
 800479e:	42a3      	cmp	r3, r4
 80047a0:	d3ee      	bcc.n	8004780 <_realloc_r+0x14>
 80047a2:	0021      	movs	r1, r4
 80047a4:	0038      	movs	r0, r7
 80047a6:	f7ff ff6b 	bl	8004680 <_malloc_r>
 80047aa:	1e05      	subs	r5, r0, #0
 80047ac:	d0e8      	beq.n	8004780 <_realloc_r+0x14>
 80047ae:	9b01      	ldr	r3, [sp, #4]
 80047b0:	0022      	movs	r2, r4
 80047b2:	429c      	cmp	r4, r3
 80047b4:	d900      	bls.n	80047b8 <_realloc_r+0x4c>
 80047b6:	001a      	movs	r2, r3
 80047b8:	0031      	movs	r1, r6
 80047ba:	0028      	movs	r0, r5
 80047bc:	f7ff fbc0 	bl	8003f40 <memcpy>
 80047c0:	0031      	movs	r1, r6
 80047c2:	0038      	movs	r0, r7
 80047c4:	f7ff fef0 	bl	80045a8 <_free_r>
 80047c8:	e7da      	b.n	8004780 <_realloc_r+0x14>
	...

080047cc <_sbrk_r>:
 80047cc:	2300      	movs	r3, #0
 80047ce:	b570      	push	{r4, r5, r6, lr}
 80047d0:	4d06      	ldr	r5, [pc, #24]	; (80047ec <_sbrk_r+0x20>)
 80047d2:	0004      	movs	r4, r0
 80047d4:	0008      	movs	r0, r1
 80047d6:	602b      	str	r3, [r5, #0]
 80047d8:	f7fc f804 	bl	80007e4 <_sbrk>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	d103      	bne.n	80047e8 <_sbrk_r+0x1c>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d000      	beq.n	80047e8 <_sbrk_r+0x1c>
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	bd70      	pop	{r4, r5, r6, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	20000548 	.word	0x20000548

080047f0 <__malloc_lock>:
 80047f0:	b510      	push	{r4, lr}
 80047f2:	4802      	ldr	r0, [pc, #8]	; (80047fc <__malloc_lock+0xc>)
 80047f4:	f000 f814 	bl	8004820 <__retarget_lock_acquire_recursive>
 80047f8:	bd10      	pop	{r4, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	2000054c 	.word	0x2000054c

08004800 <__malloc_unlock>:
 8004800:	b510      	push	{r4, lr}
 8004802:	4802      	ldr	r0, [pc, #8]	; (800480c <__malloc_unlock+0xc>)
 8004804:	f000 f80d 	bl	8004822 <__retarget_lock_release_recursive>
 8004808:	bd10      	pop	{r4, pc}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	2000054c 	.word	0x2000054c

08004810 <_malloc_usable_size_r>:
 8004810:	1f0b      	subs	r3, r1, #4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	1f18      	subs	r0, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	da01      	bge.n	800481e <_malloc_usable_size_r+0xe>
 800481a:	580b      	ldr	r3, [r1, r0]
 800481c:	18c0      	adds	r0, r0, r3
 800481e:	4770      	bx	lr

08004820 <__retarget_lock_acquire_recursive>:
 8004820:	4770      	bx	lr

08004822 <__retarget_lock_release_recursive>:
 8004822:	4770      	bx	lr

08004824 <_init>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482a:	bc08      	pop	{r3}
 800482c:	469e      	mov	lr, r3
 800482e:	4770      	bx	lr

08004830 <_fini>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr
