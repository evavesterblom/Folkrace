
Viper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cbc  08004cbc  000202e8  2**0
                  CONTENTS
  4 .ARM          00000000  08004cbc  08004cbc  000202e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cbc  08004cbc  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cbc  08004cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08004cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200002e8  08004fac  000202e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  08004fac  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012977  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c9  00000000  00000000  00032c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00035550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00036620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012259  00000000  00000000  000375b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151fe  00000000  00000000  00049811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068a8a  00000000  00000000  0005ea0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7499  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000401c  00000000  00000000  000c74ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002e8 	.word	0x200002e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ba0 	.word	0x08004ba0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002ec 	.word	0x200002ec
 8000104:	08004ba0 	.word	0x08004ba0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b08b      	sub	sp, #44	; 0x2c
 8000248:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024a:	2414      	movs	r4, #20
 800024c:	193b      	adds	r3, r7, r4
 800024e:	0018      	movs	r0, r3
 8000250:	2314      	movs	r3, #20
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f004 f83a 	bl	80042ce <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025a:	4b4d      	ldr	r3, [pc, #308]	; (8000390 <MX_GPIO_Init+0x14c>)
 800025c:	695a      	ldr	r2, [r3, #20]
 800025e:	4b4c      	ldr	r3, [pc, #304]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000260:	2180      	movs	r1, #128	; 0x80
 8000262:	0309      	lsls	r1, r1, #12
 8000264:	430a      	orrs	r2, r1
 8000266:	615a      	str	r2, [r3, #20]
 8000268:	4b49      	ldr	r3, [pc, #292]	; (8000390 <MX_GPIO_Init+0x14c>)
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	031b      	lsls	r3, r3, #12
 8000270:	4013      	ands	r3, r2
 8000272:	613b      	str	r3, [r7, #16]
 8000274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000276:	4b46      	ldr	r3, [pc, #280]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000278:	695a      	ldr	r2, [r3, #20]
 800027a:	4b45      	ldr	r3, [pc, #276]	; (8000390 <MX_GPIO_Init+0x14c>)
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	03c9      	lsls	r1, r1, #15
 8000280:	430a      	orrs	r2, r1
 8000282:	615a      	str	r2, [r3, #20]
 8000284:	4b42      	ldr	r3, [pc, #264]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000286:	695a      	ldr	r2, [r3, #20]
 8000288:	2380      	movs	r3, #128	; 0x80
 800028a:	03db      	lsls	r3, r3, #15
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000292:	4b3f      	ldr	r3, [pc, #252]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000294:	695a      	ldr	r2, [r3, #20]
 8000296:	4b3e      	ldr	r3, [pc, #248]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	0289      	lsls	r1, r1, #10
 800029c:	430a      	orrs	r2, r1
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	4b3b      	ldr	r3, [pc, #236]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002a2:	695a      	ldr	r2, [r3, #20]
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	029b      	lsls	r3, r3, #10
 80002a8:	4013      	ands	r3, r2
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b38      	ldr	r3, [pc, #224]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002b0:	695a      	ldr	r2, [r3, #20]
 80002b2:	4b37      	ldr	r3, [pc, #220]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002b4:	2180      	movs	r1, #128	; 0x80
 80002b6:	02c9      	lsls	r1, r1, #11
 80002b8:	430a      	orrs	r2, r1
 80002ba:	615a      	str	r2, [r3, #20]
 80002bc:	4b34      	ldr	r3, [pc, #208]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	02db      	lsls	r3, r3, #11
 80002c4:	4013      	ands	r3, r2
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_DIR_1_Pin|MOTOR_DIR_2_Pin, GPIO_PIN_RESET);
 80002ca:	4b32      	ldr	r3, [pc, #200]	; (8000394 <MX_GPIO_Init+0x150>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	2103      	movs	r1, #3
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 f84b 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	2200      	movs	r2, #0
 80002dc:	2120      	movs	r1, #32
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 f844 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_1_Pin|TOF_2_Pin|TOF_3_Pin, GPIO_PIN_RESET);
 80002e4:	23e0      	movs	r3, #224	; 0xe0
 80002e6:	021b      	lsls	r3, r3, #8
 80002e8:	482b      	ldr	r0, [pc, #172]	; (8000398 <MX_GPIO_Init+0x154>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	0019      	movs	r1, r3
 80002ee:	f001 f83d 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	0192      	lsls	r2, r2, #6
 80002f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2284      	movs	r2, #132	; 0x84
 80002fe:	0392      	lsls	r2, r2, #14
 8000300:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	193b      	adds	r3, r7, r4
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000308:	193b      	adds	r3, r7, r4
 800030a:	4a22      	ldr	r2, [pc, #136]	; (8000394 <MX_GPIO_Init+0x150>)
 800030c:	0019      	movs	r1, r3
 800030e:	0010      	movs	r0, r2
 8000310:	f000 febc 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_DIR_1_Pin|MOTOR_DIR_2_Pin;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2203      	movs	r2, #3
 8000318:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2201      	movs	r2, #1
 800031e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	193b      	adds	r3, r7, r4
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032c:	193b      	adds	r3, r7, r4
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <MX_GPIO_Init+0x150>)
 8000330:	0019      	movs	r1, r3
 8000332:	0010      	movs	r0, r2
 8000334:	f000 feaa 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2220      	movs	r2, #32
 800033c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	193b      	adds	r3, r7, r4
 8000340:	2201      	movs	r2, #1
 8000342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	193b      	adds	r3, r7, r4
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034a:	193b      	adds	r3, r7, r4
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000350:	193a      	adds	r2, r7, r4
 8000352:	2390      	movs	r3, #144	; 0x90
 8000354:	05db      	lsls	r3, r3, #23
 8000356:	0011      	movs	r1, r2
 8000358:	0018      	movs	r0, r3
 800035a:	f000 fe97 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_1_Pin|TOF_2_Pin|TOF_3_Pin;
 800035e:	0021      	movs	r1, r4
 8000360:	187b      	adds	r3, r7, r1
 8000362:	22e0      	movs	r2, #224	; 0xe0
 8000364:	0212      	lsls	r2, r2, #8
 8000366:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2201      	movs	r2, #1
 800036c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037a:	187b      	adds	r3, r7, r1
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <MX_GPIO_Init+0x154>)
 800037e:	0019      	movs	r1, r3
 8000380:	0010      	movs	r0, r2
 8000382:	f000 fe83 	bl	800108c <HAL_GPIO_Init>

}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b00b      	add	sp, #44	; 0x2c
 800038c:	bd90      	pop	{r4, r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	40021000 	.word	0x40021000
 8000394:	48000800 	.word	0x48000800
 8000398:	48000400 	.word	0x48000400

0800039c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_I2C1_Init+0x74>)
 80003a2:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <MX_I2C1_Init+0x78>)
 80003a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <MX_I2C1_Init+0x74>)
 80003a8:	4a1b      	ldr	r2, [pc, #108]	; (8000418 <MX_I2C1_Init+0x7c>)
 80003aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b2:	4b17      	ldr	r3, [pc, #92]	; (8000410 <MX_I2C1_Init+0x74>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_I2C1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_I2C1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_I2C1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_I2C1_Init+0x74>)
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 ffe5 	bl	80013a8 <HAL_I2C_Init>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003e2:	f000 fa8c 	bl	80008fe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <MX_I2C1_Init+0x74>)
 80003e8:	2100      	movs	r1, #0
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 fc7a 	bl	8001ce4 <HAL_I2CEx_ConfigAnalogFilter>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f4:	f000 fa83 	bl	80008fe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <MX_I2C1_Init+0x74>)
 80003fa:	2100      	movs	r1, #0
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fcbd 	bl	8001d7c <HAL_I2CEx_ConfigDigitalFilter>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000406:	f000 fa7a 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000304 	.word	0x20000304
 8000414:	40005400 	.word	0x40005400
 8000418:	2000090e 	.word	0x2000090e

0800041c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	2414      	movs	r4, #20
 8000426:	193b      	adds	r3, r7, r4
 8000428:	0018      	movs	r0, r3
 800042a:	2314      	movs	r3, #20
 800042c:	001a      	movs	r2, r3
 800042e:	2100      	movs	r1, #0
 8000430:	f003 ff4d 	bl	80042ce <memset>
  if(i2cHandle->Instance==I2C1)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <HAL_I2C_MspInit+0x90>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d132      	bne.n	80004a4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	02c9      	lsls	r1, r1, #11
 8000448:	430a      	orrs	r2, r1
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	02db      	lsls	r3, r3, #11
 8000454:	4013      	ands	r3, r2
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_CLOCK_Pin|TOF_DATA_Pin;
 800045a:	193b      	adds	r3, r7, r4
 800045c:	22c0      	movs	r2, #192	; 0xc0
 800045e:	0092      	lsls	r2, r2, #2
 8000460:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000462:	0021      	movs	r1, r4
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2212      	movs	r2, #18
 8000468:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2203      	movs	r2, #3
 8000474:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2201      	movs	r2, #1
 800047a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047c:	187b      	adds	r3, r7, r1
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <HAL_I2C_MspInit+0x98>)
 8000480:	0019      	movs	r1, r3
 8000482:	0010      	movs	r0, r2
 8000484:	f000 fe02 	bl	800108c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 800048a:	69da      	ldr	r2, [r3, #28]
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	0389      	lsls	r1, r1, #14
 8000492:	430a      	orrs	r2, r1
 8000494:	61da      	str	r2, [r3, #28]
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 8000498:	69da      	ldr	r2, [r3, #28]
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	039b      	lsls	r3, r3, #14
 800049e:	4013      	ands	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b00b      	add	sp, #44	; 0x2c
 80004aa:	bd90      	pop	{r4, r7, pc}
 80004ac:	40005400 	.word	0x40005400
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000400 	.word	0x48000400

080004b8 <init>:
// 1 -  forward | 0 - backwards
int left_dir = DRIVE;
int right_dir = DRIVE;


void init() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af02      	add	r7, sp, #8
	// Motor PWM signals
	HAL_TIM_Base_Start(&htim3);
 80004be:	4b28      	ldr	r3, [pc, #160]	; (8000560 <init+0xa8>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 fa31 	bl	8002928 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004c6:	4b26      	ldr	r3, [pc, #152]	; (8000560 <init+0xa8>)
 80004c8:	2100      	movs	r1, #0
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fac0 	bl	8002a50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004d0:	4b23      	ldr	r3, [pc, #140]	; (8000560 <init+0xa8>)
 80004d2:	2104      	movs	r1, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 fabb 	bl	8002a50 <HAL_TIM_PWM_Start>
	// Servo PWM Signal
	HAL_TIM_Base_Start(&htim14);
 80004da:	4b22      	ldr	r3, [pc, #136]	; (8000564 <init+0xac>)
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fa23 	bl	8002928 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80004e2:	4b20      	ldr	r3, [pc, #128]	; (8000564 <init+0xac>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	0018      	movs	r0, r3
 80004e8:	f002 fab2 	bl	8002a50 <HAL_TIM_PWM_Start>

	TOF_InitStruct(&sensor1, &hi2c1, 0x32, TOF_1_GPIO_Port, TOF_1_Pin);
 80004ec:	4a1e      	ldr	r2, [pc, #120]	; (8000568 <init+0xb0>)
 80004ee:	491f      	ldr	r1, [pc, #124]	; (800056c <init+0xb4>)
 80004f0:	481f      	ldr	r0, [pc, #124]	; (8000570 <init+0xb8>)
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	019b      	lsls	r3, r3, #6
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	0013      	movs	r3, r2
 80004fa:	2232      	movs	r2, #50	; 0x32
 80004fc:	f003 fe02 	bl	8004104 <TOF_InitStruct>
	TOF_InitStruct(&sensor2, &hi2c1, 0x33, TOF_2_GPIO_Port, TOF_2_Pin);
 8000500:	4a19      	ldr	r2, [pc, #100]	; (8000568 <init+0xb0>)
 8000502:	491a      	ldr	r1, [pc, #104]	; (800056c <init+0xb4>)
 8000504:	481b      	ldr	r0, [pc, #108]	; (8000574 <init+0xbc>)
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	01db      	lsls	r3, r3, #7
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	0013      	movs	r3, r2
 800050e:	2233      	movs	r2, #51	; 0x33
 8000510:	f003 fdf8 	bl	8004104 <TOF_InitStruct>
	TOF_InitStruct(&sensor3, &hi2c1, 0x34, TOF_3_GPIO_Port, TOF_3_Pin);
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <init+0xb0>)
 8000516:	4915      	ldr	r1, [pc, #84]	; (800056c <init+0xb4>)
 8000518:	4817      	ldr	r0, [pc, #92]	; (8000578 <init+0xc0>)
 800051a:	2380      	movs	r3, #128	; 0x80
 800051c:	021b      	lsls	r3, r3, #8
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	0013      	movs	r3, r2
 8000522:	2234      	movs	r2, #52	; 0x34
 8000524:	f003 fdee 	bl	8004104 <TOF_InitStruct>

	TOF_TurnOff(&sensor1);
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <init+0xb8>)
 800052a:	0018      	movs	r0, r3
 800052c:	f003 fe1c 	bl	8004168 <TOF_TurnOff>
	TOF_TurnOff(&sensor2);
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <init+0xbc>)
 8000532:	0018      	movs	r0, r3
 8000534:	f003 fe18 	bl	8004168 <TOF_TurnOff>
	TOF_TurnOff(&sensor3);
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <init+0xc0>)
 800053a:	0018      	movs	r0, r3
 800053c:	f003 fe14 	bl	8004168 <TOF_TurnOff>

	TOF_BootSensor(&sensor1);
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <init+0xb8>)
 8000542:	0018      	movs	r0, r3
 8000544:	f003 fe26 	bl	8004194 <TOF_BootSensor>
	TOF_BootSensor(&sensor2);
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <init+0xbc>)
 800054a:	0018      	movs	r0, r3
 800054c:	f003 fe22 	bl	8004194 <TOF_BootSensor>
	TOF_BootSensor(&sensor3);
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <init+0xc0>)
 8000552:	0018      	movs	r0, r3
 8000554:	f003 fe1e 	bl	8004194 <TOF_BootSensor>
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	2000038c 	.word	0x2000038c
 8000564:	200003d4 	.word	0x200003d4
 8000568:	48000400 	.word	0x48000400
 800056c:	20000304 	.word	0x20000304
 8000570:	20000350 	.word	0x20000350
 8000574:	20000360 	.word	0x20000360
 8000578:	20000370 	.word	0x20000370

0800057c <drive>:
int min_dist2 = 100;

int slow_speed = 100;
int fast_speed = 200;

void drive() {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	if (dist2 < min_dist1) {
 8000580:	4b3f      	ldr	r3, [pc, #252]	; (8000680 <drive+0x104>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	001a      	movs	r2, r3
 8000586:	4b3f      	ldr	r3, [pc, #252]	; (8000684 <drive+0x108>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	da0e      	bge.n	80005ac <drive+0x30>
		left_speed = slow_speed;
 800058e:	4b3e      	ldr	r3, [pc, #248]	; (8000688 <drive+0x10c>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b3e      	ldr	r3, [pc, #248]	; (800068c <drive+0x110>)
 8000594:	601a      	str	r2, [r3, #0]
		right_speed = slow_speed;
 8000596:	4b3c      	ldr	r3, [pc, #240]	; (8000688 <drive+0x10c>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b3d      	ldr	r3, [pc, #244]	; (8000690 <drive+0x114>)
 800059c:	601a      	str	r2, [r3, #0]
		left_dir = DRIVE;
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <drive+0x118>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	601a      	str	r2, [r3, #0]
		right_dir = REVERSE;
 80005a4:	4b3c      	ldr	r3, [pc, #240]	; (8000698 <drive+0x11c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
		left_speed = fast_speed;
		right_speed = fast_speed;
		left_dir = DRIVE;
		right_dir = DRIVE;
	}
}
 80005aa:	e065      	b.n	8000678 <drive+0xfc>
	} else if (dist1 < min_dist1) {
 80005ac:	4b3b      	ldr	r3, [pc, #236]	; (800069c <drive+0x120>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	001a      	movs	r2, r3
 80005b2:	4b34      	ldr	r3, [pc, #208]	; (8000684 <drive+0x108>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	da0e      	bge.n	80005d8 <drive+0x5c>
		left_speed = slow_speed;
 80005ba:	4b33      	ldr	r3, [pc, #204]	; (8000688 <drive+0x10c>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b33      	ldr	r3, [pc, #204]	; (800068c <drive+0x110>)
 80005c0:	601a      	str	r2, [r3, #0]
		right_speed = slow_speed;
 80005c2:	4b31      	ldr	r3, [pc, #196]	; (8000688 <drive+0x10c>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <drive+0x114>)
 80005c8:	601a      	str	r2, [r3, #0]
		left_dir = DRIVE;
 80005ca:	4b32      	ldr	r3, [pc, #200]	; (8000694 <drive+0x118>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
		right_dir = REVERSE;
 80005d0:	4b31      	ldr	r3, [pc, #196]	; (8000698 <drive+0x11c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	e04f      	b.n	8000678 <drive+0xfc>
	} else if (dist3 < min_dist1) {
 80005d8:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <drive+0x124>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	001a      	movs	r2, r3
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <drive+0x108>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	da0e      	bge.n	8000604 <drive+0x88>
		left_speed = slow_speed;
 80005e6:	4b28      	ldr	r3, [pc, #160]	; (8000688 <drive+0x10c>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b28      	ldr	r3, [pc, #160]	; (800068c <drive+0x110>)
 80005ec:	601a      	str	r2, [r3, #0]
		right_speed = slow_speed;
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <drive+0x10c>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b27      	ldr	r3, [pc, #156]	; (8000690 <drive+0x114>)
 80005f4:	601a      	str	r2, [r3, #0]
		left_dir = REVERSE;
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <drive+0x118>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
		right_dir = DRIVE;
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <drive+0x11c>)
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]
}
 8000602:	e039      	b.n	8000678 <drive+0xfc>
	} else if (dist1 < min_dist2) {
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <drive+0x120>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	001a      	movs	r2, r3
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <drive+0x128>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	429a      	cmp	r2, r3
 8000610:	da0e      	bge.n	8000630 <drive+0xb4>
		left_speed = fast_speed;
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <drive+0x12c>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <drive+0x110>)
 8000618:	601a      	str	r2, [r3, #0]
		right_speed = slow_speed;
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <drive+0x10c>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <drive+0x114>)
 8000620:	601a      	str	r2, [r3, #0]
		left_dir = DRIVE;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <drive+0x118>)
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]
		right_dir = DRIVE;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <drive+0x11c>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]
}
 800062e:	e023      	b.n	8000678 <drive+0xfc>
	} else if(dist3 < min_dist2) {
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <drive+0x124>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	001a      	movs	r2, r3
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <drive+0x128>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	429a      	cmp	r2, r3
 800063c:	da0e      	bge.n	800065c <drive+0xe0>
		left_speed = slow_speed;
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <drive+0x10c>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <drive+0x110>)
 8000644:	601a      	str	r2, [r3, #0]
		right_speed = fast_speed;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <drive+0x12c>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <drive+0x114>)
 800064c:	601a      	str	r2, [r3, #0]
		left_dir = DRIVE;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <drive+0x118>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
		right_dir = DRIVE;
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <drive+0x11c>)
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
}
 800065a:	e00d      	b.n	8000678 <drive+0xfc>
		left_speed = fast_speed;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <drive+0x12c>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <drive+0x110>)
 8000662:	601a      	str	r2, [r3, #0]
		right_speed = fast_speed;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <drive+0x12c>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <drive+0x114>)
 800066a:	601a      	str	r2, [r3, #0]
		left_dir = DRIVE;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <drive+0x118>)
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
		right_dir = DRIVE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <drive+0x11c>)
 8000674:	2201      	movs	r2, #1
 8000676:	601a      	str	r2, [r3, #0]
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000382 	.word	0x20000382
 8000684:	20000268 	.word	0x20000268
 8000688:	20000270 	.word	0x20000270
 800068c:	20000258 	.word	0x20000258
 8000690:	2000025c 	.word	0x2000025c
 8000694:	20000260 	.word	0x20000260
 8000698:	20000264 	.word	0x20000264
 800069c:	20000380 	.word	0x20000380
 80006a0:	20000384 	.word	0x20000384
 80006a4:	2000026c 	.word	0x2000026c
 80006a8:	20000274 	.word	0x20000274

080006ac <sense>:

void sense() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	//TOF kuulamine
	dist1 = TOF_GetDistance(&sensor1);
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <sense+0x3c>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f003 fdbc 	bl	8004230 <TOF_GetDistance>
 80006b8:	0003      	movs	r3, r0
 80006ba:	001a      	movs	r2, r3
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <sense+0x40>)
 80006be:	801a      	strh	r2, [r3, #0]
	dist2 = TOF_GetDistance(&sensor2);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <sense+0x44>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f003 fdb4 	bl	8004230 <TOF_GetDistance>
 80006c8:	0003      	movs	r3, r0
 80006ca:	001a      	movs	r2, r3
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <sense+0x48>)
 80006ce:	801a      	strh	r2, [r3, #0]
	dist3 = TOF_GetDistance(&sensor3);
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <sense+0x4c>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f003 fdac 	bl	8004230 <TOF_GetDistance>
 80006d8:	0003      	movs	r3, r0
 80006da:	001a      	movs	r2, r3
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <sense+0x50>)
 80006de:	801a      	strh	r2, [r3, #0]
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	20000350 	.word	0x20000350
 80006ec:	20000380 	.word	0x20000380
 80006f0:	20000360 	.word	0x20000360
 80006f4:	20000382 	.word	0x20000382
 80006f8:	20000370 	.word	0x20000370
 80006fc:	20000384 	.word	0x20000384

08000700 <plan>:

void plan() {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	drive();
 8000704:	f7ff ff3a 	bl	800057c <drive>

}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <act>:

void act() {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	sprintf(distanceStr1, "Distance 1: %d\n\r", dist1);
 8000714:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <act+0xb0>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	001a      	movs	r2, r3
 800071a:	492a      	ldr	r1, [pc, #168]	; (80007c4 <act+0xb4>)
 800071c:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <act+0xb8>)
 800071e:	0018      	movs	r0, r3
 8000720:	f003 fdde 	bl	80042e0 <siprintf>
	sprintf(distanceStr2, "Distance 2: %d\n\r", dist2);
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <act+0xbc>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	001a      	movs	r2, r3
 800072a:	4929      	ldr	r1, [pc, #164]	; (80007d0 <act+0xc0>)
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <act+0xc4>)
 800072e:	0018      	movs	r0, r3
 8000730:	f003 fdd6 	bl	80042e0 <siprintf>
	sprintf(distanceStr3, "Distance 3: %d\n\r", dist3);
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <act+0xc8>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	001a      	movs	r2, r3
 800073a:	4928      	ldr	r1, [pc, #160]	; (80007dc <act+0xcc>)
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <act+0xd0>)
 800073e:	0018      	movs	r0, r3
 8000740:	f003 fdce 	bl	80042e0 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)distanceStr1, strlen(distanceStr1), 100);
 8000744:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <act+0xb8>)
 8000746:	0018      	movs	r0, r3
 8000748:	f7ff fcde 	bl	8000108 <strlen>
 800074c:	0003      	movs	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	491d      	ldr	r1, [pc, #116]	; (80007c8 <act+0xb8>)
 8000752:	4824      	ldr	r0, [pc, #144]	; (80007e4 <act+0xd4>)
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	f002 fe35 	bl	80033c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)distanceStr2, strlen(distanceStr2), 100);
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <act+0xc4>)
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fcd3 	bl	8000108 <strlen>
 8000762:	0003      	movs	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	491b      	ldr	r1, [pc, #108]	; (80007d4 <act+0xc4>)
 8000768:	481e      	ldr	r0, [pc, #120]	; (80007e4 <act+0xd4>)
 800076a:	2364      	movs	r3, #100	; 0x64
 800076c:	f002 fe2a 	bl	80033c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)distanceStr3, strlen(distanceStr3), 100);
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <act+0xd0>)
 8000772:	0018      	movs	r0, r3
 8000774:	f7ff fcc8 	bl	8000108 <strlen>
 8000778:	0003      	movs	r3, r0
 800077a:	b29a      	uxth	r2, r3
 800077c:	4918      	ldr	r1, [pc, #96]	; (80007e0 <act+0xd0>)
 800077e:	4819      	ldr	r0, [pc, #100]	; (80007e4 <act+0xd4>)
 8000780:	2364      	movs	r3, #100	; 0x64
 8000782:	f002 fe1f 	bl	80033c4 <HAL_UART_Transmit>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, left_speed);
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <act+0xd8>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <act+0xdc>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(MOTOR_DIR_1_GPIO_Port, MOTOR_DIR_1_Pin, left_dir);
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <act+0xe0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4817      	ldr	r0, [pc, #92]	; (80007f4 <act+0xe4>)
 8000798:	001a      	movs	r2, r3
 800079a:	2101      	movs	r1, #1
 800079c:	f000 fde6 	bl	800136c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, right_speed);
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <act+0xe8>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <act+0xdc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(MOTOR_DIR_2_GPIO_Port, MOTOR_DIR_2_Pin, right_dir);
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <act+0xec>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <act+0xe4>)
 80007b2:	001a      	movs	r2, r3
 80007b4:	2102      	movs	r1, #2
 80007b6:	f000 fdd9 	bl	800136c <HAL_GPIO_WritePin>
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000380 	.word	0x20000380
 80007c4:	08004bb8 	.word	0x08004bb8
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000382 	.word	0x20000382
 80007d0:	08004bcc 	.word	0x08004bcc
 80007d4:	200000c8 	.word	0x200000c8
 80007d8:	20000384 	.word	0x20000384
 80007dc:	08004be0 	.word	0x08004be0
 80007e0:	20000190 	.word	0x20000190
 80007e4:	2000041c 	.word	0x2000041c
 80007e8:	20000258 	.word	0x20000258
 80007ec:	2000038c 	.word	0x2000038c
 80007f0:	20000260 	.word	0x20000260
 80007f4:	48000800 	.word	0x48000800
 80007f8:	2000025c 	.word	0x2000025c
 80007fc:	20000264 	.word	0x20000264

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fb06 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f818 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f7ff fd1a 	bl	8000244 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000810:	f000 fa5a 	bl	8000cc8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000814:	f7ff fdc2 	bl	800039c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000818:	f000 f8ee 	bl	80009f8 <MX_TIM3_Init>
  MX_TIM14_Init();
 800081c:	f000 f95a 	bl	8000ad4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000820:	f7ff fe4a 	bl	80004b8 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sense();
 8000824:	f7ff ff42 	bl	80006ac <sense>
	  plan();
 8000828:	f7ff ff6a 	bl	8000700 <plan>
	  act();
 800082c:	f7ff ff70 	bl	8000710 <act>
	  HAL_Delay(1000);
 8000830:	23fa      	movs	r3, #250	; 0xfa
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fb51 	bl	8000edc <HAL_Delay>
	  sense();
 800083a:	e7f3      	b.n	8000824 <main+0x24>

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b095      	sub	sp, #84	; 0x54
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	2420      	movs	r4, #32
 8000844:	193b      	adds	r3, r7, r4
 8000846:	0018      	movs	r0, r3
 8000848:	2330      	movs	r3, #48	; 0x30
 800084a:	001a      	movs	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	f003 fd3e 	bl	80042ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000852:	2310      	movs	r3, #16
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	0018      	movs	r0, r3
 8000858:	2310      	movs	r3, #16
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f003 fd36 	bl	80042ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000862:	003b      	movs	r3, r7
 8000864:	0018      	movs	r0, r3
 8000866:	2310      	movs	r3, #16
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f003 fd2f 	bl	80042ce <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000870:	0021      	movs	r1, r4
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2202      	movs	r2, #2
 8000876:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2201      	movs	r2, #1
 800087c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2210      	movs	r2, #16
 8000882:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2202      	movs	r2, #2
 8000888:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	22a0      	movs	r2, #160	; 0xa0
 8000894:	0392      	lsls	r2, r2, #14
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	0018      	movs	r0, r3
 80008a2:	f001 fab7 	bl	8001e14 <HAL_RCC_OscConfig>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008aa:	f000 f828 	bl	80008fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	2110      	movs	r1, #16
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2207      	movs	r2, #7
 80008b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2202      	movs	r2, #2
 80008ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2101      	movs	r1, #1
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fdbb 	bl	8002448 <HAL_RCC_ClockConfig>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008d6:	f000 f812 	bl	80008fe <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008da:	003b      	movs	r3, r7
 80008dc:	2220      	movs	r2, #32
 80008de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008e0:	003b      	movs	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e6:	003b      	movs	r3, r7
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 feff 	bl	80026ec <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008f2:	f000 f804 	bl	80008fe <Error_Handler>
  }
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b015      	add	sp, #84	; 0x54
 80008fc:	bd90      	pop	{r4, r7, pc}

080008fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000902:	b672      	cpsid	i
}
 8000904:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000906:	e7fe      	b.n	8000906 <Error_Handler+0x8>

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x44>)
 8000910:	699a      	ldr	r2, [r3, #24]
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_MspInit+0x44>)
 8000914:	2101      	movs	r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	619a      	str	r2, [r3, #24]
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_MspInit+0x44>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	2201      	movs	r2, #1
 8000920:	4013      	ands	r3, r2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x44>)
 8000928:	69da      	ldr	r2, [r3, #28]
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_MspInit+0x44>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	0549      	lsls	r1, r1, #21
 8000930:	430a      	orrs	r2, r1
 8000932:	61da      	str	r2, [r3, #28]
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_MspInit+0x44>)
 8000936:	69da      	ldr	r2, [r3, #28]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	055b      	lsls	r3, r3, #21
 800093c:	4013      	ands	r3, r2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40021000 	.word	0x40021000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 fa96 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	18d3      	adds	r3, r2, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f003 fc5a 	bl	8004268 <__errno>
 80009b4:	0003      	movs	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	425b      	negs	r3, r3
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	18d2      	adds	r2, r2, r3
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <_sbrk+0x64>)
 80009d0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b006      	add	sp, #24
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20002000 	.word	0x20002000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	20000388 	.word	0x20000388
 80009e8:	200005b8 	.word	0x200005b8

080009ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	2320      	movs	r3, #32
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	0018      	movs	r0, r3
 8000a04:	2308      	movs	r3, #8
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f003 fc60 	bl	80042ce <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	0018      	movs	r0, r3
 8000a12:	231c      	movs	r3, #28
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f003 fc59 	bl	80042ce <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_TIM3_Init+0xcc>)
 8000a1e:	4a2a      	ldr	r2, [pc, #168]	; (8000ac8 <MX_TIM3_Init+0xd0>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 960-1;
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <MX_TIM3_Init+0xcc>)
 8000a24:	4a29      	ldr	r2, [pc, #164]	; (8000acc <MX_TIM3_Init+0xd4>)
 8000a26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_TIM3_Init+0xcc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000a2e:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <MX_TIM3_Init+0xcc>)
 8000a30:	4a27      	ldr	r2, [pc, #156]	; (8000ad0 <MX_TIM3_Init+0xd8>)
 8000a32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <MX_TIM3_Init+0xcc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3a:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <MX_TIM3_Init+0xcc>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a40:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <MX_TIM3_Init+0xcc>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f001 ffb4 	bl	80029b0 <HAL_TIM_PWM_Init>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f7ff ff57 	bl	80008fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2120      	movs	r1, #32
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a5e:	187a      	adds	r2, r7, r1
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_TIM3_Init+0xcc>)
 8000a62:	0011      	movs	r1, r2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 fc01 	bl	800326c <HAL_TIMEx_MasterConfigSynchronization>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000a6e:	f7ff ff46 	bl	80008fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2260      	movs	r2, #96	; 0x60
 8000a76:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8a:	1d39      	adds	r1, r7, #4
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_TIM3_Init+0xcc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	0018      	movs	r0, r3
 8000a92:	f002 f88f 	bl	8002bb4 <HAL_TIM_PWM_ConfigChannel>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000a9a:	f7ff ff30 	bl	80008fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a9e:	1d39      	adds	r1, r7, #4
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_TIM3_Init+0xcc>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f002 f885 	bl	8002bb4 <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000aae:	f7ff ff26 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <MX_TIM3_Init+0xcc>)
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f000 f89b 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b00a      	add	sp, #40	; 0x28
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	2000038c 	.word	0x2000038c
 8000ac8:	40000400 	.word	0x40000400
 8000acc:	000003bf 	.word	0x000003bf
 8000ad0:	000003e7 	.word	0x000003e7

08000ad4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	0018      	movs	r0, r3
 8000ade:	231c      	movs	r3, #28
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f003 fbf3 	bl	80042ce <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_TIM14_Init+0x94>)
 8000aea:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <MX_TIM14_Init+0x98>)
 8000aec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <MX_TIM14_Init+0x94>)
 8000af0:	222f      	movs	r2, #47	; 0x2f
 8000af2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_TIM14_Init+0x94>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_TIM14_Init+0x94>)
 8000afc:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <MX_TIM14_Init+0x9c>)
 8000afe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_TIM14_Init+0x94>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_TIM14_Init+0x94>)
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_TIM14_Init+0x94>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 feba 	bl	8002888 <HAL_TIM_Base_Init>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000b18:	f7ff fef1 	bl	80008fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_TIM14_Init+0x94>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 ff46 	bl	80029b0 <HAL_TIM_PWM_Init>
 8000b24:	1e03      	subs	r3, r0, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000b28:	f7ff fee9 	bl	80008fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2260      	movs	r2, #96	; 0x60
 8000b30:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b44:	1d39      	adds	r1, r7, #4
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_TIM14_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f002 f832 	bl	8002bb4 <HAL_TIM_PWM_ConfigChannel>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000b54:	f7ff fed3 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <MX_TIM14_Init+0x94>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 f848 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b008      	add	sp, #32
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200003d4 	.word	0x200003d4
 8000b6c:	40002000 	.word	0x40002000
 8000b70:	00004e1f 	.word	0x00004e1f

08000b74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <HAL_TIM_PWM_MspInit+0x34>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10b      	bne.n	8000b9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_TIM_PWM_MspInit+0x38>)
 8000b88:	69da      	ldr	r2, [r3, #28]
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_TIM_PWM_MspInit+0x38>)
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	61da      	str	r2, [r3, #28]
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_TIM_PWM_MspInit+0x38>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	2202      	movs	r2, #2
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40000400 	.word	0x40000400
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <HAL_TIM_Base_MspInit+0x38>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d10d      	bne.n	8000bde <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_TIM_Base_MspInit+0x3c>)
 8000bc4:	69da      	ldr	r2, [r3, #28]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_TIM_Base_MspInit+0x3c>)
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	61da      	str	r2, [r3, #28]
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_TIM_Base_MspInit+0x3c>)
 8000bd2:	69da      	ldr	r2, [r3, #28]
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b004      	add	sp, #16
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40002000 	.word	0x40002000
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b08b      	sub	sp, #44	; 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	2414      	movs	r4, #20
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	2314      	movs	r3, #20
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f003 fb63 	bl	80042ce <memset>
  if(timHandle->Instance==TIM3)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a2b      	ldr	r2, [pc, #172]	; (8000cbc <HAL_TIM_MspPostInit+0xcc>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d125      	bne.n	8000c5e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <HAL_TIM_MspPostInit+0xd0>)
 8000c14:	695a      	ldr	r2, [r3, #20]
 8000c16:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <HAL_TIM_MspPostInit+0xd0>)
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	0289      	lsls	r1, r1, #10
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	615a      	str	r2, [r3, #20]
 8000c20:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <HAL_TIM_MspPostInit+0xd0>)
 8000c22:	695a      	ldr	r2, [r3, #20]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	029b      	lsls	r3, r3, #10
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_1_Pin|MOTOR_PWM_2_Pin;
 8000c2e:	0021      	movs	r1, r4
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	22c0      	movs	r2, #192	; 0xc0
 8000c34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2202      	movs	r2, #2
 8000c3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	187a      	adds	r2, r7, r1
 8000c50:	2390      	movs	r3, #144	; 0x90
 8000c52:	05db      	lsls	r3, r3, #23
 8000c54:	0011      	movs	r1, r2
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fa18 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000c5c:	e029      	b.n	8000cb2 <HAL_TIM_MspPostInit+0xc2>
  else if(timHandle->Instance==TIM14)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <HAL_TIM_MspPostInit+0xd4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d124      	bne.n	8000cb2 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_TIM_MspPostInit+0xd0>)
 8000c6a:	695a      	ldr	r2, [r3, #20]
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_TIM_MspPostInit+0xd0>)
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	0289      	lsls	r1, r1, #10
 8000c72:	430a      	orrs	r2, r1
 8000c74:	615a      	str	r2, [r3, #20]
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_TIM_MspPostInit+0xd0>)
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	029b      	lsls	r3, r3, #10
 8000c7e:	4013      	ands	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8000c84:	2114      	movs	r1, #20
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2210      	movs	r2, #16
 8000c8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2202      	movs	r2, #2
 8000c90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	187a      	adds	r2, r7, r1
 8000ca6:	2390      	movs	r3, #144	; 0x90
 8000ca8:	05db      	lsls	r3, r3, #23
 8000caa:	0011      	movs	r1, r2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 f9ed 	bl	800108c <HAL_GPIO_Init>
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b00b      	add	sp, #44	; 0x2c
 8000cb8:	bd90      	pop	{r4, r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	40000400 	.word	0x40000400
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40002000 	.word	0x40002000

08000cc8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cce:	4a15      	ldr	r2, [pc, #84]	; (8000d24 <MX_USART2_UART_Init+0x5c>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cd4:	22e1      	movs	r2, #225	; 0xe1
 8000cd6:	0252      	lsls	r2, r2, #9
 8000cd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_USART2_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_USART2_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_USART2_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_USART2_UART_Init+0x58>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_USART2_UART_Init+0x58>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <MX_USART2_UART_Init+0x58>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f002 fb05 	bl	800331c <HAL_UART_Init>
 8000d12:	1e03      	subs	r3, r0, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d16:	f7ff fdf2 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000041c 	.word	0x2000041c
 8000d24:	40004400 	.word	0x40004400

08000d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	; 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	2414      	movs	r4, #20
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	0018      	movs	r0, r3
 8000d36:	2314      	movs	r3, #20
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f003 fac7 	bl	80042ce <memset>
  if(uartHandle->Instance==USART2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <HAL_UART_MspInit+0x90>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d132      	bne.n	8000db0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_UART_MspInit+0x94>)
 8000d4c:	69da      	ldr	r2, [r3, #28]
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_UART_MspInit+0x94>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0289      	lsls	r1, r1, #10
 8000d54:	430a      	orrs	r2, r1
 8000d56:	61da      	str	r2, [r3, #28]
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_UART_MspInit+0x94>)
 8000d5a:	69da      	ldr	r2, [r3, #28]
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	029b      	lsls	r3, r3, #10
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_UART_MspInit+0x94>)
 8000d68:	695a      	ldr	r2, [r3, #20]
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_UART_MspInit+0x94>)
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	0289      	lsls	r1, r1, #10
 8000d70:	430a      	orrs	r2, r1
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0x94>)
 8000d76:	695a      	ldr	r2, [r3, #20]
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	029b      	lsls	r3, r3, #10
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d82:	0021      	movs	r1, r4
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2201      	movs	r2, #1
 8000da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	187a      	adds	r2, r7, r1
 8000da4:	2390      	movs	r3, #144	; 0x90
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 f96e 	bl	800108c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b00b      	add	sp, #44	; 0x2c
 8000db6:	bd90      	pop	{r4, r7, pc}
 8000db8:	40004400 	.word	0x40004400
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dea:	f7ff fdff 	bl	80009ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dee:	f003 fa41 	bl	8004274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df2:	f7ff fd05 	bl	8000800 <main>

08000df6 <LoopForever>:

LoopForever:
    b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
  ldr   r0, =_estack
 8000df8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8000e04:	08004cc4 	.word	0x08004cc4
  ldr r2, =_sbss
 8000e08:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8000e0c:	200005b8 	.word	0x200005b8

08000e10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_IRQHandler>
	...

08000e14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_Init+0x24>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_Init+0x24>)
 8000e1e:	2110      	movs	r1, #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 f809 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2a:	f7ff fd6d 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	40022000 	.word	0x40022000

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e46:	681c      	ldr	r4, [r3, #0]
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_InitTick+0x60>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	23fa      	movs	r3, #250	; 0xfa
 8000e50:	0098      	lsls	r0, r3, #2
 8000e52:	f7ff f96b 	bl	800012c <__udivsi3>
 8000e56:	0003      	movs	r3, r0
 8000e58:	0019      	movs	r1, r3
 8000e5a:	0020      	movs	r0, r4
 8000e5c:	f7ff f966 	bl	800012c <__udivsi3>
 8000e60:	0003      	movs	r3, r0
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 f905 	bl	8001072 <HAL_SYSTICK_Config>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e00f      	b.n	8000e90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d80b      	bhi.n	8000e8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 f8e2 	bl	8001048 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_InitTick+0x64>)
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b003      	add	sp, #12
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	20000278 	.word	0x20000278
 8000e9c:	20000280 	.word	0x20000280
 8000ea0:	2000027c 	.word	0x2000027c

08000ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x1c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	001a      	movs	r2, r3
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	18d2      	adds	r2, r2, r3
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	20000280 	.word	0x20000280
 8000ec4:	200004a0 	.word	0x200004a0

08000ec8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <HAL_GetTick+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	200004a0 	.word	0x200004a0

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff fff0 	bl	8000ec8 <HAL_GetTick>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	001a      	movs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	189b      	adds	r3, r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	f7ff ffe0 	bl	8000ec8 <HAL_GetTick>
 8000f08:	0002      	movs	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	20000280 	.word	0x20000280

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b7f      	cmp	r3, #127	; 0x7f
 8000f38:	d828      	bhi.n	8000f8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	33c0      	adds	r3, #192	; 0xc0
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	589b      	ldr	r3, [r3, r2]
 8000f4a:	1dfa      	adds	r2, r7, #7
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	0011      	movs	r1, r2
 8000f50:	2203      	movs	r2, #3
 8000f52:	400a      	ands	r2, r1
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	21ff      	movs	r1, #255	; 0xff
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	43d2      	mvns	r2, r2
 8000f5e:	401a      	ands	r2, r3
 8000f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	22ff      	movs	r2, #255	; 0xff
 8000f68:	401a      	ands	r2, r3
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0018      	movs	r0, r3
 8000f70:	2303      	movs	r3, #3
 8000f72:	4003      	ands	r3, r0
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f78:	481f      	ldr	r0, [pc, #124]	; (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	430a      	orrs	r2, r1
 8000f84:	33c0      	adds	r3, #192	; 0xc0
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f8a:	e031      	b.n	8000ff0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <__NVIC_SetPriority+0xd8>)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0019      	movs	r1, r3
 8000f94:	230f      	movs	r3, #15
 8000f96:	400b      	ands	r3, r1
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3306      	adds	r3, #6
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	18d3      	adds	r3, r2, r3
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1dfa      	adds	r2, r7, #7
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	0011      	movs	r1, r2
 8000fac:	2203      	movs	r2, #3
 8000fae:	400a      	ands	r2, r1
 8000fb0:	00d2      	lsls	r2, r2, #3
 8000fb2:	21ff      	movs	r1, #255	; 0xff
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	401a      	ands	r2, r3
 8000fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	22ff      	movs	r2, #255	; 0xff
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2303      	movs	r3, #3
 8000fce:	4003      	ands	r3, r0
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <__NVIC_SetPriority+0xd8>)
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	001c      	movs	r4, r3
 8000fdc:	230f      	movs	r3, #15
 8000fde:	4023      	ands	r3, r4
 8000fe0:	3b08      	subs	r3, #8
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	3306      	adds	r3, #6
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	18c3      	adds	r3, r0, r3
 8000fec:	3304      	adds	r3, #4
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b003      	add	sp, #12
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	045b      	lsls	r3, r3, #17
 8001010:	429a      	cmp	r2, r3
 8001012:	d301      	bcc.n	8001018 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001014:	2301      	movs	r3, #1
 8001016:	e010      	b.n	800103a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <SysTick_Config+0x44>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	3a01      	subs	r2, #1
 800101e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001020:	2301      	movs	r3, #1
 8001022:	425b      	negs	r3, r3
 8001024:	2103      	movs	r1, #3
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff ff7c 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x44>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x44>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	210f      	movs	r1, #15
 8001054:	187b      	adds	r3, r7, r1
 8001056:	1c02      	adds	r2, r0, #0
 8001058:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	187b      	adds	r3, r7, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ffbf 	bl	8001000 <SysTick_Config>
 8001082:	0003      	movs	r3, r0
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	e14f      	b.n	800133c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4091      	lsls	r1, r2
 80010a6:	000a      	movs	r2, r1
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d100      	bne.n	80010b4 <HAL_GPIO_Init+0x28>
 80010b2:	e140      	b.n	8001336 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2203      	movs	r2, #3
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d005      	beq.n	80010cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d130      	bne.n	800112e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	43da      	mvns	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	409a      	lsls	r2, r3
 80010ee:	0013      	movs	r3, r2
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	2201      	movs	r2, #1
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2203      	movs	r2, #3
 8001134:	4013      	ands	r3, r2
 8001136:	2b03      	cmp	r3, #3
 8001138:	d017      	beq.n	800116a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2203      	movs	r2, #3
 8001170:	4013      	ands	r3, r2
 8001172:	2b02      	cmp	r3, #2
 8001174:	d123      	bne.n	80011be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	58d3      	ldr	r3, [r2, r3]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2207      	movs	r2, #7
 8001188:	4013      	ands	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	43da      	mvns	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2107      	movs	r1, #7
 80011a2:	400b      	ands	r3, r1
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	0092      	lsls	r2, r2, #2
 80011ba:	6939      	ldr	r1, [r7, #16]
 80011bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2203      	movs	r2, #3
 80011dc:	401a      	ands	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	23c0      	movs	r3, #192	; 0xc0
 80011f8:	029b      	lsls	r3, r3, #10
 80011fa:	4013      	ands	r3, r2
 80011fc:	d100      	bne.n	8001200 <HAL_GPIO_Init+0x174>
 80011fe:	e09a      	b.n	8001336 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001200:	4b54      	ldr	r3, [pc, #336]	; (8001354 <HAL_GPIO_Init+0x2c8>)
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	4b53      	ldr	r3, [pc, #332]	; (8001354 <HAL_GPIO_Init+0x2c8>)
 8001206:	2101      	movs	r1, #1
 8001208:	430a      	orrs	r2, r1
 800120a:	619a      	str	r2, [r3, #24]
 800120c:	4b51      	ldr	r3, [pc, #324]	; (8001354 <HAL_GPIO_Init+0x2c8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	2201      	movs	r2, #1
 8001212:	4013      	ands	r3, r2
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001218:	4a4f      	ldr	r2, [pc, #316]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	589b      	ldr	r3, [r3, r2]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2203      	movs	r2, #3
 800122a:	4013      	ands	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	409a      	lsls	r2, r3
 8001232:	0013      	movs	r3, r2
 8001234:	43da      	mvns	r2, r3
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	2390      	movs	r3, #144	; 0x90
 8001240:	05db      	lsls	r3, r3, #23
 8001242:	429a      	cmp	r2, r3
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x1e2>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a44      	ldr	r2, [pc, #272]	; (800135c <HAL_GPIO_Init+0x2d0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x1de>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a43      	ldr	r2, [pc, #268]	; (8001360 <HAL_GPIO_Init+0x2d4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x1da>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a42      	ldr	r2, [pc, #264]	; (8001364 <HAL_GPIO_Init+0x2d8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x1d6>
 800125e:	2303      	movs	r3, #3
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x1e4>
 8001262:	2305      	movs	r3, #5
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x1e4>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x1e4>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x1e4>
 800126e:	2300      	movs	r3, #0
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	2103      	movs	r1, #3
 8001274:	400a      	ands	r2, r1
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001280:	4935      	ldr	r1, [pc, #212]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_GPIO_Init+0x2dc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43da      	mvns	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	025b      	lsls	r3, r3, #9
 80012a6:	4013      	ands	r3, r2
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_GPIO_Init+0x2dc>)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <HAL_GPIO_Init+0x2dc>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43da      	mvns	r2, r3
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	029b      	lsls	r3, r3, #10
 80012d0:	4013      	ands	r3, r2
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <HAL_GPIO_Init+0x2dc>)
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_GPIO_Init+0x2dc>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43da      	mvns	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	035b      	lsls	r3, r3, #13
 80012fa:	4013      	ands	r3, r2
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_GPIO_Init+0x2dc>)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_GPIO_Init+0x2dc>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43da      	mvns	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	039b      	lsls	r3, r3, #14
 8001324:	4013      	ands	r3, r2
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_GPIO_Init+0x2dc>)
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	40da      	lsrs	r2, r3
 8001344:	1e13      	subs	r3, r2, #0
 8001346:	d000      	beq.n	800134a <HAL_GPIO_Init+0x2be>
 8001348:	e6a8      	b.n	800109c <HAL_GPIO_Init+0x10>
  } 
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b006      	add	sp, #24
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000
 800135c:	48000400 	.word	0x48000400
 8001360:	48000800 	.word	0x48000800
 8001364:	48000c00 	.word	0x48000c00
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	0008      	movs	r0, r1
 8001376:	0011      	movs	r1, r2
 8001378:	1cbb      	adds	r3, r7, #2
 800137a:	1c02      	adds	r2, r0, #0
 800137c:	801a      	strh	r2, [r3, #0]
 800137e:	1c7b      	adds	r3, r7, #1
 8001380:	1c0a      	adds	r2, r1, #0
 8001382:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001384:	1c7b      	adds	r3, r7, #1
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d004      	beq.n	8001396 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800138c:	1cbb      	adds	r3, r7, #2
 800138e:	881a      	ldrh	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001394:	e003      	b.n	800139e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001396:	1cbb      	adds	r3, r7, #2
 8001398:	881a      	ldrh	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e082      	b.n	80014c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2241      	movs	r2, #65	; 0x41
 80013be:	5c9b      	ldrb	r3, [r3, r2]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d107      	bne.n	80013d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	2100      	movs	r1, #0
 80013cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff f823 	bl	800041c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2241      	movs	r2, #65	; 0x41
 80013da:	2124      	movs	r1, #36	; 0x24
 80013dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2101      	movs	r1, #1
 80013ea:	438a      	bics	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4934      	ldr	r1, [pc, #208]	; (80014c8 <HAL_I2C_Init+0x120>)
 80013f8:	400a      	ands	r2, r1
 80013fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4931      	ldr	r1, [pc, #196]	; (80014cc <HAL_I2C_Init+0x124>)
 8001408:	400a      	ands	r2, r1
 800140a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d108      	bne.n	8001426 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	0209      	lsls	r1, r1, #8
 8001420:	430a      	orrs	r2, r1
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	e007      	b.n	8001436 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2184      	movs	r1, #132	; 0x84
 8001430:	0209      	lsls	r1, r1, #8
 8001432:	430a      	orrs	r2, r1
 8001434:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d104      	bne.n	8001448 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	491f      	ldr	r1, [pc, #124]	; (80014d0 <HAL_I2C_Init+0x128>)
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	491a      	ldr	r1, [pc, #104]	; (80014cc <HAL_I2C_Init+0x124>)
 8001464:	400a      	ands	r2, r1
 8001466:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	431a      	orrs	r2, r3
 8001472:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69d9      	ldr	r1, [r3, #28]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1a      	ldr	r2, [r3, #32]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2241      	movs	r2, #65	; 0x41
 80014ac:	2120      	movs	r1, #32
 80014ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2242      	movs	r2, #66	; 0x42
 80014ba:	2100      	movs	r1, #0
 80014bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	f0ffffff 	.word	0xf0ffffff
 80014cc:	ffff7fff 	.word	0xffff7fff
 80014d0:	02008000 	.word	0x02008000

080014d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	0008      	movs	r0, r1
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	0019      	movs	r1, r3
 80014e2:	230a      	movs	r3, #10
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	1c02      	adds	r2, r0, #0
 80014e8:	801a      	strh	r2, [r3, #0]
 80014ea:	2308      	movs	r3, #8
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	1c0a      	adds	r2, r1, #0
 80014f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2241      	movs	r2, #65	; 0x41
 80014f6:	5c9b      	ldrb	r3, [r3, r2]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b20      	cmp	r3, #32
 80014fc:	d000      	beq.n	8001500 <HAL_I2C_Master_Transmit+0x2c>
 80014fe:	e0e7      	b.n	80016d0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2240      	movs	r2, #64	; 0x40
 8001504:	5c9b      	ldrb	r3, [r3, r2]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_I2C_Master_Transmit+0x3a>
 800150a:	2302      	movs	r3, #2
 800150c:	e0e1      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2240      	movs	r2, #64	; 0x40
 8001512:	2101      	movs	r1, #1
 8001514:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001516:	f7ff fcd7 	bl	8000ec8 <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	0219      	lsls	r1, r3, #8
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2319      	movs	r3, #25
 800152a:	2201      	movs	r2, #1
 800152c:	f000 fa04 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001530:	1e03      	subs	r3, r0, #0
 8001532:	d001      	beq.n	8001538 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0cc      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2241      	movs	r2, #65	; 0x41
 800153c:	2121      	movs	r1, #33	; 0x21
 800153e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2242      	movs	r2, #66	; 0x42
 8001544:	2110      	movs	r1, #16
 8001546:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2208      	movs	r2, #8
 8001558:	18ba      	adds	r2, r7, r2
 800155a:	8812      	ldrh	r2, [r2, #0]
 800155c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001568:	b29b      	uxth	r3, r3
 800156a:	2bff      	cmp	r3, #255	; 0xff
 800156c:	d911      	bls.n	8001592 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	22ff      	movs	r2, #255	; 0xff
 8001572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001578:	b2da      	uxtb	r2, r3
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	045c      	lsls	r4, r3, #17
 800157e:	230a      	movs	r3, #10
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	8819      	ldrh	r1, [r3, #0]
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	4b55      	ldr	r3, [pc, #340]	; (80016dc <HAL_I2C_Master_Transmit+0x208>)
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	0023      	movs	r3, r4
 800158c:	f000 fb74 	bl	8001c78 <I2C_TransferConfig>
 8001590:	e075      	b.n	800167e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	049c      	lsls	r4, r3, #18
 80015a6:	230a      	movs	r3, #10
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	8819      	ldrh	r1, [r3, #0]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <HAL_I2C_Master_Transmit+0x208>)
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	0023      	movs	r3, r4
 80015b4:	f000 fb60 	bl	8001c78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80015b8:	e061      	b.n	800167e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	0018      	movs	r0, r3
 80015c2:	f000 f9f8 	bl	80019b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e081      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001602:	b29b      	uxth	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d03a      	beq.n	800167e <HAL_I2C_Master_Transmit+0x1aa>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160c:	2b00      	cmp	r3, #0
 800160e:	d136      	bne.n	800167e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	0013      	movs	r3, r2
 800161a:	2200      	movs	r2, #0
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	f000 f98b 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e053      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162e:	b29b      	uxth	r3, r3
 8001630:	2bff      	cmp	r3, #255	; 0xff
 8001632:	d911      	bls.n	8001658 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	22ff      	movs	r2, #255	; 0xff
 8001638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163e:	b2da      	uxtb	r2, r3
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	045c      	lsls	r4, r3, #17
 8001644:	230a      	movs	r3, #10
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	8819      	ldrh	r1, [r3, #0]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	2300      	movs	r3, #0
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	0023      	movs	r3, r4
 8001652:	f000 fb11 	bl	8001c78 <I2C_TransferConfig>
 8001656:	e012      	b.n	800167e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	b2da      	uxtb	r2, r3
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	049c      	lsls	r4, r3, #18
 800166c:	230a      	movs	r3, #10
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	8819      	ldrh	r1, [r3, #0]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	2300      	movs	r3, #0
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	0023      	movs	r3, r4
 800167a:	f000 fafd 	bl	8001c78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001682:	b29b      	uxth	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d198      	bne.n	80015ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	0018      	movs	r0, r3
 8001690:	f000 f9d0 	bl	8001a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001694:	1e03      	subs	r3, r0, #0
 8001696:	d001      	beq.n	800169c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e01a      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2220      	movs	r2, #32
 80016a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	490c      	ldr	r1, [pc, #48]	; (80016e0 <HAL_I2C_Master_Transmit+0x20c>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2241      	movs	r2, #65	; 0x41
 80016b8:	2120      	movs	r1, #32
 80016ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2242      	movs	r2, #66	; 0x42
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2240      	movs	r2, #64	; 0x40
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80016d0:	2302      	movs	r3, #2
  }
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b007      	add	sp, #28
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	80002000 	.word	0x80002000
 80016e0:	fe00e800 	.word	0xfe00e800

080016e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	0008      	movs	r0, r1
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	0019      	movs	r1, r3
 80016f2:	230a      	movs	r3, #10
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	1c02      	adds	r2, r0, #0
 80016f8:	801a      	strh	r2, [r3, #0]
 80016fa:	2308      	movs	r3, #8
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	1c0a      	adds	r2, r1, #0
 8001700:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2241      	movs	r2, #65	; 0x41
 8001706:	5c9b      	ldrb	r3, [r3, r2]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b20      	cmp	r3, #32
 800170c:	d000      	beq.n	8001710 <HAL_I2C_Master_Receive+0x2c>
 800170e:	e0e8      	b.n	80018e2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2240      	movs	r2, #64	; 0x40
 8001714:	5c9b      	ldrb	r3, [r3, r2]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_I2C_Master_Receive+0x3a>
 800171a:	2302      	movs	r3, #2
 800171c:	e0e2      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2240      	movs	r2, #64	; 0x40
 8001722:	2101      	movs	r1, #1
 8001724:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001726:	f7ff fbcf 	bl	8000ec8 <HAL_GetTick>
 800172a:	0003      	movs	r3, r0
 800172c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	0219      	lsls	r1, r3, #8
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2319      	movs	r3, #25
 800173a:	2201      	movs	r2, #1
 800173c:	f000 f8fc 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d001      	beq.n	8001748 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0cd      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2241      	movs	r2, #65	; 0x41
 800174c:	2122      	movs	r1, #34	; 0x22
 800174e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2242      	movs	r2, #66	; 0x42
 8001754:	2110      	movs	r1, #16
 8001756:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2208      	movs	r2, #8
 8001768:	18ba      	adds	r2, r7, r2
 800176a:	8812      	ldrh	r2, [r2, #0]
 800176c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29b      	uxth	r3, r3
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d911      	bls.n	80017a2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	22ff      	movs	r2, #255	; 0xff
 8001782:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	b2da      	uxtb	r2, r3
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	045c      	lsls	r4, r3, #17
 800178e:	230a      	movs	r3, #10
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	8819      	ldrh	r1, [r3, #0]
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	4b55      	ldr	r3, [pc, #340]	; (80018ec <HAL_I2C_Master_Receive+0x208>)
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	0023      	movs	r3, r4
 800179c:	f000 fa6c 	bl	8001c78 <I2C_TransferConfig>
 80017a0:	e076      	b.n	8001890 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	049c      	lsls	r4, r3, #18
 80017b6:	230a      	movs	r3, #10
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	8819      	ldrh	r1, [r3, #0]
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <HAL_I2C_Master_Receive+0x208>)
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	0023      	movs	r3, r4
 80017c4:	f000 fa58 	bl	8001c78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80017c8:	e062      	b.n	8001890 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f000 f96b 	bl	8001aac <I2C_WaitOnRXNEFlagUntilTimeout>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e082      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001806:	b29b      	uxth	r3, r3
 8001808:	3b01      	subs	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d03a      	beq.n	8001890 <HAL_I2C_Master_Receive+0x1ac>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	2b00      	cmp	r3, #0
 8001820:	d136      	bne.n	8001890 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	0013      	movs	r3, r2
 800182c:	2200      	movs	r2, #0
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	f000 f882 	bl	8001938 <I2C_WaitOnFlagUntilTimeout>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e053      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d911      	bls.n	800186a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	22ff      	movs	r2, #255	; 0xff
 800184a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001850:	b2da      	uxtb	r2, r3
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	045c      	lsls	r4, r3, #17
 8001856:	230a      	movs	r3, #10
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	8819      	ldrh	r1, [r3, #0]
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	2300      	movs	r3, #0
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	0023      	movs	r3, r4
 8001864:	f000 fa08 	bl	8001c78 <I2C_TransferConfig>
 8001868:	e012      	b.n	8001890 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	b2da      	uxtb	r2, r3
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	049c      	lsls	r4, r3, #18
 800187e:	230a      	movs	r3, #10
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	8819      	ldrh	r1, [r3, #0]
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	2300      	movs	r3, #0
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	0023      	movs	r3, r4
 800188c:	f000 f9f4 	bl	8001c78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d197      	bne.n	80017ca <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 f8c7 	bl	8001a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e01a      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2220      	movs	r2, #32
 80018b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	490b      	ldr	r1, [pc, #44]	; (80018f0 <HAL_I2C_Master_Receive+0x20c>)
 80018c2:	400a      	ands	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2241      	movs	r2, #65	; 0x41
 80018ca:	2120      	movs	r1, #32
 80018cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2242      	movs	r2, #66	; 0x42
 80018d2:	2100      	movs	r1, #0
 80018d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2240      	movs	r2, #64	; 0x40
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
  }
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b007      	add	sp, #28
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	80002400 	.word	0x80002400
 80018f0:	fe00e800 	.word	0xfe00e800

080018f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	2b02      	cmp	r3, #2
 8001908:	d103      	bne.n	8001912 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	2201      	movs	r2, #1
 800191a:	4013      	ands	r3, r2
 800191c:	2b01      	cmp	r3, #1
 800191e:	d007      	beq.n	8001930 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2101      	movs	r1, #1
 800192c:	430a      	orrs	r2, r1
 800192e:	619a      	str	r2, [r3, #24]
  }
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}

08001938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001948:	e021      	b.n	800198e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	d01e      	beq.n	800198e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001950:	f7ff faba 	bl	8000ec8 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d302      	bcc.n	8001966 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d113      	bne.n	800198e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	2220      	movs	r2, #32
 800196c:	431a      	orrs	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2241      	movs	r2, #65	; 0x41
 8001976:	2120      	movs	r1, #32
 8001978:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2242      	movs	r2, #66	; 0x42
 800197e:	2100      	movs	r1, #0
 8001980:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	2100      	movs	r1, #0
 8001988:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	4013      	ands	r3, r2
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	425a      	negs	r2, r3
 800199e:	4153      	adcs	r3, r2
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	001a      	movs	r2, r3
 80019a4:	1dfb      	adds	r3, r7, #7
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d0ce      	beq.n	800194a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b004      	add	sp, #16
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019c2:	e02b      	b.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f000 f8da 	bl	8001b84 <I2C_IsAcknowledgeFailed>
 80019d0:	1e03      	subs	r3, r0, #0
 80019d2:	d001      	beq.n	80019d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e029      	b.n	8001a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	3301      	adds	r3, #1
 80019dc:	d01e      	beq.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019de:	f7ff fa73 	bl	8000ec8 <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d302      	bcc.n	80019f4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d113      	bne.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	2220      	movs	r2, #32
 80019fa:	431a      	orrs	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2241      	movs	r2, #65	; 0x41
 8001a04:	2120      	movs	r1, #32
 8001a06:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2242      	movs	r2, #66	; 0x42
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	2100      	movs	r1, #0
 8001a16:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e007      	b.n	8001a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2202      	movs	r2, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d1cc      	bne.n	80019c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b004      	add	sp, #16
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a40:	e028      	b.n	8001a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 f89b 	bl	8001b84 <I2C_IsAcknowledgeFailed>
 8001a4e:	1e03      	subs	r3, r0, #0
 8001a50:	d001      	beq.n	8001a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e026      	b.n	8001aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a56:	f7ff fa37 	bl	8000ec8 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d302      	bcc.n	8001a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d113      	bne.n	8001a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	2220      	movs	r2, #32
 8001a72:	431a      	orrs	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2241      	movs	r2, #65	; 0x41
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2242      	movs	r2, #66	; 0x42
 8001a84:	2100      	movs	r1, #0
 8001a86:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2240      	movs	r2, #64	; 0x40
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e007      	b.n	8001aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d1cf      	bne.n	8001a42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b004      	add	sp, #16
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ab8:	e055      	b.n	8001b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 f85f 	bl	8001b84 <I2C_IsAcknowledgeFailed>
 8001ac6:	1e03      	subs	r3, r0, #0
 8001ac8:	d001      	beq.n	8001ace <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e053      	b.n	8001b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d129      	bne.n	8001b30 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d105      	bne.n	8001af6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e03f      	b.n	8001b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2220      	movs	r2, #32
 8001afc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	491d      	ldr	r1, [pc, #116]	; (8001b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2241      	movs	r2, #65	; 0x41
 8001b18:	2120      	movs	r1, #32
 8001b1a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2242      	movs	r2, #66	; 0x42
 8001b20:	2100      	movs	r1, #0
 8001b22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2240      	movs	r2, #64	; 0x40
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e022      	b.n	8001b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b30:	f7ff f9ca 	bl	8000ec8 <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d302      	bcc.n	8001b46 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10f      	bne.n	8001b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2241      	movs	r2, #65	; 0x41
 8001b56:	2120      	movs	r1, #32
 8001b58:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2240      	movs	r2, #64	; 0x40
 8001b5e:	2100      	movs	r1, #0
 8001b60:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e007      	b.n	8001b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d1a2      	bne.n	8001aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	fe00e800 	.word	0xfe00e800

08001b84 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2210      	movs	r2, #16
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d164      	bne.n	8001c68 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	049b      	lsls	r3, r3, #18
 8001ba8:	401a      	ands	r2, r3
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	049b      	lsls	r3, r3, #18
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d02b      	beq.n	8001c0a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	01c9      	lsls	r1, r1, #7
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc4:	e021      	b.n	8001c0a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	d01e      	beq.n	8001c0a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bcc:	f7ff f97c 	bl	8000ec8 <HAL_GetTick>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d302      	bcc.n	8001be2 <I2C_IsAcknowledgeFailed+0x5e>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d113      	bne.n	8001c0a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	2220      	movs	r2, #32
 8001be8:	431a      	orrs	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2241      	movs	r2, #65	; 0x41
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2242      	movs	r2, #66	; 0x42
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2240      	movs	r2, #64	; 0x40
 8001c02:	2100      	movs	r1, #0
 8001c04:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e02f      	b.n	8001c6a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2220      	movs	r2, #32
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	d1d6      	bne.n	8001bc6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2220      	movs	r2, #32
 8001c26:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff fe62 	bl	80018f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	490e      	ldr	r1, [pc, #56]	; (8001c74 <I2C_IsAcknowledgeFailed+0xf0>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	2204      	movs	r2, #4
 8001c46:	431a      	orrs	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2241      	movs	r2, #65	; 0x41
 8001c50:	2120      	movs	r1, #32
 8001c52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2242      	movs	r2, #66	; 0x42
 8001c58:	2100      	movs	r1, #0
 8001c5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2240      	movs	r2, #64	; 0x40
 8001c60:	2100      	movs	r1, #0
 8001c62:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b004      	add	sp, #16
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	fe00e800 	.word	0xfe00e800

08001c78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	0008      	movs	r0, r1
 8001c82:	0011      	movs	r1, r2
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	240a      	movs	r4, #10
 8001c88:	193b      	adds	r3, r7, r4
 8001c8a:	1c02      	adds	r2, r0, #0
 8001c8c:	801a      	strh	r2, [r3, #0]
 8001c8e:	2009      	movs	r0, #9
 8001c90:	183b      	adds	r3, r7, r0
 8001c92:	1c0a      	adds	r2, r1, #0
 8001c94:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	6a3a      	ldr	r2, [r7, #32]
 8001c9e:	0d51      	lsrs	r1, r2, #21
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	00d2      	lsls	r2, r2, #3
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	490e      	ldr	r1, [pc, #56]	; (8001ce0 <I2C_TransferConfig+0x68>)
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	43d2      	mvns	r2, r2
 8001cac:	401a      	ands	r2, r3
 8001cae:	0011      	movs	r1, r2
 8001cb0:	193b      	adds	r3, r7, r4
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	059b      	lsls	r3, r3, #22
 8001cb6:	0d9a      	lsrs	r2, r3, #22
 8001cb8:	183b      	adds	r3, r7, r0
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	0418      	lsls	r0, r3, #16
 8001cbe:	23ff      	movs	r3, #255	; 0xff
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	4003      	ands	r3, r0
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b005      	add	sp, #20
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	03ff63ff 	.word	0x03ff63ff

08001ce4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2241      	movs	r2, #65	; 0x41
 8001cf2:	5c9b      	ldrb	r3, [r3, r2]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	d138      	bne.n	8001d6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2240      	movs	r2, #64	; 0x40
 8001cfe:	5c9b      	ldrb	r3, [r3, r2]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e032      	b.n	8001d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2241      	movs	r2, #65	; 0x41
 8001d14:	2124      	movs	r1, #36	; 0x24
 8001d16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2101      	movs	r1, #1
 8001d24:	438a      	bics	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4911      	ldr	r1, [pc, #68]	; (8001d78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d34:	400a      	ands	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6819      	ldr	r1, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2101      	movs	r1, #1
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2241      	movs	r2, #65	; 0x41
 8001d5c:	2120      	movs	r1, #32
 8001d5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2240      	movs	r2, #64	; 0x40
 8001d64:	2100      	movs	r1, #0
 8001d66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e000      	b.n	8001d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d6c:	2302      	movs	r3, #2
  }
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b002      	add	sp, #8
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	ffffefff 	.word	0xffffefff

08001d7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2241      	movs	r2, #65	; 0x41
 8001d8a:	5c9b      	ldrb	r3, [r3, r2]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	d139      	bne.n	8001e06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	5c9b      	ldrb	r3, [r3, r2]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e033      	b.n	8001e08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2240      	movs	r2, #64	; 0x40
 8001da4:	2101      	movs	r1, #1
 8001da6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2241      	movs	r2, #65	; 0x41
 8001dac:	2124      	movs	r1, #36	; 0x24
 8001dae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2101      	movs	r1, #1
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2241      	movs	r2, #65	; 0x41
 8001df6:	2120      	movs	r1, #32
 8001df8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2240      	movs	r2, #64	; 0x40
 8001dfe:	2100      	movs	r1, #0
 8001e00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
  }
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b004      	add	sp, #16
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	fffff0ff 	.word	0xfffff0ff

08001e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e301      	b.n	800242a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d100      	bne.n	8001e32 <HAL_RCC_OscConfig+0x1e>
 8001e30:	e08d      	b.n	8001f4e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e32:	4bc3      	ldr	r3, [pc, #780]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	220c      	movs	r2, #12
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d00e      	beq.n	8001e5c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e3e:	4bc0      	ldr	r3, [pc, #768]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	220c      	movs	r2, #12
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d116      	bne.n	8001e78 <HAL_RCC_OscConfig+0x64>
 8001e4a:	4bbd      	ldr	r3, [pc, #756]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	025b      	lsls	r3, r3, #9
 8001e52:	401a      	ands	r2, r3
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	025b      	lsls	r3, r3, #9
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d10d      	bne.n	8001e78 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5c:	4bb8      	ldr	r3, [pc, #736]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	029b      	lsls	r3, r3, #10
 8001e64:	4013      	ands	r3, r2
 8001e66:	d100      	bne.n	8001e6a <HAL_RCC_OscConfig+0x56>
 8001e68:	e070      	b.n	8001f4c <HAL_RCC_OscConfig+0x138>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d000      	beq.n	8001e74 <HAL_RCC_OscConfig+0x60>
 8001e72:	e06b      	b.n	8001f4c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e2d8      	b.n	800242a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_OscConfig+0x7c>
 8001e80:	4baf      	ldr	r3, [pc, #700]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4bae      	ldr	r3, [pc, #696]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	0249      	lsls	r1, r1, #9
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e02f      	b.n	8001ef0 <HAL_RCC_OscConfig+0xdc>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x9e>
 8001e98:	4ba9      	ldr	r3, [pc, #676]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4ba8      	ldr	r3, [pc, #672]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	49a9      	ldr	r1, [pc, #676]	; (8002144 <HAL_RCC_OscConfig+0x330>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	4ba6      	ldr	r3, [pc, #664]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4ba5      	ldr	r3, [pc, #660]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	49a7      	ldr	r1, [pc, #668]	; (8002148 <HAL_RCC_OscConfig+0x334>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e01e      	b.n	8001ef0 <HAL_RCC_OscConfig+0xdc>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b05      	cmp	r3, #5
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xc4>
 8001eba:	4ba1      	ldr	r3, [pc, #644]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4ba0      	ldr	r3, [pc, #640]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	02c9      	lsls	r1, r1, #11
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	4b9d      	ldr	r3, [pc, #628]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b9c      	ldr	r3, [pc, #624]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	0249      	lsls	r1, r1, #9
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xdc>
 8001ed8:	4b99      	ldr	r3, [pc, #612]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b98      	ldr	r3, [pc, #608]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001ede:	4999      	ldr	r1, [pc, #612]	; (8002144 <HAL_RCC_OscConfig+0x330>)
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	4b96      	ldr	r3, [pc, #600]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b95      	ldr	r3, [pc, #596]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001eea:	4997      	ldr	r1, [pc, #604]	; (8002148 <HAL_RCC_OscConfig+0x334>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d014      	beq.n	8001f22 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ffe6 	bl	8000ec8 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f02:	f7fe ffe1 	bl	8000ec8 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b64      	cmp	r3, #100	; 0x64
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e28a      	b.n	800242a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f14:	4b8a      	ldr	r3, [pc, #552]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	029b      	lsls	r3, r3, #10
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0xee>
 8001f20:	e015      	b.n	8001f4e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7fe ffd1 	bl	8000ec8 <HAL_GetTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7fe ffcc 	bl	8000ec8 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e275      	b.n	800242a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	4b80      	ldr	r3, [pc, #512]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	029b      	lsls	r3, r3, #10
 8001f46:	4013      	ands	r3, r2
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x118>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	d100      	bne.n	8001f5a <HAL_RCC_OscConfig+0x146>
 8001f58:	e069      	b.n	800202e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f5a:	4b79      	ldr	r3, [pc, #484]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	220c      	movs	r2, #12
 8001f60:	4013      	ands	r3, r2
 8001f62:	d00b      	beq.n	8001f7c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f64:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	220c      	movs	r2, #12
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d11c      	bne.n	8001faa <HAL_RCC_OscConfig+0x196>
 8001f70:	4b73      	ldr	r3, [pc, #460]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	025b      	lsls	r3, r3, #9
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d116      	bne.n	8001faa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7c:	4b70      	ldr	r3, [pc, #448]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2202      	movs	r2, #2
 8001f82:	4013      	ands	r3, r2
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x17e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e24b      	b.n	800242a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b6b      	ldr	r3, [pc, #428]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	22f8      	movs	r2, #248	; 0xf8
 8001f98:	4393      	bics	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	00da      	lsls	r2, r3, #3
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa8:	e041      	b.n	800202e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d024      	beq.n	8001ffc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb2:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4b62      	ldr	r3, [pc, #392]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	2101      	movs	r1, #1
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe ff83 	bl	8000ec8 <HAL_GetTick>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7fe ff7e 	bl	8000ec8 <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e227      	b.n	800242a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b59      	ldr	r3, [pc, #356]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d0f1      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b56      	ldr	r3, [pc, #344]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	22f8      	movs	r2, #248	; 0xf8
 8001fea:	4393      	bics	r3, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00da      	lsls	r2, r3, #3
 8001ff4:	4b52      	ldr	r3, [pc, #328]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e018      	b.n	800202e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffc:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8002002:	2101      	movs	r1, #1
 8002004:	438a      	bics	r2, r1
 8002006:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7fe ff5e 	bl	8000ec8 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002012:	f7fe ff59 	bl	8000ec8 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e202      	b.n	800242a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002024:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2202      	movs	r2, #2
 800202a:	4013      	ands	r3, r2
 800202c:	d1f1      	bne.n	8002012 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2208      	movs	r2, #8
 8002034:	4013      	ands	r3, r2
 8002036:	d036      	beq.n	80020a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d019      	beq.n	8002074 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002040:	4b3f      	ldr	r3, [pc, #252]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8002042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002044:	4b3e      	ldr	r3, [pc, #248]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8002046:	2101      	movs	r1, #1
 8002048:	430a      	orrs	r2, r1
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7fe ff3c 	bl	8000ec8 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002056:	f7fe ff37 	bl	8000ec8 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1e0      	b.n	800242a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002068:	4b35      	ldr	r3, [pc, #212]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d0f1      	beq.n	8002056 <HAL_RCC_OscConfig+0x242>
 8002072:	e018      	b.n	80020a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002074:	4b32      	ldr	r3, [pc, #200]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8002076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002078:	4b31      	ldr	r3, [pc, #196]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 800207a:	2101      	movs	r1, #1
 800207c:	438a      	bics	r2, r1
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002080:	f7fe ff22 	bl	8000ec8 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208a:	f7fe ff1d 	bl	8000ec8 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e1c6      	b.n	800242a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	4b28      	ldr	r3, [pc, #160]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d1f1      	bne.n	800208a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2204      	movs	r2, #4
 80020ac:	4013      	ands	r3, r2
 80020ae:	d100      	bne.n	80020b2 <HAL_RCC_OscConfig+0x29e>
 80020b0:	e0b4      	b.n	800221c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	201f      	movs	r0, #31
 80020b4:	183b      	adds	r3, r7, r0
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ba:	4b21      	ldr	r3, [pc, #132]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	055b      	lsls	r3, r3, #21
 80020c2:	4013      	ands	r3, r2
 80020c4:	d110      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 80020c8:	69da      	ldr	r2, [r3, #28]
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	0549      	lsls	r1, r1, #21
 80020d0:	430a      	orrs	r2, r1
 80020d2:	61da      	str	r2, [r3, #28]
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	055b      	lsls	r3, r3, #21
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020e2:	183b      	adds	r3, r7, r0
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_RCC_OscConfig+0x338>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	d11a      	bne.n	800212a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_RCC_OscConfig+0x338>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_RCC_OscConfig+0x338>)
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	0049      	lsls	r1, r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7fe fee1 	bl	8000ec8 <HAL_GetTick>
 8002106:	0003      	movs	r3, r0
 8002108:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210c:	f7fe fedc 	bl	8000ec8 <HAL_GetTick>
 8002110:	0002      	movs	r2, r0
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e185      	b.n	800242a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_OscConfig+0x338>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4013      	ands	r3, r2
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d10e      	bne.n	8002150 <HAL_RCC_OscConfig+0x33c>
 8002132:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	4b02      	ldr	r3, [pc, #8]	; (8002140 <HAL_RCC_OscConfig+0x32c>)
 8002138:	2101      	movs	r1, #1
 800213a:	430a      	orrs	r2, r1
 800213c:	621a      	str	r2, [r3, #32]
 800213e:	e035      	b.n	80021ac <HAL_RCC_OscConfig+0x398>
 8002140:	40021000 	.word	0x40021000
 8002144:	fffeffff 	.word	0xfffeffff
 8002148:	fffbffff 	.word	0xfffbffff
 800214c:	40007000 	.word	0x40007000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10c      	bne.n	8002172 <HAL_RCC_OscConfig+0x35e>
 8002158:	4bb6      	ldr	r3, [pc, #728]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	4bb5      	ldr	r3, [pc, #724]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800215e:	2101      	movs	r1, #1
 8002160:	438a      	bics	r2, r1
 8002162:	621a      	str	r2, [r3, #32]
 8002164:	4bb3      	ldr	r3, [pc, #716]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002166:	6a1a      	ldr	r2, [r3, #32]
 8002168:	4bb2      	ldr	r3, [pc, #712]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800216a:	2104      	movs	r1, #4
 800216c:	438a      	bics	r2, r1
 800216e:	621a      	str	r2, [r3, #32]
 8002170:	e01c      	b.n	80021ac <HAL_RCC_OscConfig+0x398>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x380>
 800217a:	4bae      	ldr	r3, [pc, #696]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800217c:	6a1a      	ldr	r2, [r3, #32]
 800217e:	4bad      	ldr	r3, [pc, #692]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002180:	2104      	movs	r1, #4
 8002182:	430a      	orrs	r2, r1
 8002184:	621a      	str	r2, [r3, #32]
 8002186:	4bab      	ldr	r3, [pc, #684]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	4baa      	ldr	r3, [pc, #680]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800218c:	2101      	movs	r1, #1
 800218e:	430a      	orrs	r2, r1
 8002190:	621a      	str	r2, [r3, #32]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0x398>
 8002194:	4ba7      	ldr	r3, [pc, #668]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	4ba6      	ldr	r3, [pc, #664]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800219a:	2101      	movs	r1, #1
 800219c:	438a      	bics	r2, r1
 800219e:	621a      	str	r2, [r3, #32]
 80021a0:	4ba4      	ldr	r3, [pc, #656]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80021a2:	6a1a      	ldr	r2, [r3, #32]
 80021a4:	4ba3      	ldr	r3, [pc, #652]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80021a6:	2104      	movs	r1, #4
 80021a8:	438a      	bics	r2, r1
 80021aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d014      	beq.n	80021de <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7fe fe88 	bl	8000ec8 <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021bc:	e009      	b.n	80021d2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe fe83 	bl	8000ec8 <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	4a9b      	ldr	r2, [pc, #620]	; (8002438 <HAL_RCC_OscConfig+0x624>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e12b      	b.n	800242a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d2:	4b98      	ldr	r3, [pc, #608]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x3aa>
 80021dc:	e013      	b.n	8002206 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7fe fe73 	bl	8000ec8 <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e6:	e009      	b.n	80021fc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e8:	f7fe fe6e 	bl	8000ec8 <HAL_GetTick>
 80021ec:	0002      	movs	r2, r0
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	4a91      	ldr	r2, [pc, #580]	; (8002438 <HAL_RCC_OscConfig+0x624>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e116      	b.n	800242a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	4b8d      	ldr	r3, [pc, #564]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	2202      	movs	r2, #2
 8002202:	4013      	ands	r3, r2
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002206:	231f      	movs	r3, #31
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002210:	4b88      	ldr	r3, [pc, #544]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	4b87      	ldr	r3, [pc, #540]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002216:	4989      	ldr	r1, [pc, #548]	; (800243c <HAL_RCC_OscConfig+0x628>)
 8002218:	400a      	ands	r2, r1
 800221a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2210      	movs	r2, #16
 8002222:	4013      	ands	r3, r2
 8002224:	d063      	beq.n	80022ee <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d12a      	bne.n	8002284 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800222e:	4b81      	ldr	r3, [pc, #516]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002232:	4b80      	ldr	r3, [pc, #512]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002234:	2104      	movs	r1, #4
 8002236:	430a      	orrs	r2, r1
 8002238:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800223a:	4b7e      	ldr	r3, [pc, #504]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800223c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223e:	4b7d      	ldr	r3, [pc, #500]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002240:	2101      	movs	r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7fe fe3f 	bl	8000ec8 <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002250:	f7fe fe3a 	bl	8000ec8 <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0e3      	b.n	800242a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002262:	4b74      	ldr	r3, [pc, #464]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002266:	2202      	movs	r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d0f1      	beq.n	8002250 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800226c:	4b71      	ldr	r3, [pc, #452]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002270:	22f8      	movs	r2, #248	; 0xf8
 8002272:	4393      	bics	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	00da      	lsls	r2, r3, #3
 800227c:	4b6d      	ldr	r3, [pc, #436]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800227e:	430a      	orrs	r2, r1
 8002280:	635a      	str	r2, [r3, #52]	; 0x34
 8002282:	e034      	b.n	80022ee <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	3305      	adds	r3, #5
 800228a:	d111      	bne.n	80022b0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800228c:	4b69      	ldr	r3, [pc, #420]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800228e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002290:	4b68      	ldr	r3, [pc, #416]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002292:	2104      	movs	r1, #4
 8002294:	438a      	bics	r2, r1
 8002296:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002298:	4b66      	ldr	r3, [pc, #408]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	22f8      	movs	r2, #248	; 0xf8
 800229e:	4393      	bics	r3, r2
 80022a0:	0019      	movs	r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	00da      	lsls	r2, r3, #3
 80022a8:	4b62      	ldr	r3, [pc, #392]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	635a      	str	r2, [r3, #52]	; 0x34
 80022ae:	e01e      	b.n	80022ee <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022b0:	4b60      	ldr	r3, [pc, #384]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80022b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b4:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80022b6:	2104      	movs	r1, #4
 80022b8:	430a      	orrs	r2, r1
 80022ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022bc:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80022be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c0:	4b5c      	ldr	r3, [pc, #368]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	438a      	bics	r2, r1
 80022c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7fe fdfe 	bl	8000ec8 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022d2:	f7fe fdf9 	bl	8000ec8 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0a2      	b.n	800242a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022e4:	4b53      	ldr	r3, [pc, #332]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	2202      	movs	r2, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d1f1      	bne.n	80022d2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d100      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4e4>
 80022f6:	e097      	b.n	8002428 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f8:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	220c      	movs	r2, #12
 80022fe:	4013      	ands	r3, r2
 8002300:	2b08      	cmp	r3, #8
 8002302:	d100      	bne.n	8002306 <HAL_RCC_OscConfig+0x4f2>
 8002304:	e06b      	b.n	80023de <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d14c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230e:	4b49      	ldr	r3, [pc, #292]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4b48      	ldr	r3, [pc, #288]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002314:	494a      	ldr	r1, [pc, #296]	; (8002440 <HAL_RCC_OscConfig+0x62c>)
 8002316:	400a      	ands	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7fe fdd5 	bl	8000ec8 <HAL_GetTick>
 800231e:	0003      	movs	r3, r0
 8002320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe fdd0 	bl	8000ec8 <HAL_GetTick>
 8002328:	0002      	movs	r2, r0
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e079      	b.n	800242a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002336:	4b3f      	ldr	r3, [pc, #252]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	049b      	lsls	r3, r3, #18
 800233e:	4013      	ands	r3, r2
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002342:	4b3c      	ldr	r3, [pc, #240]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	220f      	movs	r2, #15
 8002348:	4393      	bics	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002350:	4b38      	ldr	r3, [pc, #224]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002352:	430a      	orrs	r2, r1
 8002354:	62da      	str	r2, [r3, #44]	; 0x2c
 8002356:	4b37      	ldr	r3, [pc, #220]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a3a      	ldr	r2, [pc, #232]	; (8002444 <HAL_RCC_OscConfig+0x630>)
 800235c:	4013      	ands	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	431a      	orrs	r2, r3
 800236a:	4b32      	ldr	r3, [pc, #200]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800236c:	430a      	orrs	r2, r1
 800236e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002370:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	0449      	lsls	r1, r1, #17
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7fe fda3 	bl	8000ec8 <HAL_GetTick>
 8002382:	0003      	movs	r3, r0
 8002384:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe fd9e 	bl	8000ec8 <HAL_GetTick>
 800238c:	0002      	movs	r2, r0
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e047      	b.n	800242a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	049b      	lsls	r3, r3, #18
 80023a2:	4013      	ands	r3, r2
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x574>
 80023a6:	e03f      	b.n	8002428 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80023ae:	4924      	ldr	r1, [pc, #144]	; (8002440 <HAL_RCC_OscConfig+0x62c>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fd88 	bl	8000ec8 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023be:	f7fe fd83 	bl	8000ec8 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e02c      	b.n	800242a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d0:	4b18      	ldr	r3, [pc, #96]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	049b      	lsls	r3, r3, #18
 80023d8:	4013      	ands	r3, r2
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x5aa>
 80023dc:	e024      	b.n	8002428 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e01f      	b.n	800242a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_RCC_OscConfig+0x620>)
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	025b      	lsls	r3, r3, #9
 80023fc:	401a      	ands	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	429a      	cmp	r2, r3
 8002404:	d10e      	bne.n	8002424 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	220f      	movs	r2, #15
 800240a:	401a      	ands	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	23f0      	movs	r3, #240	; 0xf0
 8002418:	039b      	lsls	r3, r3, #14
 800241a:	401a      	ands	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b008      	add	sp, #32
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40021000 	.word	0x40021000
 8002438:	00001388 	.word	0x00001388
 800243c:	efffffff 	.word	0xefffffff
 8002440:	feffffff 	.word	0xfeffffff
 8002444:	ffc2ffff 	.word	0xffc2ffff

08002448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0b3      	b.n	80025c4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800245c:	4b5b      	ldr	r3, [pc, #364]	; (80025cc <HAL_RCC_ClockConfig+0x184>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2201      	movs	r2, #1
 8002462:	4013      	ands	r3, r2
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d911      	bls.n	800248e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b58      	ldr	r3, [pc, #352]	; (80025cc <HAL_RCC_ClockConfig+0x184>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	4393      	bics	r3, r2
 8002472:	0019      	movs	r1, r3
 8002474:	4b55      	ldr	r3, [pc, #340]	; (80025cc <HAL_RCC_ClockConfig+0x184>)
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247c:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_RCC_ClockConfig+0x184>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2201      	movs	r2, #1
 8002482:	4013      	ands	r3, r2
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e09a      	b.n	80025c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2202      	movs	r2, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d015      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2204      	movs	r2, #4
 800249e:	4013      	ands	r3, r2
 80024a0:	d006      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024a2:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 80024a8:	21e0      	movs	r1, #224	; 0xe0
 80024aa:	00c9      	lsls	r1, r1, #3
 80024ac:	430a      	orrs	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b0:	4b47      	ldr	r3, [pc, #284]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	22f0      	movs	r2, #240	; 0xf0
 80024b6:	4393      	bics	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	4b44      	ldr	r3, [pc, #272]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	4013      	ands	r3, r2
 80024cc:	d040      	beq.n	8002550 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	029b      	lsls	r3, r3, #10
 80024de:	4013      	ands	r3, r2
 80024e0:	d114      	bne.n	800250c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06e      	b.n	80025c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ee:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	049b      	lsls	r3, r3, #18
 80024f6:	4013      	ands	r3, r2
 80024f8:	d108      	bne.n	800250c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e062      	b.n	80025c4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2202      	movs	r2, #2
 8002504:	4013      	ands	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e05b      	b.n	80025c4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250c:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2203      	movs	r2, #3
 8002512:	4393      	bics	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 800251c:	430a      	orrs	r2, r1
 800251e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002520:	f7fe fcd2 	bl	8000ec8 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002528:	e009      	b.n	800253e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252a:	f7fe fccd 	bl	8000ec8 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	4a27      	ldr	r2, [pc, #156]	; (80025d4 <HAL_RCC_ClockConfig+0x18c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d901      	bls.n	800253e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e042      	b.n	80025c4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	220c      	movs	r2, #12
 8002544:	401a      	ands	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	429a      	cmp	r2, r3
 800254e:	d1ec      	bne.n	800252a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002550:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <HAL_RCC_ClockConfig+0x184>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2201      	movs	r2, #1
 8002556:	4013      	ands	r3, r2
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d211      	bcs.n	8002582 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCC_ClockConfig+0x184>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2201      	movs	r2, #1
 8002564:	4393      	bics	r3, r2
 8002566:	0019      	movs	r1, r3
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_RCC_ClockConfig+0x184>)
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002570:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_RCC_ClockConfig+0x184>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2201      	movs	r2, #1
 8002576:	4013      	ands	r3, r2
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d001      	beq.n	8002582 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e020      	b.n	80025c4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2204      	movs	r2, #4
 8002588:	4013      	ands	r3, r2
 800258a:	d009      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <HAL_RCC_ClockConfig+0x190>)
 8002592:	4013      	ands	r3, r2
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 800259c:	430a      	orrs	r2, r1
 800259e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025a0:	f000 f820 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80025a4:	0001      	movs	r1, r0
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_RCC_ClockConfig+0x188>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	220f      	movs	r2, #15
 80025ae:	4013      	ands	r3, r2
 80025b0:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x194>)
 80025b2:	5cd3      	ldrb	r3, [r2, r3]
 80025b4:	000a      	movs	r2, r1
 80025b6:	40da      	lsrs	r2, r3
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x198>)
 80025ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe fc3d 	bl	8000e3c <HAL_InitTick>
  
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b004      	add	sp, #16
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40021000 	.word	0x40021000
 80025d4:	00001388 	.word	0x00001388
 80025d8:	fffff8ff 	.word	0xfffff8ff
 80025dc:	08004c14 	.word	0x08004c14
 80025e0:	20000278 	.word	0x20000278

080025e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b08f      	sub	sp, #60	; 0x3c
 80025e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80025ea:	2314      	movs	r3, #20
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	4a2b      	ldr	r2, [pc, #172]	; (800269c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025f2:	c313      	stmia	r3!, {r0, r1, r4}
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	4a29      	ldr	r2, [pc, #164]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025fe:	c313      	stmia	r3!, {r0, r1, r4}
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002608:	2300      	movs	r3, #0
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
 800260c:	2300      	movs	r3, #0
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002618:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	220c      	movs	r2, #12
 8002622:	4013      	ands	r3, r2
 8002624:	2b04      	cmp	r3, #4
 8002626:	d002      	beq.n	800262e <HAL_RCC_GetSysClockFreq+0x4a>
 8002628:	2b08      	cmp	r3, #8
 800262a:	d003      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x50>
 800262c:	e02d      	b.n	800268a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002632:	e02d      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	0c9b      	lsrs	r3, r3, #18
 8002638:	220f      	movs	r2, #15
 800263a:	4013      	ands	r3, r2
 800263c:	2214      	movs	r2, #20
 800263e:	18ba      	adds	r2, r7, r2
 8002640:	5cd3      	ldrb	r3, [r2, r3]
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	220f      	movs	r2, #15
 800264a:	4013      	ands	r3, r2
 800264c:	1d3a      	adds	r2, r7, #4
 800264e:	5cd3      	ldrb	r3, [r2, r3]
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	025b      	lsls	r3, r3, #9
 8002658:	4013      	ands	r3, r2
 800265a:	d009      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800265c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800265e:	4812      	ldr	r0, [pc, #72]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002660:	f7fd fd64 	bl	800012c <__udivsi3>
 8002664:	0003      	movs	r3, r0
 8002666:	001a      	movs	r2, r3
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	4353      	muls	r3, r2
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
 800266e:	e009      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002672:	000a      	movs	r2, r1
 8002674:	0152      	lsls	r2, r2, #5
 8002676:	1a52      	subs	r2, r2, r1
 8002678:	0193      	lsls	r3, r2, #6
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	185b      	adds	r3, r3, r1
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002688:	e002      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800268e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b00f      	add	sp, #60	; 0x3c
 8002698:	bd90      	pop	{r4, r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	08004bf4 	.word	0x08004bf4
 80026a0:	08004c04 	.word	0x08004c04
 80026a4:	40021000 	.word	0x40021000
 80026a8:	007a1200 	.word	0x007a1200

080026ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b02      	ldr	r3, [pc, #8]	; (80026bc <HAL_RCC_GetHCLKFreq+0x10>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	20000278 	.word	0x20000278

080026c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80026c4:	f7ff fff2 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026c8:	0001      	movs	r1, r0
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	2207      	movs	r2, #7
 80026d2:	4013      	ands	r3, r2
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	40d9      	lsrs	r1, r3
 80026da:	000b      	movs	r3, r1
}    
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	40021000 	.word	0x40021000
 80026e8:	08004c24 	.word	0x08004c24

080026ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	025b      	lsls	r3, r3, #9
 8002704:	4013      	ands	r3, r2
 8002706:	d100      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002708:	e08e      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2017      	movs	r0, #23
 800270c:	183b      	adds	r3, r7, r0
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	055b      	lsls	r3, r3, #21
 800271a:	4013      	ands	r3, r2
 800271c:	d110      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b54      	ldr	r3, [pc, #336]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	0549      	lsls	r1, r1, #21
 8002728:	430a      	orrs	r2, r1
 800272a:	61da      	str	r2, [r3, #28]
 800272c:	4b50      	ldr	r3, [pc, #320]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	055b      	lsls	r3, r3, #21
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	183b      	adds	r3, r7, r0
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002740:	4b4c      	ldr	r3, [pc, #304]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4013      	ands	r3, r2
 800274a:	d11a      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274c:	4b49      	ldr	r3, [pc, #292]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b48      	ldr	r3, [pc, #288]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	0049      	lsls	r1, r1, #1
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fe fbb5 	bl	8000ec8 <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002762:	e008      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fe fbb0 	bl	8000ec8 <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e077      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4013      	ands	r3, r2
 8002780:	d0f0      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002782:	4b3b      	ldr	r3, [pc, #236]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002784:	6a1a      	ldr	r2, [r3, #32]
 8002786:	23c0      	movs	r3, #192	; 0xc0
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4013      	ands	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d034      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	23c0      	movs	r3, #192	; 0xc0
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4013      	ands	r3, r2
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d02c      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027a4:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4a33      	ldr	r2, [pc, #204]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ae:	4b30      	ldr	r3, [pc, #192]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027b0:	6a1a      	ldr	r2, [r3, #32]
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	0249      	lsls	r1, r1, #9
 80027b8:	430a      	orrs	r2, r1
 80027ba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027bc:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027be:	6a1a      	ldr	r2, [r3, #32]
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027c2:	492e      	ldr	r1, [pc, #184]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027c8:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe fb77 	bl	8000ec8 <HAL_GetTick>
 80027da:	0003      	movs	r3, r0
 80027dc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	e009      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fb72 	bl	8000ec8 <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	4a25      	ldr	r2, [pc, #148]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e038      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	2202      	movs	r2, #2
 80027fa:	4013      	ands	r3, r2
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027fe:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002804:	4013      	ands	r3, r2
 8002806:	0019      	movs	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800280e:	430a      	orrs	r2, r1
 8002810:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002812:	2317      	movs	r3, #23
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800281e:	69da      	ldr	r2, [r3, #28]
 8002820:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002822:	4918      	ldr	r1, [pc, #96]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002824:	400a      	ands	r2, r1
 8002826:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2201      	movs	r2, #1
 800282e:	4013      	ands	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	2203      	movs	r2, #3
 8002838:	4393      	bics	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002842:	430a      	orrs	r2, r1
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2220      	movs	r2, #32
 800284c:	4013      	ands	r3, r2
 800284e:	d009      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	2210      	movs	r2, #16
 8002856:	4393      	bics	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002860:	430a      	orrs	r2, r1
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b006      	add	sp, #24
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	40021000 	.word	0x40021000
 8002874:	40007000 	.word	0x40007000
 8002878:	fffffcff 	.word	0xfffffcff
 800287c:	fffeffff 	.word	0xfffeffff
 8002880:	00001388 	.word	0x00001388
 8002884:	efffffff 	.word	0xefffffff

08002888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e042      	b.n	8002920 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	223d      	movs	r2, #61	; 0x3d
 800289e:	5c9b      	ldrb	r3, [r3, r2]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	223c      	movs	r2, #60	; 0x3c
 80028aa:	2100      	movs	r1, #0
 80028ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7fe f97d 	bl	8000bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	223d      	movs	r2, #61	; 0x3d
 80028ba:	2102      	movs	r1, #2
 80028bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	0019      	movs	r1, r3
 80028c8:	0010      	movs	r0, r2
 80028ca:	f000 fa39 	bl	8002d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2246      	movs	r2, #70	; 0x46
 80028d2:	2101      	movs	r1, #1
 80028d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	223e      	movs	r2, #62	; 0x3e
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	223f      	movs	r2, #63	; 0x3f
 80028e2:	2101      	movs	r1, #1
 80028e4:	5499      	strb	r1, [r3, r2]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2240      	movs	r2, #64	; 0x40
 80028ea:	2101      	movs	r1, #1
 80028ec:	5499      	strb	r1, [r3, r2]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2241      	movs	r2, #65	; 0x41
 80028f2:	2101      	movs	r1, #1
 80028f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2242      	movs	r2, #66	; 0x42
 80028fa:	2101      	movs	r1, #1
 80028fc:	5499      	strb	r1, [r3, r2]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2243      	movs	r2, #67	; 0x43
 8002902:	2101      	movs	r1, #1
 8002904:	5499      	strb	r1, [r3, r2]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2244      	movs	r2, #68	; 0x44
 800290a:	2101      	movs	r1, #1
 800290c:	5499      	strb	r1, [r3, r2]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2245      	movs	r2, #69	; 0x45
 8002912:	2101      	movs	r1, #1
 8002914:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	223d      	movs	r2, #61	; 0x3d
 800291a:	2101      	movs	r1, #1
 800291c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	223d      	movs	r2, #61	; 0x3d
 8002934:	5c9b      	ldrb	r3, [r3, r2]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d001      	beq.n	8002940 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e02d      	b.n	800299c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	223d      	movs	r2, #61	; 0x3d
 8002944:	2102      	movs	r1, #2
 8002946:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <HAL_TIM_Base_Start+0x7c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d009      	beq.n	8002966 <HAL_TIM_Base_Start+0x3e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <HAL_TIM_Base_Start+0x80>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d004      	beq.n	8002966 <HAL_TIM_Base_Start+0x3e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a12      	ldr	r2, [pc, #72]	; (80029ac <HAL_TIM_Base_Start+0x84>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d111      	bne.n	800298a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2207      	movs	r2, #7
 800296e:	4013      	ands	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b06      	cmp	r3, #6
 8002976:	d010      	beq.n	800299a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2101      	movs	r1, #1
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002988:	e007      	b.n	800299a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b004      	add	sp, #16
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40012c00 	.word	0x40012c00
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40014000 	.word	0x40014000

080029b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e042      	b.n	8002a48 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	223d      	movs	r2, #61	; 0x3d
 80029c6:	5c9b      	ldrb	r3, [r3, r2]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d107      	bne.n	80029de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	223c      	movs	r2, #60	; 0x3c
 80029d2:	2100      	movs	r1, #0
 80029d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7fe f8cb 	bl	8000b74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223d      	movs	r2, #61	; 0x3d
 80029e2:	2102      	movs	r1, #2
 80029e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	0019      	movs	r1, r3
 80029f0:	0010      	movs	r0, r2
 80029f2:	f000 f9a5 	bl	8002d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2246      	movs	r2, #70	; 0x46
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223e      	movs	r2, #62	; 0x3e
 8002a02:	2101      	movs	r1, #1
 8002a04:	5499      	strb	r1, [r3, r2]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223f      	movs	r2, #63	; 0x3f
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2240      	movs	r2, #64	; 0x40
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2241      	movs	r2, #65	; 0x41
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2242      	movs	r2, #66	; 0x42
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2243      	movs	r2, #67	; 0x43
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2244      	movs	r2, #68	; 0x44
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2245      	movs	r2, #69	; 0x45
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	223d      	movs	r2, #61	; 0x3d
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d108      	bne.n	8002a72 <HAL_TIM_PWM_Start+0x22>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	223e      	movs	r2, #62	; 0x3e
 8002a64:	5c9b      	ldrb	r3, [r3, r2]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	1e5a      	subs	r2, r3, #1
 8002a6c:	4193      	sbcs	r3, r2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	e01f      	b.n	8002ab2 <HAL_TIM_PWM_Start+0x62>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d108      	bne.n	8002a8a <HAL_TIM_PWM_Start+0x3a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	223f      	movs	r2, #63	; 0x3f
 8002a7c:	5c9b      	ldrb	r3, [r3, r2]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	4193      	sbcs	r3, r2
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	e013      	b.n	8002ab2 <HAL_TIM_PWM_Start+0x62>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d108      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x52>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2240      	movs	r2, #64	; 0x40
 8002a94:	5c9b      	ldrb	r3, [r3, r2]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	1e5a      	subs	r2, r3, #1
 8002a9c:	4193      	sbcs	r3, r2
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e007      	b.n	8002ab2 <HAL_TIM_PWM_Start+0x62>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2241      	movs	r2, #65	; 0x41
 8002aa6:	5c9b      	ldrb	r3, [r3, r2]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	1e5a      	subs	r2, r3, #1
 8002aae:	4193      	sbcs	r3, r2
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e06e      	b.n	8002b98 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_PWM_Start+0x7a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	223e      	movs	r2, #62	; 0x3e
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	5499      	strb	r1, [r3, r2]
 8002ac8:	e013      	b.n	8002af2 <HAL_TIM_PWM_Start+0xa2>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_PWM_Start+0x8a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	223f      	movs	r2, #63	; 0x3f
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	5499      	strb	r1, [r3, r2]
 8002ad8:	e00b      	b.n	8002af2 <HAL_TIM_PWM_Start+0xa2>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d104      	bne.n	8002aea <HAL_TIM_PWM_Start+0x9a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2240      	movs	r2, #64	; 0x40
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	5499      	strb	r1, [r3, r2]
 8002ae8:	e003      	b.n	8002af2 <HAL_TIM_PWM_Start+0xa2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2241      	movs	r2, #65	; 0x41
 8002aee:	2102      	movs	r1, #2
 8002af0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6839      	ldr	r1, [r7, #0]
 8002af8:	2201      	movs	r2, #1
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 fb92 	bl	8003224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a26      	ldr	r2, [pc, #152]	; (8002ba0 <HAL_TIM_PWM_Start+0x150>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00e      	beq.n	8002b28 <HAL_TIM_PWM_Start+0xd8>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a25      	ldr	r2, [pc, #148]	; (8002ba4 <HAL_TIM_PWM_Start+0x154>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d009      	beq.n	8002b28 <HAL_TIM_PWM_Start+0xd8>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <HAL_TIM_PWM_Start+0x158>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_TIM_PWM_Start+0xd8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a22      	ldr	r2, [pc, #136]	; (8002bac <HAL_TIM_PWM_Start+0x15c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d101      	bne.n	8002b2c <HAL_TIM_PWM_Start+0xdc>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_TIM_PWM_Start+0xde>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	0209      	lsls	r1, r1, #8
 8002b40:	430a      	orrs	r2, r1
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <HAL_TIM_PWM_Start+0x150>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_TIM_PWM_Start+0x112>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <HAL_TIM_PWM_Start+0x160>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_TIM_PWM_Start+0x112>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a11      	ldr	r2, [pc, #68]	; (8002ba4 <HAL_TIM_PWM_Start+0x154>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d111      	bne.n	8002b86 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2207      	movs	r2, #7
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b06      	cmp	r3, #6
 8002b72:	d010      	beq.n	8002b96 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	430a      	orrs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b84:	e007      	b.n	8002b96 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	0018      	movs	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b004      	add	sp, #16
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40014400 	.word	0x40014400
 8002bac:	40014800 	.word	0x40014800
 8002bb0:	40000400 	.word	0x40000400

08002bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc0:	2317      	movs	r3, #23
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	223c      	movs	r2, #60	; 0x3c
 8002bcc:	5c9b      	ldrb	r3, [r3, r2]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e0ad      	b.n	8002d32 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	223c      	movs	r2, #60	; 0x3c
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d100      	bne.n	8002be6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002be4:	e076      	b.n	8002cd4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	d900      	bls.n	8002bee <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002bec:	e095      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d04e      	beq.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d900      	bls.n	8002bfc <HAL_TIM_PWM_ConfigChannel+0x48>
 8002bfa:	e08e      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d021      	beq.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c08:	e087      	b.n	8002d1a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	0011      	movs	r1, r2
 8002c12:	0018      	movs	r0, r3
 8002c14:	f000 f90a 	bl	8002e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2108      	movs	r1, #8
 8002c24:	430a      	orrs	r2, r1
 8002c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2104      	movs	r1, #4
 8002c34:	438a      	bics	r2, r1
 8002c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6999      	ldr	r1, [r3, #24]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	619a      	str	r2, [r3, #24]
      break;
 8002c4a:	e06b      	b.n	8002d24 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	0011      	movs	r1, r2
 8002c54:	0018      	movs	r0, r3
 8002c56:	f000 f971 	bl	8002f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2180      	movs	r1, #128	; 0x80
 8002c66:	0109      	lsls	r1, r1, #4
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4931      	ldr	r1, [pc, #196]	; (8002d3c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c78:	400a      	ands	r2, r1
 8002c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6999      	ldr	r1, [r3, #24]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	021a      	lsls	r2, r3, #8
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	619a      	str	r2, [r3, #24]
      break;
 8002c90:	e048      	b.n	8002d24 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	0011      	movs	r1, r2
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 f9d2 	bl	8003044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2108      	movs	r1, #8
 8002cac:	430a      	orrs	r2, r1
 8002cae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69da      	ldr	r2, [r3, #28]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2104      	movs	r1, #4
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69d9      	ldr	r1, [r3, #28]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	61da      	str	r2, [r3, #28]
      break;
 8002cd2:	e027      	b.n	8002d24 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	0011      	movs	r1, r2
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 fa37 	bl	8003150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	0109      	lsls	r1, r1, #4
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	490f      	ldr	r1, [pc, #60]	; (8002d3c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69d9      	ldr	r1, [r3, #28]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	021a      	lsls	r2, r3, #8
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	61da      	str	r2, [r3, #28]
      break;
 8002d18:	e004      	b.n	8002d24 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002d1a:	2317      	movs	r3, #23
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
      break;
 8002d22:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	223c      	movs	r2, #60	; 0x3c
 8002d28:	2100      	movs	r1, #0
 8002d2a:	5499      	strb	r1, [r3, r2]

  return status;
 8002d2c:	2317      	movs	r3, #23
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	781b      	ldrb	r3, [r3, #0]
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b006      	add	sp, #24
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	fffffbff 	.word	0xfffffbff

08002d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <TIM_Base_SetConfig+0xd0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_Base_SetConfig+0x20>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a2e      	ldr	r2, [pc, #184]	; (8002e14 <TIM_Base_SetConfig+0xd4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d108      	bne.n	8002d72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2270      	movs	r2, #112	; 0x70
 8002d64:	4393      	bics	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <TIM_Base_SetConfig+0xd0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <TIM_Base_SetConfig+0x62>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <TIM_Base_SetConfig+0xd4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00f      	beq.n	8002da2 <TIM_Base_SetConfig+0x62>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <TIM_Base_SetConfig+0xd8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00b      	beq.n	8002da2 <TIM_Base_SetConfig+0x62>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a23      	ldr	r2, [pc, #140]	; (8002e1c <TIM_Base_SetConfig+0xdc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <TIM_Base_SetConfig+0x62>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <TIM_Base_SetConfig+0xe0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d003      	beq.n	8002da2 <TIM_Base_SetConfig+0x62>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a21      	ldr	r2, [pc, #132]	; (8002e24 <TIM_Base_SetConfig+0xe4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d108      	bne.n	8002db4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a20      	ldr	r2, [pc, #128]	; (8002e28 <TIM_Base_SetConfig+0xe8>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	4393      	bics	r3, r2
 8002dba:	001a      	movs	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a0c      	ldr	r2, [pc, #48]	; (8002e10 <TIM_Base_SetConfig+0xd0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00b      	beq.n	8002dfa <TIM_Base_SetConfig+0xba>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <TIM_Base_SetConfig+0xdc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <TIM_Base_SetConfig+0xba>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <TIM_Base_SetConfig+0xe0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d003      	beq.n	8002dfa <TIM_Base_SetConfig+0xba>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <TIM_Base_SetConfig+0xe4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d103      	bne.n	8002e02 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	615a      	str	r2, [r3, #20]
}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b004      	add	sp, #16
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40002000 	.word	0x40002000
 8002e1c:	40014000 	.word	0x40014000
 8002e20:	40014400 	.word	0x40014400
 8002e24:	40014800 	.word	0x40014800
 8002e28:	fffffcff 	.word	0xfffffcff

08002e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	001a      	movs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2270      	movs	r2, #112	; 0x70
 8002e5a:	4393      	bics	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2203      	movs	r2, #3
 8002e62:	4393      	bics	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2202      	movs	r2, #2
 8002e74:	4393      	bics	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <TIM_OC1_SetConfig+0xf8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00b      	beq.n	8002ea2 <TIM_OC1_SetConfig+0x76>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a26      	ldr	r2, [pc, #152]	; (8002f28 <TIM_OC1_SetConfig+0xfc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <TIM_OC1_SetConfig+0x76>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a25      	ldr	r2, [pc, #148]	; (8002f2c <TIM_OC1_SetConfig+0x100>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d003      	beq.n	8002ea2 <TIM_OC1_SetConfig+0x76>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <TIM_OC1_SetConfig+0x104>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10c      	bne.n	8002ebc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	4393      	bics	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <TIM_OC1_SetConfig+0xf8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00b      	beq.n	8002edc <TIM_OC1_SetConfig+0xb0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <TIM_OC1_SetConfig+0xfc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d007      	beq.n	8002edc <TIM_OC1_SetConfig+0xb0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <TIM_OC1_SetConfig+0x100>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_OC1_SetConfig+0xb0>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <TIM_OC1_SetConfig+0x104>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d111      	bne.n	8002f00 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <TIM_OC1_SetConfig+0x108>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <TIM_OC1_SetConfig+0x10c>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b006      	add	sp, #24
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	40014000 	.word	0x40014000
 8002f2c:	40014400 	.word	0x40014400
 8002f30:	40014800 	.word	0x40014800
 8002f34:	fffffeff 	.word	0xfffffeff
 8002f38:	fffffdff 	.word	0xfffffdff

08002f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	4393      	bics	r3, r2
 8002f4e:	001a      	movs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4a2e      	ldr	r2, [pc, #184]	; (8003024 <TIM_OC2_SetConfig+0xe8>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a2d      	ldr	r2, [pc, #180]	; (8003028 <TIM_OC2_SetConfig+0xec>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2220      	movs	r2, #32
 8002f86:	4393      	bics	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a24      	ldr	r2, [pc, #144]	; (800302c <TIM_OC2_SetConfig+0xf0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d10d      	bne.n	8002fba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	4393      	bics	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2240      	movs	r2, #64	; 0x40
 8002fb6:	4393      	bics	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	; (800302c <TIM_OC2_SetConfig+0xf0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00b      	beq.n	8002fda <TIM_OC2_SetConfig+0x9e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <TIM_OC2_SetConfig+0xf4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <TIM_OC2_SetConfig+0x9e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a19      	ldr	r2, [pc, #100]	; (8003034 <TIM_OC2_SetConfig+0xf8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <TIM_OC2_SetConfig+0x9e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <TIM_OC2_SetConfig+0xfc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d113      	bne.n	8003002 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4a17      	ldr	r2, [pc, #92]	; (800303c <TIM_OC2_SetConfig+0x100>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4a16      	ldr	r2, [pc, #88]	; (8003040 <TIM_OC2_SetConfig+0x104>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	621a      	str	r2, [r3, #32]
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b006      	add	sp, #24
 8003022:	bd80      	pop	{r7, pc}
 8003024:	ffff8fff 	.word	0xffff8fff
 8003028:	fffffcff 	.word	0xfffffcff
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40014000 	.word	0x40014000
 8003034:	40014400 	.word	0x40014400
 8003038:	40014800 	.word	0x40014800
 800303c:	fffffbff 	.word	0xfffffbff
 8003040:	fffff7ff 	.word	0xfffff7ff

08003044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a35      	ldr	r2, [pc, #212]	; (8003128 <TIM_OC3_SetConfig+0xe4>)
 8003054:	401a      	ands	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2270      	movs	r2, #112	; 0x70
 8003070:	4393      	bics	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2203      	movs	r2, #3
 8003078:	4393      	bics	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	4a28      	ldr	r2, [pc, #160]	; (800312c <TIM_OC3_SetConfig+0xe8>)
 800308a:	4013      	ands	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a24      	ldr	r2, [pc, #144]	; (8003130 <TIM_OC3_SetConfig+0xec>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d10d      	bne.n	80030be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	4a23      	ldr	r2, [pc, #140]	; (8003134 <TIM_OC3_SetConfig+0xf0>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <TIM_OC3_SetConfig+0xf4>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <TIM_OC3_SetConfig+0xec>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00b      	beq.n	80030de <TIM_OC3_SetConfig+0x9a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	; (800313c <TIM_OC3_SetConfig+0xf8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <TIM_OC3_SetConfig+0x9a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <TIM_OC3_SetConfig+0xfc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d003      	beq.n	80030de <TIM_OC3_SetConfig+0x9a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1a      	ldr	r2, [pc, #104]	; (8003144 <TIM_OC3_SetConfig+0x100>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d113      	bne.n	8003106 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4a19      	ldr	r2, [pc, #100]	; (8003148 <TIM_OC3_SetConfig+0x104>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4a18      	ldr	r2, [pc, #96]	; (800314c <TIM_OC3_SetConfig+0x108>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	621a      	str	r2, [r3, #32]
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b006      	add	sp, #24
 8003126:	bd80      	pop	{r7, pc}
 8003128:	fffffeff 	.word	0xfffffeff
 800312c:	fffffdff 	.word	0xfffffdff
 8003130:	40012c00 	.word	0x40012c00
 8003134:	fffff7ff 	.word	0xfffff7ff
 8003138:	fffffbff 	.word	0xfffffbff
 800313c:	40014000 	.word	0x40014000
 8003140:	40014400 	.word	0x40014400
 8003144:	40014800 	.word	0x40014800
 8003148:	ffffefff 	.word	0xffffefff
 800314c:	ffffdfff 	.word	0xffffdfff

08003150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4a28      	ldr	r2, [pc, #160]	; (8003200 <TIM_OC4_SetConfig+0xb0>)
 8003160:	401a      	ands	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a22      	ldr	r2, [pc, #136]	; (8003204 <TIM_OC4_SetConfig+0xb4>)
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a21      	ldr	r2, [pc, #132]	; (8003208 <TIM_OC4_SetConfig+0xb8>)
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4a1d      	ldr	r2, [pc, #116]	; (800320c <TIM_OC4_SetConfig+0xbc>)
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	031b      	lsls	r3, r3, #12
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a19      	ldr	r2, [pc, #100]	; (8003210 <TIM_OC4_SetConfig+0xc0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00b      	beq.n	80031c8 <TIM_OC4_SetConfig+0x78>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a18      	ldr	r2, [pc, #96]	; (8003214 <TIM_OC4_SetConfig+0xc4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d007      	beq.n	80031c8 <TIM_OC4_SetConfig+0x78>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a17      	ldr	r2, [pc, #92]	; (8003218 <TIM_OC4_SetConfig+0xc8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_OC4_SetConfig+0x78>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a16      	ldr	r2, [pc, #88]	; (800321c <TIM_OC4_SetConfig+0xcc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d109      	bne.n	80031dc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	4a15      	ldr	r2, [pc, #84]	; (8003220 <TIM_OC4_SetConfig+0xd0>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	019b      	lsls	r3, r3, #6
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	621a      	str	r2, [r3, #32]
}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b006      	add	sp, #24
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	ffffefff 	.word	0xffffefff
 8003204:	ffff8fff 	.word	0xffff8fff
 8003208:	fffffcff 	.word	0xfffffcff
 800320c:	ffffdfff 	.word	0xffffdfff
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40014000 	.word	0x40014000
 8003218:	40014400 	.word	0x40014400
 800321c:	40014800 	.word	0x40014800
 8003220:	ffffbfff 	.word	0xffffbfff

08003224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	221f      	movs	r2, #31
 8003234:	4013      	ands	r3, r2
 8003236:	2201      	movs	r2, #1
 8003238:	409a      	lsls	r2, r3
 800323a:	0013      	movs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	43d2      	mvns	r2, r2
 8003246:	401a      	ands	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a1a      	ldr	r2, [r3, #32]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	211f      	movs	r1, #31
 8003254:	400b      	ands	r3, r1
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4099      	lsls	r1, r3
 800325a:	000b      	movs	r3, r1
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b006      	add	sp, #24
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	223c      	movs	r2, #60	; 0x3c
 800327a:	5c9b      	ldrb	r3, [r3, r2]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003280:	2302      	movs	r3, #2
 8003282:	e041      	b.n	8003308 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	223c      	movs	r2, #60	; 0x3c
 8003288:	2101      	movs	r1, #1
 800328a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	223d      	movs	r2, #61	; 0x3d
 8003290:	2102      	movs	r1, #2
 8003292:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2270      	movs	r2, #112	; 0x70
 80032a8:	4393      	bics	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a13      	ldr	r2, [pc, #76]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d009      	beq.n	80032dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a10      	ldr	r2, [pc, #64]	; (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d10c      	bne.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2280      	movs	r2, #128	; 0x80
 80032e0:	4393      	bics	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	223d      	movs	r2, #61	; 0x3d
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	223c      	movs	r2, #60	; 0x3c
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b004      	add	sp, #16
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40012c00 	.word	0x40012c00
 8003314:	40000400 	.word	0x40000400
 8003318:	40014000 	.word	0x40014000

0800331c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e044      	b.n	80033b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003332:	2b00      	cmp	r3, #0
 8003334:	d107      	bne.n	8003346 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2274      	movs	r2, #116	; 0x74
 800333a:	2100      	movs	r1, #0
 800333c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0018      	movs	r0, r3
 8003342:	f7fd fcf1 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2224      	movs	r2, #36	; 0x24
 800334a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2101      	movs	r1, #1
 8003358:	438a      	bics	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	0018      	movs	r0, r3
 8003360:	f000 f8da 	bl	8003518 <UART_SetConfig>
 8003364:	0003      	movs	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e024      	b.n	80033b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 fa0d 	bl	8003798 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	490d      	ldr	r1, [pc, #52]	; (80033c0 <HAL_UART_Init+0xa4>)
 800338a:	400a      	ands	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2108      	movs	r1, #8
 800339a:	438a      	bics	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	430a      	orrs	r2, r1
 80033ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 faa5 	bl	8003900 <UART_CheckIdleState>
 80033b6:	0003      	movs	r3, r0
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b002      	add	sp, #8
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	fffff7ff 	.word	0xfffff7ff

080033c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	1dbb      	adds	r3, r7, #6
 80033d2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d000      	beq.n	80033de <HAL_UART_Transmit+0x1a>
 80033dc:	e096      	b.n	800350c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_UART_Transmit+0x28>
 80033e4:	1dbb      	adds	r3, r7, #6
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e08e      	b.n	800350e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	015b      	lsls	r3, r3, #5
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d109      	bne.n	8003410 <HAL_UART_Transmit+0x4c>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2201      	movs	r2, #1
 8003408:	4013      	ands	r3, r2
 800340a:	d001      	beq.n	8003410 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e07e      	b.n	800350e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2274      	movs	r2, #116	; 0x74
 8003414:	5c9b      	ldrb	r3, [r3, r2]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_UART_Transmit+0x5a>
 800341a:	2302      	movs	r3, #2
 800341c:	e077      	b.n	800350e <HAL_UART_Transmit+0x14a>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2274      	movs	r2, #116	; 0x74
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	2100      	movs	r1, #0
 800342c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2221      	movs	r2, #33	; 0x21
 8003432:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003434:	f7fd fd48 	bl	8000ec8 <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1dba      	adds	r2, r7, #6
 8003440:	2150      	movs	r1, #80	; 0x50
 8003442:	8812      	ldrh	r2, [r2, #0]
 8003444:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1dba      	adds	r2, r7, #6
 800344a:	2152      	movs	r1, #82	; 0x52
 800344c:	8812      	ldrh	r2, [r2, #0]
 800344e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	015b      	lsls	r3, r3, #5
 8003458:	429a      	cmp	r2, r3
 800345a:	d108      	bne.n	800346e <HAL_UART_Transmit+0xaa>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e003      	b.n	8003476 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2274      	movs	r2, #116	; 0x74
 800347a:	2100      	movs	r1, #0
 800347c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800347e:	e02d      	b.n	80034dc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	0013      	movs	r3, r2
 800348a:	2200      	movs	r2, #0
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	f000 fa7f 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 8003492:	1e03      	subs	r3, r0, #0
 8003494:	d001      	beq.n	800349a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e039      	b.n	800350e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	05d2      	lsls	r2, r2, #23
 80034aa:	0dd2      	lsrs	r2, r2, #23
 80034ac:	b292      	uxth	r2, r2
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	3302      	adds	r3, #2
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e008      	b.n	80034ca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	b292      	uxth	r2, r2
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	3301      	adds	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2252      	movs	r2, #82	; 0x52
 80034ce:	5a9b      	ldrh	r3, [r3, r2]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b299      	uxth	r1, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2252      	movs	r2, #82	; 0x52
 80034da:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2252      	movs	r2, #82	; 0x52
 80034e0:	5a9b      	ldrh	r3, [r3, r2]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1cb      	bne.n	8003480 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	0013      	movs	r3, r2
 80034f2:	2200      	movs	r2, #0
 80034f4:	2140      	movs	r1, #64	; 0x40
 80034f6:	f000 fa4b 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d001      	beq.n	8003502 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e005      	b.n	800350e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b008      	add	sp, #32
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003520:	231e      	movs	r3, #30
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a8d      	ldr	r2, [pc, #564]	; (800377c <UART_SetConfig+0x264>)
 8003548:	4013      	ands	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4a88      	ldr	r2, [pc, #544]	; (8003780 <UART_SetConfig+0x268>)
 800355e:	4013      	ands	r3, r2
 8003560:	0019      	movs	r1, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a7f      	ldr	r2, [pc, #508]	; (8003784 <UART_SetConfig+0x26c>)
 8003586:	4013      	ands	r3, r2
 8003588:	0019      	movs	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a7b      	ldr	r2, [pc, #492]	; (8003788 <UART_SetConfig+0x270>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d127      	bne.n	80035ee <UART_SetConfig+0xd6>
 800359e:	4b7b      	ldr	r3, [pc, #492]	; (800378c <UART_SetConfig+0x274>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	2203      	movs	r2, #3
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d00d      	beq.n	80035c6 <UART_SetConfig+0xae>
 80035aa:	d81b      	bhi.n	80035e4 <UART_SetConfig+0xcc>
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d014      	beq.n	80035da <UART_SetConfig+0xc2>
 80035b0:	d818      	bhi.n	80035e4 <UART_SetConfig+0xcc>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <UART_SetConfig+0xa4>
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d00a      	beq.n	80035d0 <UART_SetConfig+0xb8>
 80035ba:	e013      	b.n	80035e4 <UART_SetConfig+0xcc>
 80035bc:	231f      	movs	r3, #31
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	e021      	b.n	800360a <UART_SetConfig+0xf2>
 80035c6:	231f      	movs	r3, #31
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	2202      	movs	r2, #2
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	e01c      	b.n	800360a <UART_SetConfig+0xf2>
 80035d0:	231f      	movs	r3, #31
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2204      	movs	r2, #4
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e017      	b.n	800360a <UART_SetConfig+0xf2>
 80035da:	231f      	movs	r3, #31
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	2208      	movs	r2, #8
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e012      	b.n	800360a <UART_SetConfig+0xf2>
 80035e4:	231f      	movs	r3, #31
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	2210      	movs	r2, #16
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e00d      	b.n	800360a <UART_SetConfig+0xf2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a67      	ldr	r2, [pc, #412]	; (8003790 <UART_SetConfig+0x278>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d104      	bne.n	8003602 <UART_SetConfig+0xea>
 80035f8:	231f      	movs	r3, #31
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e003      	b.n	800360a <UART_SetConfig+0xf2>
 8003602:	231f      	movs	r3, #31
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	2210      	movs	r2, #16
 8003608:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	429a      	cmp	r2, r3
 8003614:	d15d      	bne.n	80036d2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003616:	231f      	movs	r3, #31
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b08      	cmp	r3, #8
 800361e:	d015      	beq.n	800364c <UART_SetConfig+0x134>
 8003620:	dc18      	bgt.n	8003654 <UART_SetConfig+0x13c>
 8003622:	2b04      	cmp	r3, #4
 8003624:	d00d      	beq.n	8003642 <UART_SetConfig+0x12a>
 8003626:	dc15      	bgt.n	8003654 <UART_SetConfig+0x13c>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <UART_SetConfig+0x11a>
 800362c:	2b02      	cmp	r3, #2
 800362e:	d005      	beq.n	800363c <UART_SetConfig+0x124>
 8003630:	e010      	b.n	8003654 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003632:	f7ff f845 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8003636:	0003      	movs	r3, r0
 8003638:	61bb      	str	r3, [r7, #24]
        break;
 800363a:	e012      	b.n	8003662 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800363c:	4b55      	ldr	r3, [pc, #340]	; (8003794 <UART_SetConfig+0x27c>)
 800363e:	61bb      	str	r3, [r7, #24]
        break;
 8003640:	e00f      	b.n	8003662 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003642:	f7fe ffcf 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8003646:	0003      	movs	r3, r0
 8003648:	61bb      	str	r3, [r7, #24]
        break;
 800364a:	e00a      	b.n	8003662 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	61bb      	str	r3, [r7, #24]
        break;
 8003652:	e006      	b.n	8003662 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003658:	231e      	movs	r3, #30
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
        break;
 8003660:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d100      	bne.n	800366a <UART_SetConfig+0x152>
 8003668:	e07b      	b.n	8003762 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	005a      	lsls	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	0019      	movs	r1, r3
 800367c:	0010      	movs	r0, r2
 800367e:	f7fc fd55 	bl	800012c <__udivsi3>
 8003682:	0003      	movs	r3, r0
 8003684:	b29b      	uxth	r3, r3
 8003686:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b0f      	cmp	r3, #15
 800368c:	d91c      	bls.n	80036c8 <UART_SetConfig+0x1b0>
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	025b      	lsls	r3, r3, #9
 8003694:	429a      	cmp	r2, r3
 8003696:	d217      	bcs.n	80036c8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	b29a      	uxth	r2, r3
 800369c:	200e      	movs	r0, #14
 800369e:	183b      	adds	r3, r7, r0
 80036a0:	210f      	movs	r1, #15
 80036a2:	438a      	bics	r2, r1
 80036a4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2207      	movs	r2, #7
 80036ae:	4013      	ands	r3, r2
 80036b0:	b299      	uxth	r1, r3
 80036b2:	183b      	adds	r3, r7, r0
 80036b4:	183a      	adds	r2, r7, r0
 80036b6:	8812      	ldrh	r2, [r2, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	183a      	adds	r2, r7, r0
 80036c2:	8812      	ldrh	r2, [r2, #0]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	e04c      	b.n	8003762 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80036c8:	231e      	movs	r3, #30
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e047      	b.n	8003762 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036d2:	231f      	movs	r3, #31
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d015      	beq.n	8003708 <UART_SetConfig+0x1f0>
 80036dc:	dc18      	bgt.n	8003710 <UART_SetConfig+0x1f8>
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d00d      	beq.n	80036fe <UART_SetConfig+0x1e6>
 80036e2:	dc15      	bgt.n	8003710 <UART_SetConfig+0x1f8>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <UART_SetConfig+0x1d6>
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d005      	beq.n	80036f8 <UART_SetConfig+0x1e0>
 80036ec:	e010      	b.n	8003710 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ee:	f7fe ffe7 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 80036f2:	0003      	movs	r3, r0
 80036f4:	61bb      	str	r3, [r7, #24]
        break;
 80036f6:	e012      	b.n	800371e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f8:	4b26      	ldr	r3, [pc, #152]	; (8003794 <UART_SetConfig+0x27c>)
 80036fa:	61bb      	str	r3, [r7, #24]
        break;
 80036fc:	e00f      	b.n	800371e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fe:	f7fe ff71 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8003702:	0003      	movs	r3, r0
 8003704:	61bb      	str	r3, [r7, #24]
        break;
 8003706:	e00a      	b.n	800371e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	61bb      	str	r3, [r7, #24]
        break;
 800370e:	e006      	b.n	800371e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003714:	231e      	movs	r3, #30
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
        break;
 800371c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01e      	beq.n	8003762 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	085a      	lsrs	r2, r3, #1
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	18d2      	adds	r2, r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	0019      	movs	r1, r3
 8003734:	0010      	movs	r0, r2
 8003736:	f7fc fcf9 	bl	800012c <__udivsi3>
 800373a:	0003      	movs	r3, r0
 800373c:	b29b      	uxth	r3, r3
 800373e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0f      	cmp	r3, #15
 8003744:	d909      	bls.n	800375a <UART_SetConfig+0x242>
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	025b      	lsls	r3, r3, #9
 800374c:	429a      	cmp	r2, r3
 800374e:	d204      	bcs.n	800375a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	60da      	str	r2, [r3, #12]
 8003758:	e003      	b.n	8003762 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800375a:	231e      	movs	r3, #30
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800376e:	231e      	movs	r3, #30
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	781b      	ldrb	r3, [r3, #0]
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b008      	add	sp, #32
 800377a:	bd80      	pop	{r7, pc}
 800377c:	ffff69f3 	.word	0xffff69f3
 8003780:	ffffcfff 	.word	0xffffcfff
 8003784:	fffff4ff 	.word	0xfffff4ff
 8003788:	40013800 	.word	0x40013800
 800378c:	40021000 	.word	0x40021000
 8003790:	40004400 	.word	0x40004400
 8003794:	007a1200 	.word	0x007a1200

08003798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	2201      	movs	r2, #1
 80037a6:	4013      	ands	r3, r2
 80037a8:	d00b      	beq.n	80037c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <UART_AdvFeatureConfig+0x144>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	0019      	movs	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2202      	movs	r2, #2
 80037c8:	4013      	ands	r3, r2
 80037ca:	d00b      	beq.n	80037e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a43      	ldr	r2, [pc, #268]	; (80038e0 <UART_AdvFeatureConfig+0x148>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	0019      	movs	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	2204      	movs	r2, #4
 80037ea:	4013      	ands	r3, r2
 80037ec:	d00b      	beq.n	8003806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a3b      	ldr	r2, [pc, #236]	; (80038e4 <UART_AdvFeatureConfig+0x14c>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	0019      	movs	r1, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	2208      	movs	r2, #8
 800380c:	4013      	ands	r3, r2
 800380e:	d00b      	beq.n	8003828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4a34      	ldr	r2, [pc, #208]	; (80038e8 <UART_AdvFeatureConfig+0x150>)
 8003818:	4013      	ands	r3, r2
 800381a:	0019      	movs	r1, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	2210      	movs	r2, #16
 800382e:	4013      	ands	r3, r2
 8003830:	d00b      	beq.n	800384a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4a2c      	ldr	r2, [pc, #176]	; (80038ec <UART_AdvFeatureConfig+0x154>)
 800383a:	4013      	ands	r3, r2
 800383c:	0019      	movs	r1, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2220      	movs	r2, #32
 8003850:	4013      	ands	r3, r2
 8003852:	d00b      	beq.n	800386c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4a25      	ldr	r2, [pc, #148]	; (80038f0 <UART_AdvFeatureConfig+0x158>)
 800385c:	4013      	ands	r3, r2
 800385e:	0019      	movs	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2240      	movs	r2, #64	; 0x40
 8003872:	4013      	ands	r3, r2
 8003874:	d01d      	beq.n	80038b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <UART_AdvFeatureConfig+0x15c>)
 800387e:	4013      	ands	r3, r2
 8003880:	0019      	movs	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	035b      	lsls	r3, r3, #13
 8003896:	429a      	cmp	r2, r3
 8003898:	d10b      	bne.n	80038b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a15      	ldr	r2, [pc, #84]	; (80038f8 <UART_AdvFeatureConfig+0x160>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	0019      	movs	r1, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	4013      	ands	r3, r2
 80038ba:	d00b      	beq.n	80038d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <UART_AdvFeatureConfig+0x164>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	0019      	movs	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b002      	add	sp, #8
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	fffdffff 	.word	0xfffdffff
 80038e0:	fffeffff 	.word	0xfffeffff
 80038e4:	fffbffff 	.word	0xfffbffff
 80038e8:	ffff7fff 	.word	0xffff7fff
 80038ec:	ffffefff 	.word	0xffffefff
 80038f0:	ffffdfff 	.word	0xffffdfff
 80038f4:	ffefffff 	.word	0xffefffff
 80038f8:	ff9fffff 	.word	0xff9fffff
 80038fc:	fff7ffff 	.word	0xfff7ffff

08003900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af02      	add	r7, sp, #8
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2280      	movs	r2, #128	; 0x80
 800390c:	2100      	movs	r1, #0
 800390e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003910:	f7fd fada 	bl	8000ec8 <HAL_GetTick>
 8003914:	0003      	movs	r3, r0
 8003916:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2208      	movs	r2, #8
 8003920:	4013      	ands	r3, r2
 8003922:	2b08      	cmp	r3, #8
 8003924:	d10c      	bne.n	8003940 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2280      	movs	r2, #128	; 0x80
 800392a:	0391      	lsls	r1, r2, #14
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4a17      	ldr	r2, [pc, #92]	; (800398c <UART_CheckIdleState+0x8c>)
 8003930:	9200      	str	r2, [sp, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	f000 f82c 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 8003938:	1e03      	subs	r3, r0, #0
 800393a:	d001      	beq.n	8003940 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e021      	b.n	8003984 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2204      	movs	r2, #4
 8003948:	4013      	ands	r3, r2
 800394a:	2b04      	cmp	r3, #4
 800394c:	d10c      	bne.n	8003968 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	03d1      	lsls	r1, r2, #15
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4a0d      	ldr	r2, [pc, #52]	; (800398c <UART_CheckIdleState+0x8c>)
 8003958:	9200      	str	r2, [sp, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	f000 f818 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 8003960:	1e03      	subs	r3, r0, #0
 8003962:	d001      	beq.n	8003968 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e00d      	b.n	8003984 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2274      	movs	r2, #116	; 0x74
 800397e:	2100      	movs	r1, #0
 8003980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b004      	add	sp, #16
 800398a:	bd80      	pop	{r7, pc}
 800398c:	01ffffff 	.word	0x01ffffff

08003990 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b094      	sub	sp, #80	; 0x50
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	1dfb      	adds	r3, r7, #7
 800399e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a0:	e0a3      	b.n	8003aea <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a4:	3301      	adds	r3, #1
 80039a6:	d100      	bne.n	80039aa <UART_WaitOnFlagUntilTimeout+0x1a>
 80039a8:	e09f      	b.n	8003aea <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7fd fa8d 	bl	8000ec8 <HAL_GetTick>
 80039ae:	0002      	movs	r2, r0
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d13d      	bne.n	8003a3c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c0:	f3ef 8310 	mrs	r3, PRIMASK
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c8:	647b      	str	r3, [r7, #68]	; 0x44
 80039ca:	2301      	movs	r3, #1
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	f383 8810 	msr	PRIMASK, r3
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	494c      	ldr	r1, [pc, #304]	; (8003b14 <UART_WaitOnFlagUntilTimeout+0x184>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	f383 8810 	msr	PRIMASK, r3
}
 80039f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f2:	f3ef 8310 	mrs	r3, PRIMASK
 80039f6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fa:	643b      	str	r3, [r7, #64]	; 0x40
 80039fc:	2301      	movs	r3, #1
 80039fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	f383 8810 	msr	PRIMASK, r3
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2101      	movs	r1, #1
 8003a14:	438a      	bics	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1e:	f383 8810 	msr	PRIMASK, r3
}
 8003a22:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2274      	movs	r2, #116	; 0x74
 8003a34:	2100      	movs	r1, #0
 8003a36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e067      	b.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2204      	movs	r2, #4
 8003a44:	4013      	ands	r3, r2
 8003a46:	d050      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	401a      	ands	r2, r3
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d146      	bne.n	8003aea <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	0112      	lsls	r2, r2, #4
 8003a64:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a66:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6a:	613b      	str	r3, [r7, #16]
  return(result);
 8003a6c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a70:	2301      	movs	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f383 8810 	msr	PRIMASK, r3
}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4923      	ldr	r1, [pc, #140]	; (8003b14 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f383 8810 	msr	PRIMASK, r3
}
 8003a96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a98:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a9e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f383 8810 	msr	PRIMASK, r3
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2101      	movs	r1, #1
 8003aba:	438a      	bics	r2, r1
 8003abc:	609a      	str	r2, [r3, #8]
 8003abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	f383 8810 	msr	PRIMASK, r3
}
 8003ac8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2280      	movs	r2, #128	; 0x80
 8003ada:	2120      	movs	r1, #32
 8003adc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2274      	movs	r2, #116	; 0x74
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e010      	b.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	4013      	ands	r3, r2
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	425a      	negs	r2, r3
 8003afa:	4153      	adcs	r3, r2
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	001a      	movs	r2, r3
 8003b00:	1dfb      	adds	r3, r7, #7
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d100      	bne.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003b08:	e74b      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b014      	add	sp, #80	; 0x50
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	fffffe5f 	.word	0xfffffe5f

08003b18 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	0002      	movs	r2, r0
 8003b20:	1dbb      	adds	r3, r7, #6
 8003b22:	801a      	strh	r2, [r3, #0]
 8003b24:	1d7b      	adds	r3, r7, #5
 8003b26:	1c0a      	adds	r2, r1, #0
 8003b28:	701a      	strb	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003b2a:	240f      	movs	r4, #15
 8003b2c:	193b      	adds	r3, r7, r4
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 8003b32:	1d7b      	adds	r3, r7, #5
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	1dbb      	adds	r3, r7, #6
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 fa0d 	bl	8003f5c <VL53L1_WrByte>
 8003b42:	0003      	movs	r3, r0
 8003b44:	0019      	movs	r1, r3
 8003b46:	193b      	adds	r3, r7, r4
 8003b48:	193a      	adds	r2, r7, r4
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	701a      	strb	r2, [r3, #0]
	return status;
 8003b50:	193b      	adds	r3, r7, r4
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	b25b      	sxtb	r3, r3
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b005      	add	sp, #20
 8003b5c:	bd90      	pop	{r4, r7, pc}
	...

08003b60 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	0002      	movs	r2, r0
 8003b68:	1dbb      	adds	r3, r7, #6
 8003b6a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003b6c:	230f      	movs	r3, #15
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 8003b74:	210e      	movs	r1, #14
 8003b76:	187b      	adds	r3, r7, r1
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8003b7c:	187b      	adds	r3, r7, r1
 8003b7e:	222d      	movs	r2, #45	; 0x2d
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e01a      	b.n	8003bba <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8003b84:	240e      	movs	r4, #14
 8003b86:	193b      	adds	r3, r7, r4
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	b299      	uxth	r1, r3
 8003b8c:	193b      	adds	r3, r7, r4
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	3b2d      	subs	r3, #45	; 0x2d
 8003b92:	4a3e      	ldr	r2, [pc, #248]	; (8003c8c <VL53L1X_SensorInit+0x12c>)
 8003b94:	5cd2      	ldrb	r2, [r2, r3]
 8003b96:	1dbb      	adds	r3, r7, #6
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f000 f9de 	bl	8003f5c <VL53L1_WrByte>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	220f      	movs	r2, #15
 8003ba6:	18bb      	adds	r3, r7, r2
 8003ba8:	18ba      	adds	r2, r7, r2
 8003baa:	7812      	ldrb	r2, [r2, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8003bb0:	193b      	adds	r3, r7, r4
 8003bb2:	781a      	ldrb	r2, [r3, #0]
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	3201      	adds	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	230e      	movs	r3, #14
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b87      	cmp	r3, #135	; 0x87
 8003bc2:	d9df      	bls.n	8003b84 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 8003bc4:	1dbb      	adds	r3, r7, #6
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f000 f8b3 	bl	8003d34 <VL53L1X_StartRanging>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	0019      	movs	r1, r3
 8003bd2:	220f      	movs	r2, #15
 8003bd4:	18bb      	adds	r3, r7, r2
 8003bd6:	18ba      	adds	r2, r7, r2
 8003bd8:	7812      	ldrb	r2, [r2, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 8003bde:	230d      	movs	r3, #13
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8003be6:	e00f      	b.n	8003c08 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8003be8:	230d      	movs	r3, #13
 8003bea:	18fa      	adds	r2, r7, r3
 8003bec:	1dbb      	adds	r3, r7, #6
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	0011      	movs	r1, r2
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 f8dc 	bl	8003db0 <VL53L1X_CheckForDataReady>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	18bb      	adds	r3, r7, r2
 8003c00:	18ba      	adds	r2, r7, r2
 8003c02:	7812      	ldrb	r2, [r2, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8003c08:	230d      	movs	r3, #13
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0ea      	beq.n	8003be8 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8003c12:	1dbb      	adds	r3, r7, #6
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 f83a 	bl	8003c90 <VL53L1X_ClearInterrupt>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	0019      	movs	r1, r3
 8003c20:	240f      	movs	r4, #15
 8003c22:	193b      	adds	r3, r7, r4
 8003c24:	193a      	adds	r2, r7, r4
 8003c26:	7812      	ldrb	r2, [r2, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 8003c2c:	1dbb      	adds	r3, r7, #6
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	0018      	movs	r0, r3
 8003c32:	f000 f89e 	bl	8003d72 <VL53L1X_StopRanging>
 8003c36:	0003      	movs	r3, r0
 8003c38:	0019      	movs	r1, r3
 8003c3a:	193b      	adds	r3, r7, r4
 8003c3c:	193a      	adds	r2, r7, r4
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8003c44:	1dbb      	adds	r3, r7, #6
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	2209      	movs	r2, #9
 8003c4a:	2108      	movs	r1, #8
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f000 f985 	bl	8003f5c <VL53L1_WrByte>
 8003c52:	0003      	movs	r3, r0
 8003c54:	0019      	movs	r1, r3
 8003c56:	193b      	adds	r3, r7, r4
 8003c58:	193a      	adds	r2, r7, r4
 8003c5a:	7812      	ldrb	r2, [r2, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8003c60:	1dbb      	adds	r3, r7, #6
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	2200      	movs	r2, #0
 8003c66:	210b      	movs	r1, #11
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f000 f977 	bl	8003f5c <VL53L1_WrByte>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	0019      	movs	r1, r3
 8003c72:	193b      	adds	r3, r7, r4
 8003c74:	193a      	adds	r2, r7, r4
 8003c76:	7812      	ldrb	r2, [r2, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	701a      	strb	r2, [r3, #0]
	return status;
 8003c7c:	193b      	adds	r3, r7, r4
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b25b      	sxtb	r3, r3
}
 8003c82:	0018      	movs	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b005      	add	sp, #20
 8003c88:	bd90      	pop	{r4, r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	08004c2c 	.word	0x08004c2c

08003c90 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	0002      	movs	r2, r0
 8003c98:	1dbb      	adds	r3, r7, #6
 8003c9a:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003c9c:	240f      	movs	r4, #15
 8003c9e:	193b      	adds	r3, r7, r4
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8003ca4:	1dbb      	adds	r3, r7, #6
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	2186      	movs	r1, #134	; 0x86
 8003cac:	0018      	movs	r0, r3
 8003cae:	f000 f955 	bl	8003f5c <VL53L1_WrByte>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	193b      	adds	r3, r7, r4
 8003cb8:	193a      	adds	r2, r7, r4
 8003cba:	7812      	ldrb	r2, [r2, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	701a      	strb	r2, [r3, #0]
	return status;
 8003cc0:	193b      	adds	r3, r7, r4
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b25b      	sxtb	r3, r3
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b005      	add	sp, #20
 8003ccc:	bd90      	pop	{r4, r7, pc}

08003cce <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8003cce:	b5b0      	push	{r4, r5, r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	6039      	str	r1, [r7, #0]
 8003cd8:	1dbb      	adds	r3, r7, #6
 8003cda:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8003cdc:	240f      	movs	r4, #15
 8003cde:	193b      	adds	r3, r7, r4
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8003ce4:	250e      	movs	r5, #14
 8003ce6:	197a      	adds	r2, r7, r5
 8003ce8:	1dbb      	adds	r3, r7, #6
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	2130      	movs	r1, #48	; 0x30
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f000 f970 	bl	8003fd4 <VL53L1_RdByte>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	0020      	movs	r0, r4
 8003cfa:	183b      	adds	r3, r7, r0
 8003cfc:	183a      	adds	r2, r7, r0
 8003cfe:	7812      	ldrb	r2, [r2, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8003d04:	197b      	adds	r3, r7, r5
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2210      	movs	r2, #16
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	197b      	adds	r3, r7, r5
 8003d10:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8003d12:	197b      	adds	r3, r7, r5
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	425a      	negs	r2, r3
 8003d1c:	4153      	adcs	r3, r2
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	001a      	movs	r2, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	701a      	strb	r2, [r3, #0]
	return status;
 8003d26:	183b      	adds	r3, r7, r0
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	b25b      	sxtb	r3, r3
}
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b004      	add	sp, #16
 8003d32:	bdb0      	pop	{r4, r5, r7, pc}

08003d34 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	1dbb      	adds	r3, r7, #6
 8003d3e:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003d40:	240f      	movs	r4, #15
 8003d42:	193b      	adds	r3, r7, r4
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8003d48:	1dbb      	adds	r3, r7, #6
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	2240      	movs	r2, #64	; 0x40
 8003d4e:	2187      	movs	r1, #135	; 0x87
 8003d50:	0018      	movs	r0, r3
 8003d52:	f000 f903 	bl	8003f5c <VL53L1_WrByte>
 8003d56:	0003      	movs	r3, r0
 8003d58:	0019      	movs	r1, r3
 8003d5a:	193b      	adds	r3, r7, r4
 8003d5c:	193a      	adds	r2, r7, r4
 8003d5e:	7812      	ldrb	r2, [r2, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	701a      	strb	r2, [r3, #0]
	return status;
 8003d64:	193b      	adds	r3, r7, r4
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	b25b      	sxtb	r3, r3
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b005      	add	sp, #20
 8003d70:	bd90      	pop	{r4, r7, pc}

08003d72 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8003d72:	b590      	push	{r4, r7, lr}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	0002      	movs	r2, r0
 8003d7a:	1dbb      	adds	r3, r7, #6
 8003d7c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003d7e:	240f      	movs	r4, #15
 8003d80:	193b      	adds	r3, r7, r4
 8003d82:	2200      	movs	r2, #0
 8003d84:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8003d86:	1dbb      	adds	r3, r7, #6
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2187      	movs	r1, #135	; 0x87
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f000 f8e4 	bl	8003f5c <VL53L1_WrByte>
 8003d94:	0003      	movs	r3, r0
 8003d96:	0019      	movs	r1, r3
 8003d98:	193b      	adds	r3, r7, r4
 8003d9a:	193a      	adds	r2, r7, r4
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	701a      	strb	r2, [r3, #0]
	return status;
 8003da2:	193b      	adds	r3, r7, r4
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	b25b      	sxtb	r3, r3
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b005      	add	sp, #20
 8003dae:	bd90      	pop	{r4, r7, pc}

08003db0 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8003db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	0002      	movs	r2, r0
 8003db8:	6039      	str	r1, [r7, #0]
 8003dba:	1dbb      	adds	r3, r7, #6
 8003dbc:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8003dbe:	240f      	movs	r4, #15
 8003dc0:	193b      	adds	r3, r7, r4
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8003dc6:	250d      	movs	r5, #13
 8003dc8:	197a      	adds	r2, r7, r5
 8003dca:	1dbb      	adds	r3, r7, #6
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	0011      	movs	r1, r2
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7ff ff7c 	bl	8003cce <VL53L1X_GetInterruptPolarity>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	0019      	movs	r1, r3
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	193a      	adds	r2, r7, r4
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8003de4:	260e      	movs	r6, #14
 8003de6:	19ba      	adds	r2, r7, r6
 8003de8:	1dbb      	adds	r3, r7, #6
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	2131      	movs	r1, #49	; 0x31
 8003dee:	0018      	movs	r0, r3
 8003df0:	f000 f8f0 	bl	8003fd4 <VL53L1_RdByte>
 8003df4:	0003      	movs	r3, r0
 8003df6:	0019      	movs	r1, r3
 8003df8:	193b      	adds	r3, r7, r4
 8003dfa:	193a      	adds	r2, r7, r4
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8003e02:	193b      	adds	r3, r7, r4
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	b25b      	sxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10f      	bne.n	8003e2c <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 8003e0c:	19bb      	adds	r3, r7, r6
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	001a      	movs	r2, r3
 8003e12:	2301      	movs	r3, #1
 8003e14:	4013      	ands	r3, r2
 8003e16:	197a      	adds	r2, r7, r5
 8003e18:	7812      	ldrb	r2, [r2, #0]
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d103      	bne.n	8003e26 <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e002      	b.n	8003e2c <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8003e2c:	230f      	movs	r3, #15
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b25b      	sxtb	r3, r3
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b005      	add	sp, #20
 8003e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e3c <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 8003e3c:	b5b0      	push	{r4, r5, r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	0002      	movs	r2, r0
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	1dbb      	adds	r3, r7, #6
 8003e48:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003e4a:	240f      	movs	r4, #15
 8003e4c:	193b      	adds	r3, r7, r4
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
	uint16_t tmp = 0;
 8003e52:	250c      	movs	r5, #12
 8003e54:	197b      	adds	r3, r7, r5
 8003e56:	2200      	movs	r2, #0
 8003e58:	801a      	strh	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 8003e5a:	197a      	adds	r2, r7, r5
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	33ff      	adds	r3, #255	; 0xff
 8003e60:	0019      	movs	r1, r3
 8003e62:	1dbb      	adds	r3, r7, #6
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	0018      	movs	r0, r3
 8003e68:	f000 f8fa 	bl	8004060 <VL53L1_RdWord>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	0019      	movs	r1, r3
 8003e70:	193b      	adds	r3, r7, r4
 8003e72:	193a      	adds	r2, r7, r4
 8003e74:	7812      	ldrb	r2, [r2, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	701a      	strb	r2, [r3, #0]
	*sensorId = tmp;
 8003e7a:	197b      	adds	r3, r7, r5
 8003e7c:	881a      	ldrh	r2, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	801a      	strh	r2, [r3, #0]
	return status;
 8003e82:	193b      	adds	r3, r7, r4
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b25b      	sxtb	r3, r3
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b004      	add	sp, #16
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}

08003e90 <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8003e90:	b5b0      	push	{r4, r5, r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	0002      	movs	r2, r0
 8003e98:	6039      	str	r1, [r7, #0]
 8003e9a:	1dbb      	adds	r3, r7, #6
 8003e9c:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8003e9e:	240f      	movs	r4, #15
 8003ea0:	193b      	adds	r3, r7, r4
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8003ea6:	250c      	movs	r5, #12
 8003ea8:	197a      	adds	r2, r7, r5
 8003eaa:	1dbb      	adds	r3, r7, #6
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	2196      	movs	r1, #150	; 0x96
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 f8d5 	bl	8004060 <VL53L1_RdWord>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	0019      	movs	r1, r3
 8003eba:	0020      	movs	r0, r4
 8003ebc:	183b      	adds	r3, r7, r0
 8003ebe:	183a      	adds	r2, r7, r0
 8003ec0:	7812      	ldrb	r2, [r2, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8003ec6:	197b      	adds	r3, r7, r5
 8003ec8:	881a      	ldrh	r2, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	801a      	strh	r2, [r3, #0]
	return status;
 8003ece:	183b      	adds	r3, r7, r0
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b25b      	sxtb	r3, r3
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b004      	add	sp, #16
 8003eda:	bdb0      	pop	{r4, r5, r7, pc}

08003edc <_I2CWrite>:
#include "VL53L1X.h"
extern VL53L1X* active_sensor;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	230e      	movs	r3, #14
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	1c02      	adds	r2, r0, #0
 8003eec:	801a      	strh	r2, [r3, #0]
	(void) (dev);
	return (int) HAL_I2C_Master_Transmit(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <_I2CWrite+0x3c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <_I2CWrite+0x3c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	791b      	ldrb	r3, [r3, #4]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	18db      	adds	r3, r3, r3
 8003efe:	b299      	uxth	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	2464      	movs	r4, #100	; 0x64
 8003f08:	9400      	str	r4, [sp, #0]
 8003f0a:	f7fd fae3 	bl	80014d4 <HAL_I2C_Master_Transmit>
 8003f0e:	0003      	movs	r3, r0
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b005      	add	sp, #20
 8003f16:	bd90      	pop	{r4, r7, pc}
 8003f18:	200005a4 	.word	0x200005a4

08003f1c <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	230e      	movs	r3, #14
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	1c02      	adds	r2, r0, #0
 8003f2c:	801a      	strh	r2, [r3, #0]
	(void) (dev);
    return (int) HAL_I2C_Master_Receive(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <_I2CRead+0x3c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <_I2CRead+0x3c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	791b      	ldrb	r3, [r3, #4]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	18db      	adds	r3, r3, r3
 8003f3e:	b299      	uxth	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	2464      	movs	r4, #100	; 0x64
 8003f48:	9400      	str	r4, [sp, #0]
 8003f4a:	f7fd fbcb 	bl	80016e4 <HAL_I2C_Master_Receive>
 8003f4e:	0003      	movs	r3, r0
}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b005      	add	sp, #20
 8003f56:	bd90      	pop	{r4, r7, pc}
 8003f58:	200005a4 	.word	0x200005a4

08003f5c <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	0004      	movs	r4, r0
 8003f64:	0008      	movs	r0, r1
 8003f66:	0011      	movs	r1, r2
 8003f68:	1dbb      	adds	r3, r7, #6
 8003f6a:	1c22      	adds	r2, r4, #0
 8003f6c:	801a      	strh	r2, [r3, #0]
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	1c02      	adds	r2, r0, #0
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	1cfb      	adds	r3, r7, #3
 8003f76:	1c0a      	adds	r2, r1, #0
 8003f78:	701a      	strb	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003f7a:	240f      	movs	r4, #15
 8003f7c:	193b      	adds	r3, r7, r4
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <VL53L1_WrByte+0x74>)
 8003f8e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <VL53L1_WrByte+0x74>)
 8003f98:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <VL53L1_WrByte+0x74>)
 8003f9c:	1cfa      	adds	r2, r7, #3
 8003f9e:	7812      	ldrb	r2, [r2, #0]
 8003fa0:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 8003fa2:	490b      	ldr	r1, [pc, #44]	; (8003fd0 <VL53L1_WrByte+0x74>)
 8003fa4:	1dbb      	adds	r3, r7, #6
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	0018      	movs	r0, r3
 8003fac:	f7ff ff96 	bl	8003edc <_I2CWrite>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <VL53L1_WrByte+0x64>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8003fba:	193b      	adds	r3, r7, r4
 8003fbc:	22f3      	movs	r2, #243	; 0xf3
 8003fbe:	701a      	strb	r2, [r3, #0]
    }
    return Status;}
 8003fc0:	230f      	movs	r3, #15
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	0018      	movs	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b005      	add	sp, #20
 8003fce:	bd90      	pop	{r4, r7, pc}
 8003fd0:	200004a4 	.word	0x200004a4

08003fd4 <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	603a      	str	r2, [r7, #0]
 8003fdc:	1dbb      	adds	r3, r7, #6
 8003fde:	1c02      	adds	r2, r0, #0
 8003fe0:	801a      	strh	r2, [r3, #0]
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	1c0a      	adds	r2, r1, #0
 8003fe6:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003fe8:	240f      	movs	r4, #15
 8003fea:	193b      	adds	r3, r7, r4
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	4b18      	ldr	r3, [pc, #96]	; (800405c <VL53L1_RdByte+0x88>)
 8003ffc:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8003ffe:	1d3b      	adds	r3, r7, #4
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <VL53L1_RdByte+0x88>)
 8004006:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8004008:	4914      	ldr	r1, [pc, #80]	; (800405c <VL53L1_RdByte+0x88>)
 800400a:	1dbb      	adds	r3, r7, #6
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	2202      	movs	r2, #2
 8004010:	0018      	movs	r0, r3
 8004012:	f7ff ff63 	bl	8003edc <_I2CWrite>
 8004016:	0003      	movs	r3, r0
 8004018:	60bb      	str	r3, [r7, #8]
    if( status_int ){
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004020:	193b      	adds	r3, r7, r4
 8004022:	22f3      	movs	r2, #243	; 0xf3
 8004024:	701a      	strb	r2, [r3, #0]
        goto done;
 8004026:	e011      	b.n	800404c <VL53L1_RdByte+0x78>
    }
    status_int = _I2CRead(dev, data, 1);
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	1dbb      	adds	r3, r7, #6
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	2201      	movs	r2, #1
 8004030:	0018      	movs	r0, r3
 8004032:	f7ff ff73 	bl	8003f1c <_I2CRead>
 8004036:	0003      	movs	r3, r0
 8004038:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <VL53L1_RdByte+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004040:	230f      	movs	r3, #15
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	22f3      	movs	r2, #243	; 0xf3
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	e000      	b.n	800404c <VL53L1_RdByte+0x78>
    }
done:
 800404a:	46c0      	nop			; (mov r8, r8)

	return Status;
 800404c:	230f      	movs	r3, #15
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b25b      	sxtb	r3, r3
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b005      	add	sp, #20
 800405a:	bd90      	pop	{r4, r7, pc}
 800405c:	200004a4 	.word	0x200004a4

08004060 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 8004060:	b590      	push	{r4, r7, lr}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	603a      	str	r2, [r7, #0]
 8004068:	1dbb      	adds	r3, r7, #6
 800406a:	1c02      	adds	r2, r0, #0
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	1c0a      	adds	r2, r1, #0
 8004072:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004074:	240f      	movs	r4, #15
 8004076:	193b      	adds	r3, r7, r4
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800407c:	1d3b      	adds	r3, r7, #4
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	b29b      	uxth	r3, r3
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <VL53L1_RdWord+0xa0>)
 8004088:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <VL53L1_RdWord+0xa0>)
 8004092:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8004094:	491a      	ldr	r1, [pc, #104]	; (8004100 <VL53L1_RdWord+0xa0>)
 8004096:	1dbb      	adds	r3, r7, #6
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	2202      	movs	r2, #2
 800409c:	0018      	movs	r0, r3
 800409e:	f7ff ff1d 	bl	8003edc <_I2CWrite>
 80040a2:	0003      	movs	r3, r0
 80040a4:	60bb      	str	r3, [r7, #8]

    if( status_int ){
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <VL53L1_RdWord+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80040ac:	193b      	adds	r3, r7, r4
 80040ae:	22f3      	movs	r2, #243	; 0xf3
 80040b0:	701a      	strb	r2, [r3, #0]
        goto done;
 80040b2:	e01c      	b.n	80040ee <VL53L1_RdWord+0x8e>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 80040b4:	4912      	ldr	r1, [pc, #72]	; (8004100 <VL53L1_RdWord+0xa0>)
 80040b6:	1dbb      	adds	r3, r7, #6
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	2202      	movs	r2, #2
 80040bc:	0018      	movs	r0, r3
 80040be:	f7ff ff2d 	bl	8003f1c <_I2CRead>
 80040c2:	0003      	movs	r3, r0
 80040c4:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <VL53L1_RdWord+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80040cc:	230f      	movs	r3, #15
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	22f3      	movs	r2, #243	; 0xf3
 80040d2:	701a      	strb	r2, [r3, #0]
        goto done;
 80040d4:	e00b      	b.n	80040ee <VL53L1_RdWord+0x8e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <VL53L1_RdWord+0xa0>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	b29a      	uxth	r2, r3
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <VL53L1_RdWord+0xa0>)
 80040e2:	785b      	ldrb	r3, [r3, #1]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	18d3      	adds	r3, r2, r3
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 80040ee:	230f      	movs	r3, #15
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b005      	add	sp, #20
 80040fc:	bd90      	pop	{r4, r7, pc}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	200004a4 	.word	0x200004a4

08004104 <TOF_InitStruct>:
#include "VL53L1X.h"
#include "VL53L1X_api.h"

VL53L1X* active_sensor;

void TOF_InitStruct(VL53L1X* const sensor, I2C_HandleTypeDef* hi2c, uint8_t address, GPIO_TypeDef* xshut_port, uint16_t xshut_pin) {
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	1dfb      	adds	r3, r7, #7
 8004112:	701a      	strb	r2, [r3, #0]
	sensor->hi2c = hi2c;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1dfa      	adds	r2, r7, #7
 800411e:	7812      	ldrb	r2, [r2, #0]
 8004120:	711a      	strb	r2, [r3, #4]

	sensor->xshut_port = xshut_port;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	609a      	str	r2, [r3, #8]
	sensor->xshut_pin = xshut_pin;
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	2318      	movs	r3, #24
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	8193      	strh	r3, [r2, #12]
}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	46bd      	mov	sp, r7
 8004136:	b004      	add	sp, #16
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <TOF_TurnOn>:

void TOF_TurnOn(VL53L1X* const sensor) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <TOF_TurnOn+0x28>)
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_SET);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6898      	ldr	r0, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	899b      	ldrh	r3, [r3, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	0019      	movs	r1, r3
 8004156:	f7fd f909 	bl	800136c <HAL_GPIO_WritePin>
}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	46bd      	mov	sp, r7
 800415e:	b002      	add	sp, #8
 8004160:	bd80      	pop	{r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	200005a4 	.word	0x200005a4

08004168 <TOF_TurnOff>:

void TOF_TurnOff(VL53L1X* const sensor) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <TOF_TurnOff+0x28>)
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_RESET);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6898      	ldr	r0, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	899b      	ldrh	r3, [r3, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	0019      	movs	r1, r3
 8004182:	f7fd f8f3 	bl	800136c <HAL_GPIO_WritePin>
}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	46bd      	mov	sp, r7
 800418a:	b002      	add	sp, #8
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	200005a4 	.word	0x200005a4

08004194 <TOF_BootSensor>:
	for (uint8_t n = 0; n < count; n++) {
		TOF_BootSensor(sensors[n]);
	}
}

void TOF_BootSensor(VL53L1X* const sensor) {
 8004194:	b590      	push	{r4, r7, lr}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 800419c:	4b23      	ldr	r3, [pc, #140]	; (800422c <TOF_BootSensor+0x98>)
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]
	TOF_TurnOn(sensor);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	0018      	movs	r0, r3
 80041a6:	f7ff ffc9 	bl	800413c <TOF_TurnOn>

	// Assume sensor wasn't initialised and is using default address
	uint8_t correct_address = sensor->address;
 80041aa:	240f      	movs	r4, #15
 80041ac:	193b      	adds	r3, r7, r4
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	7912      	ldrb	r2, [r2, #4]
 80041b2:	701a      	strb	r2, [r3, #0]
	sensor->address = 0x52 >> 1;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2229      	movs	r2, #41	; 0x29
 80041b8:	711a      	strb	r2, [r3, #4]

	// Set new address to sensor if necessary
	uint16_t id = 0;
 80041ba:	210c      	movs	r1, #12
 80041bc:	187b      	adds	r3, r7, r1
 80041be:	2200      	movs	r2, #0
 80041c0:	801a      	strh	r2, [r3, #0]
	if (VL53L1X_GetSensorId(sensor->address, &id)) {
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	791b      	ldrb	r3, [r3, #4]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	187a      	adds	r2, r7, r1
 80041ca:	0011      	movs	r1, r2
 80041cc:	0018      	movs	r0, r3
 80041ce:	f7ff fe35 	bl	8003e3c <VL53L1X_GetSensorId>
 80041d2:	1e03      	subs	r3, r0, #0
 80041d4:	d008      	beq.n	80041e8 <TOF_BootSensor+0x54>
		VL53L1X_SetI2CAddress(sensor->address, correct_address);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	791b      	ldrb	r3, [r3, #4]
 80041da:	b29a      	uxth	r2, r3
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	0019      	movs	r1, r3
 80041e2:	0010      	movs	r0, r2
 80041e4:	f7ff fc98 	bl	8003b18 <VL53L1X_SetI2CAddress>
	}

	// Initialise sensor
	sensor->address = correct_address;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	220f      	movs	r2, #15
 80041ec:	18ba      	adds	r2, r7, r2
 80041ee:	7812      	ldrb	r2, [r2, #0]
 80041f0:	711a      	strb	r2, [r3, #4]
	VL53L1X_GetSensorId(sensor->address, &id);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	791b      	ldrb	r3, [r3, #4]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	240c      	movs	r4, #12
 80041fa:	193a      	adds	r2, r7, r4
 80041fc:	0011      	movs	r1, r2
 80041fe:	0018      	movs	r0, r3
 8004200:	f7ff fe1c 	bl	8003e3c <VL53L1X_GetSensorId>
	if (id != 0) {
 8004204:	193b      	adds	r3, r7, r4
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00b      	beq.n	8004224 <TOF_BootSensor+0x90>
		VL53L1X_SensorInit(sensor->address);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	791b      	ldrb	r3, [r3, #4]
 8004210:	b29b      	uxth	r3, r3
 8004212:	0018      	movs	r0, r3
 8004214:	f7ff fca4 	bl	8003b60 <VL53L1X_SensorInit>
		VL53L1X_StartRanging(sensor->address);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	791b      	ldrb	r3, [r3, #4]
 800421c:	b29b      	uxth	r3, r3
 800421e:	0018      	movs	r0, r3
 8004220:	f7ff fd88 	bl	8003d34 <VL53L1X_StartRanging>
	}
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b005      	add	sp, #20
 800422a:	bd90      	pop	{r4, r7, pc}
 800422c:	200005a4 	.word	0x200005a4

08004230 <TOF_GetDistance>:
void TOF_StopRanging(VL53L1X* const sensor) {
	active_sensor = sensor;
	VL53L1X_StopRanging(sensor->address);
}

uint16_t TOF_GetDistance(VL53L1X* const sensor) {
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8004238:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <TOF_GetDistance+0x34>)
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	601a      	str	r2, [r3, #0]

	uint16_t reading = 0;
 800423e:	210e      	movs	r1, #14
 8004240:	187b      	adds	r3, r7, r1
 8004242:	2200      	movs	r2, #0
 8004244:	801a      	strh	r2, [r3, #0]
	VL53L1X_GetDistance(sensor->address, &reading);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	791b      	ldrb	r3, [r3, #4]
 800424a:	b29b      	uxth	r3, r3
 800424c:	000c      	movs	r4, r1
 800424e:	187a      	adds	r2, r7, r1
 8004250:	0011      	movs	r1, r2
 8004252:	0018      	movs	r0, r3
 8004254:	f7ff fe1c 	bl	8003e90 <VL53L1X_GetDistance>
	return reading;
 8004258:	193b      	adds	r3, r7, r4
 800425a:	881b      	ldrh	r3, [r3, #0]
}
 800425c:	0018      	movs	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	b005      	add	sp, #20
 8004262:	bd90      	pop	{r4, r7, pc}
 8004264:	200005a4 	.word	0x200005a4

08004268 <__errno>:
 8004268:	4b01      	ldr	r3, [pc, #4]	; (8004270 <__errno+0x8>)
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	4770      	bx	lr
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	20000284 	.word	0x20000284

08004274 <__libc_init_array>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	2600      	movs	r6, #0
 8004278:	4d0c      	ldr	r5, [pc, #48]	; (80042ac <__libc_init_array+0x38>)
 800427a:	4c0d      	ldr	r4, [pc, #52]	; (80042b0 <__libc_init_array+0x3c>)
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	42a6      	cmp	r6, r4
 8004282:	d109      	bne.n	8004298 <__libc_init_array+0x24>
 8004284:	2600      	movs	r6, #0
 8004286:	f000 fc8b 	bl	8004ba0 <_init>
 800428a:	4d0a      	ldr	r5, [pc, #40]	; (80042b4 <__libc_init_array+0x40>)
 800428c:	4c0a      	ldr	r4, [pc, #40]	; (80042b8 <__libc_init_array+0x44>)
 800428e:	1b64      	subs	r4, r4, r5
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	42a6      	cmp	r6, r4
 8004294:	d105      	bne.n	80042a2 <__libc_init_array+0x2e>
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	00b3      	lsls	r3, r6, #2
 800429a:	58eb      	ldr	r3, [r5, r3]
 800429c:	4798      	blx	r3
 800429e:	3601      	adds	r6, #1
 80042a0:	e7ee      	b.n	8004280 <__libc_init_array+0xc>
 80042a2:	00b3      	lsls	r3, r6, #2
 80042a4:	58eb      	ldr	r3, [r5, r3]
 80042a6:	4798      	blx	r3
 80042a8:	3601      	adds	r6, #1
 80042aa:	e7f2      	b.n	8004292 <__libc_init_array+0x1e>
 80042ac:	08004cbc 	.word	0x08004cbc
 80042b0:	08004cbc 	.word	0x08004cbc
 80042b4:	08004cbc 	.word	0x08004cbc
 80042b8:	08004cc0 	.word	0x08004cc0

080042bc <memcpy>:
 80042bc:	2300      	movs	r3, #0
 80042be:	b510      	push	{r4, lr}
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d100      	bne.n	80042c6 <memcpy+0xa>
 80042c4:	bd10      	pop	{r4, pc}
 80042c6:	5ccc      	ldrb	r4, [r1, r3]
 80042c8:	54c4      	strb	r4, [r0, r3]
 80042ca:	3301      	adds	r3, #1
 80042cc:	e7f8      	b.n	80042c0 <memcpy+0x4>

080042ce <memset>:
 80042ce:	0003      	movs	r3, r0
 80042d0:	1882      	adds	r2, r0, r2
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d100      	bne.n	80042d8 <memset+0xa>
 80042d6:	4770      	bx	lr
 80042d8:	7019      	strb	r1, [r3, #0]
 80042da:	3301      	adds	r3, #1
 80042dc:	e7f9      	b.n	80042d2 <memset+0x4>
	...

080042e0 <siprintf>:
 80042e0:	b40e      	push	{r1, r2, r3}
 80042e2:	b500      	push	{lr}
 80042e4:	490b      	ldr	r1, [pc, #44]	; (8004314 <siprintf+0x34>)
 80042e6:	b09c      	sub	sp, #112	; 0x70
 80042e8:	ab1d      	add	r3, sp, #116	; 0x74
 80042ea:	9002      	str	r0, [sp, #8]
 80042ec:	9006      	str	r0, [sp, #24]
 80042ee:	9107      	str	r1, [sp, #28]
 80042f0:	9104      	str	r1, [sp, #16]
 80042f2:	4809      	ldr	r0, [pc, #36]	; (8004318 <siprintf+0x38>)
 80042f4:	4909      	ldr	r1, [pc, #36]	; (800431c <siprintf+0x3c>)
 80042f6:	cb04      	ldmia	r3!, {r2}
 80042f8:	9105      	str	r1, [sp, #20]
 80042fa:	6800      	ldr	r0, [r0, #0]
 80042fc:	a902      	add	r1, sp, #8
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	f000 f870 	bl	80043e4 <_svfiprintf_r>
 8004304:	2300      	movs	r3, #0
 8004306:	9a02      	ldr	r2, [sp, #8]
 8004308:	7013      	strb	r3, [r2, #0]
 800430a:	b01c      	add	sp, #112	; 0x70
 800430c:	bc08      	pop	{r3}
 800430e:	b003      	add	sp, #12
 8004310:	4718      	bx	r3
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	7fffffff 	.word	0x7fffffff
 8004318:	20000284 	.word	0x20000284
 800431c:	ffff0208 	.word	0xffff0208

08004320 <__ssputs_r>:
 8004320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004322:	688e      	ldr	r6, [r1, #8]
 8004324:	b085      	sub	sp, #20
 8004326:	0007      	movs	r7, r0
 8004328:	000c      	movs	r4, r1
 800432a:	9203      	str	r2, [sp, #12]
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	429e      	cmp	r6, r3
 8004330:	d83c      	bhi.n	80043ac <__ssputs_r+0x8c>
 8004332:	2390      	movs	r3, #144	; 0x90
 8004334:	898a      	ldrh	r2, [r1, #12]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	421a      	tst	r2, r3
 800433a:	d034      	beq.n	80043a6 <__ssputs_r+0x86>
 800433c:	6909      	ldr	r1, [r1, #16]
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	6960      	ldr	r0, [r4, #20]
 8004342:	1a5b      	subs	r3, r3, r1
 8004344:	9302      	str	r3, [sp, #8]
 8004346:	2303      	movs	r3, #3
 8004348:	4343      	muls	r3, r0
 800434a:	0fdd      	lsrs	r5, r3, #31
 800434c:	18ed      	adds	r5, r5, r3
 800434e:	9b01      	ldr	r3, [sp, #4]
 8004350:	9802      	ldr	r0, [sp, #8]
 8004352:	3301      	adds	r3, #1
 8004354:	181b      	adds	r3, r3, r0
 8004356:	106d      	asrs	r5, r5, #1
 8004358:	42ab      	cmp	r3, r5
 800435a:	d900      	bls.n	800435e <__ssputs_r+0x3e>
 800435c:	001d      	movs	r5, r3
 800435e:	0553      	lsls	r3, r2, #21
 8004360:	d532      	bpl.n	80043c8 <__ssputs_r+0xa8>
 8004362:	0029      	movs	r1, r5
 8004364:	0038      	movs	r0, r7
 8004366:	f000 fb49 	bl	80049fc <_malloc_r>
 800436a:	1e06      	subs	r6, r0, #0
 800436c:	d109      	bne.n	8004382 <__ssputs_r+0x62>
 800436e:	230c      	movs	r3, #12
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	2340      	movs	r3, #64	; 0x40
 8004374:	2001      	movs	r0, #1
 8004376:	89a2      	ldrh	r2, [r4, #12]
 8004378:	4240      	negs	r0, r0
 800437a:	4313      	orrs	r3, r2
 800437c:	81a3      	strh	r3, [r4, #12]
 800437e:	b005      	add	sp, #20
 8004380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004382:	9a02      	ldr	r2, [sp, #8]
 8004384:	6921      	ldr	r1, [r4, #16]
 8004386:	f7ff ff99 	bl	80042bc <memcpy>
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <__ssputs_r+0xc0>)
 800438e:	401a      	ands	r2, r3
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	4313      	orrs	r3, r2
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	9b02      	ldr	r3, [sp, #8]
 8004398:	6126      	str	r6, [r4, #16]
 800439a:	18f6      	adds	r6, r6, r3
 800439c:	6026      	str	r6, [r4, #0]
 800439e:	6165      	str	r5, [r4, #20]
 80043a0:	9e01      	ldr	r6, [sp, #4]
 80043a2:	1aed      	subs	r5, r5, r3
 80043a4:	60a5      	str	r5, [r4, #8]
 80043a6:	9b01      	ldr	r3, [sp, #4]
 80043a8:	429e      	cmp	r6, r3
 80043aa:	d900      	bls.n	80043ae <__ssputs_r+0x8e>
 80043ac:	9e01      	ldr	r6, [sp, #4]
 80043ae:	0032      	movs	r2, r6
 80043b0:	9903      	ldr	r1, [sp, #12]
 80043b2:	6820      	ldr	r0, [r4, #0]
 80043b4:	f000 faa3 	bl	80048fe <memmove>
 80043b8:	68a3      	ldr	r3, [r4, #8]
 80043ba:	2000      	movs	r0, #0
 80043bc:	1b9b      	subs	r3, r3, r6
 80043be:	60a3      	str	r3, [r4, #8]
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	199e      	adds	r6, r3, r6
 80043c4:	6026      	str	r6, [r4, #0]
 80043c6:	e7da      	b.n	800437e <__ssputs_r+0x5e>
 80043c8:	002a      	movs	r2, r5
 80043ca:	0038      	movs	r0, r7
 80043cc:	f000 fb8c 	bl	8004ae8 <_realloc_r>
 80043d0:	1e06      	subs	r6, r0, #0
 80043d2:	d1e0      	bne.n	8004396 <__ssputs_r+0x76>
 80043d4:	0038      	movs	r0, r7
 80043d6:	6921      	ldr	r1, [r4, #16]
 80043d8:	f000 faa4 	bl	8004924 <_free_r>
 80043dc:	e7c7      	b.n	800436e <__ssputs_r+0x4e>
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	fffffb7f 	.word	0xfffffb7f

080043e4 <_svfiprintf_r>:
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e6:	b0a1      	sub	sp, #132	; 0x84
 80043e8:	9003      	str	r0, [sp, #12]
 80043ea:	001d      	movs	r5, r3
 80043ec:	898b      	ldrh	r3, [r1, #12]
 80043ee:	000f      	movs	r7, r1
 80043f0:	0016      	movs	r6, r2
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	d511      	bpl.n	800441a <_svfiprintf_r+0x36>
 80043f6:	690b      	ldr	r3, [r1, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10e      	bne.n	800441a <_svfiprintf_r+0x36>
 80043fc:	2140      	movs	r1, #64	; 0x40
 80043fe:	f000 fafd 	bl	80049fc <_malloc_r>
 8004402:	6038      	str	r0, [r7, #0]
 8004404:	6138      	str	r0, [r7, #16]
 8004406:	2800      	cmp	r0, #0
 8004408:	d105      	bne.n	8004416 <_svfiprintf_r+0x32>
 800440a:	230c      	movs	r3, #12
 800440c:	9a03      	ldr	r2, [sp, #12]
 800440e:	3801      	subs	r0, #1
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	b021      	add	sp, #132	; 0x84
 8004414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004416:	2340      	movs	r3, #64	; 0x40
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	2300      	movs	r3, #0
 800441c:	ac08      	add	r4, sp, #32
 800441e:	6163      	str	r3, [r4, #20]
 8004420:	3320      	adds	r3, #32
 8004422:	7663      	strb	r3, [r4, #25]
 8004424:	3310      	adds	r3, #16
 8004426:	76a3      	strb	r3, [r4, #26]
 8004428:	9507      	str	r5, [sp, #28]
 800442a:	0035      	movs	r5, r6
 800442c:	782b      	ldrb	r3, [r5, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <_svfiprintf_r+0x52>
 8004432:	2b25      	cmp	r3, #37	; 0x25
 8004434:	d147      	bne.n	80044c6 <_svfiprintf_r+0xe2>
 8004436:	1bab      	subs	r3, r5, r6
 8004438:	9305      	str	r3, [sp, #20]
 800443a:	42b5      	cmp	r5, r6
 800443c:	d00c      	beq.n	8004458 <_svfiprintf_r+0x74>
 800443e:	0032      	movs	r2, r6
 8004440:	0039      	movs	r1, r7
 8004442:	9803      	ldr	r0, [sp, #12]
 8004444:	f7ff ff6c 	bl	8004320 <__ssputs_r>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	d100      	bne.n	800444e <_svfiprintf_r+0x6a>
 800444c:	e0ae      	b.n	80045ac <_svfiprintf_r+0x1c8>
 800444e:	6962      	ldr	r2, [r4, #20]
 8004450:	9b05      	ldr	r3, [sp, #20]
 8004452:	4694      	mov	ip, r2
 8004454:	4463      	add	r3, ip
 8004456:	6163      	str	r3, [r4, #20]
 8004458:	782b      	ldrb	r3, [r5, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d100      	bne.n	8004460 <_svfiprintf_r+0x7c>
 800445e:	e0a5      	b.n	80045ac <_svfiprintf_r+0x1c8>
 8004460:	2201      	movs	r2, #1
 8004462:	2300      	movs	r3, #0
 8004464:	4252      	negs	r2, r2
 8004466:	6062      	str	r2, [r4, #4]
 8004468:	a904      	add	r1, sp, #16
 800446a:	3254      	adds	r2, #84	; 0x54
 800446c:	1852      	adds	r2, r2, r1
 800446e:	1c6e      	adds	r6, r5, #1
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	60e3      	str	r3, [r4, #12]
 8004474:	60a3      	str	r3, [r4, #8]
 8004476:	7013      	strb	r3, [r2, #0]
 8004478:	65a3      	str	r3, [r4, #88]	; 0x58
 800447a:	2205      	movs	r2, #5
 800447c:	7831      	ldrb	r1, [r6, #0]
 800447e:	4854      	ldr	r0, [pc, #336]	; (80045d0 <_svfiprintf_r+0x1ec>)
 8004480:	f000 fa32 	bl	80048e8 <memchr>
 8004484:	1c75      	adds	r5, r6, #1
 8004486:	2800      	cmp	r0, #0
 8004488:	d11f      	bne.n	80044ca <_svfiprintf_r+0xe6>
 800448a:	6822      	ldr	r2, [r4, #0]
 800448c:	06d3      	lsls	r3, r2, #27
 800448e:	d504      	bpl.n	800449a <_svfiprintf_r+0xb6>
 8004490:	2353      	movs	r3, #83	; 0x53
 8004492:	a904      	add	r1, sp, #16
 8004494:	185b      	adds	r3, r3, r1
 8004496:	2120      	movs	r1, #32
 8004498:	7019      	strb	r1, [r3, #0]
 800449a:	0713      	lsls	r3, r2, #28
 800449c:	d504      	bpl.n	80044a8 <_svfiprintf_r+0xc4>
 800449e:	2353      	movs	r3, #83	; 0x53
 80044a0:	a904      	add	r1, sp, #16
 80044a2:	185b      	adds	r3, r3, r1
 80044a4:	212b      	movs	r1, #43	; 0x2b
 80044a6:	7019      	strb	r1, [r3, #0]
 80044a8:	7833      	ldrb	r3, [r6, #0]
 80044aa:	2b2a      	cmp	r3, #42	; 0x2a
 80044ac:	d016      	beq.n	80044dc <_svfiprintf_r+0xf8>
 80044ae:	0035      	movs	r5, r6
 80044b0:	2100      	movs	r1, #0
 80044b2:	200a      	movs	r0, #10
 80044b4:	68e3      	ldr	r3, [r4, #12]
 80044b6:	782a      	ldrb	r2, [r5, #0]
 80044b8:	1c6e      	adds	r6, r5, #1
 80044ba:	3a30      	subs	r2, #48	; 0x30
 80044bc:	2a09      	cmp	r2, #9
 80044be:	d94e      	bls.n	800455e <_svfiprintf_r+0x17a>
 80044c0:	2900      	cmp	r1, #0
 80044c2:	d111      	bne.n	80044e8 <_svfiprintf_r+0x104>
 80044c4:	e017      	b.n	80044f6 <_svfiprintf_r+0x112>
 80044c6:	3501      	adds	r5, #1
 80044c8:	e7b0      	b.n	800442c <_svfiprintf_r+0x48>
 80044ca:	4b41      	ldr	r3, [pc, #260]	; (80045d0 <_svfiprintf_r+0x1ec>)
 80044cc:	6822      	ldr	r2, [r4, #0]
 80044ce:	1ac0      	subs	r0, r0, r3
 80044d0:	2301      	movs	r3, #1
 80044d2:	4083      	lsls	r3, r0
 80044d4:	4313      	orrs	r3, r2
 80044d6:	002e      	movs	r6, r5
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	e7ce      	b.n	800447a <_svfiprintf_r+0x96>
 80044dc:	9b07      	ldr	r3, [sp, #28]
 80044de:	1d19      	adds	r1, r3, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	9107      	str	r1, [sp, #28]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	db01      	blt.n	80044ec <_svfiprintf_r+0x108>
 80044e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80044ea:	e004      	b.n	80044f6 <_svfiprintf_r+0x112>
 80044ec:	425b      	negs	r3, r3
 80044ee:	60e3      	str	r3, [r4, #12]
 80044f0:	2302      	movs	r3, #2
 80044f2:	4313      	orrs	r3, r2
 80044f4:	6023      	str	r3, [r4, #0]
 80044f6:	782b      	ldrb	r3, [r5, #0]
 80044f8:	2b2e      	cmp	r3, #46	; 0x2e
 80044fa:	d10a      	bne.n	8004512 <_svfiprintf_r+0x12e>
 80044fc:	786b      	ldrb	r3, [r5, #1]
 80044fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004500:	d135      	bne.n	800456e <_svfiprintf_r+0x18a>
 8004502:	9b07      	ldr	r3, [sp, #28]
 8004504:	3502      	adds	r5, #2
 8004506:	1d1a      	adds	r2, r3, #4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	9207      	str	r2, [sp, #28]
 800450c:	2b00      	cmp	r3, #0
 800450e:	db2b      	blt.n	8004568 <_svfiprintf_r+0x184>
 8004510:	9309      	str	r3, [sp, #36]	; 0x24
 8004512:	4e30      	ldr	r6, [pc, #192]	; (80045d4 <_svfiprintf_r+0x1f0>)
 8004514:	2203      	movs	r2, #3
 8004516:	0030      	movs	r0, r6
 8004518:	7829      	ldrb	r1, [r5, #0]
 800451a:	f000 f9e5 	bl	80048e8 <memchr>
 800451e:	2800      	cmp	r0, #0
 8004520:	d006      	beq.n	8004530 <_svfiprintf_r+0x14c>
 8004522:	2340      	movs	r3, #64	; 0x40
 8004524:	1b80      	subs	r0, r0, r6
 8004526:	4083      	lsls	r3, r0
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	3501      	adds	r5, #1
 800452c:	4313      	orrs	r3, r2
 800452e:	6023      	str	r3, [r4, #0]
 8004530:	7829      	ldrb	r1, [r5, #0]
 8004532:	2206      	movs	r2, #6
 8004534:	4828      	ldr	r0, [pc, #160]	; (80045d8 <_svfiprintf_r+0x1f4>)
 8004536:	1c6e      	adds	r6, r5, #1
 8004538:	7621      	strb	r1, [r4, #24]
 800453a:	f000 f9d5 	bl	80048e8 <memchr>
 800453e:	2800      	cmp	r0, #0
 8004540:	d03c      	beq.n	80045bc <_svfiprintf_r+0x1d8>
 8004542:	4b26      	ldr	r3, [pc, #152]	; (80045dc <_svfiprintf_r+0x1f8>)
 8004544:	2b00      	cmp	r3, #0
 8004546:	d125      	bne.n	8004594 <_svfiprintf_r+0x1b0>
 8004548:	2207      	movs	r2, #7
 800454a:	9b07      	ldr	r3, [sp, #28]
 800454c:	3307      	adds	r3, #7
 800454e:	4393      	bics	r3, r2
 8004550:	3308      	adds	r3, #8
 8004552:	9307      	str	r3, [sp, #28]
 8004554:	6963      	ldr	r3, [r4, #20]
 8004556:	9a04      	ldr	r2, [sp, #16]
 8004558:	189b      	adds	r3, r3, r2
 800455a:	6163      	str	r3, [r4, #20]
 800455c:	e765      	b.n	800442a <_svfiprintf_r+0x46>
 800455e:	4343      	muls	r3, r0
 8004560:	0035      	movs	r5, r6
 8004562:	2101      	movs	r1, #1
 8004564:	189b      	adds	r3, r3, r2
 8004566:	e7a6      	b.n	80044b6 <_svfiprintf_r+0xd2>
 8004568:	2301      	movs	r3, #1
 800456a:	425b      	negs	r3, r3
 800456c:	e7d0      	b.n	8004510 <_svfiprintf_r+0x12c>
 800456e:	2300      	movs	r3, #0
 8004570:	200a      	movs	r0, #10
 8004572:	001a      	movs	r2, r3
 8004574:	3501      	adds	r5, #1
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	7829      	ldrb	r1, [r5, #0]
 800457a:	1c6e      	adds	r6, r5, #1
 800457c:	3930      	subs	r1, #48	; 0x30
 800457e:	2909      	cmp	r1, #9
 8004580:	d903      	bls.n	800458a <_svfiprintf_r+0x1a6>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0c5      	beq.n	8004512 <_svfiprintf_r+0x12e>
 8004586:	9209      	str	r2, [sp, #36]	; 0x24
 8004588:	e7c3      	b.n	8004512 <_svfiprintf_r+0x12e>
 800458a:	4342      	muls	r2, r0
 800458c:	0035      	movs	r5, r6
 800458e:	2301      	movs	r3, #1
 8004590:	1852      	adds	r2, r2, r1
 8004592:	e7f1      	b.n	8004578 <_svfiprintf_r+0x194>
 8004594:	ab07      	add	r3, sp, #28
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	003a      	movs	r2, r7
 800459a:	0021      	movs	r1, r4
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <_svfiprintf_r+0x1fc>)
 800459e:	9803      	ldr	r0, [sp, #12]
 80045a0:	e000      	b.n	80045a4 <_svfiprintf_r+0x1c0>
 80045a2:	bf00      	nop
 80045a4:	9004      	str	r0, [sp, #16]
 80045a6:	9b04      	ldr	r3, [sp, #16]
 80045a8:	3301      	adds	r3, #1
 80045aa:	d1d3      	bne.n	8004554 <_svfiprintf_r+0x170>
 80045ac:	89bb      	ldrh	r3, [r7, #12]
 80045ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80045b0:	065b      	lsls	r3, r3, #25
 80045b2:	d400      	bmi.n	80045b6 <_svfiprintf_r+0x1d2>
 80045b4:	e72d      	b.n	8004412 <_svfiprintf_r+0x2e>
 80045b6:	2001      	movs	r0, #1
 80045b8:	4240      	negs	r0, r0
 80045ba:	e72a      	b.n	8004412 <_svfiprintf_r+0x2e>
 80045bc:	ab07      	add	r3, sp, #28
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	003a      	movs	r2, r7
 80045c2:	0021      	movs	r1, r4
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <_svfiprintf_r+0x1fc>)
 80045c6:	9803      	ldr	r0, [sp, #12]
 80045c8:	f000 f87c 	bl	80046c4 <_printf_i>
 80045cc:	e7ea      	b.n	80045a4 <_svfiprintf_r+0x1c0>
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	08004c87 	.word	0x08004c87
 80045d4:	08004c8d 	.word	0x08004c8d
 80045d8:	08004c91 	.word	0x08004c91
 80045dc:	00000000 	.word	0x00000000
 80045e0:	08004321 	.word	0x08004321

080045e4 <_printf_common>:
 80045e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045e6:	0015      	movs	r5, r2
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	688a      	ldr	r2, [r1, #8]
 80045ec:	690b      	ldr	r3, [r1, #16]
 80045ee:	000c      	movs	r4, r1
 80045f0:	9000      	str	r0, [sp, #0]
 80045f2:	4293      	cmp	r3, r2
 80045f4:	da00      	bge.n	80045f8 <_printf_common+0x14>
 80045f6:	0013      	movs	r3, r2
 80045f8:	0022      	movs	r2, r4
 80045fa:	602b      	str	r3, [r5, #0]
 80045fc:	3243      	adds	r2, #67	; 0x43
 80045fe:	7812      	ldrb	r2, [r2, #0]
 8004600:	2a00      	cmp	r2, #0
 8004602:	d001      	beq.n	8004608 <_printf_common+0x24>
 8004604:	3301      	adds	r3, #1
 8004606:	602b      	str	r3, [r5, #0]
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	069b      	lsls	r3, r3, #26
 800460c:	d502      	bpl.n	8004614 <_printf_common+0x30>
 800460e:	682b      	ldr	r3, [r5, #0]
 8004610:	3302      	adds	r3, #2
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	6822      	ldr	r2, [r4, #0]
 8004616:	2306      	movs	r3, #6
 8004618:	0017      	movs	r7, r2
 800461a:	401f      	ands	r7, r3
 800461c:	421a      	tst	r2, r3
 800461e:	d027      	beq.n	8004670 <_printf_common+0x8c>
 8004620:	0023      	movs	r3, r4
 8004622:	3343      	adds	r3, #67	; 0x43
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	1e5a      	subs	r2, r3, #1
 8004628:	4193      	sbcs	r3, r2
 800462a:	6822      	ldr	r2, [r4, #0]
 800462c:	0692      	lsls	r2, r2, #26
 800462e:	d430      	bmi.n	8004692 <_printf_common+0xae>
 8004630:	0022      	movs	r2, r4
 8004632:	9901      	ldr	r1, [sp, #4]
 8004634:	9800      	ldr	r0, [sp, #0]
 8004636:	9e08      	ldr	r6, [sp, #32]
 8004638:	3243      	adds	r2, #67	; 0x43
 800463a:	47b0      	blx	r6
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d025      	beq.n	800468c <_printf_common+0xa8>
 8004640:	2306      	movs	r3, #6
 8004642:	6820      	ldr	r0, [r4, #0]
 8004644:	682a      	ldr	r2, [r5, #0]
 8004646:	68e1      	ldr	r1, [r4, #12]
 8004648:	2500      	movs	r5, #0
 800464a:	4003      	ands	r3, r0
 800464c:	2b04      	cmp	r3, #4
 800464e:	d103      	bne.n	8004658 <_printf_common+0x74>
 8004650:	1a8d      	subs	r5, r1, r2
 8004652:	43eb      	mvns	r3, r5
 8004654:	17db      	asrs	r3, r3, #31
 8004656:	401d      	ands	r5, r3
 8004658:	68a3      	ldr	r3, [r4, #8]
 800465a:	6922      	ldr	r2, [r4, #16]
 800465c:	4293      	cmp	r3, r2
 800465e:	dd01      	ble.n	8004664 <_printf_common+0x80>
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	18ed      	adds	r5, r5, r3
 8004664:	2700      	movs	r7, #0
 8004666:	42bd      	cmp	r5, r7
 8004668:	d120      	bne.n	80046ac <_printf_common+0xc8>
 800466a:	2000      	movs	r0, #0
 800466c:	e010      	b.n	8004690 <_printf_common+0xac>
 800466e:	3701      	adds	r7, #1
 8004670:	68e3      	ldr	r3, [r4, #12]
 8004672:	682a      	ldr	r2, [r5, #0]
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	42bb      	cmp	r3, r7
 8004678:	ddd2      	ble.n	8004620 <_printf_common+0x3c>
 800467a:	0022      	movs	r2, r4
 800467c:	2301      	movs	r3, #1
 800467e:	9901      	ldr	r1, [sp, #4]
 8004680:	9800      	ldr	r0, [sp, #0]
 8004682:	9e08      	ldr	r6, [sp, #32]
 8004684:	3219      	adds	r2, #25
 8004686:	47b0      	blx	r6
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d1f0      	bne.n	800466e <_printf_common+0x8a>
 800468c:	2001      	movs	r0, #1
 800468e:	4240      	negs	r0, r0
 8004690:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004692:	2030      	movs	r0, #48	; 0x30
 8004694:	18e1      	adds	r1, r4, r3
 8004696:	3143      	adds	r1, #67	; 0x43
 8004698:	7008      	strb	r0, [r1, #0]
 800469a:	0021      	movs	r1, r4
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	3145      	adds	r1, #69	; 0x45
 80046a0:	7809      	ldrb	r1, [r1, #0]
 80046a2:	18a2      	adds	r2, r4, r2
 80046a4:	3243      	adds	r2, #67	; 0x43
 80046a6:	3302      	adds	r3, #2
 80046a8:	7011      	strb	r1, [r2, #0]
 80046aa:	e7c1      	b.n	8004630 <_printf_common+0x4c>
 80046ac:	0022      	movs	r2, r4
 80046ae:	2301      	movs	r3, #1
 80046b0:	9901      	ldr	r1, [sp, #4]
 80046b2:	9800      	ldr	r0, [sp, #0]
 80046b4:	9e08      	ldr	r6, [sp, #32]
 80046b6:	321a      	adds	r2, #26
 80046b8:	47b0      	blx	r6
 80046ba:	1c43      	adds	r3, r0, #1
 80046bc:	d0e6      	beq.n	800468c <_printf_common+0xa8>
 80046be:	3701      	adds	r7, #1
 80046c0:	e7d1      	b.n	8004666 <_printf_common+0x82>
	...

080046c4 <_printf_i>:
 80046c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c6:	b08b      	sub	sp, #44	; 0x2c
 80046c8:	9206      	str	r2, [sp, #24]
 80046ca:	000a      	movs	r2, r1
 80046cc:	3243      	adds	r2, #67	; 0x43
 80046ce:	9307      	str	r3, [sp, #28]
 80046d0:	9005      	str	r0, [sp, #20]
 80046d2:	9204      	str	r2, [sp, #16]
 80046d4:	7e0a      	ldrb	r2, [r1, #24]
 80046d6:	000c      	movs	r4, r1
 80046d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046da:	2a78      	cmp	r2, #120	; 0x78
 80046dc:	d807      	bhi.n	80046ee <_printf_i+0x2a>
 80046de:	2a62      	cmp	r2, #98	; 0x62
 80046e0:	d809      	bhi.n	80046f6 <_printf_i+0x32>
 80046e2:	2a00      	cmp	r2, #0
 80046e4:	d100      	bne.n	80046e8 <_printf_i+0x24>
 80046e6:	e0c1      	b.n	800486c <_printf_i+0x1a8>
 80046e8:	2a58      	cmp	r2, #88	; 0x58
 80046ea:	d100      	bne.n	80046ee <_printf_i+0x2a>
 80046ec:	e08c      	b.n	8004808 <_printf_i+0x144>
 80046ee:	0026      	movs	r6, r4
 80046f0:	3642      	adds	r6, #66	; 0x42
 80046f2:	7032      	strb	r2, [r6, #0]
 80046f4:	e022      	b.n	800473c <_printf_i+0x78>
 80046f6:	0010      	movs	r0, r2
 80046f8:	3863      	subs	r0, #99	; 0x63
 80046fa:	2815      	cmp	r0, #21
 80046fc:	d8f7      	bhi.n	80046ee <_printf_i+0x2a>
 80046fe:	f7fb fd0b 	bl	8000118 <__gnu_thumb1_case_shi>
 8004702:	0016      	.short	0x0016
 8004704:	fff6001f 	.word	0xfff6001f
 8004708:	fff6fff6 	.word	0xfff6fff6
 800470c:	001ffff6 	.word	0x001ffff6
 8004710:	fff6fff6 	.word	0xfff6fff6
 8004714:	fff6fff6 	.word	0xfff6fff6
 8004718:	003600a8 	.word	0x003600a8
 800471c:	fff6009a 	.word	0xfff6009a
 8004720:	00b9fff6 	.word	0x00b9fff6
 8004724:	0036fff6 	.word	0x0036fff6
 8004728:	fff6fff6 	.word	0xfff6fff6
 800472c:	009e      	.short	0x009e
 800472e:	0026      	movs	r6, r4
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	3642      	adds	r6, #66	; 0x42
 8004734:	1d11      	adds	r1, r2, #4
 8004736:	6019      	str	r1, [r3, #0]
 8004738:	6813      	ldr	r3, [r2, #0]
 800473a:	7033      	strb	r3, [r6, #0]
 800473c:	2301      	movs	r3, #1
 800473e:	e0a7      	b.n	8004890 <_printf_i+0x1cc>
 8004740:	6808      	ldr	r0, [r1, #0]
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	1d0a      	adds	r2, r1, #4
 8004746:	0605      	lsls	r5, r0, #24
 8004748:	d50b      	bpl.n	8004762 <_printf_i+0x9e>
 800474a:	680d      	ldr	r5, [r1, #0]
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	2d00      	cmp	r5, #0
 8004750:	da03      	bge.n	800475a <_printf_i+0x96>
 8004752:	232d      	movs	r3, #45	; 0x2d
 8004754:	9a04      	ldr	r2, [sp, #16]
 8004756:	426d      	negs	r5, r5
 8004758:	7013      	strb	r3, [r2, #0]
 800475a:	4b61      	ldr	r3, [pc, #388]	; (80048e0 <_printf_i+0x21c>)
 800475c:	270a      	movs	r7, #10
 800475e:	9303      	str	r3, [sp, #12]
 8004760:	e01b      	b.n	800479a <_printf_i+0xd6>
 8004762:	680d      	ldr	r5, [r1, #0]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	0641      	lsls	r1, r0, #25
 8004768:	d5f1      	bpl.n	800474e <_printf_i+0x8a>
 800476a:	b22d      	sxth	r5, r5
 800476c:	e7ef      	b.n	800474e <_printf_i+0x8a>
 800476e:	680d      	ldr	r5, [r1, #0]
 8004770:	6819      	ldr	r1, [r3, #0]
 8004772:	1d08      	adds	r0, r1, #4
 8004774:	6018      	str	r0, [r3, #0]
 8004776:	062e      	lsls	r6, r5, #24
 8004778:	d501      	bpl.n	800477e <_printf_i+0xba>
 800477a:	680d      	ldr	r5, [r1, #0]
 800477c:	e003      	b.n	8004786 <_printf_i+0xc2>
 800477e:	066d      	lsls	r5, r5, #25
 8004780:	d5fb      	bpl.n	800477a <_printf_i+0xb6>
 8004782:	680d      	ldr	r5, [r1, #0]
 8004784:	b2ad      	uxth	r5, r5
 8004786:	4b56      	ldr	r3, [pc, #344]	; (80048e0 <_printf_i+0x21c>)
 8004788:	2708      	movs	r7, #8
 800478a:	9303      	str	r3, [sp, #12]
 800478c:	2a6f      	cmp	r2, #111	; 0x6f
 800478e:	d000      	beq.n	8004792 <_printf_i+0xce>
 8004790:	3702      	adds	r7, #2
 8004792:	0023      	movs	r3, r4
 8004794:	2200      	movs	r2, #0
 8004796:	3343      	adds	r3, #67	; 0x43
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	60a3      	str	r3, [r4, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	db03      	blt.n	80047aa <_printf_i+0xe6>
 80047a2:	2204      	movs	r2, #4
 80047a4:	6821      	ldr	r1, [r4, #0]
 80047a6:	4391      	bics	r1, r2
 80047a8:	6021      	str	r1, [r4, #0]
 80047aa:	2d00      	cmp	r5, #0
 80047ac:	d102      	bne.n	80047b4 <_printf_i+0xf0>
 80047ae:	9e04      	ldr	r6, [sp, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00c      	beq.n	80047ce <_printf_i+0x10a>
 80047b4:	9e04      	ldr	r6, [sp, #16]
 80047b6:	0028      	movs	r0, r5
 80047b8:	0039      	movs	r1, r7
 80047ba:	f7fb fd3d 	bl	8000238 <__aeabi_uidivmod>
 80047be:	9b03      	ldr	r3, [sp, #12]
 80047c0:	3e01      	subs	r6, #1
 80047c2:	5c5b      	ldrb	r3, [r3, r1]
 80047c4:	7033      	strb	r3, [r6, #0]
 80047c6:	002b      	movs	r3, r5
 80047c8:	0005      	movs	r5, r0
 80047ca:	429f      	cmp	r7, r3
 80047cc:	d9f3      	bls.n	80047b6 <_printf_i+0xf2>
 80047ce:	2f08      	cmp	r7, #8
 80047d0:	d109      	bne.n	80047e6 <_printf_i+0x122>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	07db      	lsls	r3, r3, #31
 80047d6:	d506      	bpl.n	80047e6 <_printf_i+0x122>
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	6922      	ldr	r2, [r4, #16]
 80047dc:	4293      	cmp	r3, r2
 80047de:	dc02      	bgt.n	80047e6 <_printf_i+0x122>
 80047e0:	2330      	movs	r3, #48	; 0x30
 80047e2:	3e01      	subs	r6, #1
 80047e4:	7033      	strb	r3, [r6, #0]
 80047e6:	9b04      	ldr	r3, [sp, #16]
 80047e8:	1b9b      	subs	r3, r3, r6
 80047ea:	6123      	str	r3, [r4, #16]
 80047ec:	9b07      	ldr	r3, [sp, #28]
 80047ee:	0021      	movs	r1, r4
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	9805      	ldr	r0, [sp, #20]
 80047f4:	9b06      	ldr	r3, [sp, #24]
 80047f6:	aa09      	add	r2, sp, #36	; 0x24
 80047f8:	f7ff fef4 	bl	80045e4 <_printf_common>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d14c      	bne.n	800489a <_printf_i+0x1d6>
 8004800:	2001      	movs	r0, #1
 8004802:	4240      	negs	r0, r0
 8004804:	b00b      	add	sp, #44	; 0x2c
 8004806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004808:	3145      	adds	r1, #69	; 0x45
 800480a:	700a      	strb	r2, [r1, #0]
 800480c:	4a34      	ldr	r2, [pc, #208]	; (80048e0 <_printf_i+0x21c>)
 800480e:	9203      	str	r2, [sp, #12]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	6821      	ldr	r1, [r4, #0]
 8004814:	ca20      	ldmia	r2!, {r5}
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	0608      	lsls	r0, r1, #24
 800481a:	d516      	bpl.n	800484a <_printf_i+0x186>
 800481c:	07cb      	lsls	r3, r1, #31
 800481e:	d502      	bpl.n	8004826 <_printf_i+0x162>
 8004820:	2320      	movs	r3, #32
 8004822:	4319      	orrs	r1, r3
 8004824:	6021      	str	r1, [r4, #0]
 8004826:	2710      	movs	r7, #16
 8004828:	2d00      	cmp	r5, #0
 800482a:	d1b2      	bne.n	8004792 <_printf_i+0xce>
 800482c:	2320      	movs	r3, #32
 800482e:	6822      	ldr	r2, [r4, #0]
 8004830:	439a      	bics	r2, r3
 8004832:	6022      	str	r2, [r4, #0]
 8004834:	e7ad      	b.n	8004792 <_printf_i+0xce>
 8004836:	2220      	movs	r2, #32
 8004838:	6809      	ldr	r1, [r1, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	6022      	str	r2, [r4, #0]
 800483e:	0022      	movs	r2, r4
 8004840:	2178      	movs	r1, #120	; 0x78
 8004842:	3245      	adds	r2, #69	; 0x45
 8004844:	7011      	strb	r1, [r2, #0]
 8004846:	4a27      	ldr	r2, [pc, #156]	; (80048e4 <_printf_i+0x220>)
 8004848:	e7e1      	b.n	800480e <_printf_i+0x14a>
 800484a:	0648      	lsls	r0, r1, #25
 800484c:	d5e6      	bpl.n	800481c <_printf_i+0x158>
 800484e:	b2ad      	uxth	r5, r5
 8004850:	e7e4      	b.n	800481c <_printf_i+0x158>
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	680d      	ldr	r5, [r1, #0]
 8004856:	1d10      	adds	r0, r2, #4
 8004858:	6949      	ldr	r1, [r1, #20]
 800485a:	6018      	str	r0, [r3, #0]
 800485c:	6813      	ldr	r3, [r2, #0]
 800485e:	062e      	lsls	r6, r5, #24
 8004860:	d501      	bpl.n	8004866 <_printf_i+0x1a2>
 8004862:	6019      	str	r1, [r3, #0]
 8004864:	e002      	b.n	800486c <_printf_i+0x1a8>
 8004866:	066d      	lsls	r5, r5, #25
 8004868:	d5fb      	bpl.n	8004862 <_printf_i+0x19e>
 800486a:	8019      	strh	r1, [r3, #0]
 800486c:	2300      	movs	r3, #0
 800486e:	9e04      	ldr	r6, [sp, #16]
 8004870:	6123      	str	r3, [r4, #16]
 8004872:	e7bb      	b.n	80047ec <_printf_i+0x128>
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	1d11      	adds	r1, r2, #4
 8004878:	6019      	str	r1, [r3, #0]
 800487a:	6816      	ldr	r6, [r2, #0]
 800487c:	2100      	movs	r1, #0
 800487e:	0030      	movs	r0, r6
 8004880:	6862      	ldr	r2, [r4, #4]
 8004882:	f000 f831 	bl	80048e8 <memchr>
 8004886:	2800      	cmp	r0, #0
 8004888:	d001      	beq.n	800488e <_printf_i+0x1ca>
 800488a:	1b80      	subs	r0, r0, r6
 800488c:	6060      	str	r0, [r4, #4]
 800488e:	6863      	ldr	r3, [r4, #4]
 8004890:	6123      	str	r3, [r4, #16]
 8004892:	2300      	movs	r3, #0
 8004894:	9a04      	ldr	r2, [sp, #16]
 8004896:	7013      	strb	r3, [r2, #0]
 8004898:	e7a8      	b.n	80047ec <_printf_i+0x128>
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	0032      	movs	r2, r6
 800489e:	9906      	ldr	r1, [sp, #24]
 80048a0:	9805      	ldr	r0, [sp, #20]
 80048a2:	9d07      	ldr	r5, [sp, #28]
 80048a4:	47a8      	blx	r5
 80048a6:	1c43      	adds	r3, r0, #1
 80048a8:	d0aa      	beq.n	8004800 <_printf_i+0x13c>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	079b      	lsls	r3, r3, #30
 80048ae:	d415      	bmi.n	80048dc <_printf_i+0x218>
 80048b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b2:	68e0      	ldr	r0, [r4, #12]
 80048b4:	4298      	cmp	r0, r3
 80048b6:	daa5      	bge.n	8004804 <_printf_i+0x140>
 80048b8:	0018      	movs	r0, r3
 80048ba:	e7a3      	b.n	8004804 <_printf_i+0x140>
 80048bc:	0022      	movs	r2, r4
 80048be:	2301      	movs	r3, #1
 80048c0:	9906      	ldr	r1, [sp, #24]
 80048c2:	9805      	ldr	r0, [sp, #20]
 80048c4:	9e07      	ldr	r6, [sp, #28]
 80048c6:	3219      	adds	r2, #25
 80048c8:	47b0      	blx	r6
 80048ca:	1c43      	adds	r3, r0, #1
 80048cc:	d098      	beq.n	8004800 <_printf_i+0x13c>
 80048ce:	3501      	adds	r5, #1
 80048d0:	68e3      	ldr	r3, [r4, #12]
 80048d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	42ab      	cmp	r3, r5
 80048d8:	dcf0      	bgt.n	80048bc <_printf_i+0x1f8>
 80048da:	e7e9      	b.n	80048b0 <_printf_i+0x1ec>
 80048dc:	2500      	movs	r5, #0
 80048de:	e7f7      	b.n	80048d0 <_printf_i+0x20c>
 80048e0:	08004c98 	.word	0x08004c98
 80048e4:	08004ca9 	.word	0x08004ca9

080048e8 <memchr>:
 80048e8:	b2c9      	uxtb	r1, r1
 80048ea:	1882      	adds	r2, r0, r2
 80048ec:	4290      	cmp	r0, r2
 80048ee:	d101      	bne.n	80048f4 <memchr+0xc>
 80048f0:	2000      	movs	r0, #0
 80048f2:	4770      	bx	lr
 80048f4:	7803      	ldrb	r3, [r0, #0]
 80048f6:	428b      	cmp	r3, r1
 80048f8:	d0fb      	beq.n	80048f2 <memchr+0xa>
 80048fa:	3001      	adds	r0, #1
 80048fc:	e7f6      	b.n	80048ec <memchr+0x4>

080048fe <memmove>:
 80048fe:	b510      	push	{r4, lr}
 8004900:	4288      	cmp	r0, r1
 8004902:	d902      	bls.n	800490a <memmove+0xc>
 8004904:	188b      	adds	r3, r1, r2
 8004906:	4298      	cmp	r0, r3
 8004908:	d303      	bcc.n	8004912 <memmove+0x14>
 800490a:	2300      	movs	r3, #0
 800490c:	e007      	b.n	800491e <memmove+0x20>
 800490e:	5c8b      	ldrb	r3, [r1, r2]
 8004910:	5483      	strb	r3, [r0, r2]
 8004912:	3a01      	subs	r2, #1
 8004914:	d2fb      	bcs.n	800490e <memmove+0x10>
 8004916:	bd10      	pop	{r4, pc}
 8004918:	5ccc      	ldrb	r4, [r1, r3]
 800491a:	54c4      	strb	r4, [r0, r3]
 800491c:	3301      	adds	r3, #1
 800491e:	429a      	cmp	r2, r3
 8004920:	d1fa      	bne.n	8004918 <memmove+0x1a>
 8004922:	e7f8      	b.n	8004916 <memmove+0x18>

08004924 <_free_r>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	0005      	movs	r5, r0
 8004928:	2900      	cmp	r1, #0
 800492a:	d010      	beq.n	800494e <_free_r+0x2a>
 800492c:	1f0c      	subs	r4, r1, #4
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	da00      	bge.n	8004936 <_free_r+0x12>
 8004934:	18e4      	adds	r4, r4, r3
 8004936:	0028      	movs	r0, r5
 8004938:	f000 f918 	bl	8004b6c <__malloc_lock>
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <_free_r+0x90>)
 800493e:	6813      	ldr	r3, [r2, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <_free_r+0x2c>
 8004944:	6063      	str	r3, [r4, #4]
 8004946:	6014      	str	r4, [r2, #0]
 8004948:	0028      	movs	r0, r5
 800494a:	f000 f917 	bl	8004b7c <__malloc_unlock>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	42a3      	cmp	r3, r4
 8004952:	d908      	bls.n	8004966 <_free_r+0x42>
 8004954:	6821      	ldr	r1, [r4, #0]
 8004956:	1860      	adds	r0, r4, r1
 8004958:	4283      	cmp	r3, r0
 800495a:	d1f3      	bne.n	8004944 <_free_r+0x20>
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	1841      	adds	r1, r0, r1
 8004962:	6021      	str	r1, [r4, #0]
 8004964:	e7ee      	b.n	8004944 <_free_r+0x20>
 8004966:	001a      	movs	r2, r3
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <_free_r+0x4e>
 800496e:	42a3      	cmp	r3, r4
 8004970:	d9f9      	bls.n	8004966 <_free_r+0x42>
 8004972:	6811      	ldr	r1, [r2, #0]
 8004974:	1850      	adds	r0, r2, r1
 8004976:	42a0      	cmp	r0, r4
 8004978:	d10b      	bne.n	8004992 <_free_r+0x6e>
 800497a:	6820      	ldr	r0, [r4, #0]
 800497c:	1809      	adds	r1, r1, r0
 800497e:	1850      	adds	r0, r2, r1
 8004980:	6011      	str	r1, [r2, #0]
 8004982:	4283      	cmp	r3, r0
 8004984:	d1e0      	bne.n	8004948 <_free_r+0x24>
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	1841      	adds	r1, r0, r1
 800498c:	6011      	str	r1, [r2, #0]
 800498e:	6053      	str	r3, [r2, #4]
 8004990:	e7da      	b.n	8004948 <_free_r+0x24>
 8004992:	42a0      	cmp	r0, r4
 8004994:	d902      	bls.n	800499c <_free_r+0x78>
 8004996:	230c      	movs	r3, #12
 8004998:	602b      	str	r3, [r5, #0]
 800499a:	e7d5      	b.n	8004948 <_free_r+0x24>
 800499c:	6821      	ldr	r1, [r4, #0]
 800499e:	1860      	adds	r0, r4, r1
 80049a0:	4283      	cmp	r3, r0
 80049a2:	d103      	bne.n	80049ac <_free_r+0x88>
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	1841      	adds	r1, r0, r1
 80049aa:	6021      	str	r1, [r4, #0]
 80049ac:	6063      	str	r3, [r4, #4]
 80049ae:	6054      	str	r4, [r2, #4]
 80049b0:	e7ca      	b.n	8004948 <_free_r+0x24>
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	200005a8 	.word	0x200005a8

080049b8 <sbrk_aligned>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	4e0f      	ldr	r6, [pc, #60]	; (80049f8 <sbrk_aligned+0x40>)
 80049bc:	000d      	movs	r5, r1
 80049be:	6831      	ldr	r1, [r6, #0]
 80049c0:	0004      	movs	r4, r0
 80049c2:	2900      	cmp	r1, #0
 80049c4:	d102      	bne.n	80049cc <sbrk_aligned+0x14>
 80049c6:	f000 f8bf 	bl	8004b48 <_sbrk_r>
 80049ca:	6030      	str	r0, [r6, #0]
 80049cc:	0029      	movs	r1, r5
 80049ce:	0020      	movs	r0, r4
 80049d0:	f000 f8ba 	bl	8004b48 <_sbrk_r>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	d00a      	beq.n	80049ee <sbrk_aligned+0x36>
 80049d8:	2303      	movs	r3, #3
 80049da:	1cc5      	adds	r5, r0, #3
 80049dc:	439d      	bics	r5, r3
 80049de:	42a8      	cmp	r0, r5
 80049e0:	d007      	beq.n	80049f2 <sbrk_aligned+0x3a>
 80049e2:	1a29      	subs	r1, r5, r0
 80049e4:	0020      	movs	r0, r4
 80049e6:	f000 f8af 	bl	8004b48 <_sbrk_r>
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	d101      	bne.n	80049f2 <sbrk_aligned+0x3a>
 80049ee:	2501      	movs	r5, #1
 80049f0:	426d      	negs	r5, r5
 80049f2:	0028      	movs	r0, r5
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	200005ac 	.word	0x200005ac

080049fc <_malloc_r>:
 80049fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049fe:	2203      	movs	r2, #3
 8004a00:	1ccb      	adds	r3, r1, #3
 8004a02:	4393      	bics	r3, r2
 8004a04:	3308      	adds	r3, #8
 8004a06:	0006      	movs	r6, r0
 8004a08:	001f      	movs	r7, r3
 8004a0a:	2b0c      	cmp	r3, #12
 8004a0c:	d232      	bcs.n	8004a74 <_malloc_r+0x78>
 8004a0e:	270c      	movs	r7, #12
 8004a10:	42b9      	cmp	r1, r7
 8004a12:	d831      	bhi.n	8004a78 <_malloc_r+0x7c>
 8004a14:	0030      	movs	r0, r6
 8004a16:	f000 f8a9 	bl	8004b6c <__malloc_lock>
 8004a1a:	4d32      	ldr	r5, [pc, #200]	; (8004ae4 <_malloc_r+0xe8>)
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	001c      	movs	r4, r3
 8004a20:	2c00      	cmp	r4, #0
 8004a22:	d12e      	bne.n	8004a82 <_malloc_r+0x86>
 8004a24:	0039      	movs	r1, r7
 8004a26:	0030      	movs	r0, r6
 8004a28:	f7ff ffc6 	bl	80049b8 <sbrk_aligned>
 8004a2c:	0004      	movs	r4, r0
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	d11e      	bne.n	8004a70 <_malloc_r+0x74>
 8004a32:	682c      	ldr	r4, [r5, #0]
 8004a34:	0025      	movs	r5, r4
 8004a36:	2d00      	cmp	r5, #0
 8004a38:	d14a      	bne.n	8004ad0 <_malloc_r+0xd4>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	0029      	movs	r1, r5
 8004a3e:	18e3      	adds	r3, r4, r3
 8004a40:	0030      	movs	r0, r6
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	f000 f880 	bl	8004b48 <_sbrk_r>
 8004a48:	9b01      	ldr	r3, [sp, #4]
 8004a4a:	4283      	cmp	r3, r0
 8004a4c:	d143      	bne.n	8004ad6 <_malloc_r+0xda>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	3703      	adds	r7, #3
 8004a52:	1aff      	subs	r7, r7, r3
 8004a54:	2303      	movs	r3, #3
 8004a56:	439f      	bics	r7, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	2f0c      	cmp	r7, #12
 8004a5c:	d200      	bcs.n	8004a60 <_malloc_r+0x64>
 8004a5e:	270c      	movs	r7, #12
 8004a60:	0039      	movs	r1, r7
 8004a62:	0030      	movs	r0, r6
 8004a64:	f7ff ffa8 	bl	80049b8 <sbrk_aligned>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d034      	beq.n	8004ad6 <_malloc_r+0xda>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	19df      	adds	r7, r3, r7
 8004a70:	6027      	str	r7, [r4, #0]
 8004a72:	e013      	b.n	8004a9c <_malloc_r+0xa0>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	dacb      	bge.n	8004a10 <_malloc_r+0x14>
 8004a78:	230c      	movs	r3, #12
 8004a7a:	2500      	movs	r5, #0
 8004a7c:	6033      	str	r3, [r6, #0]
 8004a7e:	0028      	movs	r0, r5
 8004a80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a82:	6822      	ldr	r2, [r4, #0]
 8004a84:	1bd1      	subs	r1, r2, r7
 8004a86:	d420      	bmi.n	8004aca <_malloc_r+0xce>
 8004a88:	290b      	cmp	r1, #11
 8004a8a:	d917      	bls.n	8004abc <_malloc_r+0xc0>
 8004a8c:	19e2      	adds	r2, r4, r7
 8004a8e:	6027      	str	r7, [r4, #0]
 8004a90:	42a3      	cmp	r3, r4
 8004a92:	d111      	bne.n	8004ab8 <_malloc_r+0xbc>
 8004a94:	602a      	str	r2, [r5, #0]
 8004a96:	6863      	ldr	r3, [r4, #4]
 8004a98:	6011      	str	r1, [r2, #0]
 8004a9a:	6053      	str	r3, [r2, #4]
 8004a9c:	0030      	movs	r0, r6
 8004a9e:	0025      	movs	r5, r4
 8004aa0:	f000 f86c 	bl	8004b7c <__malloc_unlock>
 8004aa4:	2207      	movs	r2, #7
 8004aa6:	350b      	adds	r5, #11
 8004aa8:	1d23      	adds	r3, r4, #4
 8004aaa:	4395      	bics	r5, r2
 8004aac:	1aea      	subs	r2, r5, r3
 8004aae:	429d      	cmp	r5, r3
 8004ab0:	d0e5      	beq.n	8004a7e <_malloc_r+0x82>
 8004ab2:	1b5b      	subs	r3, r3, r5
 8004ab4:	50a3      	str	r3, [r4, r2]
 8004ab6:	e7e2      	b.n	8004a7e <_malloc_r+0x82>
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	e7ec      	b.n	8004a96 <_malloc_r+0x9a>
 8004abc:	6862      	ldr	r2, [r4, #4]
 8004abe:	42a3      	cmp	r3, r4
 8004ac0:	d101      	bne.n	8004ac6 <_malloc_r+0xca>
 8004ac2:	602a      	str	r2, [r5, #0]
 8004ac4:	e7ea      	b.n	8004a9c <_malloc_r+0xa0>
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	e7e8      	b.n	8004a9c <_malloc_r+0xa0>
 8004aca:	0023      	movs	r3, r4
 8004acc:	6864      	ldr	r4, [r4, #4]
 8004ace:	e7a7      	b.n	8004a20 <_malloc_r+0x24>
 8004ad0:	002c      	movs	r4, r5
 8004ad2:	686d      	ldr	r5, [r5, #4]
 8004ad4:	e7af      	b.n	8004a36 <_malloc_r+0x3a>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	0030      	movs	r0, r6
 8004ada:	6033      	str	r3, [r6, #0]
 8004adc:	f000 f84e 	bl	8004b7c <__malloc_unlock>
 8004ae0:	e7cd      	b.n	8004a7e <_malloc_r+0x82>
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	200005a8 	.word	0x200005a8

08004ae8 <_realloc_r>:
 8004ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aea:	0007      	movs	r7, r0
 8004aec:	000e      	movs	r6, r1
 8004aee:	0014      	movs	r4, r2
 8004af0:	2900      	cmp	r1, #0
 8004af2:	d105      	bne.n	8004b00 <_realloc_r+0x18>
 8004af4:	0011      	movs	r1, r2
 8004af6:	f7ff ff81 	bl	80049fc <_malloc_r>
 8004afa:	0005      	movs	r5, r0
 8004afc:	0028      	movs	r0, r5
 8004afe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b00:	2a00      	cmp	r2, #0
 8004b02:	d103      	bne.n	8004b0c <_realloc_r+0x24>
 8004b04:	f7ff ff0e 	bl	8004924 <_free_r>
 8004b08:	0025      	movs	r5, r4
 8004b0a:	e7f7      	b.n	8004afc <_realloc_r+0x14>
 8004b0c:	f000 f83e 	bl	8004b8c <_malloc_usable_size_r>
 8004b10:	9001      	str	r0, [sp, #4]
 8004b12:	4284      	cmp	r4, r0
 8004b14:	d803      	bhi.n	8004b1e <_realloc_r+0x36>
 8004b16:	0035      	movs	r5, r6
 8004b18:	0843      	lsrs	r3, r0, #1
 8004b1a:	42a3      	cmp	r3, r4
 8004b1c:	d3ee      	bcc.n	8004afc <_realloc_r+0x14>
 8004b1e:	0021      	movs	r1, r4
 8004b20:	0038      	movs	r0, r7
 8004b22:	f7ff ff6b 	bl	80049fc <_malloc_r>
 8004b26:	1e05      	subs	r5, r0, #0
 8004b28:	d0e8      	beq.n	8004afc <_realloc_r+0x14>
 8004b2a:	9b01      	ldr	r3, [sp, #4]
 8004b2c:	0022      	movs	r2, r4
 8004b2e:	429c      	cmp	r4, r3
 8004b30:	d900      	bls.n	8004b34 <_realloc_r+0x4c>
 8004b32:	001a      	movs	r2, r3
 8004b34:	0031      	movs	r1, r6
 8004b36:	0028      	movs	r0, r5
 8004b38:	f7ff fbc0 	bl	80042bc <memcpy>
 8004b3c:	0031      	movs	r1, r6
 8004b3e:	0038      	movs	r0, r7
 8004b40:	f7ff fef0 	bl	8004924 <_free_r>
 8004b44:	e7da      	b.n	8004afc <_realloc_r+0x14>
	...

08004b48 <_sbrk_r>:
 8004b48:	2300      	movs	r3, #0
 8004b4a:	b570      	push	{r4, r5, r6, lr}
 8004b4c:	4d06      	ldr	r5, [pc, #24]	; (8004b68 <_sbrk_r+0x20>)
 8004b4e:	0004      	movs	r4, r0
 8004b50:	0008      	movs	r0, r1
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	f7fb ff14 	bl	8000980 <_sbrk>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d103      	bne.n	8004b64 <_sbrk_r+0x1c>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d000      	beq.n	8004b64 <_sbrk_r+0x1c>
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	bd70      	pop	{r4, r5, r6, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	200005b0 	.word	0x200005b0

08004b6c <__malloc_lock>:
 8004b6c:	b510      	push	{r4, lr}
 8004b6e:	4802      	ldr	r0, [pc, #8]	; (8004b78 <__malloc_lock+0xc>)
 8004b70:	f000 f814 	bl	8004b9c <__retarget_lock_acquire_recursive>
 8004b74:	bd10      	pop	{r4, pc}
 8004b76:	46c0      	nop			; (mov r8, r8)
 8004b78:	200005b4 	.word	0x200005b4

08004b7c <__malloc_unlock>:
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	4802      	ldr	r0, [pc, #8]	; (8004b88 <__malloc_unlock+0xc>)
 8004b80:	f000 f80d 	bl	8004b9e <__retarget_lock_release_recursive>
 8004b84:	bd10      	pop	{r4, pc}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	200005b4 	.word	0x200005b4

08004b8c <_malloc_usable_size_r>:
 8004b8c:	1f0b      	subs	r3, r1, #4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	1f18      	subs	r0, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da01      	bge.n	8004b9a <_malloc_usable_size_r+0xe>
 8004b96:	580b      	ldr	r3, [r1, r0]
 8004b98:	18c0      	adds	r0, r0, r3
 8004b9a:	4770      	bx	lr

08004b9c <__retarget_lock_acquire_recursive>:
 8004b9c:	4770      	bx	lr

08004b9e <__retarget_lock_release_recursive>:
 8004b9e:	4770      	bx	lr

08004ba0 <_init>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr

08004bac <_fini>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb2:	bc08      	pop	{r3}
 8004bb4:	469e      	mov	lr, r3
 8004bb6:	4770      	bx	lr
