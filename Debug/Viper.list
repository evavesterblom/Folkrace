
Viper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005280  08005280  00020178  2**0
                  CONTENTS
  4 .ARM          00000000  08005280  08005280  00020178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005280  08005280  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005284  08005284  00015284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08005288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000178  08005400  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08005400  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129f2  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002907  00000000  00000000  00032b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  000354a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00036578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012259  00000000  00000000  00037518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015640  00000000  00000000  00049771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068a95  00000000  00000000  0005edb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7846  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000403c  00000000  00000000  000c7898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000178 	.word	0x20000178
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005174 	.word	0x08005174

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000017c 	.word	0x2000017c
 8000104:	08005174 	.word	0x08005174

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b08b      	sub	sp, #44	; 0x2c
 8000248:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024a:	2414      	movs	r4, #20
 800024c:	193b      	adds	r3, r7, r4
 800024e:	0018      	movs	r0, r3
 8000250:	2314      	movs	r3, #20
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f004 fb24 	bl	80048a2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025a:	4b4d      	ldr	r3, [pc, #308]	; (8000390 <MX_GPIO_Init+0x14c>)
 800025c:	695a      	ldr	r2, [r3, #20]
 800025e:	4b4c      	ldr	r3, [pc, #304]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000260:	2180      	movs	r1, #128	; 0x80
 8000262:	0309      	lsls	r1, r1, #12
 8000264:	430a      	orrs	r2, r1
 8000266:	615a      	str	r2, [r3, #20]
 8000268:	4b49      	ldr	r3, [pc, #292]	; (8000390 <MX_GPIO_Init+0x14c>)
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	031b      	lsls	r3, r3, #12
 8000270:	4013      	ands	r3, r2
 8000272:	613b      	str	r3, [r7, #16]
 8000274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000276:	4b46      	ldr	r3, [pc, #280]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000278:	695a      	ldr	r2, [r3, #20]
 800027a:	4b45      	ldr	r3, [pc, #276]	; (8000390 <MX_GPIO_Init+0x14c>)
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	03c9      	lsls	r1, r1, #15
 8000280:	430a      	orrs	r2, r1
 8000282:	615a      	str	r2, [r3, #20]
 8000284:	4b42      	ldr	r3, [pc, #264]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000286:	695a      	ldr	r2, [r3, #20]
 8000288:	2380      	movs	r3, #128	; 0x80
 800028a:	03db      	lsls	r3, r3, #15
 800028c:	4013      	ands	r3, r2
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000292:	4b3f      	ldr	r3, [pc, #252]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000294:	695a      	ldr	r2, [r3, #20]
 8000296:	4b3e      	ldr	r3, [pc, #248]	; (8000390 <MX_GPIO_Init+0x14c>)
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	0289      	lsls	r1, r1, #10
 800029c:	430a      	orrs	r2, r1
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	4b3b      	ldr	r3, [pc, #236]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002a2:	695a      	ldr	r2, [r3, #20]
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	029b      	lsls	r3, r3, #10
 80002a8:	4013      	ands	r3, r2
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b38      	ldr	r3, [pc, #224]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002b0:	695a      	ldr	r2, [r3, #20]
 80002b2:	4b37      	ldr	r3, [pc, #220]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002b4:	2180      	movs	r1, #128	; 0x80
 80002b6:	02c9      	lsls	r1, r1, #11
 80002b8:	430a      	orrs	r2, r1
 80002ba:	615a      	str	r2, [r3, #20]
 80002bc:	4b34      	ldr	r3, [pc, #208]	; (8000390 <MX_GPIO_Init+0x14c>)
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	02db      	lsls	r3, r3, #11
 80002c4:	4013      	ands	r3, r2
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_DIR_1_Pin|MOTOR_DIR_2_Pin, GPIO_PIN_RESET);
 80002ca:	4b32      	ldr	r3, [pc, #200]	; (8000394 <MX_GPIO_Init+0x150>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	2103      	movs	r1, #3
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 faf3 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	2200      	movs	r2, #0
 80002dc:	2120      	movs	r1, #32
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 faec 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_1_Pin|TOF_2_Pin|TOF_3_Pin, GPIO_PIN_RESET);
 80002e4:	23e0      	movs	r3, #224	; 0xe0
 80002e6:	021b      	lsls	r3, r3, #8
 80002e8:	482b      	ldr	r0, [pc, #172]	; (8000398 <MX_GPIO_Init+0x154>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	0019      	movs	r1, r3
 80002ee:	f001 fae5 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	0192      	lsls	r2, r2, #6
 80002f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2284      	movs	r2, #132	; 0x84
 80002fe:	0392      	lsls	r2, r2, #14
 8000300:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	193b      	adds	r3, r7, r4
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000308:	193b      	adds	r3, r7, r4
 800030a:	4a22      	ldr	r2, [pc, #136]	; (8000394 <MX_GPIO_Init+0x150>)
 800030c:	0019      	movs	r1, r3
 800030e:	0010      	movs	r0, r2
 8000310:	f001 f964 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_DIR_1_Pin|MOTOR_DIR_2_Pin;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2203      	movs	r2, #3
 8000318:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2201      	movs	r2, #1
 800031e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	193b      	adds	r3, r7, r4
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032c:	193b      	adds	r3, r7, r4
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <MX_GPIO_Init+0x150>)
 8000330:	0019      	movs	r1, r3
 8000332:	0010      	movs	r0, r2
 8000334:	f001 f952 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2220      	movs	r2, #32
 800033c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	193b      	adds	r3, r7, r4
 8000340:	2201      	movs	r2, #1
 8000342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	193b      	adds	r3, r7, r4
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034a:	193b      	adds	r3, r7, r4
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000350:	193a      	adds	r2, r7, r4
 8000352:	2390      	movs	r3, #144	; 0x90
 8000354:	05db      	lsls	r3, r3, #23
 8000356:	0011      	movs	r1, r2
 8000358:	0018      	movs	r0, r3
 800035a:	f001 f93f 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOF_1_Pin|TOF_2_Pin|TOF_3_Pin;
 800035e:	0021      	movs	r1, r4
 8000360:	187b      	adds	r3, r7, r1
 8000362:	22e0      	movs	r2, #224	; 0xe0
 8000364:	0212      	lsls	r2, r2, #8
 8000366:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2201      	movs	r2, #1
 800036c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037a:	187b      	adds	r3, r7, r1
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <MX_GPIO_Init+0x154>)
 800037e:	0019      	movs	r1, r3
 8000380:	0010      	movs	r0, r2
 8000382:	f001 f92b 	bl	80015dc <HAL_GPIO_Init>

}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b00b      	add	sp, #44	; 0x2c
 800038c:	bd90      	pop	{r4, r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	40021000 	.word	0x40021000
 8000394:	48000800 	.word	0x48000800
 8000398:	48000400 	.word	0x48000400

0800039c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_I2C1_Init+0x74>)
 80003a2:	4a1c      	ldr	r2, [pc, #112]	; (8000414 <MX_I2C1_Init+0x78>)
 80003a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <MX_I2C1_Init+0x74>)
 80003a8:	4a1b      	ldr	r2, [pc, #108]	; (8000418 <MX_I2C1_Init+0x7c>)
 80003aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003b2:	4b17      	ldr	r3, [pc, #92]	; (8000410 <MX_I2C1_Init+0x74>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_I2C1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_I2C1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_I2C1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_I2C1_Init+0x74>)
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 fa8d 	bl	80018f8 <HAL_I2C_Init>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003e2:	f000 fd57 	bl	8000e94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <MX_I2C1_Init+0x74>)
 80003e8:	2100      	movs	r1, #0
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 ff22 	bl	8002234 <HAL_I2CEx_ConfigAnalogFilter>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003f4:	f000 fd4e 	bl	8000e94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <MX_I2C1_Init+0x74>)
 80003fa:	2100      	movs	r1, #0
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 ff65 	bl	80022cc <HAL_I2CEx_ConfigDigitalFilter>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000406:	f000 fd45 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000194 	.word	0x20000194
 8000414:	40005400 	.word	0x40005400
 8000418:	2000090e 	.word	0x2000090e

0800041c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	2414      	movs	r4, #20
 8000426:	193b      	adds	r3, r7, r4
 8000428:	0018      	movs	r0, r3
 800042a:	2314      	movs	r3, #20
 800042c:	001a      	movs	r2, r3
 800042e:	2100      	movs	r1, #0
 8000430:	f004 fa37 	bl	80048a2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <HAL_I2C_MspInit+0x90>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d132      	bne.n	80004a4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	02c9      	lsls	r1, r1, #11
 8000448:	430a      	orrs	r2, r1
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	02db      	lsls	r3, r3, #11
 8000454:	4013      	ands	r3, r2
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_CLOCK_Pin|TOF_DATA_Pin;
 800045a:	193b      	adds	r3, r7, r4
 800045c:	22c0      	movs	r2, #192	; 0xc0
 800045e:	0092      	lsls	r2, r2, #2
 8000460:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000462:	0021      	movs	r1, r4
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2212      	movs	r2, #18
 8000468:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2203      	movs	r2, #3
 8000474:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2201      	movs	r2, #1
 800047a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047c:	187b      	adds	r3, r7, r1
 800047e:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <HAL_I2C_MspInit+0x98>)
 8000480:	0019      	movs	r1, r3
 8000482:	0010      	movs	r0, r2
 8000484:	f001 f8aa 	bl	80015dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 800048a:	69da      	ldr	r2, [r3, #28]
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	0389      	lsls	r1, r1, #14
 8000492:	430a      	orrs	r2, r1
 8000494:	61da      	str	r2, [r3, #28]
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_I2C_MspInit+0x94>)
 8000498:	69da      	ldr	r2, [r3, #28]
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	039b      	lsls	r3, r3, #14
 800049e:	4013      	ands	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b00b      	add	sp, #44	; 0x2c
 80004aa:	bd90      	pop	{r4, r7, pc}
 80004ac:	40005400 	.word	0x40005400
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000400 	.word	0x48000400

080004b8 <init>:
int right_dir = 1;

// servo angle
int servo = 1450;

void init() {
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af02      	add	r7, sp, #8
	// Motor PWM signals
	HAL_TIM_Base_Start(&htim3);
 80004be:	4b21      	ldr	r3, [pc, #132]	; (8000544 <init+0x8c>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 fcd9 	bl	8002e78 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004c6:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <init+0x8c>)
 80004c8:	2100      	movs	r1, #0
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fd68 	bl	8002fa0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <init+0x8c>)
 80004d2:	2104      	movs	r1, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 fd63 	bl	8002fa0 <HAL_TIM_PWM_Start>
	// Servo PWM Signal
	HAL_TIM_Base_Start(&htim14);
 80004da:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <init+0x90>)
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fccb 	bl	8002e78 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80004e2:	4b19      	ldr	r3, [pc, #100]	; (8000548 <init+0x90>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	0018      	movs	r0, r3
 80004e8:	f002 fd5a 	bl	8002fa0 <HAL_TIM_PWM_Start>

	TOF_InitStruct(&sensor1, &hi2c1, 0x32, TOF_1_GPIO_Port, TOF_1_Pin);
 80004ec:	4a17      	ldr	r2, [pc, #92]	; (800054c <init+0x94>)
 80004ee:	4918      	ldr	r1, [pc, #96]	; (8000550 <init+0x98>)
 80004f0:	4818      	ldr	r0, [pc, #96]	; (8000554 <init+0x9c>)
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	019b      	lsls	r3, r3, #6
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	0013      	movs	r3, r2
 80004fa:	2232      	movs	r2, #50	; 0x32
 80004fc:	f004 f8aa 	bl	8004654 <TOF_InitStruct>
	TOF_InitStruct(&sensor2, &hi2c1, 0x34, TOF_2_GPIO_Port, TOF_2_Pin);
 8000500:	4a12      	ldr	r2, [pc, #72]	; (800054c <init+0x94>)
 8000502:	4913      	ldr	r1, [pc, #76]	; (8000550 <init+0x98>)
 8000504:	4814      	ldr	r0, [pc, #80]	; (8000558 <init+0xa0>)
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	01db      	lsls	r3, r3, #7
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	0013      	movs	r3, r2
 800050e:	2234      	movs	r2, #52	; 0x34
 8000510:	f004 f8a0 	bl	8004654 <TOF_InitStruct>
	TOF_InitStruct(&sensor3, &hi2c1, 0x36, TOF_3_GPIO_Port, TOF_3_Pin);
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <init+0x94>)
 8000516:	490e      	ldr	r1, [pc, #56]	; (8000550 <init+0x98>)
 8000518:	4810      	ldr	r0, [pc, #64]	; (800055c <init+0xa4>)
 800051a:	2380      	movs	r3, #128	; 0x80
 800051c:	021b      	lsls	r3, r3, #8
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	0013      	movs	r3, r2
 8000522:	2236      	movs	r2, #54	; 0x36
 8000524:	f004 f896 	bl	8004654 <TOF_InitStruct>

	VL53L1X* sensors[] = {&sensor1, &sensor2, &sensor3};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <init+0xa8>)
 800052c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800052e:	c313      	stmia	r3!, {r0, r1, r4}
	TOF_BootMultipleSensors(sensors, 3);
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2103      	movs	r1, #3
 8000534:	0018      	movs	r0, r3
 8000536:	f004 f8d5 	bl	80046e4 <TOF_BootMultipleSensors>

}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b005      	add	sp, #20
 8000540:	bd90      	pop	{r4, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	2000021c 	.word	0x2000021c
 8000548:	20000264 	.word	0x20000264
 800054c:	48000400 	.word	0x48000400
 8000550:	20000194 	.word	0x20000194
 8000554:	200001e0 	.word	0x200001e0
 8000558:	200001f0 	.word	0x200001f0
 800055c:	20000200 	.word	0x20000200
 8000560:	0800518c 	.word	0x0800518c

08000564 <correct>:

void correct() {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	if (servo > SERVO_MAX_VALUE) {
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <correct+0x5c>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <correct+0x60>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	429a      	cmp	r2, r3
 8000572:	dd03      	ble.n	800057c <correct+0x18>
		servo = SERVO_MAX_VALUE;
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <correct+0x60>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <correct+0x5c>)
 800057a:	601a      	str	r2, [r3, #0]
	}

	if (servo < SERVO_MIN_VALUE) {
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <correct+0x5c>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <correct+0x64>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	429a      	cmp	r2, r3
 8000586:	da03      	bge.n	8000590 <correct+0x2c>
		servo = SERVO_MIN_VALUE;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <correct+0x64>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <correct+0x5c>)
 800058e:	601a      	str	r2, [r3, #0]
	}

	if (left_speed > 1000) {
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <correct+0x68>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	23fa      	movs	r3, #250	; 0xfa
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	429a      	cmp	r2, r3
 800059a:	dd03      	ble.n	80005a4 <correct+0x40>
		left_speed = 1000;
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <correct+0x68>)
 800059e:	22fa      	movs	r2, #250	; 0xfa
 80005a0:	0092      	lsls	r2, r2, #2
 80005a2:	601a      	str	r2, [r3, #0]
	}

	if (right_speed > 1000) {
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <correct+0x6c>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	23fa      	movs	r3, #250	; 0xfa
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dd03      	ble.n	80005b8 <correct+0x54>
		right_speed = 1000;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <correct+0x6c>)
 80005b2:	22fa      	movs	r2, #250	; 0xfa
 80005b4:	0092      	lsls	r2, r2, #2
 80005b6:	601a      	str	r2, [r3, #0]
	}

}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	200000e4 	.word	0x200000e4
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000000 	.word	0x20000000
 80005cc:	200000d4 	.word	0x200000d4
 80005d0:	200000d8 	.word	0x200000d8

080005d4 <drive_by_servo>:
int d4 = 550;
int d5 = 700;
int d6 = 800;
int d7 = 900;
int d8 = 1000;
void drive_by_servo(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	left_speed = 400;
 80005d8:	4bc0      	ldr	r3, [pc, #768]	; (80008dc <drive_by_servo+0x308>)
 80005da:	22c8      	movs	r2, #200	; 0xc8
 80005dc:	0052      	lsls	r2, r2, #1
 80005de:	601a      	str	r2, [r3, #0]
	right_speed = 550;
 80005e0:	4bbf      	ldr	r3, [pc, #764]	; (80008e0 <drive_by_servo+0x30c>)
 80005e2:	4ac0      	ldr	r2, [pc, #768]	; (80008e4 <drive_by_servo+0x310>)
 80005e4:	601a      	str	r2, [r3, #0]
	left_dir = DRIVE;
 80005e6:	4bc0      	ldr	r3, [pc, #768]	; (80008e8 <drive_by_servo+0x314>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	601a      	str	r2, [r3, #0]
	right_dir = DRIVE;
 80005ec:	4bbf      	ldr	r3, [pc, #764]	; (80008ec <drive_by_servo+0x318>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
	if ((dist1 < d1 && dist3 < d1) || dist2 < d1) {
 80005f2:	4bbf      	ldr	r3, [pc, #764]	; (80008f0 <drive_by_servo+0x31c>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	001a      	movs	r2, r3
 80005f8:	4bbe      	ldr	r3, [pc, #760]	; (80008f4 <drive_by_servo+0x320>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	da06      	bge.n	800060e <drive_by_servo+0x3a>
 8000600:	4bbd      	ldr	r3, [pc, #756]	; (80008f8 <drive_by_servo+0x324>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	001a      	movs	r2, r3
 8000606:	4bbb      	ldr	r3, [pc, #748]	; (80008f4 <drive_by_servo+0x320>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	db06      	blt.n	800061c <drive_by_servo+0x48>
 800060e:	4bbb      	ldr	r3, [pc, #748]	; (80008fc <drive_by_servo+0x328>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	001a      	movs	r2, r3
 8000614:	4bb7      	ldr	r3, [pc, #732]	; (80008f4 <drive_by_servo+0x320>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	429a      	cmp	r2, r3
 800061a:	da0b      	bge.n	8000634 <drive_by_servo+0x60>
		left_dir = REVERSE;
 800061c:	4bb2      	ldr	r3, [pc, #712]	; (80008e8 <drive_by_servo+0x314>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
		right_dir = REVERSE;
 8000622:	4bb2      	ldr	r3, [pc, #712]	; (80008ec <drive_by_servo+0x318>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
		servo = SERVO_MIN_VALUE;
 8000628:	4bb5      	ldr	r3, [pc, #724]	; (8000900 <drive_by_servo+0x32c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4bb5      	ldr	r3, [pc, #724]	; (8000904 <drive_by_servo+0x330>)
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	f000 fb1a 	bl	8000c68 <drive_by_servo+0x694>
	} else if (dist1 < d1 || dist3 < d1 || dist2 < d1) {
 8000634:	4bae      	ldr	r3, [pc, #696]	; (80008f0 <drive_by_servo+0x31c>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	001a      	movs	r2, r3
 800063a:	4bae      	ldr	r3, [pc, #696]	; (80008f4 <drive_by_servo+0x320>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	db0d      	blt.n	800065e <drive_by_servo+0x8a>
 8000642:	4bad      	ldr	r3, [pc, #692]	; (80008f8 <drive_by_servo+0x324>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	001a      	movs	r2, r3
 8000648:	4baa      	ldr	r3, [pc, #680]	; (80008f4 <drive_by_servo+0x320>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	db06      	blt.n	800065e <drive_by_servo+0x8a>
 8000650:	4baa      	ldr	r3, [pc, #680]	; (80008fc <drive_by_servo+0x328>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	001a      	movs	r2, r3
 8000656:	4ba7      	ldr	r3, [pc, #668]	; (80008f4 <drive_by_servo+0x320>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	429a      	cmp	r2, r3
 800065c:	da2f      	bge.n	80006be <drive_by_servo+0xea>
		if (dist2 < d1) {
 800065e:	4ba7      	ldr	r3, [pc, #668]	; (80008fc <drive_by_servo+0x328>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	001a      	movs	r2, r3
 8000664:	4ba3      	ldr	r3, [pc, #652]	; (80008f4 <drive_by_servo+0x320>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	da0f      	bge.n	800068c <drive_by_servo+0xb8>
			if (dist1 < dist3) {
 800066c:	4ba0      	ldr	r3, [pc, #640]	; (80008f0 <drive_by_servo+0x31c>)
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	4ba1      	ldr	r3, [pc, #644]	; (80008f8 <drive_by_servo+0x324>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	429a      	cmp	r2, r3
 8000676:	d204      	bcs.n	8000682 <drive_by_servo+0xae>
				servo = SERVO_MAX_VALUE;
 8000678:	4ba3      	ldr	r3, [pc, #652]	; (8000908 <drive_by_servo+0x334>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4ba1      	ldr	r3, [pc, #644]	; (8000904 <drive_by_servo+0x330>)
 800067e:	601a      	str	r2, [r3, #0]
		if (dist2 < d1) {
 8000680:	e2e3      	b.n	8000c4a <drive_by_servo+0x676>
			} else {
				servo = SERVO_MIN_VALUE;
 8000682:	4b9f      	ldr	r3, [pc, #636]	; (8000900 <drive_by_servo+0x32c>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	4b9f      	ldr	r3, [pc, #636]	; (8000904 <drive_by_servo+0x330>)
 8000688:	601a      	str	r2, [r3, #0]
		if (dist2 < d1) {
 800068a:	e2de      	b.n	8000c4a <drive_by_servo+0x676>
			}
		}
		else if (dist1 < d1) {
 800068c:	4b98      	ldr	r3, [pc, #608]	; (80008f0 <drive_by_servo+0x31c>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	001a      	movs	r2, r3
 8000692:	4b98      	ldr	r3, [pc, #608]	; (80008f4 <drive_by_servo+0x320>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	429a      	cmp	r2, r3
 8000698:	da04      	bge.n	80006a4 <drive_by_servo+0xd0>
			servo = SERVO_MAX_VALUE;
 800069a:	4b9b      	ldr	r3, [pc, #620]	; (8000908 <drive_by_servo+0x334>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b99      	ldr	r3, [pc, #612]	; (8000904 <drive_by_servo+0x330>)
 80006a0:	601a      	str	r2, [r3, #0]
		if (dist2 < d1) {
 80006a2:	e2d2      	b.n	8000c4a <drive_by_servo+0x676>
		} else if (dist3 < d1) {
 80006a4:	4b94      	ldr	r3, [pc, #592]	; (80008f8 <drive_by_servo+0x324>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	001a      	movs	r2, r3
 80006aa:	4b92      	ldr	r3, [pc, #584]	; (80008f4 <drive_by_servo+0x320>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	db00      	blt.n	80006b4 <drive_by_servo+0xe0>
 80006b2:	e2ca      	b.n	8000c4a <drive_by_servo+0x676>
			servo = SERVO_MIN_VALUE;
 80006b4:	4b92      	ldr	r3, [pc, #584]	; (8000900 <drive_by_servo+0x32c>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b92      	ldr	r3, [pc, #584]	; (8000904 <drive_by_servo+0x330>)
 80006ba:	601a      	str	r2, [r3, #0]
		if (dist2 < d1) {
 80006bc:	e2c5      	b.n	8000c4a <drive_by_servo+0x676>
		}
	} else if (dist1 < d2 || dist3 < d2 || dist2 < d2) {
 80006be:	4b8c      	ldr	r3, [pc, #560]	; (80008f0 <drive_by_servo+0x31c>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	001a      	movs	r2, r3
 80006c4:	4b91      	ldr	r3, [pc, #580]	; (800090c <drive_by_servo+0x338>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	db0d      	blt.n	80006e8 <drive_by_servo+0x114>
 80006cc:	4b8a      	ldr	r3, [pc, #552]	; (80008f8 <drive_by_servo+0x324>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	001a      	movs	r2, r3
 80006d2:	4b8e      	ldr	r3, [pc, #568]	; (800090c <drive_by_servo+0x338>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	db06      	blt.n	80006e8 <drive_by_servo+0x114>
 80006da:	4b88      	ldr	r3, [pc, #544]	; (80008fc <drive_by_servo+0x328>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	001a      	movs	r2, r3
 80006e0:	4b8a      	ldr	r3, [pc, #552]	; (800090c <drive_by_servo+0x338>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	da37      	bge.n	8000758 <drive_by_servo+0x184>
		if (dist2 < d2) {
 80006e8:	4b84      	ldr	r3, [pc, #528]	; (80008fc <drive_by_servo+0x328>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	001a      	movs	r2, r3
 80006ee:	4b87      	ldr	r3, [pc, #540]	; (800090c <drive_by_servo+0x338>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	da13      	bge.n	800071e <drive_by_servo+0x14a>
			if (dist1 < dist3) {
 80006f6:	4b7e      	ldr	r3, [pc, #504]	; (80008f0 <drive_by_servo+0x31c>)
 80006f8:	881a      	ldrh	r2, [r3, #0]
 80006fa:	4b7f      	ldr	r3, [pc, #508]	; (80008f8 <drive_by_servo+0x324>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d206      	bcs.n	8000710 <drive_by_servo+0x13c>
				servo = SERVO_MID_VALUE + 200;
 8000702:	4b83      	ldr	r3, [pc, #524]	; (8000910 <drive_by_servo+0x33c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	33c8      	adds	r3, #200	; 0xc8
 8000708:	001a      	movs	r2, r3
 800070a:	4b7e      	ldr	r3, [pc, #504]	; (8000904 <drive_by_servo+0x330>)
 800070c:	601a      	str	r2, [r3, #0]
		if (dist2 < d2) {
 800070e:	e29e      	b.n	8000c4e <drive_by_servo+0x67a>
			} else {
				servo = SERVO_MID_VALUE - 200;
 8000710:	4b7f      	ldr	r3, [pc, #508]	; (8000910 <drive_by_servo+0x33c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3bc8      	subs	r3, #200	; 0xc8
 8000716:	001a      	movs	r2, r3
 8000718:	4b7a      	ldr	r3, [pc, #488]	; (8000904 <drive_by_servo+0x330>)
 800071a:	601a      	str	r2, [r3, #0]
		if (dist2 < d2) {
 800071c:	e297      	b.n	8000c4e <drive_by_servo+0x67a>
			}
		} else if (dist1 < d2) {
 800071e:	4b74      	ldr	r3, [pc, #464]	; (80008f0 <drive_by_servo+0x31c>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	001a      	movs	r2, r3
 8000724:	4b79      	ldr	r3, [pc, #484]	; (800090c <drive_by_servo+0x338>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	429a      	cmp	r2, r3
 800072a:	da06      	bge.n	800073a <drive_by_servo+0x166>
			servo = SERVO_MID_VALUE + 200;
 800072c:	4b78      	ldr	r3, [pc, #480]	; (8000910 <drive_by_servo+0x33c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	33c8      	adds	r3, #200	; 0xc8
 8000732:	001a      	movs	r2, r3
 8000734:	4b73      	ldr	r3, [pc, #460]	; (8000904 <drive_by_servo+0x330>)
 8000736:	601a      	str	r2, [r3, #0]
		if (dist2 < d2) {
 8000738:	e289      	b.n	8000c4e <drive_by_servo+0x67a>
		} else if (dist3 < d2) {
 800073a:	4b6f      	ldr	r3, [pc, #444]	; (80008f8 <drive_by_servo+0x324>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	001a      	movs	r2, r3
 8000740:	4b72      	ldr	r3, [pc, #456]	; (800090c <drive_by_servo+0x338>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	db00      	blt.n	800074a <drive_by_servo+0x176>
 8000748:	e281      	b.n	8000c4e <drive_by_servo+0x67a>
			servo = SERVO_MID_VALUE - 200;
 800074a:	4b71      	ldr	r3, [pc, #452]	; (8000910 <drive_by_servo+0x33c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3bc8      	subs	r3, #200	; 0xc8
 8000750:	001a      	movs	r2, r3
 8000752:	4b6c      	ldr	r3, [pc, #432]	; (8000904 <drive_by_servo+0x330>)
 8000754:	601a      	str	r2, [r3, #0]
		if (dist2 < d2) {
 8000756:	e27a      	b.n	8000c4e <drive_by_servo+0x67a>
		}
	} else if (dist1 < d3 || dist3 < d3 || dist2 < d3) {
 8000758:	4b65      	ldr	r3, [pc, #404]	; (80008f0 <drive_by_servo+0x31c>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	001a      	movs	r2, r3
 800075e:	4b6d      	ldr	r3, [pc, #436]	; (8000914 <drive_by_servo+0x340>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	db0d      	blt.n	8000782 <drive_by_servo+0x1ae>
 8000766:	4b64      	ldr	r3, [pc, #400]	; (80008f8 <drive_by_servo+0x324>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	001a      	movs	r2, r3
 800076c:	4b69      	ldr	r3, [pc, #420]	; (8000914 <drive_by_servo+0x340>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	429a      	cmp	r2, r3
 8000772:	db06      	blt.n	8000782 <drive_by_servo+0x1ae>
 8000774:	4b61      	ldr	r3, [pc, #388]	; (80008fc <drive_by_servo+0x328>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	001a      	movs	r2, r3
 800077a:	4b66      	ldr	r3, [pc, #408]	; (8000914 <drive_by_servo+0x340>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	429a      	cmp	r2, r3
 8000780:	da4a      	bge.n	8000818 <drive_by_servo+0x244>
		if (dist2 < d3) {
 8000782:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <drive_by_servo+0x328>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	001a      	movs	r2, r3
 8000788:	4b62      	ldr	r3, [pc, #392]	; (8000914 <drive_by_servo+0x340>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	429a      	cmp	r2, r3
 800078e:	da13      	bge.n	80007b8 <drive_by_servo+0x1e4>
			if (dist1 < dist3) {
 8000790:	4b57      	ldr	r3, [pc, #348]	; (80008f0 <drive_by_servo+0x31c>)
 8000792:	881a      	ldrh	r2, [r3, #0]
 8000794:	4b58      	ldr	r3, [pc, #352]	; (80008f8 <drive_by_servo+0x324>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	429a      	cmp	r2, r3
 800079a:	d206      	bcs.n	80007aa <drive_by_servo+0x1d6>
				servo = SERVO_MID_VALUE + 150;
 800079c:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <drive_by_servo+0x33c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3396      	adds	r3, #150	; 0x96
 80007a2:	001a      	movs	r2, r3
 80007a4:	4b57      	ldr	r3, [pc, #348]	; (8000904 <drive_by_servo+0x330>)
 80007a6:	601a      	str	r2, [r3, #0]
		if (dist2 < d3) {
 80007a8:	e253      	b.n	8000c52 <drive_by_servo+0x67e>
			} else {
				servo = SERVO_MID_VALUE - 100;
 80007aa:	4b59      	ldr	r3, [pc, #356]	; (8000910 <drive_by_servo+0x33c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3b64      	subs	r3, #100	; 0x64
 80007b0:	001a      	movs	r2, r3
 80007b2:	4b54      	ldr	r3, [pc, #336]	; (8000904 <drive_by_servo+0x330>)
 80007b4:	601a      	str	r2, [r3, #0]
		if (dist2 < d3) {
 80007b6:	e24c      	b.n	8000c52 <drive_by_servo+0x67e>
			}
		} else if (dist1 < d3 && dist3 < d3) {
 80007b8:	4b4d      	ldr	r3, [pc, #308]	; (80008f0 <drive_by_servo+0x31c>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	4b55      	ldr	r3, [pc, #340]	; (8000914 <drive_by_servo+0x340>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	da0b      	bge.n	80007de <drive_by_servo+0x20a>
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <drive_by_servo+0x324>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	001a      	movs	r2, r3
 80007cc:	4b51      	ldr	r3, [pc, #324]	; (8000914 <drive_by_servo+0x340>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	da04      	bge.n	80007de <drive_by_servo+0x20a>
			servo = SERVO_MID_VALUE;
 80007d4:	4b4e      	ldr	r3, [pc, #312]	; (8000910 <drive_by_servo+0x33c>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b4a      	ldr	r3, [pc, #296]	; (8000904 <drive_by_servo+0x330>)
 80007da:	601a      	str	r2, [r3, #0]
		if (dist2 < d3) {
 80007dc:	e239      	b.n	8000c52 <drive_by_servo+0x67e>
		} else if (dist1 < d3) {
 80007de:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <drive_by_servo+0x31c>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	001a      	movs	r2, r3
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <drive_by_servo+0x340>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	da06      	bge.n	80007fa <drive_by_servo+0x226>
			servo = SERVO_MID_VALUE + 150;
 80007ec:	4b48      	ldr	r3, [pc, #288]	; (8000910 <drive_by_servo+0x33c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3396      	adds	r3, #150	; 0x96
 80007f2:	001a      	movs	r2, r3
 80007f4:	4b43      	ldr	r3, [pc, #268]	; (8000904 <drive_by_servo+0x330>)
 80007f6:	601a      	str	r2, [r3, #0]
		if (dist2 < d3) {
 80007f8:	e22b      	b.n	8000c52 <drive_by_servo+0x67e>
		} else if (dist3 < d3) {
 80007fa:	4b3f      	ldr	r3, [pc, #252]	; (80008f8 <drive_by_servo+0x324>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	001a      	movs	r2, r3
 8000800:	4b44      	ldr	r3, [pc, #272]	; (8000914 <drive_by_servo+0x340>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	429a      	cmp	r2, r3
 8000806:	db00      	blt.n	800080a <drive_by_servo+0x236>
 8000808:	e223      	b.n	8000c52 <drive_by_servo+0x67e>
			servo = SERVO_MID_VALUE - 150;
 800080a:	4b41      	ldr	r3, [pc, #260]	; (8000910 <drive_by_servo+0x33c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3b96      	subs	r3, #150	; 0x96
 8000810:	001a      	movs	r2, r3
 8000812:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <drive_by_servo+0x330>)
 8000814:	601a      	str	r2, [r3, #0]
		if (dist2 < d3) {
 8000816:	e21c      	b.n	8000c52 <drive_by_servo+0x67e>
		}
	} else if (dist1 < d4 || dist3 < d4 || dist2 < d4) {
 8000818:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <drive_by_servo+0x31c>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	001a      	movs	r2, r3
 800081e:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <drive_by_servo+0x344>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	db0e      	blt.n	8000844 <drive_by_servo+0x270>
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <drive_by_servo+0x324>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	001a      	movs	r2, r3
 800082c:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <drive_by_servo+0x344>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	db07      	blt.n	8000844 <drive_by_servo+0x270>
 8000834:	4b31      	ldr	r3, [pc, #196]	; (80008fc <drive_by_servo+0x328>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	001a      	movs	r2, r3
 800083a:	4b37      	ldr	r3, [pc, #220]	; (8000918 <drive_by_servo+0x344>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	429a      	cmp	r2, r3
 8000840:	db00      	blt.n	8000844 <drive_by_servo+0x270>
 8000842:	e06b      	b.n	800091c <drive_by_servo+0x348>
		if (dist2 < d4) {
 8000844:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <drive_by_servo+0x328>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	001a      	movs	r2, r3
 800084a:	4b33      	ldr	r3, [pc, #204]	; (8000918 <drive_by_servo+0x344>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	429a      	cmp	r2, r3
 8000850:	da13      	bge.n	800087a <drive_by_servo+0x2a6>
			if (dist1 < dist3) {
 8000852:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <drive_by_servo+0x31c>)
 8000854:	881a      	ldrh	r2, [r3, #0]
 8000856:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <drive_by_servo+0x324>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	429a      	cmp	r2, r3
 800085c:	d206      	bcs.n	800086c <drive_by_servo+0x298>
				servo = SERVO_MID_VALUE + 100;
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <drive_by_servo+0x33c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3364      	adds	r3, #100	; 0x64
 8000864:	001a      	movs	r2, r3
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <drive_by_servo+0x330>)
 8000868:	601a      	str	r2, [r3, #0]
		if (dist2 < d4) {
 800086a:	e1f4      	b.n	8000c56 <drive_by_servo+0x682>
			} else {
				servo = SERVO_MID_VALUE - 100;
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <drive_by_servo+0x33c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3b64      	subs	r3, #100	; 0x64
 8000872:	001a      	movs	r2, r3
 8000874:	4b23      	ldr	r3, [pc, #140]	; (8000904 <drive_by_servo+0x330>)
 8000876:	601a      	str	r2, [r3, #0]
		if (dist2 < d4) {
 8000878:	e1ed      	b.n	8000c56 <drive_by_servo+0x682>
			}
		} else if (dist1 < d4 && dist3 < d4) {
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <drive_by_servo+0x31c>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	001a      	movs	r2, r3
 8000880:	4b25      	ldr	r3, [pc, #148]	; (8000918 <drive_by_servo+0x344>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	429a      	cmp	r2, r3
 8000886:	da0b      	bge.n	80008a0 <drive_by_servo+0x2cc>
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <drive_by_servo+0x324>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	001a      	movs	r2, r3
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <drive_by_servo+0x344>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	429a      	cmp	r2, r3
 8000894:	da04      	bge.n	80008a0 <drive_by_servo+0x2cc>
			servo = SERVO_MID_VALUE;
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <drive_by_servo+0x33c>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <drive_by_servo+0x330>)
 800089c:	601a      	str	r2, [r3, #0]
		if (dist2 < d4) {
 800089e:	e1da      	b.n	8000c56 <drive_by_servo+0x682>
		} else if (dist1 < d4) {
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <drive_by_servo+0x31c>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	001a      	movs	r2, r3
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <drive_by_servo+0x344>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	da06      	bge.n	80008bc <drive_by_servo+0x2e8>
			servo = SERVO_MID_VALUE + 100;
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <drive_by_servo+0x33c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3364      	adds	r3, #100	; 0x64
 80008b4:	001a      	movs	r2, r3
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <drive_by_servo+0x330>)
 80008b8:	601a      	str	r2, [r3, #0]
		if (dist2 < d4) {
 80008ba:	e1cc      	b.n	8000c56 <drive_by_servo+0x682>
		} else if (dist3 < d4) {
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <drive_by_servo+0x324>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	001a      	movs	r2, r3
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <drive_by_servo+0x344>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	db00      	blt.n	80008cc <drive_by_servo+0x2f8>
 80008ca:	e1c4      	b.n	8000c56 <drive_by_servo+0x682>
			servo = SERVO_MID_VALUE - 100;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <drive_by_servo+0x33c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3b64      	subs	r3, #100	; 0x64
 80008d2:	001a      	movs	r2, r3
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <drive_by_servo+0x330>)
 80008d6:	601a      	str	r2, [r3, #0]
		if (dist2 < d4) {
 80008d8:	e1bd      	b.n	8000c56 <drive_by_servo+0x682>
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200000d4 	.word	0x200000d4
 80008e0:	200000d8 	.word	0x200000d8
 80008e4:	00000226 	.word	0x00000226
 80008e8:	200000dc 	.word	0x200000dc
 80008ec:	200000e0 	.word	0x200000e0
 80008f0:	20000210 	.word	0x20000210
 80008f4:	200000e8 	.word	0x200000e8
 80008f8:	20000214 	.word	0x20000214
 80008fc:	20000212 	.word	0x20000212
 8000900:	20000000 	.word	0x20000000
 8000904:	200000e4 	.word	0x200000e4
 8000908:	20000008 	.word	0x20000008
 800090c:	200000ec 	.word	0x200000ec
 8000910:	20000004 	.word	0x20000004
 8000914:	200000f0 	.word	0x200000f0
 8000918:	200000f4 	.word	0x200000f4
		}
	} else if (dist1 < d5 || dist3 < d5 || dist2 < d5) {
 800091c:	4bb8      	ldr	r3, [pc, #736]	; (8000c00 <drive_by_servo+0x62c>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	001a      	movs	r2, r3
 8000922:	4bb8      	ldr	r3, [pc, #736]	; (8000c04 <drive_by_servo+0x630>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	429a      	cmp	r2, r3
 8000928:	db0d      	blt.n	8000946 <drive_by_servo+0x372>
 800092a:	4bb7      	ldr	r3, [pc, #732]	; (8000c08 <drive_by_servo+0x634>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	001a      	movs	r2, r3
 8000930:	4bb4      	ldr	r3, [pc, #720]	; (8000c04 <drive_by_servo+0x630>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	db06      	blt.n	8000946 <drive_by_servo+0x372>
 8000938:	4bb4      	ldr	r3, [pc, #720]	; (8000c0c <drive_by_servo+0x638>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	001a      	movs	r2, r3
 800093e:	4bb1      	ldr	r3, [pc, #708]	; (8000c04 <drive_by_servo+0x630>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	429a      	cmp	r2, r3
 8000944:	da4a      	bge.n	80009dc <drive_by_servo+0x408>
		if (dist2 < d5) { // siia oli unustatud d2 vb sp töötas
 8000946:	4bb1      	ldr	r3, [pc, #708]	; (8000c0c <drive_by_servo+0x638>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	001a      	movs	r2, r3
 800094c:	4bad      	ldr	r3, [pc, #692]	; (8000c04 <drive_by_servo+0x630>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	429a      	cmp	r2, r3
 8000952:	da13      	bge.n	800097c <drive_by_servo+0x3a8>
			if (dist1 < dist3) {
 8000954:	4baa      	ldr	r3, [pc, #680]	; (8000c00 <drive_by_servo+0x62c>)
 8000956:	881a      	ldrh	r2, [r3, #0]
 8000958:	4bab      	ldr	r3, [pc, #684]	; (8000c08 <drive_by_servo+0x634>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d206      	bcs.n	800096e <drive_by_servo+0x39a>
				servo = SERVO_MID_VALUE + 80;
 8000960:	4bab      	ldr	r3, [pc, #684]	; (8000c10 <drive_by_servo+0x63c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3350      	adds	r3, #80	; 0x50
 8000966:	001a      	movs	r2, r3
 8000968:	4baa      	ldr	r3, [pc, #680]	; (8000c14 <drive_by_servo+0x640>)
 800096a:	601a      	str	r2, [r3, #0]
		if (dist2 < d5) { // siia oli unustatud d2 vb sp töötas
 800096c:	e175      	b.n	8000c5a <drive_by_servo+0x686>
			} else {
				servo = SERVO_MID_VALUE - 80;
 800096e:	4ba8      	ldr	r3, [pc, #672]	; (8000c10 <drive_by_servo+0x63c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	3b50      	subs	r3, #80	; 0x50
 8000974:	001a      	movs	r2, r3
 8000976:	4ba7      	ldr	r3, [pc, #668]	; (8000c14 <drive_by_servo+0x640>)
 8000978:	601a      	str	r2, [r3, #0]
		if (dist2 < d5) { // siia oli unustatud d2 vb sp töötas
 800097a:	e16e      	b.n	8000c5a <drive_by_servo+0x686>
			}
		} else if (dist1 < d5 && dist3 < d5) {
 800097c:	4ba0      	ldr	r3, [pc, #640]	; (8000c00 <drive_by_servo+0x62c>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	001a      	movs	r2, r3
 8000982:	4ba0      	ldr	r3, [pc, #640]	; (8000c04 <drive_by_servo+0x630>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	429a      	cmp	r2, r3
 8000988:	da0b      	bge.n	80009a2 <drive_by_servo+0x3ce>
 800098a:	4b9f      	ldr	r3, [pc, #636]	; (8000c08 <drive_by_servo+0x634>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	001a      	movs	r2, r3
 8000990:	4b9c      	ldr	r3, [pc, #624]	; (8000c04 <drive_by_servo+0x630>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	429a      	cmp	r2, r3
 8000996:	da04      	bge.n	80009a2 <drive_by_servo+0x3ce>
			servo = SERVO_MID_VALUE;
 8000998:	4b9d      	ldr	r3, [pc, #628]	; (8000c10 <drive_by_servo+0x63c>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b9d      	ldr	r3, [pc, #628]	; (8000c14 <drive_by_servo+0x640>)
 800099e:	601a      	str	r2, [r3, #0]
		if (dist2 < d5) { // siia oli unustatud d2 vb sp töötas
 80009a0:	e15b      	b.n	8000c5a <drive_by_servo+0x686>
		} else if (dist1 < d5) {
 80009a2:	4b97      	ldr	r3, [pc, #604]	; (8000c00 <drive_by_servo+0x62c>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	001a      	movs	r2, r3
 80009a8:	4b96      	ldr	r3, [pc, #600]	; (8000c04 <drive_by_servo+0x630>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	da06      	bge.n	80009be <drive_by_servo+0x3ea>
			servo = SERVO_MID_VALUE + 80;
 80009b0:	4b97      	ldr	r3, [pc, #604]	; (8000c10 <drive_by_servo+0x63c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3350      	adds	r3, #80	; 0x50
 80009b6:	001a      	movs	r2, r3
 80009b8:	4b96      	ldr	r3, [pc, #600]	; (8000c14 <drive_by_servo+0x640>)
 80009ba:	601a      	str	r2, [r3, #0]
		if (dist2 < d5) { // siia oli unustatud d2 vb sp töötas
 80009bc:	e14d      	b.n	8000c5a <drive_by_servo+0x686>
		} else if (dist3 < d5) {
 80009be:	4b92      	ldr	r3, [pc, #584]	; (8000c08 <drive_by_servo+0x634>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	001a      	movs	r2, r3
 80009c4:	4b8f      	ldr	r3, [pc, #572]	; (8000c04 <drive_by_servo+0x630>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	db00      	blt.n	80009ce <drive_by_servo+0x3fa>
 80009cc:	e145      	b.n	8000c5a <drive_by_servo+0x686>
			servo = SERVO_MID_VALUE - 80;
 80009ce:	4b90      	ldr	r3, [pc, #576]	; (8000c10 <drive_by_servo+0x63c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3b50      	subs	r3, #80	; 0x50
 80009d4:	001a      	movs	r2, r3
 80009d6:	4b8f      	ldr	r3, [pc, #572]	; (8000c14 <drive_by_servo+0x640>)
 80009d8:	601a      	str	r2, [r3, #0]
		if (dist2 < d5) { // siia oli unustatud d2 vb sp töötas
 80009da:	e13e      	b.n	8000c5a <drive_by_servo+0x686>
		}
	} else if (dist1 < d6 || dist3 < d6 || dist2 < d6) {
 80009dc:	4b88      	ldr	r3, [pc, #544]	; (8000c00 <drive_by_servo+0x62c>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	001a      	movs	r2, r3
 80009e2:	4b8d      	ldr	r3, [pc, #564]	; (8000c18 <drive_by_servo+0x644>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	db0d      	blt.n	8000a06 <drive_by_servo+0x432>
 80009ea:	4b87      	ldr	r3, [pc, #540]	; (8000c08 <drive_by_servo+0x634>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	001a      	movs	r2, r3
 80009f0:	4b89      	ldr	r3, [pc, #548]	; (8000c18 <drive_by_servo+0x644>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	db06      	blt.n	8000a06 <drive_by_servo+0x432>
 80009f8:	4b84      	ldr	r3, [pc, #528]	; (8000c0c <drive_by_servo+0x638>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	001a      	movs	r2, r3
 80009fe:	4b86      	ldr	r3, [pc, #536]	; (8000c18 <drive_by_servo+0x644>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	da4a      	bge.n	8000a9c <drive_by_servo+0x4c8>
		if (dist2 < d6) { // siia oli unustatud d2 vb sp töötas
 8000a06:	4b81      	ldr	r3, [pc, #516]	; (8000c0c <drive_by_servo+0x638>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	4b82      	ldr	r3, [pc, #520]	; (8000c18 <drive_by_servo+0x644>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	da13      	bge.n	8000a3c <drive_by_servo+0x468>
			if (dist1 < dist3) {
 8000a14:	4b7a      	ldr	r3, [pc, #488]	; (8000c00 <drive_by_servo+0x62c>)
 8000a16:	881a      	ldrh	r2, [r3, #0]
 8000a18:	4b7b      	ldr	r3, [pc, #492]	; (8000c08 <drive_by_servo+0x634>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d206      	bcs.n	8000a2e <drive_by_servo+0x45a>
				servo = SERVO_MID_VALUE + 60;
 8000a20:	4b7b      	ldr	r3, [pc, #492]	; (8000c10 <drive_by_servo+0x63c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	333c      	adds	r3, #60	; 0x3c
 8000a26:	001a      	movs	r2, r3
 8000a28:	4b7a      	ldr	r3, [pc, #488]	; (8000c14 <drive_by_servo+0x640>)
 8000a2a:	601a      	str	r2, [r3, #0]
		if (dist2 < d6) { // siia oli unustatud d2 vb sp töötas
 8000a2c:	e117      	b.n	8000c5e <drive_by_servo+0x68a>
			} else {
				servo = SERVO_MID_VALUE - 60;
 8000a2e:	4b78      	ldr	r3, [pc, #480]	; (8000c10 <drive_by_servo+0x63c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	3b3c      	subs	r3, #60	; 0x3c
 8000a34:	001a      	movs	r2, r3
 8000a36:	4b77      	ldr	r3, [pc, #476]	; (8000c14 <drive_by_servo+0x640>)
 8000a38:	601a      	str	r2, [r3, #0]
		if (dist2 < d6) { // siia oli unustatud d2 vb sp töötas
 8000a3a:	e110      	b.n	8000c5e <drive_by_servo+0x68a>
			}
		} else if (dist1 < d6 && dist3 < d6) {
 8000a3c:	4b70      	ldr	r3, [pc, #448]	; (8000c00 <drive_by_servo+0x62c>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	001a      	movs	r2, r3
 8000a42:	4b75      	ldr	r3, [pc, #468]	; (8000c18 <drive_by_servo+0x644>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	da0b      	bge.n	8000a62 <drive_by_servo+0x48e>
 8000a4a:	4b6f      	ldr	r3, [pc, #444]	; (8000c08 <drive_by_servo+0x634>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	001a      	movs	r2, r3
 8000a50:	4b71      	ldr	r3, [pc, #452]	; (8000c18 <drive_by_servo+0x644>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	da04      	bge.n	8000a62 <drive_by_servo+0x48e>
			servo = SERVO_MID_VALUE;
 8000a58:	4b6d      	ldr	r3, [pc, #436]	; (8000c10 <drive_by_servo+0x63c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b6d      	ldr	r3, [pc, #436]	; (8000c14 <drive_by_servo+0x640>)
 8000a5e:	601a      	str	r2, [r3, #0]
		if (dist2 < d6) { // siia oli unustatud d2 vb sp töötas
 8000a60:	e0fd      	b.n	8000c5e <drive_by_servo+0x68a>
		} else if (dist1 < d6) {
 8000a62:	4b67      	ldr	r3, [pc, #412]	; (8000c00 <drive_by_servo+0x62c>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	001a      	movs	r2, r3
 8000a68:	4b6b      	ldr	r3, [pc, #428]	; (8000c18 <drive_by_servo+0x644>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	da06      	bge.n	8000a7e <drive_by_servo+0x4aa>
			servo = SERVO_MID_VALUE + 60;
 8000a70:	4b67      	ldr	r3, [pc, #412]	; (8000c10 <drive_by_servo+0x63c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	333c      	adds	r3, #60	; 0x3c
 8000a76:	001a      	movs	r2, r3
 8000a78:	4b66      	ldr	r3, [pc, #408]	; (8000c14 <drive_by_servo+0x640>)
 8000a7a:	601a      	str	r2, [r3, #0]
		if (dist2 < d6) { // siia oli unustatud d2 vb sp töötas
 8000a7c:	e0ef      	b.n	8000c5e <drive_by_servo+0x68a>
		} else if (dist3 < d6) {
 8000a7e:	4b62      	ldr	r3, [pc, #392]	; (8000c08 <drive_by_servo+0x634>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	001a      	movs	r2, r3
 8000a84:	4b64      	ldr	r3, [pc, #400]	; (8000c18 <drive_by_servo+0x644>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	db00      	blt.n	8000a8e <drive_by_servo+0x4ba>
 8000a8c:	e0e7      	b.n	8000c5e <drive_by_servo+0x68a>
			servo = SERVO_MID_VALUE - 60;
 8000a8e:	4b60      	ldr	r3, [pc, #384]	; (8000c10 <drive_by_servo+0x63c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3b3c      	subs	r3, #60	; 0x3c
 8000a94:	001a      	movs	r2, r3
 8000a96:	4b5f      	ldr	r3, [pc, #380]	; (8000c14 <drive_by_servo+0x640>)
 8000a98:	601a      	str	r2, [r3, #0]
		if (dist2 < d6) { // siia oli unustatud d2 vb sp töötas
 8000a9a:	e0e0      	b.n	8000c5e <drive_by_servo+0x68a>
		}
	} else if (dist1 < d7 || dist3 < d7 || dist2 < d7) {
 8000a9c:	4b58      	ldr	r3, [pc, #352]	; (8000c00 <drive_by_servo+0x62c>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	4b5e      	ldr	r3, [pc, #376]	; (8000c1c <drive_by_servo+0x648>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	db0d      	blt.n	8000ac6 <drive_by_servo+0x4f2>
 8000aaa:	4b57      	ldr	r3, [pc, #348]	; (8000c08 <drive_by_servo+0x634>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	001a      	movs	r2, r3
 8000ab0:	4b5a      	ldr	r3, [pc, #360]	; (8000c1c <drive_by_servo+0x648>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	db06      	blt.n	8000ac6 <drive_by_servo+0x4f2>
 8000ab8:	4b54      	ldr	r3, [pc, #336]	; (8000c0c <drive_by_servo+0x638>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	001a      	movs	r2, r3
 8000abe:	4b57      	ldr	r3, [pc, #348]	; (8000c1c <drive_by_servo+0x648>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	da4a      	bge.n	8000b5c <drive_by_servo+0x588>
		if (dist2 < d7) { // siia oli unustatud d2 vb sp töötas
 8000ac6:	4b51      	ldr	r3, [pc, #324]	; (8000c0c <drive_by_servo+0x638>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	001a      	movs	r2, r3
 8000acc:	4b53      	ldr	r3, [pc, #332]	; (8000c1c <drive_by_servo+0x648>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	da13      	bge.n	8000afc <drive_by_servo+0x528>
			if (dist1 < dist3) {
 8000ad4:	4b4a      	ldr	r3, [pc, #296]	; (8000c00 <drive_by_servo+0x62c>)
 8000ad6:	881a      	ldrh	r2, [r3, #0]
 8000ad8:	4b4b      	ldr	r3, [pc, #300]	; (8000c08 <drive_by_servo+0x634>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d206      	bcs.n	8000aee <drive_by_servo+0x51a>
				servo = SERVO_MID_VALUE + 45;
 8000ae0:	4b4b      	ldr	r3, [pc, #300]	; (8000c10 <drive_by_servo+0x63c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	332d      	adds	r3, #45	; 0x2d
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	4b4a      	ldr	r3, [pc, #296]	; (8000c14 <drive_by_servo+0x640>)
 8000aea:	601a      	str	r2, [r3, #0]
		if (dist2 < d7) { // siia oli unustatud d2 vb sp töötas
 8000aec:	e0b9      	b.n	8000c62 <drive_by_servo+0x68e>
			} else {
				servo = SERVO_MID_VALUE - 45;
 8000aee:	4b48      	ldr	r3, [pc, #288]	; (8000c10 <drive_by_servo+0x63c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b2d      	subs	r3, #45	; 0x2d
 8000af4:	001a      	movs	r2, r3
 8000af6:	4b47      	ldr	r3, [pc, #284]	; (8000c14 <drive_by_servo+0x640>)
 8000af8:	601a      	str	r2, [r3, #0]
		if (dist2 < d7) { // siia oli unustatud d2 vb sp töötas
 8000afa:	e0b2      	b.n	8000c62 <drive_by_servo+0x68e>
			}
		} else if (dist1 < d7 && dist3 < d7) {
 8000afc:	4b40      	ldr	r3, [pc, #256]	; (8000c00 <drive_by_servo+0x62c>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	001a      	movs	r2, r3
 8000b02:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <drive_by_servo+0x648>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	da0b      	bge.n	8000b22 <drive_by_servo+0x54e>
 8000b0a:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <drive_by_servo+0x634>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	001a      	movs	r2, r3
 8000b10:	4b42      	ldr	r3, [pc, #264]	; (8000c1c <drive_by_servo+0x648>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	da04      	bge.n	8000b22 <drive_by_servo+0x54e>
			servo = SERVO_MID_VALUE;
 8000b18:	4b3d      	ldr	r3, [pc, #244]	; (8000c10 <drive_by_servo+0x63c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b3d      	ldr	r3, [pc, #244]	; (8000c14 <drive_by_servo+0x640>)
 8000b1e:	601a      	str	r2, [r3, #0]
		if (dist2 < d7) { // siia oli unustatud d2 vb sp töötas
 8000b20:	e09f      	b.n	8000c62 <drive_by_servo+0x68e>
		} else if (dist1 < d7) {
 8000b22:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <drive_by_servo+0x62c>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	001a      	movs	r2, r3
 8000b28:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <drive_by_servo+0x648>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	da06      	bge.n	8000b3e <drive_by_servo+0x56a>
			servo = SERVO_MID_VALUE + 45;
 8000b30:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <drive_by_servo+0x63c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	332d      	adds	r3, #45	; 0x2d
 8000b36:	001a      	movs	r2, r3
 8000b38:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <drive_by_servo+0x640>)
 8000b3a:	601a      	str	r2, [r3, #0]
		if (dist2 < d7) { // siia oli unustatud d2 vb sp töötas
 8000b3c:	e091      	b.n	8000c62 <drive_by_servo+0x68e>
		} else if (dist3 < d7) {
 8000b3e:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <drive_by_servo+0x634>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	001a      	movs	r2, r3
 8000b44:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <drive_by_servo+0x648>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	db00      	blt.n	8000b4e <drive_by_servo+0x57a>
 8000b4c:	e089      	b.n	8000c62 <drive_by_servo+0x68e>
			servo = SERVO_MID_VALUE - 45;
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <drive_by_servo+0x63c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3b2d      	subs	r3, #45	; 0x2d
 8000b54:	001a      	movs	r2, r3
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <drive_by_servo+0x640>)
 8000b58:	601a      	str	r2, [r3, #0]
		if (dist2 < d7) { // siia oli unustatud d2 vb sp töötas
 8000b5a:	e082      	b.n	8000c62 <drive_by_servo+0x68e>
		}
	} else if (dist1 < d8 || dist3 < d8 || dist2 < d8) {
 8000b5c:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <drive_by_servo+0x62c>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	001a      	movs	r2, r3
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <drive_by_servo+0x64c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	db0d      	blt.n	8000b86 <drive_by_servo+0x5b2>
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <drive_by_servo+0x634>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	001a      	movs	r2, r3
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <drive_by_servo+0x64c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	db06      	blt.n	8000b86 <drive_by_servo+0x5b2>
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <drive_by_servo+0x638>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <drive_by_servo+0x64c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	da5c      	bge.n	8000c40 <drive_by_servo+0x66c>
		if (dist2 < d8) { // siia oli unustatud d2 vb sp töötas
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <drive_by_servo+0x638>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <drive_by_servo+0x64c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	da13      	bge.n	8000bbc <drive_by_servo+0x5e8>
			if (dist1 < dist3) {
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <drive_by_servo+0x62c>)
 8000b96:	881a      	ldrh	r2, [r3, #0]
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <drive_by_servo+0x634>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d206      	bcs.n	8000bae <drive_by_servo+0x5da>
				servo = SERVO_MID_VALUE + 30;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <drive_by_servo+0x63c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	331e      	adds	r3, #30
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <drive_by_servo+0x640>)
 8000baa:	601a      	str	r2, [r3, #0]
		if (dist2 < d8) { // siia oli unustatud d2 vb sp töötas
 8000bac:	e05b      	b.n	8000c66 <drive_by_servo+0x692>
			} else {
				servo = SERVO_MID_VALUE - 30;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <drive_by_servo+0x63c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3b1e      	subs	r3, #30
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <drive_by_servo+0x640>)
 8000bb8:	601a      	str	r2, [r3, #0]
		if (dist2 < d8) { // siia oli unustatud d2 vb sp töötas
 8000bba:	e054      	b.n	8000c66 <drive_by_servo+0x692>
			}
		} else if (dist1 < d8 && dist3 < d8) {
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <drive_by_servo+0x62c>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <drive_by_servo+0x64c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	da0b      	bge.n	8000be2 <drive_by_servo+0x60e>
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <drive_by_servo+0x634>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	001a      	movs	r2, r3
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <drive_by_servo+0x64c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	da04      	bge.n	8000be2 <drive_by_servo+0x60e>
			servo = SERVO_MID_VALUE;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <drive_by_servo+0x63c>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <drive_by_servo+0x640>)
 8000bde:	601a      	str	r2, [r3, #0]
		if (dist2 < d8) { // siia oli unustatud d2 vb sp töötas
 8000be0:	e041      	b.n	8000c66 <drive_by_servo+0x692>
		} else if (dist1 < d8) {
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <drive_by_servo+0x62c>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	001a      	movs	r2, r3
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <drive_by_servo+0x64c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	da19      	bge.n	8000c24 <drive_by_servo+0x650>
			servo = SERVO_MID_VALUE + 30;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <drive_by_servo+0x63c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	331e      	adds	r3, #30
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <drive_by_servo+0x640>)
 8000bfa:	601a      	str	r2, [r3, #0]
		if (dist2 < d8) { // siia oli unustatud d2 vb sp töötas
 8000bfc:	e033      	b.n	8000c66 <drive_by_servo+0x692>
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	20000210 	.word	0x20000210
 8000c04:	200000f8 	.word	0x200000f8
 8000c08:	20000214 	.word	0x20000214
 8000c0c:	20000212 	.word	0x20000212
 8000c10:	20000004 	.word	0x20000004
 8000c14:	200000e4 	.word	0x200000e4
 8000c18:	200000fc 	.word	0x200000fc
 8000c1c:	20000100 	.word	0x20000100
 8000c20:	20000104 	.word	0x20000104
		} else if (dist3 < d8) {
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <drive_by_servo+0x69c>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	001a      	movs	r2, r3
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <drive_by_servo+0x6a0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	da19      	bge.n	8000c66 <drive_by_servo+0x692>
			servo = SERVO_MID_VALUE - 30;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <drive_by_servo+0x6a4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3b1e      	subs	r3, #30
 8000c38:	001a      	movs	r2, r3
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <drive_by_servo+0x6a8>)
 8000c3c:	601a      	str	r2, [r3, #0]
		if (dist2 < d8) { // siia oli unustatud d2 vb sp töötas
 8000c3e:	e012      	b.n	8000c66 <drive_by_servo+0x692>
		}
	} else {
		servo = SERVO_MID_VALUE;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <drive_by_servo+0x6a4>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <drive_by_servo+0x6a8>)
 8000c46:	601a      	str	r2, [r3, #0]
	}
}
 8000c48:	e00e      	b.n	8000c68 <drive_by_servo+0x694>
		if (dist2 < d1) {
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	e00c      	b.n	8000c68 <drive_by_servo+0x694>
		if (dist2 < d2) {
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	e00a      	b.n	8000c68 <drive_by_servo+0x694>
		if (dist2 < d3) {
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	e008      	b.n	8000c68 <drive_by_servo+0x694>
		if (dist2 < d4) {
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	e006      	b.n	8000c68 <drive_by_servo+0x694>
		if (dist2 < d5) { // siia oli unustatud d2 vb sp töötas
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	e004      	b.n	8000c68 <drive_by_servo+0x694>
		if (dist2 < d6) { // siia oli unustatud d2 vb sp töötas
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	e002      	b.n	8000c68 <drive_by_servo+0x694>
		if (dist2 < d7) { // siia oli unustatud d2 vb sp töötas
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	e000      	b.n	8000c68 <drive_by_servo+0x694>
		if (dist2 < d8) { // siia oli unustatud d2 vb sp töötas
 8000c66:	46c0      	nop			; (mov r8, r8)
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	20000214 	.word	0x20000214
 8000c74:	20000104 	.word	0x20000104
 8000c78:	20000004 	.word	0x20000004
 8000c7c:	200000e4 	.word	0x200000e4

08000c80 <sense>:


void sense() {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	//TOF kuulamine
	dist1 = TOF_GetDistance(&sensor1);
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <sense+0x3c>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f003 fdbc 	bl	8004804 <TOF_GetDistance>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	001a      	movs	r2, r3
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <sense+0x40>)
 8000c92:	801a      	strh	r2, [r3, #0]
	dist2 = TOF_GetDistance(&sensor2);
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <sense+0x44>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f003 fdb4 	bl	8004804 <TOF_GetDistance>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <sense+0x48>)
 8000ca2:	801a      	strh	r2, [r3, #0]
	dist3 = TOF_GetDistance(&sensor3);
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <sense+0x4c>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f003 fdac 	bl	8004804 <TOF_GetDistance>
 8000cac:	0003      	movs	r3, r0
 8000cae:	001a      	movs	r2, r3
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <sense+0x50>)
 8000cb2:	801a      	strh	r2, [r3, #0]
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	200001e0 	.word	0x200001e0
 8000cc0:	20000210 	.word	0x20000210
 8000cc4:	200001f0 	.word	0x200001f0
 8000cc8:	20000212 	.word	0x20000212
 8000ccc:	20000200 	.word	0x20000200
 8000cd0:	20000214 	.word	0x20000214

08000cd4 <plan>:

void plan() {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	//drive_by_motor_speed();
	drive_by_servo();
 8000cd8:	f7ff fc7c 	bl	80005d4 <drive_by_servo>

}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <act>:

void act() {
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af02      	add	r7, sp, #8
	correct();
 8000cea:	f7ff fc3b 	bl	8000564 <correct>

	sprintf(distanceStr1, "L:%d       M:%d       R:%d \n\r", dist1, dist2, dist3);
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <act+0x84>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <act+0x88>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	001c      	movs	r4, r3
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <act+0x8c>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	491d      	ldr	r1, [pc, #116]	; (8000d74 <act+0x90>)
 8000d00:	481d      	ldr	r0, [pc, #116]	; (8000d78 <act+0x94>)
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	0023      	movs	r3, r4
 8000d06:	f003 fdd5 	bl	80048b4 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)distanceStr1, strlen(distanceStr1), 100);
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <act+0x94>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff f9fb 	bl	8000108 <strlen>
 8000d12:	0003      	movs	r3, r0
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	4918      	ldr	r1, [pc, #96]	; (8000d78 <act+0x94>)
 8000d18:	4818      	ldr	r0, [pc, #96]	; (8000d7c <act+0x98>)
 8000d1a:	2364      	movs	r3, #100	; 0x64
 8000d1c:	f002 fdfa 	bl	8003914 <HAL_UART_Transmit>

	//set left motor direction and speed
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, left_speed);
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <act+0x9c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <act+0xa0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(MOTOR_DIR_1_GPIO_Port, MOTOR_DIR_1_Pin, left_dir);
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <act+0xa4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4816      	ldr	r0, [pc, #88]	; (8000d8c <act+0xa8>)
 8000d32:	001a      	movs	r2, r3
 8000d34:	2101      	movs	r1, #1
 8000d36:	f000 fdc1 	bl	80018bc <HAL_GPIO_WritePin>

	//set right motor direction and speed
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, right_speed);
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <act+0xac>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <act+0xa0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(MOTOR_DIR_2_GPIO_Port, MOTOR_DIR_2_Pin, right_dir);
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <act+0xb0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4810      	ldr	r0, [pc, #64]	; (8000d8c <act+0xa8>)
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2102      	movs	r1, #2
 8000d50:	f000 fdb4 	bl	80018bc <HAL_GPIO_WritePin>

	//set servo angle
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, servo);
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <act+0xb4>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <act+0xb8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b001      	add	sp, #4
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	20000210 	.word	0x20000210
 8000d6c:	20000212 	.word	0x20000212
 8000d70:	20000214 	.word	0x20000214
 8000d74:	08005198 	.word	0x08005198
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	200002ac 	.word	0x200002ac
 8000d80:	200000d4 	.word	0x200000d4
 8000d84:	2000021c 	.word	0x2000021c
 8000d88:	200000dc 	.word	0x200000dc
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	200000d8 	.word	0x200000d8
 8000d94:	200000e0 	.word	0x200000e0
 8000d98:	200000e4 	.word	0x200000e4
 8000d9c:	20000264 	.word	0x20000264

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f000 fb02 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f813 	bl	8000dd2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dac:	f7ff fa4a 	bl	8000244 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000db0:	f000 fa56 	bl	8001260 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000db4:	f7ff faf2 	bl	800039c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000db8:	f000 f8ea 	bl	8000f90 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000dbc:	f000 f956 	bl	800106c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  init();
 8000dc0:	f7ff fb7a 	bl	80004b8 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sense();
 8000dc4:	f7ff ff5c 	bl	8000c80 <sense>
	  plan();
 8000dc8:	f7ff ff84 	bl	8000cd4 <plan>
	  act();
 8000dcc:	f7ff ff8a 	bl	8000ce4 <act>
	  sense();
 8000dd0:	e7f8      	b.n	8000dc4 <main+0x24>

08000dd2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd2:	b590      	push	{r4, r7, lr}
 8000dd4:	b095      	sub	sp, #84	; 0x54
 8000dd6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd8:	2420      	movs	r4, #32
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	0018      	movs	r0, r3
 8000dde:	2330      	movs	r3, #48	; 0x30
 8000de0:	001a      	movs	r2, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	f003 fd5d 	bl	80048a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	2310      	movs	r3, #16
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	0018      	movs	r0, r3
 8000dee:	2310      	movs	r3, #16
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f003 fd55 	bl	80048a2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	003b      	movs	r3, r7
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	001a      	movs	r2, r3
 8000e00:	2100      	movs	r1, #0
 8000e02:	f003 fd4e 	bl	80048a2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e06:	0021      	movs	r1, r4
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2201      	movs	r2, #1
 8000e12:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2210      	movs	r2, #16
 8000e18:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	22a0      	movs	r2, #160	; 0xa0
 8000e2a:	0392      	lsls	r2, r2, #14
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2200      	movs	r2, #0
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	0018      	movs	r0, r3
 8000e38:	f001 fa94 	bl	8002364 <HAL_RCC_OscConfig>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e40:	f000 f828 	bl	8000e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e44:	2110      	movs	r1, #16
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2202      	movs	r2, #2
 8000e50:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2101      	movs	r1, #1
 8000e62:	0018      	movs	r0, r3
 8000e64:	f001 fd98 	bl	8002998 <HAL_RCC_ClockConfig>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e6c:	f000 f812 	bl	8000e94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e70:	003b      	movs	r3, r7
 8000e72:	2220      	movs	r2, #32
 8000e74:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e76:	003b      	movs	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	003b      	movs	r3, r7
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f001 fedc 	bl	8002c3c <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e88:	f000 f804 	bl	8000e94 <Error_Handler>
  }
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b015      	add	sp, #84	; 0x54
 8000e92:	bd90      	pop	{r4, r7, pc}

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x8>
	...

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	619a      	str	r2, [r3, #24]
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec0:	69da      	ldr	r2, [r3, #28]
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	0549      	lsls	r1, r1, #21
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	61da      	str	r2, [r3, #28]
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ece:	69da      	ldr	r2, [r3, #28]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	055b      	lsls	r3, r3, #21
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b002      	add	sp, #8
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 fa96 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	18d3      	adds	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f003 fc78 	bl	800483c <__errno>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	2301      	movs	r3, #1
 8000f54:	425b      	negs	r3, r3
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	18d2      	adds	r2, r2, r3
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <_sbrk+0x64>)
 8000f68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b006      	add	sp, #24
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20002000 	.word	0x20002000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	20000218 	.word	0x20000218
 8000f80:	20000448 	.word	0x20000448

08000f84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f96:	2320      	movs	r3, #32
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f003 fc7e 	bl	80048a2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	0018      	movs	r0, r3
 8000faa:	231c      	movs	r3, #28
 8000fac:	001a      	movs	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f003 fc77 	bl	80048a2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	; (800105c <MX_TIM3_Init+0xcc>)
 8000fb6:	4a2a      	ldr	r2, [pc, #168]	; (8001060 <MX_TIM3_Init+0xd0>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 960-1;
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <MX_TIM3_Init+0xcc>)
 8000fbc:	4a29      	ldr	r2, [pc, #164]	; (8001064 <MX_TIM3_Init+0xd4>)
 8000fbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_TIM3_Init+0xcc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <MX_TIM3_Init+0xcc>)
 8000fc8:	4a27      	ldr	r2, [pc, #156]	; (8001068 <MX_TIM3_Init+0xd8>)
 8000fca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <MX_TIM3_Init+0xcc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <MX_TIM3_Init+0xcc>)
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fd8:	4b20      	ldr	r3, [pc, #128]	; (800105c <MX_TIM3_Init+0xcc>)
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f001 ff90 	bl	8002f00 <HAL_TIM_PWM_Init>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000fe4:	f7ff ff56 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe8:	2120      	movs	r1, #32
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff6:	187a      	adds	r2, r7, r1
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_TIM3_Init+0xcc>)
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f002 fbdd 	bl	80037bc <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001006:	f7ff ff45 	bl	8000e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2260      	movs	r2, #96	; 0x60
 800100e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001022:	1d39      	adds	r1, r7, #4
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_TIM3_Init+0xcc>)
 8001026:	2200      	movs	r2, #0
 8001028:	0018      	movs	r0, r3
 800102a:	f002 f86b 	bl	8003104 <HAL_TIM_PWM_ConfigChannel>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8001032:	f7ff ff2f 	bl	8000e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001036:	1d39      	adds	r1, r7, #4
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_TIM3_Init+0xcc>)
 800103a:	2204      	movs	r2, #4
 800103c:	0018      	movs	r0, r3
 800103e:	f002 f861 	bl	8003104 <HAL_TIM_PWM_ConfigChannel>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001046:	f7ff ff25 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <MX_TIM3_Init+0xcc>)
 800104c:	0018      	movs	r0, r3
 800104e:	f000 f89b 	bl	8001188 <HAL_TIM_MspPostInit>

}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b00a      	add	sp, #40	; 0x28
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	2000021c 	.word	0x2000021c
 8001060:	40000400 	.word	0x40000400
 8001064:	000003bf 	.word	0x000003bf
 8001068:	000003e7 	.word	0x000003e7

0800106c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	0018      	movs	r0, r3
 8001076:	231c      	movs	r3, #28
 8001078:	001a      	movs	r2, r3
 800107a:	2100      	movs	r1, #0
 800107c:	f003 fc11 	bl	80048a2 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <MX_TIM14_Init+0x94>)
 8001082:	4a20      	ldr	r2, [pc, #128]	; (8001104 <MX_TIM14_Init+0x98>)
 8001084:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_TIM14_Init+0x94>)
 8001088:	222f      	movs	r2, #47	; 0x2f
 800108a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_TIM14_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_TIM14_Init+0x94>)
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <MX_TIM14_Init+0x9c>)
 8001096:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_TIM14_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_TIM14_Init+0x94>)
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_TIM14_Init+0x94>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f001 fe96 	bl	8002dd8 <HAL_TIM_Base_Init>
 80010ac:	1e03      	subs	r3, r0, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80010b0:	f7ff fef0 	bl	8000e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_TIM14_Init+0x94>)
 80010b6:	0018      	movs	r0, r3
 80010b8:	f001 ff22 	bl	8002f00 <HAL_TIM_PWM_Init>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80010c0:	f7ff fee8 	bl	8000e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2260      	movs	r2, #96	; 0x60
 80010c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	1d39      	adds	r1, r7, #4
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_TIM14_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	0018      	movs	r0, r3
 80010e4:	f002 f80e 	bl	8003104 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	1e03      	subs	r3, r0, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80010ec:	f7ff fed2 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <MX_TIM14_Init+0x94>)
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 f848 	bl	8001188 <HAL_TIM_MspPostInit>

}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b008      	add	sp, #32
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000264 	.word	0x20000264
 8001104:	40002000 	.word	0x40002000
 8001108:	00004e1f 	.word	0x00004e1f

0800110c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <HAL_TIM_PWM_MspInit+0x34>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10b      	bne.n	8001136 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_TIM_PWM_MspInit+0x38>)
 8001120:	69da      	ldr	r2, [r3, #28]
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_TIM_PWM_MspInit+0x38>)
 8001124:	2102      	movs	r1, #2
 8001126:	430a      	orrs	r2, r1
 8001128:	61da      	str	r2, [r3, #28]
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_TIM_PWM_MspInit+0x38>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	2202      	movs	r2, #2
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b004      	add	sp, #16
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	40000400 	.word	0x40000400
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_TIM_Base_MspInit+0x38>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d10d      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_TIM_Base_MspInit+0x3c>)
 800115c:	69da      	ldr	r2, [r3, #28]
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_TIM_Base_MspInit+0x3c>)
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	0049      	lsls	r1, r1, #1
 8001164:	430a      	orrs	r2, r1
 8001166:	61da      	str	r2, [r3, #28]
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_TIM_Base_MspInit+0x3c>)
 800116a:	69da      	ldr	r2, [r3, #28]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b004      	add	sp, #16
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	40002000 	.word	0x40002000
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b08b      	sub	sp, #44	; 0x2c
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	2414      	movs	r4, #20
 8001192:	193b      	adds	r3, r7, r4
 8001194:	0018      	movs	r0, r3
 8001196:	2314      	movs	r3, #20
 8001198:	001a      	movs	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	f003 fb81 	bl	80048a2 <memset>
  if(timHandle->Instance==TIM3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a2b      	ldr	r2, [pc, #172]	; (8001254 <HAL_TIM_MspPostInit+0xcc>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d125      	bne.n	80011f6 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <HAL_TIM_MspPostInit+0xd0>)
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <HAL_TIM_MspPostInit+0xd0>)
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	0289      	lsls	r1, r1, #10
 80011b4:	430a      	orrs	r2, r1
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_TIM_MspPostInit+0xd0>)
 80011ba:	695a      	ldr	r2, [r3, #20]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	029b      	lsls	r3, r3, #10
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_1_Pin|MOTOR_PWM_2_Pin;
 80011c6:	0021      	movs	r1, r4
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	22c0      	movs	r2, #192	; 0xc0
 80011cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2202      	movs	r2, #2
 80011d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2201      	movs	r2, #1
 80011e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	187a      	adds	r2, r7, r1
 80011e8:	2390      	movs	r3, #144	; 0x90
 80011ea:	05db      	lsls	r3, r3, #23
 80011ec:	0011      	movs	r1, r2
 80011ee:	0018      	movs	r0, r3
 80011f0:	f000 f9f4 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80011f4:	e029      	b.n	800124a <HAL_TIM_MspPostInit+0xc2>
  else if(timHandle->Instance==TIM14)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <HAL_TIM_MspPostInit+0xd4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d124      	bne.n	800124a <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_TIM_MspPostInit+0xd0>)
 8001202:	695a      	ldr	r2, [r3, #20]
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_TIM_MspPostInit+0xd0>)
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	0289      	lsls	r1, r1, #10
 800120a:	430a      	orrs	r2, r1
 800120c:	615a      	str	r2, [r3, #20]
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_TIM_MspPostInit+0xd0>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	029b      	lsls	r3, r3, #10
 8001216:	4013      	ands	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800121c:	2114      	movs	r1, #20
 800121e:	187b      	adds	r3, r7, r1
 8001220:	2210      	movs	r2, #16
 8001222:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2202      	movs	r2, #2
 8001228:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	2204      	movs	r2, #4
 800123a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 800123c:	187a      	adds	r2, r7, r1
 800123e:	2390      	movs	r3, #144	; 0x90
 8001240:	05db      	lsls	r3, r3, #23
 8001242:	0011      	movs	r1, r2
 8001244:	0018      	movs	r0, r3
 8001246:	f000 f9c9 	bl	80015dc <HAL_GPIO_Init>
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b00b      	add	sp, #44	; 0x2c
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	40000400 	.word	0x40000400
 8001258:	40021000 	.word	0x40021000
 800125c:	40002000 	.word	0x40002000

08001260 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001266:	4a15      	ldr	r2, [pc, #84]	; (80012bc <MX_USART2_UART_Init+0x5c>)
 8001268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800126c:	22e1      	movs	r2, #225	; 0xe1
 800126e:	0252      	lsls	r2, r2, #9
 8001270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <MX_USART2_UART_Init+0x58>)
 80012a4:	0018      	movs	r0, r3
 80012a6:	f002 fae1 	bl	800386c <HAL_UART_Init>
 80012aa:	1e03      	subs	r3, r0, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012ae:	f7ff fdf1 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200002ac 	.word	0x200002ac
 80012bc:	40004400 	.word	0x40004400

080012c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b08b      	sub	sp, #44	; 0x2c
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	2414      	movs	r4, #20
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	0018      	movs	r0, r3
 80012ce:	2314      	movs	r3, #20
 80012d0:	001a      	movs	r2, r3
 80012d2:	2100      	movs	r1, #0
 80012d4:	f003 fae5 	bl	80048a2 <memset>
  if(uartHandle->Instance==USART2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <HAL_UART_MspInit+0x90>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d132      	bne.n	8001348 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_UART_MspInit+0x94>)
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_UART_MspInit+0x94>)
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	0289      	lsls	r1, r1, #10
 80012ec:	430a      	orrs	r2, r1
 80012ee:	61da      	str	r2, [r3, #28]
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_UART_MspInit+0x94>)
 80012f2:	69da      	ldr	r2, [r3, #28]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	029b      	lsls	r3, r3, #10
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_UART_MspInit+0x94>)
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_UART_MspInit+0x94>)
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	0289      	lsls	r1, r1, #10
 8001308:	430a      	orrs	r2, r1
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_UART_MspInit+0x94>)
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	029b      	lsls	r3, r3, #10
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800131a:	0021      	movs	r1, r4
 800131c:	187b      	adds	r3, r7, r1
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2202      	movs	r2, #2
 8001326:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2201      	movs	r2, #1
 8001338:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	187a      	adds	r2, r7, r1
 800133c:	2390      	movs	r3, #144	; 0x90
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	0011      	movs	r1, r2
 8001342:	0018      	movs	r0, r3
 8001344:	f000 f94a 	bl	80015dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b00b      	add	sp, #44	; 0x2c
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	40004400 	.word	0x40004400
 8001354:	40021000 	.word	0x40021000

08001358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800135a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <LoopForever+0x6>)
  ldr r1, =_edata
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001360:	4a0e      	ldr	r2, [pc, #56]	; (800139c <LoopForever+0xe>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001374:	4c0b      	ldr	r4, [pc, #44]	; (80013a4 <LoopForever+0x16>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001382:	f7ff fdff 	bl	8000f84 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001386:	f003 fa5f 	bl	8004848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800138a:	f7ff fd09 	bl	8000da0 <main>

0800138e <LoopForever>:

LoopForever:
    b LoopForever
 800138e:	e7fe      	b.n	800138e <LoopForever>
  ldr   r0, =_estack
 8001390:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 800139c:	08005288 	.word	0x08005288
  ldr r2, =_sbss
 80013a0:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80013a4:	20000448 	.word	0x20000448

080013a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_IRQHandler>
	...

080013ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_Init+0x24>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_Init+0x24>)
 80013b6:	2110      	movs	r1, #16
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 f809 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c2:	f7ff fd6d 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	40022000 	.word	0x40022000

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_InitTick+0x5c>)
 80013de:	681c      	ldr	r4, [r3, #0]
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_InitTick+0x60>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	0019      	movs	r1, r3
 80013e6:	23fa      	movs	r3, #250	; 0xfa
 80013e8:	0098      	lsls	r0, r3, #2
 80013ea:	f7fe fe9f 	bl	800012c <__udivsi3>
 80013ee:	0003      	movs	r3, r0
 80013f0:	0019      	movs	r1, r3
 80013f2:	0020      	movs	r0, r4
 80013f4:	f7fe fe9a 	bl	800012c <__udivsi3>
 80013f8:	0003      	movs	r3, r0
 80013fa:	0018      	movs	r0, r3
 80013fc:	f000 f8e1 	bl	80015c2 <HAL_SYSTICK_Config>
 8001400:	1e03      	subs	r3, r0, #0
 8001402:	d001      	beq.n	8001408 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e00f      	b.n	8001428 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d80b      	bhi.n	8001426 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	2301      	movs	r3, #1
 8001412:	425b      	negs	r3, r3
 8001414:	2200      	movs	r2, #0
 8001416:	0018      	movs	r0, r3
 8001418:	f000 f8be 	bl	8001598 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_InitTick+0x64>)
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b003      	add	sp, #12
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	20000108 	.word	0x20000108
 8001434:	20000110 	.word	0x20000110
 8001438:	2000010c 	.word	0x2000010c

0800143c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_IncTick+0x1c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	001a      	movs	r2, r3
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_IncTick+0x20>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	18d2      	adds	r2, r2, r3
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_IncTick+0x20>)
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	20000110 	.word	0x20000110
 800145c:	20000330 	.word	0x20000330

08001460 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_GetTick+0x10>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	20000330 	.word	0x20000330

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	0002      	movs	r2, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b7f      	cmp	r3, #127	; 0x7f
 8001488:	d828      	bhi.n	80014dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148a:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <__NVIC_SetPriority+0xd4>)
 800148c:	1dfb      	adds	r3, r7, #7
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b25b      	sxtb	r3, r3
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	33c0      	adds	r3, #192	; 0xc0
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	589b      	ldr	r3, [r3, r2]
 800149a:	1dfa      	adds	r2, r7, #7
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	0011      	movs	r1, r2
 80014a0:	2203      	movs	r2, #3
 80014a2:	400a      	ands	r2, r1
 80014a4:	00d2      	lsls	r2, r2, #3
 80014a6:	21ff      	movs	r1, #255	; 0xff
 80014a8:	4091      	lsls	r1, r2
 80014aa:	000a      	movs	r2, r1
 80014ac:	43d2      	mvns	r2, r2
 80014ae:	401a      	ands	r2, r3
 80014b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	019b      	lsls	r3, r3, #6
 80014b6:	22ff      	movs	r2, #255	; 0xff
 80014b8:	401a      	ands	r2, r3
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	0018      	movs	r0, r3
 80014c0:	2303      	movs	r3, #3
 80014c2:	4003      	ands	r3, r0
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c8:	481f      	ldr	r0, [pc, #124]	; (8001548 <__NVIC_SetPriority+0xd4>)
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	430a      	orrs	r2, r1
 80014d4:	33c0      	adds	r3, #192	; 0xc0
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014da:	e031      	b.n	8001540 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <__NVIC_SetPriority+0xd8>)
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	0019      	movs	r1, r3
 80014e4:	230f      	movs	r3, #15
 80014e6:	400b      	ands	r3, r1
 80014e8:	3b08      	subs	r3, #8
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3306      	adds	r3, #6
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	3304      	adds	r3, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	1dfa      	adds	r2, r7, #7
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	0011      	movs	r1, r2
 80014fc:	2203      	movs	r2, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	00d2      	lsls	r2, r2, #3
 8001502:	21ff      	movs	r1, #255	; 0xff
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	43d2      	mvns	r2, r2
 800150a:	401a      	ands	r2, r3
 800150c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	22ff      	movs	r2, #255	; 0xff
 8001514:	401a      	ands	r2, r3
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	0018      	movs	r0, r3
 800151c:	2303      	movs	r3, #3
 800151e:	4003      	ands	r3, r0
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <__NVIC_SetPriority+0xd8>)
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	001c      	movs	r4, r3
 800152c:	230f      	movs	r3, #15
 800152e:	4023      	ands	r3, r4
 8001530:	3b08      	subs	r3, #8
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	430a      	orrs	r2, r1
 8001536:	3306      	adds	r3, #6
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	18c3      	adds	r3, r0, r3
 800153c:	3304      	adds	r3, #4
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b003      	add	sp, #12
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	045b      	lsls	r3, r3, #17
 8001560:	429a      	cmp	r2, r3
 8001562:	d301      	bcc.n	8001568 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001564:	2301      	movs	r3, #1
 8001566:	e010      	b.n	800158a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <SysTick_Config+0x44>)
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	3a01      	subs	r2, #1
 800156e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001570:	2301      	movs	r3, #1
 8001572:	425b      	negs	r3, r3
 8001574:	2103      	movs	r1, #3
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff ff7c 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x44>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x44>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b002      	add	sp, #8
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	210f      	movs	r1, #15
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	1c02      	adds	r2, r0, #0
 80015a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff ffbf 	bl	8001550 <SysTick_Config>
 80015d2:	0003      	movs	r3, r0
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e14f      	b.n	800188c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4091      	lsls	r1, r2
 80015f6:	000a      	movs	r2, r1
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d100      	bne.n	8001604 <HAL_GPIO_Init+0x28>
 8001602:	e140      	b.n	8001886 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	4013      	ands	r3, r2
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2203      	movs	r2, #3
 8001616:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001618:	2b02      	cmp	r3, #2
 800161a:	d130      	bne.n	800167e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	43da      	mvns	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	409a      	lsls	r2, r3
 800163e:	0013      	movs	r3, r2
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001652:	2201      	movs	r2, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	43da      	mvns	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	2201      	movs	r2, #1
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	4013      	ands	r3, r2
 8001686:	2b03      	cmp	r3, #3
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	43da      	mvns	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2203      	movs	r2, #3
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d123      	bne.n	800170e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	58d3      	ldr	r3, [r2, r3]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2207      	movs	r2, #7
 80016d8:	4013      	ands	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2107      	movs	r1, #7
 80016f2:	400b      	ands	r3, r1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	6939      	ldr	r1, [r7, #16]
 800170c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2203      	movs	r2, #3
 800172c:	401a      	ands	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	23c0      	movs	r3, #192	; 0xc0
 8001748:	029b      	lsls	r3, r3, #10
 800174a:	4013      	ands	r3, r2
 800174c:	d100      	bne.n	8001750 <HAL_GPIO_Init+0x174>
 800174e:	e09a      	b.n	8001886 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001750:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <HAL_GPIO_Init+0x2c8>)
 8001752:	699a      	ldr	r2, [r3, #24]
 8001754:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <HAL_GPIO_Init+0x2c8>)
 8001756:	2101      	movs	r1, #1
 8001758:	430a      	orrs	r2, r1
 800175a:	619a      	str	r2, [r3, #24]
 800175c:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <HAL_GPIO_Init+0x2c8>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001768:	4a4f      	ldr	r2, [pc, #316]	; (80018a8 <HAL_GPIO_Init+0x2cc>)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	589b      	ldr	r3, [r3, r2]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2203      	movs	r2, #3
 800177a:	4013      	ands	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	43da      	mvns	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	2390      	movs	r3, #144	; 0x90
 8001790:	05db      	lsls	r3, r3, #23
 8001792:	429a      	cmp	r2, r3
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0x1e2>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a44      	ldr	r2, [pc, #272]	; (80018ac <HAL_GPIO_Init+0x2d0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00d      	beq.n	80017ba <HAL_GPIO_Init+0x1de>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a43      	ldr	r2, [pc, #268]	; (80018b0 <HAL_GPIO_Init+0x2d4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d007      	beq.n	80017b6 <HAL_GPIO_Init+0x1da>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <HAL_GPIO_Init+0x2d8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_GPIO_Init+0x1d6>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017b2:	2305      	movs	r3, #5
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x1e4>
 80017be:	2300      	movs	r3, #0
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	2103      	movs	r1, #3
 80017c4:	400a      	ands	r2, r1
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d0:	4935      	ldr	r1, [pc, #212]	; (80018a8 <HAL_GPIO_Init+0x2cc>)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	025b      	lsls	r3, r3, #9
 80017f6:	4013      	ands	r3, r2
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43da      	mvns	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	029b      	lsls	r3, r3, #10
 8001820:	4013      	ands	r3, r2
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43da      	mvns	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	035b      	lsls	r3, r3, #13
 800184a:	4013      	ands	r3, r2
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43da      	mvns	r2, r3
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	039b      	lsls	r3, r3, #14
 8001874:	4013      	ands	r3, r2
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_GPIO_Init+0x2dc>)
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	40da      	lsrs	r2, r3
 8001894:	1e13      	subs	r3, r2, #0
 8001896:	d000      	beq.n	800189a <HAL_GPIO_Init+0x2be>
 8001898:	e6a8      	b.n	80015ec <HAL_GPIO_Init+0x10>
  } 
}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b006      	add	sp, #24
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010000 	.word	0x40010000
 80018ac:	48000400 	.word	0x48000400
 80018b0:	48000800 	.word	0x48000800
 80018b4:	48000c00 	.word	0x48000c00
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	0008      	movs	r0, r1
 80018c6:	0011      	movs	r1, r2
 80018c8:	1cbb      	adds	r3, r7, #2
 80018ca:	1c02      	adds	r2, r0, #0
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	1c7b      	adds	r3, r7, #1
 80018d0:	1c0a      	adds	r2, r1, #0
 80018d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d4:	1c7b      	adds	r3, r7, #1
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018dc:	1cbb      	adds	r3, r7, #2
 80018de:	881a      	ldrh	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018e6:	1cbb      	adds	r3, r7, #2
 80018e8:	881a      	ldrh	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e082      	b.n	8001a10 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2241      	movs	r2, #65	; 0x41
 800190e:	5c9b      	ldrb	r3, [r3, r2]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2240      	movs	r2, #64	; 0x40
 800191a:	2100      	movs	r1, #0
 800191c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	0018      	movs	r0, r3
 8001922:	f7fe fd7b 	bl	800041c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2241      	movs	r2, #65	; 0x41
 800192a:	2124      	movs	r1, #36	; 0x24
 800192c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	438a      	bics	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4934      	ldr	r1, [pc, #208]	; (8001a18 <HAL_I2C_Init+0x120>)
 8001948:	400a      	ands	r2, r1
 800194a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4931      	ldr	r1, [pc, #196]	; (8001a1c <HAL_I2C_Init+0x124>)
 8001958:	400a      	ands	r2, r1
 800195a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d108      	bne.n	8001976 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	0209      	lsls	r1, r1, #8
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	e007      	b.n	8001986 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2184      	movs	r1, #132	; 0x84
 8001980:	0209      	lsls	r1, r1, #8
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d104      	bne.n	8001998 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	491f      	ldr	r1, [pc, #124]	; (8001a20 <HAL_I2C_Init+0x128>)
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	491a      	ldr	r1, [pc, #104]	; (8001a1c <HAL_I2C_Init+0x124>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69d9      	ldr	r1, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1a      	ldr	r2, [r3, #32]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2241      	movs	r2, #65	; 0x41
 80019fc:	2120      	movs	r1, #32
 80019fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2242      	movs	r2, #66	; 0x42
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	f0ffffff 	.word	0xf0ffffff
 8001a1c:	ffff7fff 	.word	0xffff7fff
 8001a20:	02008000 	.word	0x02008000

08001a24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	0008      	movs	r0, r1
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	0019      	movs	r1, r3
 8001a32:	230a      	movs	r3, #10
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	1c02      	adds	r2, r0, #0
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	1c0a      	adds	r2, r1, #0
 8001a40:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2241      	movs	r2, #65	; 0x41
 8001a46:	5c9b      	ldrb	r3, [r3, r2]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d000      	beq.n	8001a50 <HAL_I2C_Master_Transmit+0x2c>
 8001a4e:	e0e7      	b.n	8001c20 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2240      	movs	r2, #64	; 0x40
 8001a54:	5c9b      	ldrb	r3, [r3, r2]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_I2C_Master_Transmit+0x3a>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e0e1      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a66:	f7ff fcfb 	bl	8001460 <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	0219      	lsls	r1, r3, #8
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2319      	movs	r3, #25
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f000 fa04 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001a80:	1e03      	subs	r3, r0, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0cc      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2241      	movs	r2, #65	; 0x41
 8001a8c:	2121      	movs	r1, #33	; 0x21
 8001a8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2242      	movs	r2, #66	; 0x42
 8001a94:	2110      	movs	r1, #16
 8001a96:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	18ba      	adds	r2, r7, r2
 8001aaa:	8812      	ldrh	r2, [r2, #0]
 8001aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2bff      	cmp	r3, #255	; 0xff
 8001abc:	d911      	bls.n	8001ae2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	22ff      	movs	r2, #255	; 0xff
 8001ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	045c      	lsls	r4, r3, #17
 8001ace:	230a      	movs	r3, #10
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	8819      	ldrh	r1, [r3, #0]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <HAL_I2C_Master_Transmit+0x208>)
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	0023      	movs	r3, r4
 8001adc:	f000 fb74 	bl	80021c8 <I2C_TransferConfig>
 8001ae0:	e075      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	049c      	lsls	r4, r3, #18
 8001af6:	230a      	movs	r3, #10
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	8819      	ldrh	r1, [r3, #0]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <HAL_I2C_Master_Transmit+0x208>)
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	0023      	movs	r3, r4
 8001b04:	f000 fb60 	bl	80021c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b08:	e061      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 f9f8 	bl	8001f06 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e081      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d03a      	beq.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d136      	bne.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	0013      	movs	r3, r2
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	f000 f98b 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001b72:	1e03      	subs	r3, r0, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e053      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	d911      	bls.n	8001ba8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	22ff      	movs	r2, #255	; 0xff
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	045c      	lsls	r4, r3, #17
 8001b94:	230a      	movs	r3, #10
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	8819      	ldrh	r1, [r3, #0]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	0023      	movs	r3, r4
 8001ba2:	f000 fb11 	bl	80021c8 <I2C_TransferConfig>
 8001ba6:	e012      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	049c      	lsls	r4, r3, #18
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	8819      	ldrh	r1, [r3, #0]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	0023      	movs	r3, r4
 8001bca:	f000 fafd 	bl	80021c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d198      	bne.n	8001b0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 f9d0 	bl	8001f84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001be4:	1e03      	subs	r3, r0, #0
 8001be6:	d001      	beq.n	8001bec <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e01a      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	490c      	ldr	r1, [pc, #48]	; (8001c30 <HAL_I2C_Master_Transmit+0x20c>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2241      	movs	r2, #65	; 0x41
 8001c08:	2120      	movs	r1, #32
 8001c0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2242      	movs	r2, #66	; 0x42
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	2100      	movs	r1, #0
 8001c1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
  }
}
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b007      	add	sp, #28
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	80002000 	.word	0x80002000
 8001c30:	fe00e800 	.word	0xfe00e800

08001c34 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	0008      	movs	r0, r1
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	0019      	movs	r1, r3
 8001c42:	230a      	movs	r3, #10
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	1c02      	adds	r2, r0, #0
 8001c48:	801a      	strh	r2, [r3, #0]
 8001c4a:	2308      	movs	r3, #8
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	1c0a      	adds	r2, r1, #0
 8001c50:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2241      	movs	r2, #65	; 0x41
 8001c56:	5c9b      	ldrb	r3, [r3, r2]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d000      	beq.n	8001c60 <HAL_I2C_Master_Receive+0x2c>
 8001c5e:	e0e8      	b.n	8001e32 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	5c9b      	ldrb	r3, [r3, r2]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_I2C_Master_Receive+0x3a>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e0e2      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2240      	movs	r2, #64	; 0x40
 8001c72:	2101      	movs	r1, #1
 8001c74:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c76:	f7ff fbf3 	bl	8001460 <HAL_GetTick>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	0219      	lsls	r1, r3, #8
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2319      	movs	r3, #25
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f000 f8fc 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001c90:	1e03      	subs	r3, r0, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0cd      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2241      	movs	r2, #65	; 0x41
 8001c9c:	2122      	movs	r1, #34	; 0x22
 8001c9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2242      	movs	r2, #66	; 0x42
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	18ba      	adds	r2, r7, r2
 8001cba:	8812      	ldrh	r2, [r2, #0]
 8001cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2bff      	cmp	r3, #255	; 0xff
 8001ccc:	d911      	bls.n	8001cf2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	22ff      	movs	r2, #255	; 0xff
 8001cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	045c      	lsls	r4, r3, #17
 8001cde:	230a      	movs	r3, #10
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	8819      	ldrh	r1, [r3, #0]
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <HAL_I2C_Master_Receive+0x208>)
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	0023      	movs	r3, r4
 8001cec:	f000 fa6c 	bl	80021c8 <I2C_TransferConfig>
 8001cf0:	e076      	b.n	8001de0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	049c      	lsls	r4, r3, #18
 8001d06:	230a      	movs	r3, #10
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	8819      	ldrh	r1, [r3, #0]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <HAL_I2C_Master_Receive+0x208>)
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	0023      	movs	r3, r4
 8001d14:	f000 fa58 	bl	80021c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d18:	e062      	b.n	8001de0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 f96b 	bl	8001ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d26:	1e03      	subs	r3, r0, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e082      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03a      	beq.n	8001de0 <HAL_I2C_Master_Receive+0x1ac>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d136      	bne.n	8001de0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	f000 f882 	bl	8001e88 <I2C_WaitOnFlagUntilTimeout>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e053      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d911      	bls.n	8001dba <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	22ff      	movs	r2, #255	; 0xff
 8001d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	045c      	lsls	r4, r3, #17
 8001da6:	230a      	movs	r3, #10
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	8819      	ldrh	r1, [r3, #0]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	2300      	movs	r3, #0
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	0023      	movs	r3, r4
 8001db4:	f000 fa08 	bl	80021c8 <I2C_TransferConfig>
 8001db8:	e012      	b.n	8001de0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	049c      	lsls	r4, r3, #18
 8001dce:	230a      	movs	r3, #10
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	8819      	ldrh	r1, [r3, #0]
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	0023      	movs	r3, r4
 8001ddc:	f000 f9f4 	bl	80021c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d197      	bne.n	8001d1a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f000 f8c7 	bl	8001f84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001df6:	1e03      	subs	r3, r0, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e01a      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2220      	movs	r2, #32
 8001e04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	490b      	ldr	r1, [pc, #44]	; (8001e40 <HAL_I2C_Master_Receive+0x20c>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2241      	movs	r2, #65	; 0x41
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2242      	movs	r2, #66	; 0x42
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2240      	movs	r2, #64	; 0x40
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
  }
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b007      	add	sp, #28
 8001e3a:	bd90      	pop	{r4, r7, pc}
 8001e3c:	80002400 	.word	0x80002400
 8001e40:	fe00e800 	.word	0xfe00e800

08001e44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2202      	movs	r2, #2
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d103      	bne.n	8001e62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d007      	beq.n	8001e80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	619a      	str	r2, [r3, #24]
  }
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e98:	e021      	b.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	d01e      	beq.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea0:	f7ff fade 	bl	8001460 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d302      	bcc.n	8001eb6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d113      	bne.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	2220      	movs	r2, #32
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2241      	movs	r2, #65	; 0x41
 8001ec6:	2120      	movs	r1, #32
 8001ec8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2242      	movs	r2, #66	; 0x42
 8001ece:	2100      	movs	r1, #0
 8001ed0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2240      	movs	r2, #64	; 0x40
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	425a      	negs	r2, r3
 8001eee:	4153      	adcs	r3, r2
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d0ce      	beq.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	0018      	movs	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b004      	add	sp, #16
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f12:	e02b      	b.n	8001f6c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 f8da 	bl	80020d4 <I2C_IsAcknowledgeFailed>
 8001f20:	1e03      	subs	r3, r0, #0
 8001f22:	d001      	beq.n	8001f28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e029      	b.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	d01e      	beq.n	8001f6c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2e:	f7ff fa97 	bl	8001460 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d302      	bcc.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d113      	bne.n	8001f6c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	2220      	movs	r2, #32
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2241      	movs	r2, #65	; 0x41
 8001f54:	2120      	movs	r1, #32
 8001f56:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2242      	movs	r2, #66	; 0x42
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	2100      	movs	r1, #0
 8001f66:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e007      	b.n	8001f7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d1cc      	bne.n	8001f14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b004      	add	sp, #16
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f90:	e028      	b.n	8001fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 f89b 	bl	80020d4 <I2C_IsAcknowledgeFailed>
 8001f9e:	1e03      	subs	r3, r0, #0
 8001fa0:	d001      	beq.n	8001fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e026      	b.n	8001ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa6:	f7ff fa5b 	bl	8001460 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d302      	bcc.n	8001fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d113      	bne.n	8001fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2241      	movs	r2, #65	; 0x41
 8001fcc:	2120      	movs	r1, #32
 8001fce:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2242      	movs	r2, #66	; 0x42
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	2100      	movs	r1, #0
 8001fde:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e007      	b.n	8001ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2220      	movs	r2, #32
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d1cf      	bne.n	8001f92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b004      	add	sp, #16
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002008:	e055      	b.n	80020b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	0018      	movs	r0, r3
 8002012:	f000 f85f 	bl	80020d4 <I2C_IsAcknowledgeFailed>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d001      	beq.n	800201e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e053      	b.n	80020c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2220      	movs	r2, #32
 8002026:	4013      	ands	r3, r2
 8002028:	2b20      	cmp	r3, #32
 800202a:	d129      	bne.n	8002080 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2204      	movs	r2, #4
 8002034:	4013      	ands	r3, r2
 8002036:	2b04      	cmp	r3, #4
 8002038:	d105      	bne.n	8002046 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e03f      	b.n	80020c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2220      	movs	r2, #32
 800204c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	491d      	ldr	r1, [pc, #116]	; (80020d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800205a:	400a      	ands	r2, r1
 800205c:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2241      	movs	r2, #65	; 0x41
 8002068:	2120      	movs	r1, #32
 800206a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2242      	movs	r2, #66	; 0x42
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	2100      	movs	r1, #0
 800207a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e022      	b.n	80020c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002080:	f7ff f9ee 	bl	8001460 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	429a      	cmp	r2, r3
 800208e:	d302      	bcc.n	8002096 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	2220      	movs	r2, #32
 800209c:	431a      	orrs	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2241      	movs	r2, #65	; 0x41
 80020a6:	2120      	movs	r1, #32
 80020a8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2240      	movs	r2, #64	; 0x40
 80020ae:	2100      	movs	r1, #0
 80020b0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e007      	b.n	80020c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d1a2      	bne.n	800200a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	fe00e800 	.word	0xfe00e800

080020d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2210      	movs	r2, #16
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d164      	bne.n	80021b8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	049b      	lsls	r3, r3, #18
 80020f8:	401a      	ands	r2, r3
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	049b      	lsls	r3, r3, #18
 80020fe:	429a      	cmp	r2, r3
 8002100:	d02b      	beq.n	800215a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	01c9      	lsls	r1, r1, #7
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002114:	e021      	b.n	800215a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3301      	adds	r3, #1
 800211a:	d01e      	beq.n	800215a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211c:	f7ff f9a0 	bl	8001460 <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	429a      	cmp	r2, r3
 800212a:	d302      	bcc.n	8002132 <I2C_IsAcknowledgeFailed+0x5e>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d113      	bne.n	800215a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	2220      	movs	r2, #32
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2241      	movs	r2, #65	; 0x41
 8002142:	2120      	movs	r1, #32
 8002144:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2242      	movs	r2, #66	; 0x42
 800214a:	2100      	movs	r1, #0
 800214c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e02f      	b.n	80021ba <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2220      	movs	r2, #32
 8002162:	4013      	ands	r3, r2
 8002164:	2b20      	cmp	r3, #32
 8002166:	d1d6      	bne.n	8002116 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2210      	movs	r2, #16
 800216e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2220      	movs	r2, #32
 8002176:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	0018      	movs	r0, r3
 800217c:	f7ff fe62 	bl	8001e44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	490e      	ldr	r1, [pc, #56]	; (80021c4 <I2C_IsAcknowledgeFailed+0xf0>)
 800218c:	400a      	ands	r2, r1
 800218e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	2204      	movs	r2, #4
 8002196:	431a      	orrs	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2241      	movs	r2, #65	; 0x41
 80021a0:	2120      	movs	r1, #32
 80021a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2242      	movs	r2, #66	; 0x42
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	0018      	movs	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	b004      	add	sp, #16
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	fe00e800 	.word	0xfe00e800

080021c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	0008      	movs	r0, r1
 80021d2:	0011      	movs	r1, r2
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	240a      	movs	r4, #10
 80021d8:	193b      	adds	r3, r7, r4
 80021da:	1c02      	adds	r2, r0, #0
 80021dc:	801a      	strh	r2, [r3, #0]
 80021de:	2009      	movs	r0, #9
 80021e0:	183b      	adds	r3, r7, r0
 80021e2:	1c0a      	adds	r2, r1, #0
 80021e4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	6a3a      	ldr	r2, [r7, #32]
 80021ee:	0d51      	lsrs	r1, r2, #21
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	00d2      	lsls	r2, r2, #3
 80021f4:	400a      	ands	r2, r1
 80021f6:	490e      	ldr	r1, [pc, #56]	; (8002230 <I2C_TransferConfig+0x68>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	43d2      	mvns	r2, r2
 80021fc:	401a      	ands	r2, r3
 80021fe:	0011      	movs	r1, r2
 8002200:	193b      	adds	r3, r7, r4
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	059b      	lsls	r3, r3, #22
 8002206:	0d9a      	lsrs	r2, r3, #22
 8002208:	183b      	adds	r3, r7, r0
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	0418      	lsls	r0, r3, #16
 800220e:	23ff      	movs	r3, #255	; 0xff
 8002210:	041b      	lsls	r3, r3, #16
 8002212:	4003      	ands	r3, r0
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	431a      	orrs	r2, r3
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	431a      	orrs	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b005      	add	sp, #20
 800222c:	bd90      	pop	{r4, r7, pc}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	03ff63ff 	.word	0x03ff63ff

08002234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2241      	movs	r2, #65	; 0x41
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b20      	cmp	r3, #32
 8002248:	d138      	bne.n	80022bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2240      	movs	r2, #64	; 0x40
 800224e:	5c9b      	ldrb	r3, [r3, r2]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002254:	2302      	movs	r3, #2
 8002256:	e032      	b.n	80022be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2240      	movs	r2, #64	; 0x40
 800225c:	2101      	movs	r1, #1
 800225e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2241      	movs	r2, #65	; 0x41
 8002264:	2124      	movs	r1, #36	; 0x24
 8002266:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2101      	movs	r1, #1
 8002274:	438a      	bics	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4911      	ldr	r1, [pc, #68]	; (80022c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002284:	400a      	ands	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6819      	ldr	r1, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2101      	movs	r1, #1
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2241      	movs	r2, #65	; 0x41
 80022ac:	2120      	movs	r1, #32
 80022ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2240      	movs	r2, #64	; 0x40
 80022b4:	2100      	movs	r1, #0
 80022b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	ffffefff 	.word	0xffffefff

080022cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2241      	movs	r2, #65	; 0x41
 80022da:	5c9b      	ldrb	r3, [r3, r2]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d139      	bne.n	8002356 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	5c9b      	ldrb	r3, [r3, r2]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e033      	b.n	8002358 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2240      	movs	r2, #64	; 0x40
 80022f4:	2101      	movs	r1, #1
 80022f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2241      	movs	r2, #65	; 0x41
 80022fc:	2124      	movs	r1, #36	; 0x24
 80022fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2101      	movs	r1, #1
 800230c:	438a      	bics	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a11      	ldr	r2, [pc, #68]	; (8002360 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2241      	movs	r2, #65	; 0x41
 8002346:	2120      	movs	r1, #32
 8002348:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2240      	movs	r2, #64	; 0x40
 800234e:	2100      	movs	r1, #0
 8002350:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	e000      	b.n	8002358 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002356:	2302      	movs	r3, #2
  }
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}
 8002360:	fffff0ff 	.word	0xfffff0ff

08002364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e301      	b.n	800297a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	4013      	ands	r3, r2
 800237e:	d100      	bne.n	8002382 <HAL_RCC_OscConfig+0x1e>
 8002380:	e08d      	b.n	800249e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002382:	4bc3      	ldr	r3, [pc, #780]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	220c      	movs	r2, #12
 8002388:	4013      	ands	r3, r2
 800238a:	2b04      	cmp	r3, #4
 800238c:	d00e      	beq.n	80023ac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800238e:	4bc0      	ldr	r3, [pc, #768]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	220c      	movs	r2, #12
 8002394:	4013      	ands	r3, r2
 8002396:	2b08      	cmp	r3, #8
 8002398:	d116      	bne.n	80023c8 <HAL_RCC_OscConfig+0x64>
 800239a:	4bbd      	ldr	r3, [pc, #756]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	025b      	lsls	r3, r3, #9
 80023a2:	401a      	ands	r2, r3
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	025b      	lsls	r3, r3, #9
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d10d      	bne.n	80023c8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4bb8      	ldr	r3, [pc, #736]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	029b      	lsls	r3, r3, #10
 80023b4:	4013      	ands	r3, r2
 80023b6:	d100      	bne.n	80023ba <HAL_RCC_OscConfig+0x56>
 80023b8:	e070      	b.n	800249c <HAL_RCC_OscConfig+0x138>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d000      	beq.n	80023c4 <HAL_RCC_OscConfig+0x60>
 80023c2:	e06b      	b.n	800249c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e2d8      	b.n	800297a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_OscConfig+0x7c>
 80023d0:	4baf      	ldr	r3, [pc, #700]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4bae      	ldr	r3, [pc, #696]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023d6:	2180      	movs	r1, #128	; 0x80
 80023d8:	0249      	lsls	r1, r1, #9
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e02f      	b.n	8002440 <HAL_RCC_OscConfig+0xdc>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0x9e>
 80023e8:	4ba9      	ldr	r3, [pc, #676]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4ba8      	ldr	r3, [pc, #672]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023ee:	49a9      	ldr	r1, [pc, #676]	; (8002694 <HAL_RCC_OscConfig+0x330>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	4ba6      	ldr	r3, [pc, #664]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4ba5      	ldr	r3, [pc, #660]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023fa:	49a7      	ldr	r1, [pc, #668]	; (8002698 <HAL_RCC_OscConfig+0x334>)
 80023fc:	400a      	ands	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e01e      	b.n	8002440 <HAL_RCC_OscConfig+0xdc>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b05      	cmp	r3, #5
 8002408:	d10e      	bne.n	8002428 <HAL_RCC_OscConfig+0xc4>
 800240a:	4ba1      	ldr	r3, [pc, #644]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4ba0      	ldr	r3, [pc, #640]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	02c9      	lsls	r1, r1, #11
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	4b9d      	ldr	r3, [pc, #628]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b9c      	ldr	r3, [pc, #624]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	0249      	lsls	r1, r1, #9
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e00b      	b.n	8002440 <HAL_RCC_OscConfig+0xdc>
 8002428:	4b99      	ldr	r3, [pc, #612]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b98      	ldr	r3, [pc, #608]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800242e:	4999      	ldr	r1, [pc, #612]	; (8002694 <HAL_RCC_OscConfig+0x330>)
 8002430:	400a      	ands	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	4b96      	ldr	r3, [pc, #600]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b95      	ldr	r3, [pc, #596]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800243a:	4997      	ldr	r1, [pc, #604]	; (8002698 <HAL_RCC_OscConfig+0x334>)
 800243c:	400a      	ands	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d014      	beq.n	8002472 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff f80a 	bl	8001460 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002452:	f7ff f805 	bl	8001460 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e28a      	b.n	800297a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002464:	4b8a      	ldr	r3, [pc, #552]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	4013      	ands	r3, r2
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0xee>
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe fff5 	bl	8001460 <HAL_GetTick>
 8002476:	0003      	movs	r3, r0
 8002478:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe fff0 	bl	8001460 <HAL_GetTick>
 8002480:	0002      	movs	r2, r0
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e275      	b.n	800297a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248e:	4b80      	ldr	r3, [pc, #512]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	029b      	lsls	r3, r3, #10
 8002496:	4013      	ands	r3, r2
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x118>
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2202      	movs	r2, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d100      	bne.n	80024aa <HAL_RCC_OscConfig+0x146>
 80024a8:	e069      	b.n	800257e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024aa:	4b79      	ldr	r3, [pc, #484]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	220c      	movs	r2, #12
 80024b0:	4013      	ands	r3, r2
 80024b2:	d00b      	beq.n	80024cc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024b4:	4b76      	ldr	r3, [pc, #472]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	220c      	movs	r2, #12
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d11c      	bne.n	80024fa <HAL_RCC_OscConfig+0x196>
 80024c0:	4b73      	ldr	r3, [pc, #460]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	025b      	lsls	r3, r3, #9
 80024c8:	4013      	ands	r3, r2
 80024ca:	d116      	bne.n	80024fa <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024cc:	4b70      	ldr	r3, [pc, #448]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2202      	movs	r2, #2
 80024d2:	4013      	ands	r3, r2
 80024d4:	d005      	beq.n	80024e2 <HAL_RCC_OscConfig+0x17e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e24b      	b.n	800297a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	22f8      	movs	r2, #248	; 0xf8
 80024e8:	4393      	bics	r3, r2
 80024ea:	0019      	movs	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	00da      	lsls	r2, r3, #3
 80024f2:	4b67      	ldr	r3, [pc, #412]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f8:	e041      	b.n	800257e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d024      	beq.n	800254c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002502:	4b63      	ldr	r3, [pc, #396]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b62      	ldr	r3, [pc, #392]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002508:	2101      	movs	r1, #1
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe ffa7 	bl	8001460 <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002518:	f7fe ffa2 	bl	8001460 <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e227      	b.n	800297a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d0f1      	beq.n	8002518 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b56      	ldr	r3, [pc, #344]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	22f8      	movs	r2, #248	; 0xf8
 800253a:	4393      	bics	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00da      	lsls	r2, r3, #3
 8002544:	4b52      	ldr	r3, [pc, #328]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e018      	b.n	800257e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254c:	4b50      	ldr	r3, [pc, #320]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002552:	2101      	movs	r1, #1
 8002554:	438a      	bics	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe ff82 	bl	8001460 <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002562:	f7fe ff7d 	bl	8001460 <HAL_GetTick>
 8002566:	0002      	movs	r2, r0
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e202      	b.n	800297a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002574:	4b46      	ldr	r3, [pc, #280]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2202      	movs	r2, #2
 800257a:	4013      	ands	r3, r2
 800257c:	d1f1      	bne.n	8002562 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2208      	movs	r2, #8
 8002584:	4013      	ands	r3, r2
 8002586:	d036      	beq.n	80025f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d019      	beq.n	80025c4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002590:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002594:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002596:	2101      	movs	r1, #1
 8002598:	430a      	orrs	r2, r1
 800259a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7fe ff60 	bl	8001460 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a6:	f7fe ff5b 	bl	8001460 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1e0      	b.n	800297a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b8:	4b35      	ldr	r3, [pc, #212]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d0f1      	beq.n	80025a6 <HAL_RCC_OscConfig+0x242>
 80025c2:	e018      	b.n	80025f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c4:	4b32      	ldr	r3, [pc, #200]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80025c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c8:	4b31      	ldr	r3, [pc, #196]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	438a      	bics	r2, r1
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d0:	f7fe ff46 	bl	8001460 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025da:	f7fe ff41 	bl	8001460 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e1c6      	b.n	800297a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	2202      	movs	r2, #2
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1f1      	bne.n	80025da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2204      	movs	r2, #4
 80025fc:	4013      	ands	r3, r2
 80025fe:	d100      	bne.n	8002602 <HAL_RCC_OscConfig+0x29e>
 8002600:	e0b4      	b.n	800276c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	201f      	movs	r0, #31
 8002604:	183b      	adds	r3, r7, r0
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	055b      	lsls	r3, r3, #21
 8002612:	4013      	ands	r3, r2
 8002614:	d110      	bne.n	8002638 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002618:	69da      	ldr	r2, [r3, #28]
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	0549      	lsls	r1, r1, #21
 8002620:	430a      	orrs	r2, r1
 8002622:	61da      	str	r2, [r3, #28]
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	4013      	ands	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002632:	183b      	adds	r3, r7, r0
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_RCC_OscConfig+0x338>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4013      	ands	r3, r2
 8002642:	d11a      	bne.n	800267a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_RCC_OscConfig+0x338>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_RCC_OscConfig+0x338>)
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	0049      	lsls	r1, r1, #1
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002652:	f7fe ff05 	bl	8001460 <HAL_GetTick>
 8002656:	0003      	movs	r3, r0
 8002658:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265c:	f7fe ff00 	bl	8001460 <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e185      	b.n	800297a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_OscConfig+0x338>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4013      	ands	r3, r2
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d10e      	bne.n	80026a0 <HAL_RCC_OscConfig+0x33c>
 8002682:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	4b02      	ldr	r3, [pc, #8]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002688:	2101      	movs	r1, #1
 800268a:	430a      	orrs	r2, r1
 800268c:	621a      	str	r2, [r3, #32]
 800268e:	e035      	b.n	80026fc <HAL_RCC_OscConfig+0x398>
 8002690:	40021000 	.word	0x40021000
 8002694:	fffeffff 	.word	0xfffeffff
 8002698:	fffbffff 	.word	0xfffbffff
 800269c:	40007000 	.word	0x40007000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x35e>
 80026a8:	4bb6      	ldr	r3, [pc, #728]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	4bb5      	ldr	r3, [pc, #724]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	438a      	bics	r2, r1
 80026b2:	621a      	str	r2, [r3, #32]
 80026b4:	4bb3      	ldr	r3, [pc, #716]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026b6:	6a1a      	ldr	r2, [r3, #32]
 80026b8:	4bb2      	ldr	r3, [pc, #712]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026ba:	2104      	movs	r1, #4
 80026bc:	438a      	bics	r2, r1
 80026be:	621a      	str	r2, [r3, #32]
 80026c0:	e01c      	b.n	80026fc <HAL_RCC_OscConfig+0x398>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x380>
 80026ca:	4bae      	ldr	r3, [pc, #696]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	4bad      	ldr	r3, [pc, #692]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026d0:	2104      	movs	r1, #4
 80026d2:	430a      	orrs	r2, r1
 80026d4:	621a      	str	r2, [r3, #32]
 80026d6:	4bab      	ldr	r3, [pc, #684]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026d8:	6a1a      	ldr	r2, [r3, #32]
 80026da:	4baa      	ldr	r3, [pc, #680]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026dc:	2101      	movs	r1, #1
 80026de:	430a      	orrs	r2, r1
 80026e0:	621a      	str	r2, [r3, #32]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0x398>
 80026e4:	4ba7      	ldr	r3, [pc, #668]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	4ba6      	ldr	r3, [pc, #664]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026ea:	2101      	movs	r1, #1
 80026ec:	438a      	bics	r2, r1
 80026ee:	621a      	str	r2, [r3, #32]
 80026f0:	4ba4      	ldr	r3, [pc, #656]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	4ba3      	ldr	r3, [pc, #652]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80026f6:	2104      	movs	r1, #4
 80026f8:	438a      	bics	r2, r1
 80026fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d014      	beq.n	800272e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002704:	f7fe feac 	bl	8001460 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e009      	b.n	8002722 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fea7 	bl	8001460 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	4a9b      	ldr	r2, [pc, #620]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e12b      	b.n	800297a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	4b98      	ldr	r3, [pc, #608]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	2202      	movs	r2, #2
 8002728:	4013      	ands	r3, r2
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x3aa>
 800272c:	e013      	b.n	8002756 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7fe fe97 	bl	8001460 <HAL_GetTick>
 8002732:	0003      	movs	r3, r0
 8002734:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002736:	e009      	b.n	800274c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f7fe fe92 	bl	8001460 <HAL_GetTick>
 800273c:	0002      	movs	r2, r0
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	4a91      	ldr	r2, [pc, #580]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e116      	b.n	800297a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274c:	4b8d      	ldr	r3, [pc, #564]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002756:	231f      	movs	r3, #31
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d105      	bne.n	800276c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002760:	4b88      	ldr	r3, [pc, #544]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	4b87      	ldr	r3, [pc, #540]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002766:	4989      	ldr	r1, [pc, #548]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002768:	400a      	ands	r2, r1
 800276a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2210      	movs	r2, #16
 8002772:	4013      	ands	r3, r2
 8002774:	d063      	beq.n	800283e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d12a      	bne.n	80027d4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800277e:	4b81      	ldr	r3, [pc, #516]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002782:	4b80      	ldr	r3, [pc, #512]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002784:	2104      	movs	r1, #4
 8002786:	430a      	orrs	r2, r1
 8002788:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800278a:	4b7e      	ldr	r3, [pc, #504]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 800278c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800278e:	4b7d      	ldr	r3, [pc, #500]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002790:	2101      	movs	r1, #1
 8002792:	430a      	orrs	r2, r1
 8002794:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe fe63 	bl	8001460 <HAL_GetTick>
 800279a:	0003      	movs	r3, r0
 800279c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027a0:	f7fe fe5e 	bl	8001460 <HAL_GetTick>
 80027a4:	0002      	movs	r2, r0
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0e3      	b.n	800297a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027b2:	4b74      	ldr	r3, [pc, #464]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	2202      	movs	r2, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d0f1      	beq.n	80027a0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027bc:	4b71      	ldr	r3, [pc, #452]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	22f8      	movs	r2, #248	; 0xf8
 80027c2:	4393      	bics	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	00da      	lsls	r2, r3, #3
 80027cc:	4b6d      	ldr	r3, [pc, #436]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34
 80027d2:	e034      	b.n	800283e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	3305      	adds	r3, #5
 80027da:	d111      	bne.n	8002800 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80027dc:	4b69      	ldr	r3, [pc, #420]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80027de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e0:	4b68      	ldr	r3, [pc, #416]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80027e2:	2104      	movs	r1, #4
 80027e4:	438a      	bics	r2, r1
 80027e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027e8:	4b66      	ldr	r3, [pc, #408]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	22f8      	movs	r2, #248	; 0xf8
 80027ee:	4393      	bics	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	00da      	lsls	r2, r3, #3
 80027f8:	4b62      	ldr	r3, [pc, #392]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80027fa:	430a      	orrs	r2, r1
 80027fc:	635a      	str	r2, [r3, #52]	; 0x34
 80027fe:	e01e      	b.n	800283e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002800:	4b60      	ldr	r3, [pc, #384]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002804:	4b5f      	ldr	r3, [pc, #380]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002806:	2104      	movs	r1, #4
 8002808:	430a      	orrs	r2, r1
 800280a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800280c:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 800280e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002810:	4b5c      	ldr	r3, [pc, #368]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002812:	2101      	movs	r1, #1
 8002814:	438a      	bics	r2, r1
 8002816:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002818:	f7fe fe22 	bl	8001460 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002822:	f7fe fe1d 	bl	8001460 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0a2      	b.n	800297a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d1f1      	bne.n	8002822 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d100      	bne.n	8002848 <HAL_RCC_OscConfig+0x4e4>
 8002846:	e097      	b.n	8002978 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002848:	4b4e      	ldr	r3, [pc, #312]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	220c      	movs	r2, #12
 800284e:	4013      	ands	r3, r2
 8002850:	2b08      	cmp	r3, #8
 8002852:	d100      	bne.n	8002856 <HAL_RCC_OscConfig+0x4f2>
 8002854:	e06b      	b.n	800292e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d14c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b49      	ldr	r3, [pc, #292]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002864:	494a      	ldr	r1, [pc, #296]	; (8002990 <HAL_RCC_OscConfig+0x62c>)
 8002866:	400a      	ands	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7fe fdf9 	bl	8001460 <HAL_GetTick>
 800286e:	0003      	movs	r3, r0
 8002870:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fdf4 	bl	8001460 <HAL_GetTick>
 8002878:	0002      	movs	r2, r0
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e079      	b.n	800297a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002886:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	049b      	lsls	r3, r3, #18
 800288e:	4013      	ands	r3, r2
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002892:	4b3c      	ldr	r3, [pc, #240]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	220f      	movs	r2, #15
 8002898:	4393      	bics	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a0:	4b38      	ldr	r3, [pc, #224]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80028a2:	430a      	orrs	r2, r1
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4a3a      	ldr	r2, [pc, #232]	; (8002994 <HAL_RCC_OscConfig+0x630>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	431a      	orrs	r2, r3
 80028ba:	4b32      	ldr	r3, [pc, #200]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80028bc:	430a      	orrs	r2, r1
 80028be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b30      	ldr	r3, [pc, #192]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	0449      	lsls	r1, r1, #17
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7fe fdc7 	bl	8001460 <HAL_GetTick>
 80028d2:	0003      	movs	r3, r0
 80028d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d8:	f7fe fdc2 	bl	8001460 <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e047      	b.n	800297a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ea:	4b26      	ldr	r3, [pc, #152]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	049b      	lsls	r3, r3, #18
 80028f2:	4013      	ands	r3, r2
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x574>
 80028f6:	e03f      	b.n	8002978 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b21      	ldr	r3, [pc, #132]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 80028fe:	4924      	ldr	r1, [pc, #144]	; (8002990 <HAL_RCC_OscConfig+0x62c>)
 8002900:	400a      	ands	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe fdac 	bl	8001460 <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe fda7 	bl	8001460 <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e02c      	b.n	800297a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	049b      	lsls	r3, r3, #18
 8002928:	4013      	ands	r3, r2
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x5aa>
 800292c:	e024      	b.n	8002978 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e01f      	b.n	800297a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002940:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_RCC_OscConfig+0x620>)
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	025b      	lsls	r3, r3, #9
 800294c:	401a      	ands	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	429a      	cmp	r2, r3
 8002954:	d10e      	bne.n	8002974 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	220f      	movs	r2, #15
 800295a:	401a      	ands	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	23f0      	movs	r3, #240	; 0xf0
 8002968:	039b      	lsls	r3, r3, #14
 800296a:	401a      	ands	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b008      	add	sp, #32
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	40021000 	.word	0x40021000
 8002988:	00001388 	.word	0x00001388
 800298c:	efffffff 	.word	0xefffffff
 8002990:	feffffff 	.word	0xfeffffff
 8002994:	ffc2ffff 	.word	0xffc2ffff

08002998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0b3      	b.n	8002b14 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b5b      	ldr	r3, [pc, #364]	; (8002b1c <HAL_RCC_ClockConfig+0x184>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	4013      	ands	r3, r2
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d911      	bls.n	80029de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b58      	ldr	r3, [pc, #352]	; (8002b1c <HAL_RCC_ClockConfig+0x184>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2201      	movs	r2, #1
 80029c0:	4393      	bics	r3, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <HAL_RCC_ClockConfig+0x184>)
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029cc:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_ClockConfig+0x184>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2201      	movs	r2, #1
 80029d2:	4013      	ands	r3, r2
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e09a      	b.n	8002b14 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2202      	movs	r2, #2
 80029e4:	4013      	ands	r3, r2
 80029e6:	d015      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2204      	movs	r2, #4
 80029ee:	4013      	ands	r3, r2
 80029f0:	d006      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029f2:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 80029f8:	21e0      	movs	r1, #224	; 0xe0
 80029fa:	00c9      	lsls	r1, r1, #3
 80029fc:	430a      	orrs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	22f0      	movs	r2, #240	; 0xf0
 8002a06:	4393      	bics	r3, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 8002a10:	430a      	orrs	r2, r1
 8002a12:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d040      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	029b      	lsls	r3, r3, #10
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d114      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e06e      	b.n	8002b14 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	049b      	lsls	r3, r3, #18
 8002a46:	4013      	ands	r3, r2
 8002a48:	d108      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e062      	b.n	8002b14 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2202      	movs	r2, #2
 8002a54:	4013      	ands	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e05b      	b.n	8002b14 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5c:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2203      	movs	r2, #3
 8002a62:	4393      	bics	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a70:	f7fe fcf6 	bl	8001460 <HAL_GetTick>
 8002a74:	0003      	movs	r3, r0
 8002a76:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a78:	e009      	b.n	8002a8e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7a:	f7fe fcf1 	bl	8001460 <HAL_GetTick>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	4a27      	ldr	r2, [pc, #156]	; (8002b24 <HAL_RCC_ClockConfig+0x18c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e042      	b.n	8002b14 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	220c      	movs	r2, #12
 8002a94:	401a      	ands	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1ec      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <HAL_RCC_ClockConfig+0x184>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d211      	bcs.n	8002ad2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_RCC_ClockConfig+0x184>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_RCC_ClockConfig+0x184>)
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <HAL_RCC_ClockConfig+0x184>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e020      	b.n	8002b14 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <HAL_RCC_ClockConfig+0x190>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 8002aec:	430a      	orrs	r2, r1
 8002aee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002af0:	f000 f820 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8002af4:	0001      	movs	r1, r0
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_ClockConfig+0x188>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	220f      	movs	r2, #15
 8002afe:	4013      	ands	r3, r2
 8002b00:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <HAL_RCC_ClockConfig+0x194>)
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	000a      	movs	r2, r1
 8002b06:	40da      	lsrs	r2, r3
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_RCC_ClockConfig+0x198>)
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7fe fc61 	bl	80013d4 <HAL_InitTick>
  
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b004      	add	sp, #16
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40021000 	.word	0x40021000
 8002b24:	00001388 	.word	0x00001388
 8002b28:	fffff8ff 	.word	0xfffff8ff
 8002b2c:	080051d8 	.word	0x080051d8
 8002b30:	20000108 	.word	0x20000108

08002b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b08f      	sub	sp, #60	; 0x3c
 8002b38:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002b3a:	2314      	movs	r3, #20
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	4a2b      	ldr	r2, [pc, #172]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b42:	c313      	stmia	r3!, {r0, r1, r4}
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b4e:	c313      	stmia	r3!, {r0, r1, r4}
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	220c      	movs	r2, #12
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d002      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x4a>
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d003      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x50>
 8002b7c:	e02d      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b82:	e02d      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	0c9b      	lsrs	r3, r3, #18
 8002b88:	220f      	movs	r2, #15
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2214      	movs	r2, #20
 8002b8e:	18ba      	adds	r2, r7, r2
 8002b90:	5cd3      	ldrb	r3, [r2, r3]
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b94:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	220f      	movs	r2, #15
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	1d3a      	adds	r2, r7, #4
 8002b9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	025b      	lsls	r3, r3, #9
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bae:	4812      	ldr	r0, [pc, #72]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bb0:	f7fd fabc 	bl	800012c <__udivsi3>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	4353      	muls	r3, r2
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bbe:	e009      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bc2:	000a      	movs	r2, r1
 8002bc4:	0152      	lsls	r2, r2, #5
 8002bc6:	1a52      	subs	r2, r2, r1
 8002bc8:	0193      	lsls	r3, r2, #6
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	185b      	adds	r3, r3, r1
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bd8:	e002      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bde:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002be2:	0018      	movs	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b00f      	add	sp, #60	; 0x3c
 8002be8:	bd90      	pop	{r4, r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	080051b8 	.word	0x080051b8
 8002bf0:	080051c8 	.word	0x080051c8
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	007a1200 	.word	0x007a1200

08002bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c00:	4b02      	ldr	r3, [pc, #8]	; (8002c0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	20000108 	.word	0x20000108

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002c14:	f7ff fff2 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c18:	0001      	movs	r1, r0
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	2207      	movs	r2, #7
 8002c22:	4013      	ands	r3, r2
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c26:	5cd3      	ldrb	r3, [r2, r3]
 8002c28:	40d9      	lsrs	r1, r3
 8002c2a:	000b      	movs	r3, r1
}    
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	40021000 	.word	0x40021000
 8002c38:	080051e8 	.word	0x080051e8

08002c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	025b      	lsls	r3, r3, #9
 8002c54:	4013      	ands	r3, r2
 8002c56:	d100      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002c58:	e08e      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2017      	movs	r0, #23
 8002c5c:	183b      	adds	r3, r7, r0
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c62:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	055b      	lsls	r3, r3, #21
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d110      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	4b54      	ldr	r3, [pc, #336]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	0549      	lsls	r1, r1, #21
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	61da      	str	r2, [r3, #28]
 8002c7c:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	055b      	lsls	r3, r3, #21
 8002c84:	4013      	ands	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8a:	183b      	adds	r3, r7, r0
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d11a      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9c:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b48      	ldr	r3, [pc, #288]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	0049      	lsls	r1, r1, #1
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002caa:	f7fe fbd9 	bl	8001460 <HAL_GetTick>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb4:	f7fe fbd4 	bl	8001460 <HAL_GetTick>
 8002cb8:	0002      	movs	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e077      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cd4:	6a1a      	ldr	r2, [r3, #32]
 8002cd6:	23c0      	movs	r3, #192	; 0xc0
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d034      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	23c0      	movs	r3, #192	; 0xc0
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4013      	ands	r3, r2
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d02c      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf4:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4a33      	ldr	r2, [pc, #204]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	0249      	lsls	r1, r1, #9
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d0e:	6a1a      	ldr	r2, [r3, #32]
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d12:	492e      	ldr	r1, [pc, #184]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002d14:	400a      	ands	r2, r1
 8002d16:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d18:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	4013      	ands	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fe fb9b 	bl	8001460 <HAL_GetTick>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	e009      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe fb96 	bl	8001460 <HAL_GetTick>
 8002d34:	0002      	movs	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e038      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d62:	2317      	movs	r3, #23
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d72:	4918      	ldr	r1, [pc, #96]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002d74:	400a      	ands	r2, r1
 8002d76:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	2203      	movs	r2, #3
 8002d88:	4393      	bics	r3, r2
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d92:	430a      	orrs	r2, r1
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	2210      	movs	r2, #16
 8002da6:	4393      	bics	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	0018      	movs	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b006      	add	sp, #24
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	fffffcff 	.word	0xfffffcff
 8002dcc:	fffeffff 	.word	0xfffeffff
 8002dd0:	00001388 	.word	0x00001388
 8002dd4:	efffffff 	.word	0xefffffff

08002dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e042      	b.n	8002e70 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	223d      	movs	r2, #61	; 0x3d
 8002dee:	5c9b      	ldrb	r3, [r3, r2]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d107      	bne.n	8002e06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	223c      	movs	r2, #60	; 0x3c
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7fe f9a1 	bl	8001148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	223d      	movs	r2, #61	; 0x3d
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3304      	adds	r3, #4
 8002e16:	0019      	movs	r1, r3
 8002e18:	0010      	movs	r0, r2
 8002e1a:	f000 fa39 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2246      	movs	r2, #70	; 0x46
 8002e22:	2101      	movs	r1, #1
 8002e24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	223e      	movs	r2, #62	; 0x3e
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5499      	strb	r1, [r3, r2]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	223f      	movs	r2, #63	; 0x3f
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2240      	movs	r2, #64	; 0x40
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	5499      	strb	r1, [r3, r2]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2241      	movs	r2, #65	; 0x41
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2242      	movs	r2, #66	; 0x42
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	5499      	strb	r1, [r3, r2]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2243      	movs	r2, #67	; 0x43
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2244      	movs	r2, #68	; 0x44
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	5499      	strb	r1, [r3, r2]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2245      	movs	r2, #69	; 0x45
 8002e62:	2101      	movs	r1, #1
 8002e64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	223d      	movs	r2, #61	; 0x3d
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	223d      	movs	r2, #61	; 0x3d
 8002e84:	5c9b      	ldrb	r3, [r3, r2]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d001      	beq.n	8002e90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e02d      	b.n	8002eec <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	223d      	movs	r2, #61	; 0x3d
 8002e94:	2102      	movs	r1, #2
 8002e96:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_TIM_Base_Start+0x7c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_TIM_Base_Start+0x3e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_TIM_Base_Start+0x80>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_TIM_Base_Start+0x3e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a12      	ldr	r2, [pc, #72]	; (8002efc <HAL_TIM_Base_Start+0x84>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d111      	bne.n	8002eda <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b06      	cmp	r3, #6
 8002ec6:	d010      	beq.n	8002eea <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	e007      	b.n	8002eea <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b004      	add	sp, #16
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40014000 	.word	0x40014000

08002f00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e042      	b.n	8002f98 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	223d      	movs	r2, #61	; 0x3d
 8002f16:	5c9b      	ldrb	r3, [r3, r2]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	223c      	movs	r2, #60	; 0x3c
 8002f22:	2100      	movs	r1, #0
 8002f24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7fe f8ef 	bl	800110c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	223d      	movs	r2, #61	; 0x3d
 8002f32:	2102      	movs	r1, #2
 8002f34:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	0019      	movs	r1, r3
 8002f40:	0010      	movs	r0, r2
 8002f42:	f000 f9a5 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2246      	movs	r2, #70	; 0x46
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	223e      	movs	r2, #62	; 0x3e
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	223f      	movs	r2, #63	; 0x3f
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2240      	movs	r2, #64	; 0x40
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2241      	movs	r2, #65	; 0x41
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2242      	movs	r2, #66	; 0x42
 8002f72:	2101      	movs	r1, #1
 8002f74:	5499      	strb	r1, [r3, r2]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2243      	movs	r2, #67	; 0x43
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	5499      	strb	r1, [r3, r2]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2244      	movs	r2, #68	; 0x44
 8002f82:	2101      	movs	r1, #1
 8002f84:	5499      	strb	r1, [r3, r2]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2245      	movs	r2, #69	; 0x45
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	223d      	movs	r2, #61	; 0x3d
 8002f92:	2101      	movs	r1, #1
 8002f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d108      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0x22>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	223e      	movs	r2, #62	; 0x3e
 8002fb4:	5c9b      	ldrb	r3, [r3, r2]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	1e5a      	subs	r2, r3, #1
 8002fbc:	4193      	sbcs	r3, r2
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e01f      	b.n	8003002 <HAL_TIM_PWM_Start+0x62>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d108      	bne.n	8002fda <HAL_TIM_PWM_Start+0x3a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	223f      	movs	r2, #63	; 0x3f
 8002fcc:	5c9b      	ldrb	r3, [r3, r2]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	1e5a      	subs	r2, r3, #1
 8002fd4:	4193      	sbcs	r3, r2
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	e013      	b.n	8003002 <HAL_TIM_PWM_Start+0x62>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d108      	bne.n	8002ff2 <HAL_TIM_PWM_Start+0x52>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2240      	movs	r2, #64	; 0x40
 8002fe4:	5c9b      	ldrb	r3, [r3, r2]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	1e5a      	subs	r2, r3, #1
 8002fec:	4193      	sbcs	r3, r2
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	e007      	b.n	8003002 <HAL_TIM_PWM_Start+0x62>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2241      	movs	r2, #65	; 0x41
 8002ff6:	5c9b      	ldrb	r3, [r3, r2]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	1e5a      	subs	r2, r3, #1
 8002ffe:	4193      	sbcs	r3, r2
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06e      	b.n	80030e8 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <HAL_TIM_PWM_Start+0x7a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	223e      	movs	r2, #62	; 0x3e
 8003014:	2102      	movs	r1, #2
 8003016:	5499      	strb	r1, [r3, r2]
 8003018:	e013      	b.n	8003042 <HAL_TIM_PWM_Start+0xa2>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d104      	bne.n	800302a <HAL_TIM_PWM_Start+0x8a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	223f      	movs	r2, #63	; 0x3f
 8003024:	2102      	movs	r1, #2
 8003026:	5499      	strb	r1, [r3, r2]
 8003028:	e00b      	b.n	8003042 <HAL_TIM_PWM_Start+0xa2>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d104      	bne.n	800303a <HAL_TIM_PWM_Start+0x9a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2240      	movs	r2, #64	; 0x40
 8003034:	2102      	movs	r1, #2
 8003036:	5499      	strb	r1, [r3, r2]
 8003038:	e003      	b.n	8003042 <HAL_TIM_PWM_Start+0xa2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2241      	movs	r2, #65	; 0x41
 800303e:	2102      	movs	r1, #2
 8003040:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6839      	ldr	r1, [r7, #0]
 8003048:	2201      	movs	r2, #1
 800304a:	0018      	movs	r0, r3
 800304c:	f000 fb92 	bl	8003774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <HAL_TIM_PWM_Start+0x150>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00e      	beq.n	8003078 <HAL_TIM_PWM_Start+0xd8>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <HAL_TIM_PWM_Start+0x154>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d009      	beq.n	8003078 <HAL_TIM_PWM_Start+0xd8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a23      	ldr	r2, [pc, #140]	; (80030f8 <HAL_TIM_PWM_Start+0x158>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <HAL_TIM_PWM_Start+0xd8>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a22      	ldr	r2, [pc, #136]	; (80030fc <HAL_TIM_PWM_Start+0x15c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <HAL_TIM_PWM_Start+0xdc>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <HAL_TIM_PWM_Start+0xde>
 800307c:	2300      	movs	r3, #0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	0209      	lsls	r1, r1, #8
 8003090:	430a      	orrs	r2, r1
 8003092:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <HAL_TIM_PWM_Start+0x150>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x112>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a17      	ldr	r2, [pc, #92]	; (8003100 <HAL_TIM_PWM_Start+0x160>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x112>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <HAL_TIM_PWM_Start+0x154>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d111      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2207      	movs	r2, #7
 80030ba:	4013      	ands	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b06      	cmp	r3, #6
 80030c2:	d010      	beq.n	80030e6 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2101      	movs	r1, #1
 80030d0:	430a      	orrs	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d4:	e007      	b.n	80030e6 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2101      	movs	r1, #1
 80030e2:	430a      	orrs	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	0018      	movs	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b004      	add	sp, #16
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40014000 	.word	0x40014000
 80030f8:	40014400 	.word	0x40014400
 80030fc:	40014800 	.word	0x40014800
 8003100:	40000400 	.word	0x40000400

08003104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003110:	2317      	movs	r3, #23
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	223c      	movs	r2, #60	; 0x3c
 800311c:	5c9b      	ldrb	r3, [r3, r2]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003122:	2302      	movs	r3, #2
 8003124:	e0ad      	b.n	8003282 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	223c      	movs	r2, #60	; 0x3c
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d100      	bne.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003134:	e076      	b.n	8003224 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d900      	bls.n	800313e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800313c:	e095      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x166>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d04e      	beq.n	80031e2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b08      	cmp	r3, #8
 8003148:	d900      	bls.n	800314c <HAL_TIM_PWM_ConfigChannel+0x48>
 800314a:	e08e      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x166>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d021      	beq.n	800319c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003158:	e087      	b.n	800326a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	0011      	movs	r1, r2
 8003162:	0018      	movs	r0, r3
 8003164:	f000 f90a 	bl	800337c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2108      	movs	r1, #8
 8003174:	430a      	orrs	r2, r1
 8003176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2104      	movs	r1, #4
 8003184:	438a      	bics	r2, r1
 8003186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6999      	ldr	r1, [r3, #24]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	619a      	str	r2, [r3, #24]
      break;
 800319a:	e06b      	b.n	8003274 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	0011      	movs	r1, r2
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 f971 	bl	800348c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	0109      	lsls	r1, r1, #4
 80031b8:	430a      	orrs	r2, r1
 80031ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4931      	ldr	r1, [pc, #196]	; (800328c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80031c8:	400a      	ands	r2, r1
 80031ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6999      	ldr	r1, [r3, #24]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	021a      	lsls	r2, r3, #8
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	619a      	str	r2, [r3, #24]
      break;
 80031e0:	e048      	b.n	8003274 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	0011      	movs	r1, r2
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 f9d2 	bl	8003594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2108      	movs	r1, #8
 80031fc:	430a      	orrs	r2, r1
 80031fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2104      	movs	r1, #4
 800320c:	438a      	bics	r2, r1
 800320e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69d9      	ldr	r1, [r3, #28]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	61da      	str	r2, [r3, #28]
      break;
 8003222:	e027      	b.n	8003274 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	0011      	movs	r1, r2
 800322c:	0018      	movs	r0, r3
 800322e:	f000 fa37 	bl	80036a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	0109      	lsls	r1, r1, #4
 8003240:	430a      	orrs	r2, r1
 8003242:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	490f      	ldr	r1, [pc, #60]	; (800328c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003250:	400a      	ands	r2, r1
 8003252:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69d9      	ldr	r1, [r3, #28]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	021a      	lsls	r2, r3, #8
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	61da      	str	r2, [r3, #28]
      break;
 8003268:	e004      	b.n	8003274 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800326a:	2317      	movs	r3, #23
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
      break;
 8003272:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	223c      	movs	r2, #60	; 0x3c
 8003278:	2100      	movs	r1, #0
 800327a:	5499      	strb	r1, [r3, r2]

  return status;
 800327c:	2317      	movs	r3, #23
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	781b      	ldrb	r3, [r3, #0]
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b006      	add	sp, #24
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	fffffbff 	.word	0xfffffbff

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a2f      	ldr	r2, [pc, #188]	; (8003360 <TIM_Base_SetConfig+0xd0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_Base_SetConfig+0x20>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a2e      	ldr	r2, [pc, #184]	; (8003364 <TIM_Base_SetConfig+0xd4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d108      	bne.n	80032c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2270      	movs	r2, #112	; 0x70
 80032b4:	4393      	bics	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <TIM_Base_SetConfig+0xd0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <TIM_Base_SetConfig+0x62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a25      	ldr	r2, [pc, #148]	; (8003364 <TIM_Base_SetConfig+0xd4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00f      	beq.n	80032f2 <TIM_Base_SetConfig+0x62>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a24      	ldr	r2, [pc, #144]	; (8003368 <TIM_Base_SetConfig+0xd8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_Base_SetConfig+0x62>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a23      	ldr	r2, [pc, #140]	; (800336c <TIM_Base_SetConfig+0xdc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_Base_SetConfig+0x62>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a22      	ldr	r2, [pc, #136]	; (8003370 <TIM_Base_SetConfig+0xe0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0x62>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a21      	ldr	r2, [pc, #132]	; (8003374 <TIM_Base_SetConfig+0xe4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a20      	ldr	r2, [pc, #128]	; (8003378 <TIM_Base_SetConfig+0xe8>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	4393      	bics	r3, r2
 800330a:	001a      	movs	r2, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <TIM_Base_SetConfig+0xd0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00b      	beq.n	800334a <TIM_Base_SetConfig+0xba>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a0d      	ldr	r2, [pc, #52]	; (800336c <TIM_Base_SetConfig+0xdc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_Base_SetConfig+0xba>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <TIM_Base_SetConfig+0xe0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_Base_SetConfig+0xba>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <TIM_Base_SetConfig+0xe4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d103      	bne.n	8003352 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	615a      	str	r2, [r3, #20]
}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b004      	add	sp, #16
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40000400 	.word	0x40000400
 8003368:	40002000 	.word	0x40002000
 800336c:	40014000 	.word	0x40014000
 8003370:	40014400 	.word	0x40014400
 8003374:	40014800 	.word	0x40014800
 8003378:	fffffcff 	.word	0xfffffcff

0800337c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	2201      	movs	r2, #1
 800338c:	4393      	bics	r3, r2
 800338e:	001a      	movs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2270      	movs	r2, #112	; 0x70
 80033aa:	4393      	bics	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2203      	movs	r2, #3
 80033b2:	4393      	bics	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2202      	movs	r2, #2
 80033c4:	4393      	bics	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a27      	ldr	r2, [pc, #156]	; (8003474 <TIM_OC1_SetConfig+0xf8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <TIM_OC1_SetConfig+0x76>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a26      	ldr	r2, [pc, #152]	; (8003478 <TIM_OC1_SetConfig+0xfc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <TIM_OC1_SetConfig+0x76>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a25      	ldr	r2, [pc, #148]	; (800347c <TIM_OC1_SetConfig+0x100>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d003      	beq.n	80033f2 <TIM_OC1_SetConfig+0x76>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a24      	ldr	r2, [pc, #144]	; (8003480 <TIM_OC1_SetConfig+0x104>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10c      	bne.n	800340c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2208      	movs	r2, #8
 80033f6:	4393      	bics	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2204      	movs	r2, #4
 8003408:	4393      	bics	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a19      	ldr	r2, [pc, #100]	; (8003474 <TIM_OC1_SetConfig+0xf8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00b      	beq.n	800342c <TIM_OC1_SetConfig+0xb0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <TIM_OC1_SetConfig+0xfc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d007      	beq.n	800342c <TIM_OC1_SetConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a17      	ldr	r2, [pc, #92]	; (800347c <TIM_OC1_SetConfig+0x100>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <TIM_OC1_SetConfig+0xb0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a16      	ldr	r2, [pc, #88]	; (8003480 <TIM_OC1_SetConfig+0x104>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d111      	bne.n	8003450 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4a15      	ldr	r2, [pc, #84]	; (8003484 <TIM_OC1_SetConfig+0x108>)
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4a14      	ldr	r2, [pc, #80]	; (8003488 <TIM_OC1_SetConfig+0x10c>)
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	46bd      	mov	sp, r7
 800346e:	b006      	add	sp, #24
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40014000 	.word	0x40014000
 800347c:	40014400 	.word	0x40014400
 8003480:	40014800 	.word	0x40014800
 8003484:	fffffeff 	.word	0xfffffeff
 8003488:	fffffdff 	.word	0xfffffdff

0800348c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	2210      	movs	r2, #16
 800349c:	4393      	bics	r3, r2
 800349e:	001a      	movs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4a2e      	ldr	r2, [pc, #184]	; (8003574 <TIM_OC2_SetConfig+0xe8>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <TIM_OC2_SetConfig+0xec>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2220      	movs	r2, #32
 80034d6:	4393      	bics	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a24      	ldr	r2, [pc, #144]	; (800357c <TIM_OC2_SetConfig+0xf0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d10d      	bne.n	800350a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2280      	movs	r2, #128	; 0x80
 80034f2:	4393      	bics	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2240      	movs	r2, #64	; 0x40
 8003506:	4393      	bics	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a1b      	ldr	r2, [pc, #108]	; (800357c <TIM_OC2_SetConfig+0xf0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00b      	beq.n	800352a <TIM_OC2_SetConfig+0x9e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <TIM_OC2_SetConfig+0xf4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d007      	beq.n	800352a <TIM_OC2_SetConfig+0x9e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a19      	ldr	r2, [pc, #100]	; (8003584 <TIM_OC2_SetConfig+0xf8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d003      	beq.n	800352a <TIM_OC2_SetConfig+0x9e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a18      	ldr	r2, [pc, #96]	; (8003588 <TIM_OC2_SetConfig+0xfc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d113      	bne.n	8003552 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4a17      	ldr	r2, [pc, #92]	; (800358c <TIM_OC2_SetConfig+0x100>)
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4a16      	ldr	r2, [pc, #88]	; (8003590 <TIM_OC2_SetConfig+0x104>)
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	621a      	str	r2, [r3, #32]
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b006      	add	sp, #24
 8003572:	bd80      	pop	{r7, pc}
 8003574:	ffff8fff 	.word	0xffff8fff
 8003578:	fffffcff 	.word	0xfffffcff
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40014000 	.word	0x40014000
 8003584:	40014400 	.word	0x40014400
 8003588:	40014800 	.word	0x40014800
 800358c:	fffffbff 	.word	0xfffffbff
 8003590:	fffff7ff 	.word	0xfffff7ff

08003594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4a35      	ldr	r2, [pc, #212]	; (8003678 <TIM_OC3_SetConfig+0xe4>)
 80035a4:	401a      	ands	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2270      	movs	r2, #112	; 0x70
 80035c0:	4393      	bics	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2203      	movs	r2, #3
 80035c8:	4393      	bics	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	4a28      	ldr	r2, [pc, #160]	; (800367c <TIM_OC3_SetConfig+0xe8>)
 80035da:	4013      	ands	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a24      	ldr	r2, [pc, #144]	; (8003680 <TIM_OC3_SetConfig+0xec>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10d      	bne.n	800360e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	4a23      	ldr	r2, [pc, #140]	; (8003684 <TIM_OC3_SetConfig+0xf0>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	4a1f      	ldr	r2, [pc, #124]	; (8003688 <TIM_OC3_SetConfig+0xf4>)
 800360a:	4013      	ands	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a1b      	ldr	r2, [pc, #108]	; (8003680 <TIM_OC3_SetConfig+0xec>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00b      	beq.n	800362e <TIM_OC3_SetConfig+0x9a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a1c      	ldr	r2, [pc, #112]	; (800368c <TIM_OC3_SetConfig+0xf8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <TIM_OC3_SetConfig+0x9a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <TIM_OC3_SetConfig+0xfc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_OC3_SetConfig+0x9a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a1a      	ldr	r2, [pc, #104]	; (8003694 <TIM_OC3_SetConfig+0x100>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d113      	bne.n	8003656 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4a19      	ldr	r2, [pc, #100]	; (8003698 <TIM_OC3_SetConfig+0x104>)
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4a18      	ldr	r2, [pc, #96]	; (800369c <TIM_OC3_SetConfig+0x108>)
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	621a      	str	r2, [r3, #32]
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	b006      	add	sp, #24
 8003676:	bd80      	pop	{r7, pc}
 8003678:	fffffeff 	.word	0xfffffeff
 800367c:	fffffdff 	.word	0xfffffdff
 8003680:	40012c00 	.word	0x40012c00
 8003684:	fffff7ff 	.word	0xfffff7ff
 8003688:	fffffbff 	.word	0xfffffbff
 800368c:	40014000 	.word	0x40014000
 8003690:	40014400 	.word	0x40014400
 8003694:	40014800 	.word	0x40014800
 8003698:	ffffefff 	.word	0xffffefff
 800369c:	ffffdfff 	.word	0xffffdfff

080036a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4a28      	ldr	r2, [pc, #160]	; (8003750 <TIM_OC4_SetConfig+0xb0>)
 80036b0:	401a      	ands	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a22      	ldr	r2, [pc, #136]	; (8003754 <TIM_OC4_SetConfig+0xb4>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a21      	ldr	r2, [pc, #132]	; (8003758 <TIM_OC4_SetConfig+0xb8>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4a1d      	ldr	r2, [pc, #116]	; (800375c <TIM_OC4_SetConfig+0xbc>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	031b      	lsls	r3, r3, #12
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a19      	ldr	r2, [pc, #100]	; (8003760 <TIM_OC4_SetConfig+0xc0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00b      	beq.n	8003718 <TIM_OC4_SetConfig+0x78>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a18      	ldr	r2, [pc, #96]	; (8003764 <TIM_OC4_SetConfig+0xc4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d007      	beq.n	8003718 <TIM_OC4_SetConfig+0x78>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a17      	ldr	r2, [pc, #92]	; (8003768 <TIM_OC4_SetConfig+0xc8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <TIM_OC4_SetConfig+0x78>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a16      	ldr	r2, [pc, #88]	; (800376c <TIM_OC4_SetConfig+0xcc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d109      	bne.n	800372c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	4a15      	ldr	r2, [pc, #84]	; (8003770 <TIM_OC4_SetConfig+0xd0>)
 800371c:	4013      	ands	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	019b      	lsls	r3, r3, #6
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	46bd      	mov	sp, r7
 800374a:	b006      	add	sp, #24
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	ffffefff 	.word	0xffffefff
 8003754:	ffff8fff 	.word	0xffff8fff
 8003758:	fffffcff 	.word	0xfffffcff
 800375c:	ffffdfff 	.word	0xffffdfff
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40014000 	.word	0x40014000
 8003768:	40014400 	.word	0x40014400
 800376c:	40014800 	.word	0x40014800
 8003770:	ffffbfff 	.word	0xffffbfff

08003774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	221f      	movs	r2, #31
 8003784:	4013      	ands	r3, r2
 8003786:	2201      	movs	r2, #1
 8003788:	409a      	lsls	r2, r3
 800378a:	0013      	movs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	43d2      	mvns	r2, r2
 8003796:	401a      	ands	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a1a      	ldr	r2, [r3, #32]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	211f      	movs	r1, #31
 80037a4:	400b      	ands	r3, r1
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4099      	lsls	r1, r3
 80037aa:	000b      	movs	r3, r1
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	621a      	str	r2, [r3, #32]
}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b006      	add	sp, #24
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	223c      	movs	r2, #60	; 0x3c
 80037ca:	5c9b      	ldrb	r3, [r3, r2]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e041      	b.n	8003858 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	223c      	movs	r2, #60	; 0x3c
 80037d8:	2101      	movs	r1, #1
 80037da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	223d      	movs	r2, #61	; 0x3d
 80037e0:	2102      	movs	r1, #2
 80037e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2270      	movs	r2, #112	; 0x70
 80037f8:	4393      	bics	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a13      	ldr	r2, [pc, #76]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a11      	ldr	r2, [pc, #68]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a10      	ldr	r2, [pc, #64]	; (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d10c      	bne.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	4393      	bics	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	4313      	orrs	r3, r2
 800383c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	223d      	movs	r2, #61	; 0x3d
 800384a:	2101      	movs	r1, #1
 800384c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	223c      	movs	r2, #60	; 0x3c
 8003852:	2100      	movs	r1, #0
 8003854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b004      	add	sp, #16
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40000400 	.word	0x40000400
 8003868:	40014000 	.word	0x40014000

0800386c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e044      	b.n	8003908 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2274      	movs	r2, #116	; 0x74
 800388a:	2100      	movs	r1, #0
 800388c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	0018      	movs	r0, r3
 8003892:	f7fd fd15 	bl	80012c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2224      	movs	r2, #36	; 0x24
 800389a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2101      	movs	r1, #1
 80038a8:	438a      	bics	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 f8da 	bl	8003a68 <UART_SetConfig>
 80038b4:	0003      	movs	r3, r0
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e024      	b.n	8003908 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 fa0d 	bl	8003ce8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	490d      	ldr	r1, [pc, #52]	; (8003910 <HAL_UART_Init+0xa4>)
 80038da:	400a      	ands	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2108      	movs	r1, #8
 80038ea:	438a      	bics	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2101      	movs	r1, #1
 80038fa:	430a      	orrs	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	0018      	movs	r0, r3
 8003902:	f000 faa5 	bl	8003e50 <UART_CheckIdleState>
 8003906:	0003      	movs	r3, r0
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b002      	add	sp, #8
 800390e:	bd80      	pop	{r7, pc}
 8003910:	fffff7ff 	.word	0xfffff7ff

08003914 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003928:	2b20      	cmp	r3, #32
 800392a:	d000      	beq.n	800392e <HAL_UART_Transmit+0x1a>
 800392c:	e096      	b.n	8003a5c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_UART_Transmit+0x28>
 8003934:	1dbb      	adds	r3, r7, #6
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e08e      	b.n	8003a5e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	015b      	lsls	r3, r3, #5
 8003948:	429a      	cmp	r2, r3
 800394a:	d109      	bne.n	8003960 <HAL_UART_Transmit+0x4c>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2201      	movs	r2, #1
 8003958:	4013      	ands	r3, r2
 800395a:	d001      	beq.n	8003960 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e07e      	b.n	8003a5e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2274      	movs	r2, #116	; 0x74
 8003964:	5c9b      	ldrb	r3, [r3, r2]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_UART_Transmit+0x5a>
 800396a:	2302      	movs	r3, #2
 800396c:	e077      	b.n	8003a5e <HAL_UART_Transmit+0x14a>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2274      	movs	r2, #116	; 0x74
 8003972:	2101      	movs	r1, #1
 8003974:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2280      	movs	r2, #128	; 0x80
 800397a:	2100      	movs	r1, #0
 800397c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2221      	movs	r2, #33	; 0x21
 8003982:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003984:	f7fd fd6c 	bl	8001460 <HAL_GetTick>
 8003988:	0003      	movs	r3, r0
 800398a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1dba      	adds	r2, r7, #6
 8003990:	2150      	movs	r1, #80	; 0x50
 8003992:	8812      	ldrh	r2, [r2, #0]
 8003994:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1dba      	adds	r2, r7, #6
 800399a:	2152      	movs	r1, #82	; 0x52
 800399c:	8812      	ldrh	r2, [r2, #0]
 800399e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	015b      	lsls	r3, r3, #5
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d108      	bne.n	80039be <HAL_UART_Transmit+0xaa>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d104      	bne.n	80039be <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	e003      	b.n	80039c6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2274      	movs	r2, #116	; 0x74
 80039ca:	2100      	movs	r1, #0
 80039cc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80039ce:	e02d      	b.n	8003a2c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	0013      	movs	r3, r2
 80039da:	2200      	movs	r2, #0
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	f000 fa7f 	bl	8003ee0 <UART_WaitOnFlagUntilTimeout>
 80039e2:	1e03      	subs	r3, r0, #0
 80039e4:	d001      	beq.n	80039ea <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e039      	b.n	8003a5e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	881a      	ldrh	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	05d2      	lsls	r2, r2, #23
 80039fa:	0dd2      	lsrs	r2, r2, #23
 80039fc:	b292      	uxth	r2, r2
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	3302      	adds	r3, #2
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	e008      	b.n	8003a1a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	b292      	uxth	r2, r2
 8003a12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	3301      	adds	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2252      	movs	r2, #82	; 0x52
 8003a1e:	5a9b      	ldrh	r3, [r3, r2]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b299      	uxth	r1, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2252      	movs	r2, #82	; 0x52
 8003a2a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2252      	movs	r2, #82	; 0x52
 8003a30:	5a9b      	ldrh	r3, [r3, r2]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1cb      	bne.n	80039d0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	0013      	movs	r3, r2
 8003a42:	2200      	movs	r2, #0
 8003a44:	2140      	movs	r1, #64	; 0x40
 8003a46:	f000 fa4b 	bl	8003ee0 <UART_WaitOnFlagUntilTimeout>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e005      	b.n	8003a5e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	0018      	movs	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b008      	add	sp, #32
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a70:	231e      	movs	r3, #30
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a8d      	ldr	r2, [pc, #564]	; (8003ccc <UART_SetConfig+0x264>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4a88      	ldr	r2, [pc, #544]	; (8003cd0 <UART_SetConfig+0x268>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a7f      	ldr	r2, [pc, #508]	; (8003cd4 <UART_SetConfig+0x26c>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	0019      	movs	r1, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a7b      	ldr	r2, [pc, #492]	; (8003cd8 <UART_SetConfig+0x270>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d127      	bne.n	8003b3e <UART_SetConfig+0xd6>
 8003aee:	4b7b      	ldr	r3, [pc, #492]	; (8003cdc <UART_SetConfig+0x274>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	2203      	movs	r2, #3
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d00d      	beq.n	8003b16 <UART_SetConfig+0xae>
 8003afa:	d81b      	bhi.n	8003b34 <UART_SetConfig+0xcc>
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d014      	beq.n	8003b2a <UART_SetConfig+0xc2>
 8003b00:	d818      	bhi.n	8003b34 <UART_SetConfig+0xcc>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <UART_SetConfig+0xa4>
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d00a      	beq.n	8003b20 <UART_SetConfig+0xb8>
 8003b0a:	e013      	b.n	8003b34 <UART_SetConfig+0xcc>
 8003b0c:	231f      	movs	r3, #31
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e021      	b.n	8003b5a <UART_SetConfig+0xf2>
 8003b16:	231f      	movs	r3, #31
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e01c      	b.n	8003b5a <UART_SetConfig+0xf2>
 8003b20:	231f      	movs	r3, #31
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	2204      	movs	r2, #4
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e017      	b.n	8003b5a <UART_SetConfig+0xf2>
 8003b2a:	231f      	movs	r3, #31
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	2208      	movs	r2, #8
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	e012      	b.n	8003b5a <UART_SetConfig+0xf2>
 8003b34:	231f      	movs	r3, #31
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	2210      	movs	r2, #16
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e00d      	b.n	8003b5a <UART_SetConfig+0xf2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a67      	ldr	r2, [pc, #412]	; (8003ce0 <UART_SetConfig+0x278>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d104      	bne.n	8003b52 <UART_SetConfig+0xea>
 8003b48:	231f      	movs	r3, #31
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	e003      	b.n	8003b5a <UART_SetConfig+0xf2>
 8003b52:	231f      	movs	r3, #31
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	2210      	movs	r2, #16
 8003b58:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d15d      	bne.n	8003c22 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003b66:	231f      	movs	r3, #31
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d015      	beq.n	8003b9c <UART_SetConfig+0x134>
 8003b70:	dc18      	bgt.n	8003ba4 <UART_SetConfig+0x13c>
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d00d      	beq.n	8003b92 <UART_SetConfig+0x12a>
 8003b76:	dc15      	bgt.n	8003ba4 <UART_SetConfig+0x13c>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <UART_SetConfig+0x11a>
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d005      	beq.n	8003b8c <UART_SetConfig+0x124>
 8003b80:	e010      	b.n	8003ba4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b82:	f7ff f845 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8003b86:	0003      	movs	r3, r0
 8003b88:	61bb      	str	r3, [r7, #24]
        break;
 8003b8a:	e012      	b.n	8003bb2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b8c:	4b55      	ldr	r3, [pc, #340]	; (8003ce4 <UART_SetConfig+0x27c>)
 8003b8e:	61bb      	str	r3, [r7, #24]
        break;
 8003b90:	e00f      	b.n	8003bb2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b92:	f7fe ffcf 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8003b96:	0003      	movs	r3, r0
 8003b98:	61bb      	str	r3, [r7, #24]
        break;
 8003b9a:	e00a      	b.n	8003bb2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	61bb      	str	r3, [r7, #24]
        break;
 8003ba2:	e006      	b.n	8003bb2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ba8:	231e      	movs	r3, #30
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
        break;
 8003bb0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d100      	bne.n	8003bba <UART_SetConfig+0x152>
 8003bb8:	e07b      	b.n	8003cb2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	005a      	lsls	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	085b      	lsrs	r3, r3, #1
 8003bc4:	18d2      	adds	r2, r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	0019      	movs	r1, r3
 8003bcc:	0010      	movs	r0, r2
 8003bce:	f7fc faad 	bl	800012c <__udivsi3>
 8003bd2:	0003      	movs	r3, r0
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	d91c      	bls.n	8003c18 <UART_SetConfig+0x1b0>
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	025b      	lsls	r3, r3, #9
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d217      	bcs.n	8003c18 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	200e      	movs	r0, #14
 8003bee:	183b      	adds	r3, r7, r0
 8003bf0:	210f      	movs	r1, #15
 8003bf2:	438a      	bics	r2, r1
 8003bf4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	4013      	ands	r3, r2
 8003c00:	b299      	uxth	r1, r3
 8003c02:	183b      	adds	r3, r7, r0
 8003c04:	183a      	adds	r2, r7, r0
 8003c06:	8812      	ldrh	r2, [r2, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	183a      	adds	r2, r7, r0
 8003c12:	8812      	ldrh	r2, [r2, #0]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	e04c      	b.n	8003cb2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003c18:	231e      	movs	r3, #30
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e047      	b.n	8003cb2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c22:	231f      	movs	r3, #31
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d015      	beq.n	8003c58 <UART_SetConfig+0x1f0>
 8003c2c:	dc18      	bgt.n	8003c60 <UART_SetConfig+0x1f8>
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d00d      	beq.n	8003c4e <UART_SetConfig+0x1e6>
 8003c32:	dc15      	bgt.n	8003c60 <UART_SetConfig+0x1f8>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <UART_SetConfig+0x1d6>
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d005      	beq.n	8003c48 <UART_SetConfig+0x1e0>
 8003c3c:	e010      	b.n	8003c60 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3e:	f7fe ffe7 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8003c42:	0003      	movs	r3, r0
 8003c44:	61bb      	str	r3, [r7, #24]
        break;
 8003c46:	e012      	b.n	8003c6e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <UART_SetConfig+0x27c>)
 8003c4a:	61bb      	str	r3, [r7, #24]
        break;
 8003c4c:	e00f      	b.n	8003c6e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe ff71 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8003c52:	0003      	movs	r3, r0
 8003c54:	61bb      	str	r3, [r7, #24]
        break;
 8003c56:	e00a      	b.n	8003c6e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	61bb      	str	r3, [r7, #24]
        break;
 8003c5e:	e006      	b.n	8003c6e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c64:	231e      	movs	r3, #30
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
        break;
 8003c6c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01e      	beq.n	8003cb2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	085a      	lsrs	r2, r3, #1
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	18d2      	adds	r2, r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	0019      	movs	r1, r3
 8003c84:	0010      	movs	r0, r2
 8003c86:	f7fc fa51 	bl	800012c <__udivsi3>
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b0f      	cmp	r3, #15
 8003c94:	d909      	bls.n	8003caa <UART_SetConfig+0x242>
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	025b      	lsls	r3, r3, #9
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d204      	bcs.n	8003caa <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	60da      	str	r2, [r3, #12]
 8003ca8:	e003      	b.n	8003cb2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003caa:	231e      	movs	r3, #30
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	2201      	movs	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cbe:	231e      	movs	r3, #30
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	781b      	ldrb	r3, [r3, #0]
}
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b008      	add	sp, #32
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	ffff69f3 	.word	0xffff69f3
 8003cd0:	ffffcfff 	.word	0xffffcfff
 8003cd4:	fffff4ff 	.word	0xfffff4ff
 8003cd8:	40013800 	.word	0x40013800
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40004400 	.word	0x40004400
 8003ce4:	007a1200 	.word	0x007a1200

08003ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d00b      	beq.n	8003d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a4a      	ldr	r2, [pc, #296]	; (8003e2c <UART_AdvFeatureConfig+0x144>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	0019      	movs	r1, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2202      	movs	r2, #2
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d00b      	beq.n	8003d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4a43      	ldr	r2, [pc, #268]	; (8003e30 <UART_AdvFeatureConfig+0x148>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	0019      	movs	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	2204      	movs	r2, #4
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4a3b      	ldr	r2, [pc, #236]	; (8003e34 <UART_AdvFeatureConfig+0x14c>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	0019      	movs	r1, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2208      	movs	r2, #8
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4a34      	ldr	r2, [pc, #208]	; (8003e38 <UART_AdvFeatureConfig+0x150>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d00b      	beq.n	8003d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a2c      	ldr	r2, [pc, #176]	; (8003e3c <UART_AdvFeatureConfig+0x154>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	2220      	movs	r2, #32
 8003da0:	4013      	ands	r3, r2
 8003da2:	d00b      	beq.n	8003dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	4a25      	ldr	r2, [pc, #148]	; (8003e40 <UART_AdvFeatureConfig+0x158>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	2240      	movs	r2, #64	; 0x40
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d01d      	beq.n	8003e02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <UART_AdvFeatureConfig+0x15c>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	035b      	lsls	r3, r3, #13
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d10b      	bne.n	8003e02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <UART_AdvFeatureConfig+0x160>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2280      	movs	r2, #128	; 0x80
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <UART_AdvFeatureConfig+0x164>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	fffdffff 	.word	0xfffdffff
 8003e30:	fffeffff 	.word	0xfffeffff
 8003e34:	fffbffff 	.word	0xfffbffff
 8003e38:	ffff7fff 	.word	0xffff7fff
 8003e3c:	ffffefff 	.word	0xffffefff
 8003e40:	ffffdfff 	.word	0xffffdfff
 8003e44:	ffefffff 	.word	0xffefffff
 8003e48:	ff9fffff 	.word	0xff9fffff
 8003e4c:	fff7ffff 	.word	0xfff7ffff

08003e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2280      	movs	r2, #128	; 0x80
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e60:	f7fd fafe 	bl	8001460 <HAL_GetTick>
 8003e64:	0003      	movs	r3, r0
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2208      	movs	r2, #8
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d10c      	bne.n	8003e90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2280      	movs	r2, #128	; 0x80
 8003e7a:	0391      	lsls	r1, r2, #14
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <UART_CheckIdleState+0x8c>)
 8003e80:	9200      	str	r2, [sp, #0]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f000 f82c 	bl	8003ee0 <UART_WaitOnFlagUntilTimeout>
 8003e88:	1e03      	subs	r3, r0, #0
 8003e8a:	d001      	beq.n	8003e90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e021      	b.n	8003ed4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2204      	movs	r2, #4
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d10c      	bne.n	8003eb8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2280      	movs	r2, #128	; 0x80
 8003ea2:	03d1      	lsls	r1, r2, #15
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <UART_CheckIdleState+0x8c>)
 8003ea8:	9200      	str	r2, [sp, #0]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f000 f818 	bl	8003ee0 <UART_WaitOnFlagUntilTimeout>
 8003eb0:	1e03      	subs	r3, r0, #0
 8003eb2:	d001      	beq.n	8003eb8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e00d      	b.n	8003ed4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2274      	movs	r2, #116	; 0x74
 8003ece:	2100      	movs	r1, #0
 8003ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b004      	add	sp, #16
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	01ffffff 	.word	0x01ffffff

08003ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b094      	sub	sp, #80	; 0x50
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	1dfb      	adds	r3, r7, #7
 8003eee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef0:	e0a3      	b.n	800403a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	d100      	bne.n	8003efa <UART_WaitOnFlagUntilTimeout+0x1a>
 8003ef8:	e09f      	b.n	800403a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efa:	f7fd fab1 	bl	8001460 <HAL_GetTick>
 8003efe:	0002      	movs	r2, r0
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d13d      	bne.n	8003f8c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f10:	f3ef 8310 	mrs	r3, PRIMASK
 8003f14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f18:	647b      	str	r3, [r7, #68]	; 0x44
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	f383 8810 	msr	PRIMASK, r3
}
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	494c      	ldr	r1, [pc, #304]	; (8004064 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003f32:	400a      	ands	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	f383 8810 	msr	PRIMASK, r3
}
 8003f40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f42:	f3ef 8310 	mrs	r3, PRIMASK
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f52:	f383 8810 	msr	PRIMASK, r3
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2101      	movs	r1, #1
 8003f64:	438a      	bics	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6e:	f383 8810 	msr	PRIMASK, r3
}
 8003f72:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2274      	movs	r2, #116	; 0x74
 8003f84:	2100      	movs	r1, #0
 8003f86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e067      	b.n	800405c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2204      	movs	r2, #4
 8003f94:	4013      	ands	r3, r2
 8003f96:	d050      	beq.n	800403a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69da      	ldr	r2, [r3, #28]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d146      	bne.n	800403a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2280      	movs	r2, #128	; 0x80
 8003fb2:	0112      	lsls	r2, r2, #4
 8003fb4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fba:	613b      	str	r3, [r7, #16]
  return(result);
 8003fbc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f383 8810 	msr	PRIMASK, r3
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4923      	ldr	r1, [pc, #140]	; (8004064 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003fd8:	400a      	ands	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f383 8810 	msr	PRIMASK, r3
}
 8003fe6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fec:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fee:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f383 8810 	msr	PRIMASK, r3
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2101      	movs	r1, #1
 800400a:	438a      	bics	r2, r1
 800400c:	609a      	str	r2, [r3, #8]
 800400e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	f383 8810 	msr	PRIMASK, r3
}
 8004018:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2280      	movs	r2, #128	; 0x80
 800402a:	2120      	movs	r1, #32
 800402c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2274      	movs	r2, #116	; 0x74
 8004032:	2100      	movs	r1, #0
 8004034:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e010      	b.n	800405c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	425a      	negs	r2, r3
 800404a:	4153      	adcs	r3, r2
 800404c:	b2db      	uxtb	r3, r3
 800404e:	001a      	movs	r2, r3
 8004050:	1dfb      	adds	r3, r7, #7
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d100      	bne.n	800405a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004058:	e74b      	b.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b014      	add	sp, #80	; 0x50
 8004062:	bd80      	pop	{r7, pc}
 8004064:	fffffe5f 	.word	0xfffffe5f

08004068 <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(uint16_t dev, uint8_t new_address)
{
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	0002      	movs	r2, r0
 8004070:	1dbb      	adds	r3, r7, #6
 8004072:	801a      	strh	r2, [r3, #0]
 8004074:	1d7b      	adds	r3, r7, #5
 8004076:	1c0a      	adds	r2, r1, #0
 8004078:	701a      	strb	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800407a:	240f      	movs	r4, #15
 800407c:	193b      	adds	r3, r7, r4
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address);
 8004082:	1d7b      	adds	r3, r7, #5
 8004084:	781a      	ldrb	r2, [r3, #0]
 8004086:	1dbb      	adds	r3, r7, #6
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	2101      	movs	r1, #1
 800408c:	0018      	movs	r0, r3
 800408e:	f000 fa0d 	bl	80044ac <VL53L1_WrByte>
 8004092:	0003      	movs	r3, r0
 8004094:	0019      	movs	r1, r3
 8004096:	193b      	adds	r3, r7, r4
 8004098:	193a      	adds	r2, r7, r4
 800409a:	7812      	ldrb	r2, [r2, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	701a      	strb	r2, [r3, #0]
	return status;
 80040a0:	193b      	adds	r3, r7, r4
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	b25b      	sxtb	r3, r3
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b005      	add	sp, #20
 80040ac:	bd90      	pop	{r4, r7, pc}
	...

080040b0 <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(uint16_t dev)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	0002      	movs	r2, r0
 80040b8:	1dbb      	adds	r3, r7, #6
 80040ba:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80040bc:	230f      	movs	r3, #15
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
	uint8_t Addr = 0x00, tmp;
 80040c4:	210e      	movs	r1, #14
 80040c6:	187b      	adds	r3, r7, r1
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	222d      	movs	r2, #45	; 0x2d
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	e01a      	b.n	800410a <VL53L1X_SensorInit+0x5a>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80040d4:	240e      	movs	r4, #14
 80040d6:	193b      	adds	r3, r7, r4
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	b299      	uxth	r1, r3
 80040dc:	193b      	adds	r3, r7, r4
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	3b2d      	subs	r3, #45	; 0x2d
 80040e2:	4a3e      	ldr	r2, [pc, #248]	; (80041dc <VL53L1X_SensorInit+0x12c>)
 80040e4:	5cd2      	ldrb	r2, [r2, r3]
 80040e6:	1dbb      	adds	r3, r7, #6
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	0018      	movs	r0, r3
 80040ec:	f000 f9de 	bl	80044ac <VL53L1_WrByte>
 80040f0:	0003      	movs	r3, r0
 80040f2:	0019      	movs	r1, r3
 80040f4:	220f      	movs	r2, #15
 80040f6:	18bb      	adds	r3, r7, r2
 80040f8:	18ba      	adds	r2, r7, r2
 80040fa:	7812      	ldrb	r2, [r2, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	701a      	strb	r2, [r3, #0]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8004100:	193b      	adds	r3, r7, r4
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	193b      	adds	r3, r7, r4
 8004106:	3201      	adds	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	230e      	movs	r3, #14
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b87      	cmp	r3, #135	; 0x87
 8004112:	d9df      	bls.n	80040d4 <VL53L1X_SensorInit+0x24>
	}
	status |= VL53L1X_StartRanging(dev);
 8004114:	1dbb      	adds	r3, r7, #6
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	0018      	movs	r0, r3
 800411a:	f000 f8b3 	bl	8004284 <VL53L1X_StartRanging>
 800411e:	0003      	movs	r3, r0
 8004120:	0019      	movs	r1, r3
 8004122:	220f      	movs	r2, #15
 8004124:	18bb      	adds	r3, r7, r2
 8004126:	18ba      	adds	r2, r7, r2
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	701a      	strb	r2, [r3, #0]
	tmp  = 0;
 800412e:	230d      	movs	r3, #13
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8004136:	e00f      	b.n	8004158 <VL53L1X_SensorInit+0xa8>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8004138:	230d      	movs	r3, #13
 800413a:	18fa      	adds	r2, r7, r3
 800413c:	1dbb      	adds	r3, r7, #6
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	0011      	movs	r1, r2
 8004142:	0018      	movs	r0, r3
 8004144:	f000 f8dc 	bl	8004300 <VL53L1X_CheckForDataReady>
 8004148:	0003      	movs	r3, r0
 800414a:	0019      	movs	r1, r3
 800414c:	220f      	movs	r2, #15
 800414e:	18bb      	adds	r3, r7, r2
 8004150:	18ba      	adds	r2, r7, r2
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	701a      	strb	r2, [r3, #0]
	while(tmp==0){
 8004158:	230d      	movs	r3, #13
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ea      	beq.n	8004138 <VL53L1X_SensorInit+0x88>
	}
	status |= VL53L1X_ClearInterrupt(dev);
 8004162:	1dbb      	adds	r3, r7, #6
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	0018      	movs	r0, r3
 8004168:	f000 f83a 	bl	80041e0 <VL53L1X_ClearInterrupt>
 800416c:	0003      	movs	r3, r0
 800416e:	0019      	movs	r1, r3
 8004170:	240f      	movs	r4, #15
 8004172:	193b      	adds	r3, r7, r4
 8004174:	193a      	adds	r2, r7, r4
 8004176:	7812      	ldrb	r2, [r2, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	701a      	strb	r2, [r3, #0]
	status |= VL53L1X_StopRanging(dev);
 800417c:	1dbb      	adds	r3, r7, #6
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	0018      	movs	r0, r3
 8004182:	f000 f89e 	bl	80042c2 <VL53L1X_StopRanging>
 8004186:	0003      	movs	r3, r0
 8004188:	0019      	movs	r1, r3
 800418a:	193b      	adds	r3, r7, r4
 800418c:	193a      	adds	r2, r7, r4
 800418e:	7812      	ldrb	r2, [r2, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8004194:	1dbb      	adds	r3, r7, #6
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	2209      	movs	r2, #9
 800419a:	2108      	movs	r1, #8
 800419c:	0018      	movs	r0, r3
 800419e:	f000 f985 	bl	80044ac <VL53L1_WrByte>
 80041a2:	0003      	movs	r3, r0
 80041a4:	0019      	movs	r1, r3
 80041a6:	193b      	adds	r3, r7, r4
 80041a8:	193a      	adds	r2, r7, r4
 80041aa:	7812      	ldrb	r2, [r2, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 80041b0:	1dbb      	adds	r3, r7, #6
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	2200      	movs	r2, #0
 80041b6:	210b      	movs	r1, #11
 80041b8:	0018      	movs	r0, r3
 80041ba:	f000 f977 	bl	80044ac <VL53L1_WrByte>
 80041be:	0003      	movs	r3, r0
 80041c0:	0019      	movs	r1, r3
 80041c2:	193b      	adds	r3, r7, r4
 80041c4:	193a      	adds	r2, r7, r4
 80041c6:	7812      	ldrb	r2, [r2, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	701a      	strb	r2, [r3, #0]
	return status;
 80041cc:	193b      	adds	r3, r7, r4
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	b25b      	sxtb	r3, r3
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b005      	add	sp, #20
 80041d8:	bd90      	pop	{r4, r7, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	080051f0 	.word	0x080051f0

080041e0 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 80041e0:	b590      	push	{r4, r7, lr}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	0002      	movs	r2, r0
 80041e8:	1dbb      	adds	r3, r7, #6
 80041ea:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80041ec:	240f      	movs	r4, #15
 80041ee:	193b      	adds	r3, r7, r4
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 80041f4:	1dbb      	adds	r3, r7, #6
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	2201      	movs	r2, #1
 80041fa:	2186      	movs	r1, #134	; 0x86
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 f955 	bl	80044ac <VL53L1_WrByte>
 8004202:	0003      	movs	r3, r0
 8004204:	0019      	movs	r1, r3
 8004206:	193b      	adds	r3, r7, r4
 8004208:	193a      	adds	r2, r7, r4
 800420a:	7812      	ldrb	r2, [r2, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	701a      	strb	r2, [r3, #0]
	return status;
 8004210:	193b      	adds	r3, r7, r4
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	b25b      	sxtb	r3, r3
}
 8004216:	0018      	movs	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	b005      	add	sp, #20
 800421c:	bd90      	pop	{r4, r7, pc}

0800421e <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 800421e:	b5b0      	push	{r4, r5, r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	0002      	movs	r2, r0
 8004226:	6039      	str	r1, [r7, #0]
 8004228:	1dbb      	adds	r3, r7, #6
 800422a:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 800422c:	240f      	movs	r4, #15
 800422e:	193b      	adds	r3, r7, r4
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8004234:	250e      	movs	r5, #14
 8004236:	197a      	adds	r2, r7, r5
 8004238:	1dbb      	adds	r3, r7, #6
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	2130      	movs	r1, #48	; 0x30
 800423e:	0018      	movs	r0, r3
 8004240:	f000 f970 	bl	8004524 <VL53L1_RdByte>
 8004244:	0003      	movs	r3, r0
 8004246:	0019      	movs	r1, r3
 8004248:	0020      	movs	r0, r4
 800424a:	183b      	adds	r3, r7, r0
 800424c:	183a      	adds	r2, r7, r0
 800424e:	7812      	ldrb	r2, [r2, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	701a      	strb	r2, [r3, #0]
	Temp = Temp & 0x10;
 8004254:	197b      	adds	r3, r7, r5
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2210      	movs	r2, #16
 800425a:	4013      	ands	r3, r2
 800425c:	b2da      	uxtb	r2, r3
 800425e:	197b      	adds	r3, r7, r5
 8004260:	701a      	strb	r2, [r3, #0]
	*pInterruptPolarity = !(Temp>>4);
 8004262:	197b      	adds	r3, r7, r5
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	b2db      	uxtb	r3, r3
 800426a:	425a      	negs	r2, r3
 800426c:	4153      	adcs	r3, r2
 800426e:	b2db      	uxtb	r3, r3
 8004270:	001a      	movs	r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	701a      	strb	r2, [r3, #0]
	return status;
 8004276:	183b      	adds	r3, r7, r0
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	b25b      	sxtb	r3, r3
}
 800427c:	0018      	movs	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	b004      	add	sp, #16
 8004282:	bdb0      	pop	{r4, r5, r7, pc}

08004284 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	0002      	movs	r2, r0
 800428c:	1dbb      	adds	r3, r7, #6
 800428e:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 8004290:	240f      	movs	r4, #15
 8004292:	193b      	adds	r3, r7, r4
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8004298:	1dbb      	adds	r3, r7, #6
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	2240      	movs	r2, #64	; 0x40
 800429e:	2187      	movs	r1, #135	; 0x87
 80042a0:	0018      	movs	r0, r3
 80042a2:	f000 f903 	bl	80044ac <VL53L1_WrByte>
 80042a6:	0003      	movs	r3, r0
 80042a8:	0019      	movs	r1, r3
 80042aa:	193b      	adds	r3, r7, r4
 80042ac:	193a      	adds	r2, r7, r4
 80042ae:	7812      	ldrb	r2, [r2, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	701a      	strb	r2, [r3, #0]
	return status;
 80042b4:	193b      	adds	r3, r7, r4
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b25b      	sxtb	r3, r3
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b005      	add	sp, #20
 80042c0:	bd90      	pop	{r4, r7, pc}

080042c2 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 80042c2:	b590      	push	{r4, r7, lr}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	0002      	movs	r2, r0
 80042ca:	1dbb      	adds	r3, r7, #6
 80042cc:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80042ce:	240f      	movs	r4, #15
 80042d0:	193b      	adds	r3, r7, r4
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 80042d6:	1dbb      	adds	r3, r7, #6
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	2187      	movs	r1, #135	; 0x87
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 f8e4 	bl	80044ac <VL53L1_WrByte>
 80042e4:	0003      	movs	r3, r0
 80042e6:	0019      	movs	r1, r3
 80042e8:	193b      	adds	r3, r7, r4
 80042ea:	193a      	adds	r2, r7, r4
 80042ec:	7812      	ldrb	r2, [r2, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	701a      	strb	r2, [r3, #0]
	return status;
 80042f2:	193b      	adds	r3, r7, r4
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	b25b      	sxtb	r3, r3
}
 80042f8:	0018      	movs	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b005      	add	sp, #20
 80042fe:	bd90      	pop	{r4, r7, pc}

08004300 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8004300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	0002      	movs	r2, r0
 8004308:	6039      	str	r1, [r7, #0]
 800430a:	1dbb      	adds	r3, r7, #6
 800430c:	801a      	strh	r2, [r3, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 800430e:	240f      	movs	r4, #15
 8004310:	193b      	adds	r3, r7, r4
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8004316:	250d      	movs	r5, #13
 8004318:	197a      	adds	r2, r7, r5
 800431a:	1dbb      	adds	r3, r7, #6
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	0011      	movs	r1, r2
 8004320:	0018      	movs	r0, r3
 8004322:	f7ff ff7c 	bl	800421e <VL53L1X_GetInterruptPolarity>
 8004326:	0003      	movs	r3, r0
 8004328:	0019      	movs	r1, r3
 800432a:	193b      	adds	r3, r7, r4
 800432c:	193a      	adds	r2, r7, r4
 800432e:	7812      	ldrb	r2, [r2, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	701a      	strb	r2, [r3, #0]
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8004334:	260e      	movs	r6, #14
 8004336:	19ba      	adds	r2, r7, r6
 8004338:	1dbb      	adds	r3, r7, #6
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	2131      	movs	r1, #49	; 0x31
 800433e:	0018      	movs	r0, r3
 8004340:	f000 f8f0 	bl	8004524 <VL53L1_RdByte>
 8004344:	0003      	movs	r3, r0
 8004346:	0019      	movs	r1, r3
 8004348:	193b      	adds	r3, r7, r4
 800434a:	193a      	adds	r2, r7, r4
 800434c:	7812      	ldrb	r2, [r2, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	701a      	strb	r2, [r3, #0]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8004352:	193b      	adds	r3, r7, r4
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	b25b      	sxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10f      	bne.n	800437c <VL53L1X_CheckForDataReady+0x7c>
		if ((Temp & 1) == IntPol)
 800435c:	19bb      	adds	r3, r7, r6
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	001a      	movs	r2, r3
 8004362:	2301      	movs	r3, #1
 8004364:	4013      	ands	r3, r2
 8004366:	197a      	adds	r2, r7, r5
 8004368:	7812      	ldrb	r2, [r2, #0]
 800436a:	4293      	cmp	r3, r2
 800436c:	d103      	bne.n	8004376 <VL53L1X_CheckForDataReady+0x76>
			*isDataReady = 1;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	e002      	b.n	800437c <VL53L1X_CheckForDataReady+0x7c>
		else
			*isDataReady = 0;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2200      	movs	r2, #0
 800437a:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800437c:	230f      	movs	r3, #15
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b25b      	sxtb	r3, r3
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b005      	add	sp, #20
 800438a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800438c <VL53L1X_GetSensorId>:
	*state = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetSensorId(uint16_t dev, uint16_t *sensorId)
{
 800438c:	b5b0      	push	{r4, r5, r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	0002      	movs	r2, r0
 8004394:	6039      	str	r1, [r7, #0]
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 800439a:	240f      	movs	r4, #15
 800439c:	193b      	adds	r3, r7, r4
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
	uint16_t tmp = 0;
 80043a2:	250c      	movs	r5, #12
 80043a4:	197b      	adds	r3, r7, r5
 80043a6:	2200      	movs	r2, #0
 80043a8:	801a      	strh	r2, [r3, #0]

	status |= VL53L1_RdWord(dev, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 80043aa:	197a      	adds	r2, r7, r5
 80043ac:	2310      	movs	r3, #16
 80043ae:	33ff      	adds	r3, #255	; 0xff
 80043b0:	0019      	movs	r1, r3
 80043b2:	1dbb      	adds	r3, r7, #6
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	0018      	movs	r0, r3
 80043b8:	f000 f8fa 	bl	80045b0 <VL53L1_RdWord>
 80043bc:	0003      	movs	r3, r0
 80043be:	0019      	movs	r1, r3
 80043c0:	193b      	adds	r3, r7, r4
 80043c2:	193a      	adds	r2, r7, r4
 80043c4:	7812      	ldrb	r2, [r2, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	701a      	strb	r2, [r3, #0]
	*sensorId = tmp;
 80043ca:	197b      	adds	r3, r7, r5
 80043cc:	881a      	ldrh	r2, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	801a      	strh	r2, [r3, #0]
	return status;
 80043d2:	193b      	adds	r3, r7, r4
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b25b      	sxtb	r3, r3
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	b004      	add	sp, #16
 80043de:	bdb0      	pop	{r4, r5, r7, pc}

080043e0 <VL53L1X_GetDistance>:

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 80043e0:	b5b0      	push	{r4, r5, r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	0002      	movs	r2, r0
 80043e8:	6039      	str	r1, [r7, #0]
 80043ea:	1dbb      	adds	r3, r7, #6
 80043ec:	801a      	strh	r2, [r3, #0]
	VL53L1X_ERROR status = 0;
 80043ee:	240f      	movs	r4, #15
 80043f0:	193b      	adds	r3, r7, r4
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 80043f6:	250c      	movs	r5, #12
 80043f8:	197a      	adds	r2, r7, r5
 80043fa:	1dbb      	adds	r3, r7, #6
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	2196      	movs	r1, #150	; 0x96
 8004400:	0018      	movs	r0, r3
 8004402:	f000 f8d5 	bl	80045b0 <VL53L1_RdWord>
 8004406:	0003      	movs	r3, r0
 8004408:	0019      	movs	r1, r3
 800440a:	0020      	movs	r0, r4
 800440c:	183b      	adds	r3, r7, r0
 800440e:	183a      	adds	r2, r7, r0
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	701a      	strb	r2, [r3, #0]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8004416:	197b      	adds	r3, r7, r5
 8004418:	881a      	ldrh	r2, [r3, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	801a      	strh	r2, [r3, #0]
	return status;
 800441e:	183b      	adds	r3, r7, r0
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b25b      	sxtb	r3, r3
}
 8004424:	0018      	movs	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	b004      	add	sp, #16
 800442a:	bdb0      	pop	{r4, r5, r7, pc}

0800442c <_I2CWrite>:
#include "VL53L1X.h"
extern VL53L1X* active_sensor;

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t dev, uint8_t *pdata, uint32_t count) {
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b087      	sub	sp, #28
 8004430:	af02      	add	r7, sp, #8
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	230e      	movs	r3, #14
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	1c02      	adds	r2, r0, #0
 800443c:	801a      	strh	r2, [r3, #0]
	(void) (dev);
	return (int) HAL_I2C_Master_Transmit(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <_I2CWrite+0x3c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <_I2CWrite+0x3c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	791b      	ldrb	r3, [r3, #4]
 800444a:	b29b      	uxth	r3, r3
 800444c:	18db      	adds	r3, r3, r3
 800444e:	b299      	uxth	r1, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	b29b      	uxth	r3, r3
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	2464      	movs	r4, #100	; 0x64
 8004458:	9400      	str	r4, [sp, #0]
 800445a:	f7fd fae3 	bl	8001a24 <HAL_I2C_Master_Transmit>
 800445e:	0003      	movs	r3, r0
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	b005      	add	sp, #20
 8004466:	bd90      	pop	{r4, r7, pc}
 8004468:	20000434 	.word	0x20000434

0800446c <_I2CRead>:

int _I2CRead(uint16_t dev, uint8_t *pdata, uint32_t count) {
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b087      	sub	sp, #28
 8004470:	af02      	add	r7, sp, #8
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	230e      	movs	r3, #14
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	1c02      	adds	r2, r0, #0
 800447c:	801a      	strh	r2, [r3, #0]
	(void) (dev);
    return (int) HAL_I2C_Master_Receive(active_sensor->hi2c, active_sensor->address << 1, pdata, count, 100);
 800447e:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <_I2CRead+0x3c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <_I2CRead+0x3c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	791b      	ldrb	r3, [r3, #4]
 800448a:	b29b      	uxth	r3, r3
 800448c:	18db      	adds	r3, r3, r3
 800448e:	b299      	uxth	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	b29b      	uxth	r3, r3
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	2464      	movs	r4, #100	; 0x64
 8004498:	9400      	str	r4, [sp, #0]
 800449a:	f7fd fbcb 	bl	8001c34 <HAL_I2C_Master_Receive>
 800449e:	0003      	movs	r3, r0
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b005      	add	sp, #20
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	20000434 	.word	0x20000434

080044ac <VL53L1_WrByte>:
    }
done:
    return Status;
}

int8_t VL53L1_WrByte(uint16_t dev, uint16_t index, uint8_t data) {
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	0004      	movs	r4, r0
 80044b4:	0008      	movs	r0, r1
 80044b6:	0011      	movs	r1, r2
 80044b8:	1dbb      	adds	r3, r7, #6
 80044ba:	1c22      	adds	r2, r4, #0
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	1c02      	adds	r2, r0, #0
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	1cfb      	adds	r3, r7, #3
 80044c6:	1c0a      	adds	r2, r1, #0
 80044c8:	701a      	strb	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80044ca:	240f      	movs	r4, #15
 80044cc:	193b      	adds	r3, r7, r4
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	b29b      	uxth	r3, r3
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	4b10      	ldr	r3, [pc, #64]	; (8004520 <VL53L1_WrByte+0x74>)
 80044de:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80044e0:	1d3b      	adds	r3, r7, #4
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <VL53L1_WrByte+0x74>)
 80044e8:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80044ea:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <VL53L1_WrByte+0x74>)
 80044ec:	1cfa      	adds	r2, r7, #3
 80044ee:	7812      	ldrb	r2, [r2, #0]
 80044f0:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(dev, _I2CBuffer, 3);
 80044f2:	490b      	ldr	r1, [pc, #44]	; (8004520 <VL53L1_WrByte+0x74>)
 80044f4:	1dbb      	adds	r3, r7, #6
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	2203      	movs	r2, #3
 80044fa:	0018      	movs	r0, r3
 80044fc:	f7ff ff96 	bl	800442c <_I2CWrite>
 8004500:	0003      	movs	r3, r0
 8004502:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <VL53L1_WrByte+0x64>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800450a:	193b      	adds	r3, r7, r4
 800450c:	22f3      	movs	r2, #243	; 0xf3
 800450e:	701a      	strb	r2, [r3, #0]
    }
    return Status;}
 8004510:	230f      	movs	r3, #15
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b25b      	sxtb	r3, r3
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	b005      	add	sp, #20
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	20000334 	.word	0x20000334

08004524 <VL53L1_RdByte>:
    }

    return Status;
}

int8_t VL53L1_RdByte(uint16_t dev, uint16_t index, uint8_t *data) {
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	603a      	str	r2, [r7, #0]
 800452c:	1dbb      	adds	r3, r7, #6
 800452e:	1c02      	adds	r2, r0, #0
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	1d3b      	adds	r3, r7, #4
 8004534:	1c0a      	adds	r2, r1, #0
 8004536:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004538:	240f      	movs	r4, #15
 800453a:	193b      	adds	r3, r7, r4
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8004540:	1d3b      	adds	r3, r7, #4
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	b29b      	uxth	r3, r3
 8004548:	b2da      	uxtb	r2, r3
 800454a:	4b18      	ldr	r3, [pc, #96]	; (80045ac <VL53L1_RdByte+0x88>)
 800454c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	4b15      	ldr	r3, [pc, #84]	; (80045ac <VL53L1_RdByte+0x88>)
 8004556:	705a      	strb	r2, [r3, #1]

	status_int = _I2CWrite(dev, _I2CBuffer, 2);
 8004558:	4914      	ldr	r1, [pc, #80]	; (80045ac <VL53L1_RdByte+0x88>)
 800455a:	1dbb      	adds	r3, r7, #6
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	2202      	movs	r2, #2
 8004560:	0018      	movs	r0, r3
 8004562:	f7ff ff63 	bl	800442c <_I2CWrite>
 8004566:	0003      	movs	r3, r0
 8004568:	60bb      	str	r3, [r7, #8]
    if( status_int ){
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004570:	193b      	adds	r3, r7, r4
 8004572:	22f3      	movs	r2, #243	; 0xf3
 8004574:	701a      	strb	r2, [r3, #0]
        goto done;
 8004576:	e011      	b.n	800459c <VL53L1_RdByte+0x78>
    }
    status_int = _I2CRead(dev, data, 1);
 8004578:	6839      	ldr	r1, [r7, #0]
 800457a:	1dbb      	adds	r3, r7, #6
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	2201      	movs	r2, #1
 8004580:	0018      	movs	r0, r3
 8004582:	f7ff ff73 	bl	800446c <_I2CRead>
 8004586:	0003      	movs	r3, r0
 8004588:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <VL53L1_RdByte+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8004590:	230f      	movs	r3, #15
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	22f3      	movs	r2, #243	; 0xf3
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	e000      	b.n	800459c <VL53L1_RdByte+0x78>
    }
done:
 800459a:	46c0      	nop			; (mov r8, r8)

	return Status;
 800459c:	230f      	movs	r3, #15
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b25b      	sxtb	r3, r3
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b005      	add	sp, #20
 80045aa:	bd90      	pop	{r4, r7, pc}
 80045ac:	20000334 	.word	0x20000334

080045b0 <VL53L1_RdWord>:

int8_t VL53L1_RdWord(uint16_t dev, uint16_t index, uint16_t *data) {
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	603a      	str	r2, [r7, #0]
 80045b8:	1dbb      	adds	r3, r7, #6
 80045ba:	1c02      	adds	r2, r0, #0
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	1c0a      	adds	r2, r1, #0
 80045c2:	801a      	strh	r2, [r3, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80045c4:	240f      	movs	r4, #15
 80045c6:	193b      	adds	r3, r7, r4
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80045cc:	1d3b      	adds	r3, r7, #4
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	0a1b      	lsrs	r3, r3, #8
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	4b1e      	ldr	r3, [pc, #120]	; (8004650 <VL53L1_RdWord+0xa0>)
 80045d8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80045da:	1d3b      	adds	r3, r7, #4
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <VL53L1_RdWord+0xa0>)
 80045e2:	705a      	strb	r2, [r3, #1]
    status_int = _I2CWrite(dev, _I2CBuffer, 2);
 80045e4:	491a      	ldr	r1, [pc, #104]	; (8004650 <VL53L1_RdWord+0xa0>)
 80045e6:	1dbb      	adds	r3, r7, #6
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	2202      	movs	r2, #2
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7ff ff1d 	bl	800442c <_I2CWrite>
 80045f2:	0003      	movs	r3, r0
 80045f4:	60bb      	str	r3, [r7, #8]

    if( status_int ){
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <VL53L1_RdWord+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80045fc:	193b      	adds	r3, r7, r4
 80045fe:	22f3      	movs	r2, #243	; 0xf3
 8004600:	701a      	strb	r2, [r3, #0]
        goto done;
 8004602:	e01c      	b.n	800463e <VL53L1_RdWord+0x8e>
    }
    status_int = _I2CRead(dev, _I2CBuffer, 2);
 8004604:	4912      	ldr	r1, [pc, #72]	; (8004650 <VL53L1_RdWord+0xa0>)
 8004606:	1dbb      	adds	r3, r7, #6
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	2202      	movs	r2, #2
 800460c:	0018      	movs	r0, r3
 800460e:	f7ff ff2d 	bl	800446c <_I2CRead>
 8004612:	0003      	movs	r3, r0
 8004614:	60bb      	str	r3, [r7, #8]
    if (status_int != 0) {
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <VL53L1_RdWord+0x76>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800461c:	230f      	movs	r3, #15
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	22f3      	movs	r2, #243	; 0xf3
 8004622:	701a      	strb	r2, [r3, #0]
        goto done;
 8004624:	e00b      	b.n	800463e <VL53L1_RdWord+0x8e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <VL53L1_RdWord+0xa0>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	b29a      	uxth	r2, r3
 8004630:	4b07      	ldr	r3, [pc, #28]	; (8004650 <VL53L1_RdWord+0xa0>)
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	b29b      	uxth	r3, r3
 8004636:	18d3      	adds	r3, r2, r3
 8004638:	b29a      	uxth	r2, r3
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	801a      	strh	r2, [r3, #0]
done:
    return Status;}
 800463e:	230f      	movs	r3, #15
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b25b      	sxtb	r3, r3
 8004646:	0018      	movs	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	b005      	add	sp, #20
 800464c:	bd90      	pop	{r4, r7, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	20000334 	.word	0x20000334

08004654 <TOF_InitStruct>:
#include "VL53L1X.h"
#include "VL53L1X_api.h"

VL53L1X* active_sensor;

void TOF_InitStruct(VL53L1X* const sensor, I2C_HandleTypeDef* hi2c, uint8_t address, GPIO_TypeDef* xshut_port, uint16_t xshut_pin) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	1dfb      	adds	r3, r7, #7
 8004662:	701a      	strb	r2, [r3, #0]
	sensor->hi2c = hi2c;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	601a      	str	r2, [r3, #0]
	sensor->address = address;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1dfa      	adds	r2, r7, #7
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	711a      	strb	r2, [r3, #4]

	sensor->xshut_port = xshut_port;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	609a      	str	r2, [r3, #8]
	sensor->xshut_pin = xshut_pin;
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	2318      	movs	r3, #24
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	8193      	strh	r3, [r2, #12]
}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	46bd      	mov	sp, r7
 8004686:	b004      	add	sp, #16
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <TOF_TurnOn>:

void TOF_TurnOn(VL53L1X* const sensor) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8004694:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <TOF_TurnOn+0x28>)
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_SET);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6898      	ldr	r0, [r3, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	899b      	ldrh	r3, [r3, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	0019      	movs	r1, r3
 80046a6:	f7fd f909 	bl	80018bc <HAL_GPIO_WritePin>
}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b002      	add	sp, #8
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	20000434 	.word	0x20000434

080046b8 <TOF_TurnOff>:

void TOF_TurnOff(VL53L1X* const sensor) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <TOF_TurnOff+0x28>)
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(sensor->xshut_port, sensor->xshut_pin, GPIO_PIN_RESET);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6898      	ldr	r0, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	899b      	ldrh	r3, [r3, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	0019      	movs	r1, r3
 80046d2:	f7fd f8f3 	bl	80018bc <HAL_GPIO_WritePin>
}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	20000434 	.word	0x20000434

080046e4 <TOF_BootMultipleSensors>:

void TOF_BootMultipleSensors(VL53L1X** const sensors, uint8_t count) {
 80046e4:	b590      	push	{r4, r7, lr}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	000a      	movs	r2, r1
 80046ee:	1cfb      	adds	r3, r7, #3
 80046f0:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < count; n++) {
 80046f2:	230f      	movs	r3, #15
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e00e      	b.n	800471a <TOF_BootMultipleSensors+0x36>
		TOF_TurnOff(sensors[n]);
 80046fc:	240f      	movs	r4, #15
 80046fe:	193b      	adds	r3, r7, r4
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	18d3      	adds	r3, r2, r3
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	0018      	movs	r0, r3
 800470c:	f7ff ffd4 	bl	80046b8 <TOF_TurnOff>
	for (uint8_t n = 0; n < count; n++) {
 8004710:	193b      	adds	r3, r7, r4
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	193b      	adds	r3, r7, r4
 8004716:	3201      	adds	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	230f      	movs	r3, #15
 800471c:	18fa      	adds	r2, r7, r3
 800471e:	1cfb      	adds	r3, r7, #3
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d3e9      	bcc.n	80046fc <TOF_BootMultipleSensors+0x18>
	}

	for (uint8_t n = 0; n < count; n++) {
 8004728:	230e      	movs	r3, #14
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	2200      	movs	r2, #0
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	e00e      	b.n	8004750 <TOF_BootMultipleSensors+0x6c>
		TOF_BootSensor(sensors[n]);
 8004732:	240e      	movs	r4, #14
 8004734:	193b      	adds	r3, r7, r4
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	18d3      	adds	r3, r2, r3
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0018      	movs	r0, r3
 8004742:	f000 f811 	bl	8004768 <TOF_BootSensor>
	for (uint8_t n = 0; n < count; n++) {
 8004746:	193b      	adds	r3, r7, r4
 8004748:	781a      	ldrb	r2, [r3, #0]
 800474a:	193b      	adds	r3, r7, r4
 800474c:	3201      	adds	r2, #1
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	230e      	movs	r3, #14
 8004752:	18fa      	adds	r2, r7, r3
 8004754:	1cfb      	adds	r3, r7, #3
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d3e9      	bcc.n	8004732 <TOF_BootMultipleSensors+0x4e>
	}
}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b005      	add	sp, #20
 8004766:	bd90      	pop	{r4, r7, pc}

08004768 <TOF_BootSensor>:

void TOF_BootSensor(VL53L1X* const sensor) {
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 8004770:	4b23      	ldr	r3, [pc, #140]	; (8004800 <TOF_BootSensor+0x98>)
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	601a      	str	r2, [r3, #0]
	TOF_TurnOn(sensor);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f7ff ff87 	bl	800468c <TOF_TurnOn>

	// Assume sensor wasn't initialised and is using default address
	uint8_t correct_address = sensor->address;
 800477e:	240f      	movs	r4, #15
 8004780:	193b      	adds	r3, r7, r4
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	7912      	ldrb	r2, [r2, #4]
 8004786:	701a      	strb	r2, [r3, #0]
	sensor->address = 0x52 >> 1;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2229      	movs	r2, #41	; 0x29
 800478c:	711a      	strb	r2, [r3, #4]

	// Set new address to sensor if necessary
	uint16_t id = 0;
 800478e:	210c      	movs	r1, #12
 8004790:	187b      	adds	r3, r7, r1
 8004792:	2200      	movs	r2, #0
 8004794:	801a      	strh	r2, [r3, #0]
	if (VL53L1X_GetSensorId(sensor->address, &id)) {
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	791b      	ldrb	r3, [r3, #4]
 800479a:	b29b      	uxth	r3, r3
 800479c:	187a      	adds	r2, r7, r1
 800479e:	0011      	movs	r1, r2
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7ff fdf3 	bl	800438c <VL53L1X_GetSensorId>
 80047a6:	1e03      	subs	r3, r0, #0
 80047a8:	d008      	beq.n	80047bc <TOF_BootSensor+0x54>
		VL53L1X_SetI2CAddress(sensor->address, correct_address);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	791b      	ldrb	r3, [r3, #4]
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	193b      	adds	r3, r7, r4
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	0019      	movs	r1, r3
 80047b6:	0010      	movs	r0, r2
 80047b8:	f7ff fc56 	bl	8004068 <VL53L1X_SetI2CAddress>
	}

	// Initialise sensor
	sensor->address = correct_address;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	220f      	movs	r2, #15
 80047c0:	18ba      	adds	r2, r7, r2
 80047c2:	7812      	ldrb	r2, [r2, #0]
 80047c4:	711a      	strb	r2, [r3, #4]
	VL53L1X_GetSensorId(sensor->address, &id);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	791b      	ldrb	r3, [r3, #4]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	240c      	movs	r4, #12
 80047ce:	193a      	adds	r2, r7, r4
 80047d0:	0011      	movs	r1, r2
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7ff fdda 	bl	800438c <VL53L1X_GetSensorId>
	if (id != 0) {
 80047d8:	193b      	adds	r3, r7, r4
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <TOF_BootSensor+0x90>
		VL53L1X_SensorInit(sensor->address);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	791b      	ldrb	r3, [r3, #4]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	0018      	movs	r0, r3
 80047e8:	f7ff fc62 	bl	80040b0 <VL53L1X_SensorInit>
		VL53L1X_StartRanging(sensor->address);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	791b      	ldrb	r3, [r3, #4]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7ff fd46 	bl	8004284 <VL53L1X_StartRanging>
	}
}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b005      	add	sp, #20
 80047fe:	bd90      	pop	{r4, r7, pc}
 8004800:	20000434 	.word	0x20000434

08004804 <TOF_GetDistance>:
void TOF_StopRanging(VL53L1X* const sensor) {
	active_sensor = sensor;
	VL53L1X_StopRanging(sensor->address);
}

uint16_t TOF_GetDistance(VL53L1X* const sensor) {
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	active_sensor = sensor;
 800480c:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <TOF_GetDistance+0x34>)
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]

	uint16_t reading = 0;
 8004812:	210e      	movs	r1, #14
 8004814:	187b      	adds	r3, r7, r1
 8004816:	2200      	movs	r2, #0
 8004818:	801a      	strh	r2, [r3, #0]
	VL53L1X_GetDistance(sensor->address, &reading);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	791b      	ldrb	r3, [r3, #4]
 800481e:	b29b      	uxth	r3, r3
 8004820:	000c      	movs	r4, r1
 8004822:	187a      	adds	r2, r7, r1
 8004824:	0011      	movs	r1, r2
 8004826:	0018      	movs	r0, r3
 8004828:	f7ff fdda 	bl	80043e0 <VL53L1X_GetDistance>
	return reading;
 800482c:	193b      	adds	r3, r7, r4
 800482e:	881b      	ldrh	r3, [r3, #0]
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b005      	add	sp, #20
 8004836:	bd90      	pop	{r4, r7, pc}
 8004838:	20000434 	.word	0x20000434

0800483c <__errno>:
 800483c:	4b01      	ldr	r3, [pc, #4]	; (8004844 <__errno+0x8>)
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	4770      	bx	lr
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	20000114 	.word	0x20000114

08004848 <__libc_init_array>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	2600      	movs	r6, #0
 800484c:	4d0c      	ldr	r5, [pc, #48]	; (8004880 <__libc_init_array+0x38>)
 800484e:	4c0d      	ldr	r4, [pc, #52]	; (8004884 <__libc_init_array+0x3c>)
 8004850:	1b64      	subs	r4, r4, r5
 8004852:	10a4      	asrs	r4, r4, #2
 8004854:	42a6      	cmp	r6, r4
 8004856:	d109      	bne.n	800486c <__libc_init_array+0x24>
 8004858:	2600      	movs	r6, #0
 800485a:	f000 fc8b 	bl	8005174 <_init>
 800485e:	4d0a      	ldr	r5, [pc, #40]	; (8004888 <__libc_init_array+0x40>)
 8004860:	4c0a      	ldr	r4, [pc, #40]	; (800488c <__libc_init_array+0x44>)
 8004862:	1b64      	subs	r4, r4, r5
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	42a6      	cmp	r6, r4
 8004868:	d105      	bne.n	8004876 <__libc_init_array+0x2e>
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	00b3      	lsls	r3, r6, #2
 800486e:	58eb      	ldr	r3, [r5, r3]
 8004870:	4798      	blx	r3
 8004872:	3601      	adds	r6, #1
 8004874:	e7ee      	b.n	8004854 <__libc_init_array+0xc>
 8004876:	00b3      	lsls	r3, r6, #2
 8004878:	58eb      	ldr	r3, [r5, r3]
 800487a:	4798      	blx	r3
 800487c:	3601      	adds	r6, #1
 800487e:	e7f2      	b.n	8004866 <__libc_init_array+0x1e>
 8004880:	08005280 	.word	0x08005280
 8004884:	08005280 	.word	0x08005280
 8004888:	08005280 	.word	0x08005280
 800488c:	08005284 	.word	0x08005284

08004890 <memcpy>:
 8004890:	2300      	movs	r3, #0
 8004892:	b510      	push	{r4, lr}
 8004894:	429a      	cmp	r2, r3
 8004896:	d100      	bne.n	800489a <memcpy+0xa>
 8004898:	bd10      	pop	{r4, pc}
 800489a:	5ccc      	ldrb	r4, [r1, r3]
 800489c:	54c4      	strb	r4, [r0, r3]
 800489e:	3301      	adds	r3, #1
 80048a0:	e7f8      	b.n	8004894 <memcpy+0x4>

080048a2 <memset>:
 80048a2:	0003      	movs	r3, r0
 80048a4:	1882      	adds	r2, r0, r2
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d100      	bne.n	80048ac <memset+0xa>
 80048aa:	4770      	bx	lr
 80048ac:	7019      	strb	r1, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	e7f9      	b.n	80048a6 <memset+0x4>
	...

080048b4 <siprintf>:
 80048b4:	b40e      	push	{r1, r2, r3}
 80048b6:	b500      	push	{lr}
 80048b8:	490b      	ldr	r1, [pc, #44]	; (80048e8 <siprintf+0x34>)
 80048ba:	b09c      	sub	sp, #112	; 0x70
 80048bc:	ab1d      	add	r3, sp, #116	; 0x74
 80048be:	9002      	str	r0, [sp, #8]
 80048c0:	9006      	str	r0, [sp, #24]
 80048c2:	9107      	str	r1, [sp, #28]
 80048c4:	9104      	str	r1, [sp, #16]
 80048c6:	4809      	ldr	r0, [pc, #36]	; (80048ec <siprintf+0x38>)
 80048c8:	4909      	ldr	r1, [pc, #36]	; (80048f0 <siprintf+0x3c>)
 80048ca:	cb04      	ldmia	r3!, {r2}
 80048cc:	9105      	str	r1, [sp, #20]
 80048ce:	6800      	ldr	r0, [r0, #0]
 80048d0:	a902      	add	r1, sp, #8
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	f000 f870 	bl	80049b8 <_svfiprintf_r>
 80048d8:	2300      	movs	r3, #0
 80048da:	9a02      	ldr	r2, [sp, #8]
 80048dc:	7013      	strb	r3, [r2, #0]
 80048de:	b01c      	add	sp, #112	; 0x70
 80048e0:	bc08      	pop	{r3}
 80048e2:	b003      	add	sp, #12
 80048e4:	4718      	bx	r3
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	7fffffff 	.word	0x7fffffff
 80048ec:	20000114 	.word	0x20000114
 80048f0:	ffff0208 	.word	0xffff0208

080048f4 <__ssputs_r>:
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f6:	688e      	ldr	r6, [r1, #8]
 80048f8:	b085      	sub	sp, #20
 80048fa:	0007      	movs	r7, r0
 80048fc:	000c      	movs	r4, r1
 80048fe:	9203      	str	r2, [sp, #12]
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	429e      	cmp	r6, r3
 8004904:	d83c      	bhi.n	8004980 <__ssputs_r+0x8c>
 8004906:	2390      	movs	r3, #144	; 0x90
 8004908:	898a      	ldrh	r2, [r1, #12]
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	421a      	tst	r2, r3
 800490e:	d034      	beq.n	800497a <__ssputs_r+0x86>
 8004910:	6909      	ldr	r1, [r1, #16]
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	6960      	ldr	r0, [r4, #20]
 8004916:	1a5b      	subs	r3, r3, r1
 8004918:	9302      	str	r3, [sp, #8]
 800491a:	2303      	movs	r3, #3
 800491c:	4343      	muls	r3, r0
 800491e:	0fdd      	lsrs	r5, r3, #31
 8004920:	18ed      	adds	r5, r5, r3
 8004922:	9b01      	ldr	r3, [sp, #4]
 8004924:	9802      	ldr	r0, [sp, #8]
 8004926:	3301      	adds	r3, #1
 8004928:	181b      	adds	r3, r3, r0
 800492a:	106d      	asrs	r5, r5, #1
 800492c:	42ab      	cmp	r3, r5
 800492e:	d900      	bls.n	8004932 <__ssputs_r+0x3e>
 8004930:	001d      	movs	r5, r3
 8004932:	0553      	lsls	r3, r2, #21
 8004934:	d532      	bpl.n	800499c <__ssputs_r+0xa8>
 8004936:	0029      	movs	r1, r5
 8004938:	0038      	movs	r0, r7
 800493a:	f000 fb49 	bl	8004fd0 <_malloc_r>
 800493e:	1e06      	subs	r6, r0, #0
 8004940:	d109      	bne.n	8004956 <__ssputs_r+0x62>
 8004942:	230c      	movs	r3, #12
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	2340      	movs	r3, #64	; 0x40
 8004948:	2001      	movs	r0, #1
 800494a:	89a2      	ldrh	r2, [r4, #12]
 800494c:	4240      	negs	r0, r0
 800494e:	4313      	orrs	r3, r2
 8004950:	81a3      	strh	r3, [r4, #12]
 8004952:	b005      	add	sp, #20
 8004954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004956:	9a02      	ldr	r2, [sp, #8]
 8004958:	6921      	ldr	r1, [r4, #16]
 800495a:	f7ff ff99 	bl	8004890 <memcpy>
 800495e:	89a3      	ldrh	r3, [r4, #12]
 8004960:	4a14      	ldr	r2, [pc, #80]	; (80049b4 <__ssputs_r+0xc0>)
 8004962:	401a      	ands	r2, r3
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	4313      	orrs	r3, r2
 8004968:	81a3      	strh	r3, [r4, #12]
 800496a:	9b02      	ldr	r3, [sp, #8]
 800496c:	6126      	str	r6, [r4, #16]
 800496e:	18f6      	adds	r6, r6, r3
 8004970:	6026      	str	r6, [r4, #0]
 8004972:	6165      	str	r5, [r4, #20]
 8004974:	9e01      	ldr	r6, [sp, #4]
 8004976:	1aed      	subs	r5, r5, r3
 8004978:	60a5      	str	r5, [r4, #8]
 800497a:	9b01      	ldr	r3, [sp, #4]
 800497c:	429e      	cmp	r6, r3
 800497e:	d900      	bls.n	8004982 <__ssputs_r+0x8e>
 8004980:	9e01      	ldr	r6, [sp, #4]
 8004982:	0032      	movs	r2, r6
 8004984:	9903      	ldr	r1, [sp, #12]
 8004986:	6820      	ldr	r0, [r4, #0]
 8004988:	f000 faa3 	bl	8004ed2 <memmove>
 800498c:	68a3      	ldr	r3, [r4, #8]
 800498e:	2000      	movs	r0, #0
 8004990:	1b9b      	subs	r3, r3, r6
 8004992:	60a3      	str	r3, [r4, #8]
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	199e      	adds	r6, r3, r6
 8004998:	6026      	str	r6, [r4, #0]
 800499a:	e7da      	b.n	8004952 <__ssputs_r+0x5e>
 800499c:	002a      	movs	r2, r5
 800499e:	0038      	movs	r0, r7
 80049a0:	f000 fb8c 	bl	80050bc <_realloc_r>
 80049a4:	1e06      	subs	r6, r0, #0
 80049a6:	d1e0      	bne.n	800496a <__ssputs_r+0x76>
 80049a8:	0038      	movs	r0, r7
 80049aa:	6921      	ldr	r1, [r4, #16]
 80049ac:	f000 faa4 	bl	8004ef8 <_free_r>
 80049b0:	e7c7      	b.n	8004942 <__ssputs_r+0x4e>
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	fffffb7f 	.word	0xfffffb7f

080049b8 <_svfiprintf_r>:
 80049b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ba:	b0a1      	sub	sp, #132	; 0x84
 80049bc:	9003      	str	r0, [sp, #12]
 80049be:	001d      	movs	r5, r3
 80049c0:	898b      	ldrh	r3, [r1, #12]
 80049c2:	000f      	movs	r7, r1
 80049c4:	0016      	movs	r6, r2
 80049c6:	061b      	lsls	r3, r3, #24
 80049c8:	d511      	bpl.n	80049ee <_svfiprintf_r+0x36>
 80049ca:	690b      	ldr	r3, [r1, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10e      	bne.n	80049ee <_svfiprintf_r+0x36>
 80049d0:	2140      	movs	r1, #64	; 0x40
 80049d2:	f000 fafd 	bl	8004fd0 <_malloc_r>
 80049d6:	6038      	str	r0, [r7, #0]
 80049d8:	6138      	str	r0, [r7, #16]
 80049da:	2800      	cmp	r0, #0
 80049dc:	d105      	bne.n	80049ea <_svfiprintf_r+0x32>
 80049de:	230c      	movs	r3, #12
 80049e0:	9a03      	ldr	r2, [sp, #12]
 80049e2:	3801      	subs	r0, #1
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	b021      	add	sp, #132	; 0x84
 80049e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ea:	2340      	movs	r3, #64	; 0x40
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	2300      	movs	r3, #0
 80049f0:	ac08      	add	r4, sp, #32
 80049f2:	6163      	str	r3, [r4, #20]
 80049f4:	3320      	adds	r3, #32
 80049f6:	7663      	strb	r3, [r4, #25]
 80049f8:	3310      	adds	r3, #16
 80049fa:	76a3      	strb	r3, [r4, #26]
 80049fc:	9507      	str	r5, [sp, #28]
 80049fe:	0035      	movs	r5, r6
 8004a00:	782b      	ldrb	r3, [r5, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <_svfiprintf_r+0x52>
 8004a06:	2b25      	cmp	r3, #37	; 0x25
 8004a08:	d147      	bne.n	8004a9a <_svfiprintf_r+0xe2>
 8004a0a:	1bab      	subs	r3, r5, r6
 8004a0c:	9305      	str	r3, [sp, #20]
 8004a0e:	42b5      	cmp	r5, r6
 8004a10:	d00c      	beq.n	8004a2c <_svfiprintf_r+0x74>
 8004a12:	0032      	movs	r2, r6
 8004a14:	0039      	movs	r1, r7
 8004a16:	9803      	ldr	r0, [sp, #12]
 8004a18:	f7ff ff6c 	bl	80048f4 <__ssputs_r>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d100      	bne.n	8004a22 <_svfiprintf_r+0x6a>
 8004a20:	e0ae      	b.n	8004b80 <_svfiprintf_r+0x1c8>
 8004a22:	6962      	ldr	r2, [r4, #20]
 8004a24:	9b05      	ldr	r3, [sp, #20]
 8004a26:	4694      	mov	ip, r2
 8004a28:	4463      	add	r3, ip
 8004a2a:	6163      	str	r3, [r4, #20]
 8004a2c:	782b      	ldrb	r3, [r5, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d100      	bne.n	8004a34 <_svfiprintf_r+0x7c>
 8004a32:	e0a5      	b.n	8004b80 <_svfiprintf_r+0x1c8>
 8004a34:	2201      	movs	r2, #1
 8004a36:	2300      	movs	r3, #0
 8004a38:	4252      	negs	r2, r2
 8004a3a:	6062      	str	r2, [r4, #4]
 8004a3c:	a904      	add	r1, sp, #16
 8004a3e:	3254      	adds	r2, #84	; 0x54
 8004a40:	1852      	adds	r2, r2, r1
 8004a42:	1c6e      	adds	r6, r5, #1
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	60e3      	str	r3, [r4, #12]
 8004a48:	60a3      	str	r3, [r4, #8]
 8004a4a:	7013      	strb	r3, [r2, #0]
 8004a4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8004a4e:	2205      	movs	r2, #5
 8004a50:	7831      	ldrb	r1, [r6, #0]
 8004a52:	4854      	ldr	r0, [pc, #336]	; (8004ba4 <_svfiprintf_r+0x1ec>)
 8004a54:	f000 fa32 	bl	8004ebc <memchr>
 8004a58:	1c75      	adds	r5, r6, #1
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d11f      	bne.n	8004a9e <_svfiprintf_r+0xe6>
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	06d3      	lsls	r3, r2, #27
 8004a62:	d504      	bpl.n	8004a6e <_svfiprintf_r+0xb6>
 8004a64:	2353      	movs	r3, #83	; 0x53
 8004a66:	a904      	add	r1, sp, #16
 8004a68:	185b      	adds	r3, r3, r1
 8004a6a:	2120      	movs	r1, #32
 8004a6c:	7019      	strb	r1, [r3, #0]
 8004a6e:	0713      	lsls	r3, r2, #28
 8004a70:	d504      	bpl.n	8004a7c <_svfiprintf_r+0xc4>
 8004a72:	2353      	movs	r3, #83	; 0x53
 8004a74:	a904      	add	r1, sp, #16
 8004a76:	185b      	adds	r3, r3, r1
 8004a78:	212b      	movs	r1, #43	; 0x2b
 8004a7a:	7019      	strb	r1, [r3, #0]
 8004a7c:	7833      	ldrb	r3, [r6, #0]
 8004a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a80:	d016      	beq.n	8004ab0 <_svfiprintf_r+0xf8>
 8004a82:	0035      	movs	r5, r6
 8004a84:	2100      	movs	r1, #0
 8004a86:	200a      	movs	r0, #10
 8004a88:	68e3      	ldr	r3, [r4, #12]
 8004a8a:	782a      	ldrb	r2, [r5, #0]
 8004a8c:	1c6e      	adds	r6, r5, #1
 8004a8e:	3a30      	subs	r2, #48	; 0x30
 8004a90:	2a09      	cmp	r2, #9
 8004a92:	d94e      	bls.n	8004b32 <_svfiprintf_r+0x17a>
 8004a94:	2900      	cmp	r1, #0
 8004a96:	d111      	bne.n	8004abc <_svfiprintf_r+0x104>
 8004a98:	e017      	b.n	8004aca <_svfiprintf_r+0x112>
 8004a9a:	3501      	adds	r5, #1
 8004a9c:	e7b0      	b.n	8004a00 <_svfiprintf_r+0x48>
 8004a9e:	4b41      	ldr	r3, [pc, #260]	; (8004ba4 <_svfiprintf_r+0x1ec>)
 8004aa0:	6822      	ldr	r2, [r4, #0]
 8004aa2:	1ac0      	subs	r0, r0, r3
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	4083      	lsls	r3, r0
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	002e      	movs	r6, r5
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	e7ce      	b.n	8004a4e <_svfiprintf_r+0x96>
 8004ab0:	9b07      	ldr	r3, [sp, #28]
 8004ab2:	1d19      	adds	r1, r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	9107      	str	r1, [sp, #28]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	db01      	blt.n	8004ac0 <_svfiprintf_r+0x108>
 8004abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004abe:	e004      	b.n	8004aca <_svfiprintf_r+0x112>
 8004ac0:	425b      	negs	r3, r3
 8004ac2:	60e3      	str	r3, [r4, #12]
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	782b      	ldrb	r3, [r5, #0]
 8004acc:	2b2e      	cmp	r3, #46	; 0x2e
 8004ace:	d10a      	bne.n	8004ae6 <_svfiprintf_r+0x12e>
 8004ad0:	786b      	ldrb	r3, [r5, #1]
 8004ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad4:	d135      	bne.n	8004b42 <_svfiprintf_r+0x18a>
 8004ad6:	9b07      	ldr	r3, [sp, #28]
 8004ad8:	3502      	adds	r5, #2
 8004ada:	1d1a      	adds	r2, r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	9207      	str	r2, [sp, #28]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	db2b      	blt.n	8004b3c <_svfiprintf_r+0x184>
 8004ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae6:	4e30      	ldr	r6, [pc, #192]	; (8004ba8 <_svfiprintf_r+0x1f0>)
 8004ae8:	2203      	movs	r2, #3
 8004aea:	0030      	movs	r0, r6
 8004aec:	7829      	ldrb	r1, [r5, #0]
 8004aee:	f000 f9e5 	bl	8004ebc <memchr>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d006      	beq.n	8004b04 <_svfiprintf_r+0x14c>
 8004af6:	2340      	movs	r3, #64	; 0x40
 8004af8:	1b80      	subs	r0, r0, r6
 8004afa:	4083      	lsls	r3, r0
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	3501      	adds	r5, #1
 8004b00:	4313      	orrs	r3, r2
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	7829      	ldrb	r1, [r5, #0]
 8004b06:	2206      	movs	r2, #6
 8004b08:	4828      	ldr	r0, [pc, #160]	; (8004bac <_svfiprintf_r+0x1f4>)
 8004b0a:	1c6e      	adds	r6, r5, #1
 8004b0c:	7621      	strb	r1, [r4, #24]
 8004b0e:	f000 f9d5 	bl	8004ebc <memchr>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d03c      	beq.n	8004b90 <_svfiprintf_r+0x1d8>
 8004b16:	4b26      	ldr	r3, [pc, #152]	; (8004bb0 <_svfiprintf_r+0x1f8>)
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d125      	bne.n	8004b68 <_svfiprintf_r+0x1b0>
 8004b1c:	2207      	movs	r2, #7
 8004b1e:	9b07      	ldr	r3, [sp, #28]
 8004b20:	3307      	adds	r3, #7
 8004b22:	4393      	bics	r3, r2
 8004b24:	3308      	adds	r3, #8
 8004b26:	9307      	str	r3, [sp, #28]
 8004b28:	6963      	ldr	r3, [r4, #20]
 8004b2a:	9a04      	ldr	r2, [sp, #16]
 8004b2c:	189b      	adds	r3, r3, r2
 8004b2e:	6163      	str	r3, [r4, #20]
 8004b30:	e765      	b.n	80049fe <_svfiprintf_r+0x46>
 8004b32:	4343      	muls	r3, r0
 8004b34:	0035      	movs	r5, r6
 8004b36:	2101      	movs	r1, #1
 8004b38:	189b      	adds	r3, r3, r2
 8004b3a:	e7a6      	b.n	8004a8a <_svfiprintf_r+0xd2>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	425b      	negs	r3, r3
 8004b40:	e7d0      	b.n	8004ae4 <_svfiprintf_r+0x12c>
 8004b42:	2300      	movs	r3, #0
 8004b44:	200a      	movs	r0, #10
 8004b46:	001a      	movs	r2, r3
 8004b48:	3501      	adds	r5, #1
 8004b4a:	6063      	str	r3, [r4, #4]
 8004b4c:	7829      	ldrb	r1, [r5, #0]
 8004b4e:	1c6e      	adds	r6, r5, #1
 8004b50:	3930      	subs	r1, #48	; 0x30
 8004b52:	2909      	cmp	r1, #9
 8004b54:	d903      	bls.n	8004b5e <_svfiprintf_r+0x1a6>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0c5      	beq.n	8004ae6 <_svfiprintf_r+0x12e>
 8004b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b5c:	e7c3      	b.n	8004ae6 <_svfiprintf_r+0x12e>
 8004b5e:	4342      	muls	r2, r0
 8004b60:	0035      	movs	r5, r6
 8004b62:	2301      	movs	r3, #1
 8004b64:	1852      	adds	r2, r2, r1
 8004b66:	e7f1      	b.n	8004b4c <_svfiprintf_r+0x194>
 8004b68:	ab07      	add	r3, sp, #28
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	003a      	movs	r2, r7
 8004b6e:	0021      	movs	r1, r4
 8004b70:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <_svfiprintf_r+0x1fc>)
 8004b72:	9803      	ldr	r0, [sp, #12]
 8004b74:	e000      	b.n	8004b78 <_svfiprintf_r+0x1c0>
 8004b76:	bf00      	nop
 8004b78:	9004      	str	r0, [sp, #16]
 8004b7a:	9b04      	ldr	r3, [sp, #16]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	d1d3      	bne.n	8004b28 <_svfiprintf_r+0x170>
 8004b80:	89bb      	ldrh	r3, [r7, #12]
 8004b82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b84:	065b      	lsls	r3, r3, #25
 8004b86:	d400      	bmi.n	8004b8a <_svfiprintf_r+0x1d2>
 8004b88:	e72d      	b.n	80049e6 <_svfiprintf_r+0x2e>
 8004b8a:	2001      	movs	r0, #1
 8004b8c:	4240      	negs	r0, r0
 8004b8e:	e72a      	b.n	80049e6 <_svfiprintf_r+0x2e>
 8004b90:	ab07      	add	r3, sp, #28
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	003a      	movs	r2, r7
 8004b96:	0021      	movs	r1, r4
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <_svfiprintf_r+0x1fc>)
 8004b9a:	9803      	ldr	r0, [sp, #12]
 8004b9c:	f000 f87c 	bl	8004c98 <_printf_i>
 8004ba0:	e7ea      	b.n	8004b78 <_svfiprintf_r+0x1c0>
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	0800524b 	.word	0x0800524b
 8004ba8:	08005251 	.word	0x08005251
 8004bac:	08005255 	.word	0x08005255
 8004bb0:	00000000 	.word	0x00000000
 8004bb4:	080048f5 	.word	0x080048f5

08004bb8 <_printf_common>:
 8004bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bba:	0015      	movs	r5, r2
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	688a      	ldr	r2, [r1, #8]
 8004bc0:	690b      	ldr	r3, [r1, #16]
 8004bc2:	000c      	movs	r4, r1
 8004bc4:	9000      	str	r0, [sp, #0]
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	da00      	bge.n	8004bcc <_printf_common+0x14>
 8004bca:	0013      	movs	r3, r2
 8004bcc:	0022      	movs	r2, r4
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	3243      	adds	r2, #67	; 0x43
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	2a00      	cmp	r2, #0
 8004bd6:	d001      	beq.n	8004bdc <_printf_common+0x24>
 8004bd8:	3301      	adds	r3, #1
 8004bda:	602b      	str	r3, [r5, #0]
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	069b      	lsls	r3, r3, #26
 8004be0:	d502      	bpl.n	8004be8 <_printf_common+0x30>
 8004be2:	682b      	ldr	r3, [r5, #0]
 8004be4:	3302      	adds	r3, #2
 8004be6:	602b      	str	r3, [r5, #0]
 8004be8:	6822      	ldr	r2, [r4, #0]
 8004bea:	2306      	movs	r3, #6
 8004bec:	0017      	movs	r7, r2
 8004bee:	401f      	ands	r7, r3
 8004bf0:	421a      	tst	r2, r3
 8004bf2:	d027      	beq.n	8004c44 <_printf_common+0x8c>
 8004bf4:	0023      	movs	r3, r4
 8004bf6:	3343      	adds	r3, #67	; 0x43
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	1e5a      	subs	r2, r3, #1
 8004bfc:	4193      	sbcs	r3, r2
 8004bfe:	6822      	ldr	r2, [r4, #0]
 8004c00:	0692      	lsls	r2, r2, #26
 8004c02:	d430      	bmi.n	8004c66 <_printf_common+0xae>
 8004c04:	0022      	movs	r2, r4
 8004c06:	9901      	ldr	r1, [sp, #4]
 8004c08:	9800      	ldr	r0, [sp, #0]
 8004c0a:	9e08      	ldr	r6, [sp, #32]
 8004c0c:	3243      	adds	r2, #67	; 0x43
 8004c0e:	47b0      	blx	r6
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d025      	beq.n	8004c60 <_printf_common+0xa8>
 8004c14:	2306      	movs	r3, #6
 8004c16:	6820      	ldr	r0, [r4, #0]
 8004c18:	682a      	ldr	r2, [r5, #0]
 8004c1a:	68e1      	ldr	r1, [r4, #12]
 8004c1c:	2500      	movs	r5, #0
 8004c1e:	4003      	ands	r3, r0
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d103      	bne.n	8004c2c <_printf_common+0x74>
 8004c24:	1a8d      	subs	r5, r1, r2
 8004c26:	43eb      	mvns	r3, r5
 8004c28:	17db      	asrs	r3, r3, #31
 8004c2a:	401d      	ands	r5, r3
 8004c2c:	68a3      	ldr	r3, [r4, #8]
 8004c2e:	6922      	ldr	r2, [r4, #16]
 8004c30:	4293      	cmp	r3, r2
 8004c32:	dd01      	ble.n	8004c38 <_printf_common+0x80>
 8004c34:	1a9b      	subs	r3, r3, r2
 8004c36:	18ed      	adds	r5, r5, r3
 8004c38:	2700      	movs	r7, #0
 8004c3a:	42bd      	cmp	r5, r7
 8004c3c:	d120      	bne.n	8004c80 <_printf_common+0xc8>
 8004c3e:	2000      	movs	r0, #0
 8004c40:	e010      	b.n	8004c64 <_printf_common+0xac>
 8004c42:	3701      	adds	r7, #1
 8004c44:	68e3      	ldr	r3, [r4, #12]
 8004c46:	682a      	ldr	r2, [r5, #0]
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	42bb      	cmp	r3, r7
 8004c4c:	ddd2      	ble.n	8004bf4 <_printf_common+0x3c>
 8004c4e:	0022      	movs	r2, r4
 8004c50:	2301      	movs	r3, #1
 8004c52:	9901      	ldr	r1, [sp, #4]
 8004c54:	9800      	ldr	r0, [sp, #0]
 8004c56:	9e08      	ldr	r6, [sp, #32]
 8004c58:	3219      	adds	r2, #25
 8004c5a:	47b0      	blx	r6
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d1f0      	bne.n	8004c42 <_printf_common+0x8a>
 8004c60:	2001      	movs	r0, #1
 8004c62:	4240      	negs	r0, r0
 8004c64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c66:	2030      	movs	r0, #48	; 0x30
 8004c68:	18e1      	adds	r1, r4, r3
 8004c6a:	3143      	adds	r1, #67	; 0x43
 8004c6c:	7008      	strb	r0, [r1, #0]
 8004c6e:	0021      	movs	r1, r4
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	3145      	adds	r1, #69	; 0x45
 8004c74:	7809      	ldrb	r1, [r1, #0]
 8004c76:	18a2      	adds	r2, r4, r2
 8004c78:	3243      	adds	r2, #67	; 0x43
 8004c7a:	3302      	adds	r3, #2
 8004c7c:	7011      	strb	r1, [r2, #0]
 8004c7e:	e7c1      	b.n	8004c04 <_printf_common+0x4c>
 8004c80:	0022      	movs	r2, r4
 8004c82:	2301      	movs	r3, #1
 8004c84:	9901      	ldr	r1, [sp, #4]
 8004c86:	9800      	ldr	r0, [sp, #0]
 8004c88:	9e08      	ldr	r6, [sp, #32]
 8004c8a:	321a      	adds	r2, #26
 8004c8c:	47b0      	blx	r6
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	d0e6      	beq.n	8004c60 <_printf_common+0xa8>
 8004c92:	3701      	adds	r7, #1
 8004c94:	e7d1      	b.n	8004c3a <_printf_common+0x82>
	...

08004c98 <_printf_i>:
 8004c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9a:	b08b      	sub	sp, #44	; 0x2c
 8004c9c:	9206      	str	r2, [sp, #24]
 8004c9e:	000a      	movs	r2, r1
 8004ca0:	3243      	adds	r2, #67	; 0x43
 8004ca2:	9307      	str	r3, [sp, #28]
 8004ca4:	9005      	str	r0, [sp, #20]
 8004ca6:	9204      	str	r2, [sp, #16]
 8004ca8:	7e0a      	ldrb	r2, [r1, #24]
 8004caa:	000c      	movs	r4, r1
 8004cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cae:	2a78      	cmp	r2, #120	; 0x78
 8004cb0:	d807      	bhi.n	8004cc2 <_printf_i+0x2a>
 8004cb2:	2a62      	cmp	r2, #98	; 0x62
 8004cb4:	d809      	bhi.n	8004cca <_printf_i+0x32>
 8004cb6:	2a00      	cmp	r2, #0
 8004cb8:	d100      	bne.n	8004cbc <_printf_i+0x24>
 8004cba:	e0c1      	b.n	8004e40 <_printf_i+0x1a8>
 8004cbc:	2a58      	cmp	r2, #88	; 0x58
 8004cbe:	d100      	bne.n	8004cc2 <_printf_i+0x2a>
 8004cc0:	e08c      	b.n	8004ddc <_printf_i+0x144>
 8004cc2:	0026      	movs	r6, r4
 8004cc4:	3642      	adds	r6, #66	; 0x42
 8004cc6:	7032      	strb	r2, [r6, #0]
 8004cc8:	e022      	b.n	8004d10 <_printf_i+0x78>
 8004cca:	0010      	movs	r0, r2
 8004ccc:	3863      	subs	r0, #99	; 0x63
 8004cce:	2815      	cmp	r0, #21
 8004cd0:	d8f7      	bhi.n	8004cc2 <_printf_i+0x2a>
 8004cd2:	f7fb fa21 	bl	8000118 <__gnu_thumb1_case_shi>
 8004cd6:	0016      	.short	0x0016
 8004cd8:	fff6001f 	.word	0xfff6001f
 8004cdc:	fff6fff6 	.word	0xfff6fff6
 8004ce0:	001ffff6 	.word	0x001ffff6
 8004ce4:	fff6fff6 	.word	0xfff6fff6
 8004ce8:	fff6fff6 	.word	0xfff6fff6
 8004cec:	003600a8 	.word	0x003600a8
 8004cf0:	fff6009a 	.word	0xfff6009a
 8004cf4:	00b9fff6 	.word	0x00b9fff6
 8004cf8:	0036fff6 	.word	0x0036fff6
 8004cfc:	fff6fff6 	.word	0xfff6fff6
 8004d00:	009e      	.short	0x009e
 8004d02:	0026      	movs	r6, r4
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	3642      	adds	r6, #66	; 0x42
 8004d08:	1d11      	adds	r1, r2, #4
 8004d0a:	6019      	str	r1, [r3, #0]
 8004d0c:	6813      	ldr	r3, [r2, #0]
 8004d0e:	7033      	strb	r3, [r6, #0]
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0a7      	b.n	8004e64 <_printf_i+0x1cc>
 8004d14:	6808      	ldr	r0, [r1, #0]
 8004d16:	6819      	ldr	r1, [r3, #0]
 8004d18:	1d0a      	adds	r2, r1, #4
 8004d1a:	0605      	lsls	r5, r0, #24
 8004d1c:	d50b      	bpl.n	8004d36 <_printf_i+0x9e>
 8004d1e:	680d      	ldr	r5, [r1, #0]
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	2d00      	cmp	r5, #0
 8004d24:	da03      	bge.n	8004d2e <_printf_i+0x96>
 8004d26:	232d      	movs	r3, #45	; 0x2d
 8004d28:	9a04      	ldr	r2, [sp, #16]
 8004d2a:	426d      	negs	r5, r5
 8004d2c:	7013      	strb	r3, [r2, #0]
 8004d2e:	4b61      	ldr	r3, [pc, #388]	; (8004eb4 <_printf_i+0x21c>)
 8004d30:	270a      	movs	r7, #10
 8004d32:	9303      	str	r3, [sp, #12]
 8004d34:	e01b      	b.n	8004d6e <_printf_i+0xd6>
 8004d36:	680d      	ldr	r5, [r1, #0]
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	0641      	lsls	r1, r0, #25
 8004d3c:	d5f1      	bpl.n	8004d22 <_printf_i+0x8a>
 8004d3e:	b22d      	sxth	r5, r5
 8004d40:	e7ef      	b.n	8004d22 <_printf_i+0x8a>
 8004d42:	680d      	ldr	r5, [r1, #0]
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	1d08      	adds	r0, r1, #4
 8004d48:	6018      	str	r0, [r3, #0]
 8004d4a:	062e      	lsls	r6, r5, #24
 8004d4c:	d501      	bpl.n	8004d52 <_printf_i+0xba>
 8004d4e:	680d      	ldr	r5, [r1, #0]
 8004d50:	e003      	b.n	8004d5a <_printf_i+0xc2>
 8004d52:	066d      	lsls	r5, r5, #25
 8004d54:	d5fb      	bpl.n	8004d4e <_printf_i+0xb6>
 8004d56:	680d      	ldr	r5, [r1, #0]
 8004d58:	b2ad      	uxth	r5, r5
 8004d5a:	4b56      	ldr	r3, [pc, #344]	; (8004eb4 <_printf_i+0x21c>)
 8004d5c:	2708      	movs	r7, #8
 8004d5e:	9303      	str	r3, [sp, #12]
 8004d60:	2a6f      	cmp	r2, #111	; 0x6f
 8004d62:	d000      	beq.n	8004d66 <_printf_i+0xce>
 8004d64:	3702      	adds	r7, #2
 8004d66:	0023      	movs	r3, r4
 8004d68:	2200      	movs	r2, #0
 8004d6a:	3343      	adds	r3, #67	; 0x43
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	6863      	ldr	r3, [r4, #4]
 8004d70:	60a3      	str	r3, [r4, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	db03      	blt.n	8004d7e <_printf_i+0xe6>
 8004d76:	2204      	movs	r2, #4
 8004d78:	6821      	ldr	r1, [r4, #0]
 8004d7a:	4391      	bics	r1, r2
 8004d7c:	6021      	str	r1, [r4, #0]
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	d102      	bne.n	8004d88 <_printf_i+0xf0>
 8004d82:	9e04      	ldr	r6, [sp, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <_printf_i+0x10a>
 8004d88:	9e04      	ldr	r6, [sp, #16]
 8004d8a:	0028      	movs	r0, r5
 8004d8c:	0039      	movs	r1, r7
 8004d8e:	f7fb fa53 	bl	8000238 <__aeabi_uidivmod>
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	3e01      	subs	r6, #1
 8004d96:	5c5b      	ldrb	r3, [r3, r1]
 8004d98:	7033      	strb	r3, [r6, #0]
 8004d9a:	002b      	movs	r3, r5
 8004d9c:	0005      	movs	r5, r0
 8004d9e:	429f      	cmp	r7, r3
 8004da0:	d9f3      	bls.n	8004d8a <_printf_i+0xf2>
 8004da2:	2f08      	cmp	r7, #8
 8004da4:	d109      	bne.n	8004dba <_printf_i+0x122>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	07db      	lsls	r3, r3, #31
 8004daa:	d506      	bpl.n	8004dba <_printf_i+0x122>
 8004dac:	6863      	ldr	r3, [r4, #4]
 8004dae:	6922      	ldr	r2, [r4, #16]
 8004db0:	4293      	cmp	r3, r2
 8004db2:	dc02      	bgt.n	8004dba <_printf_i+0x122>
 8004db4:	2330      	movs	r3, #48	; 0x30
 8004db6:	3e01      	subs	r6, #1
 8004db8:	7033      	strb	r3, [r6, #0]
 8004dba:	9b04      	ldr	r3, [sp, #16]
 8004dbc:	1b9b      	subs	r3, r3, r6
 8004dbe:	6123      	str	r3, [r4, #16]
 8004dc0:	9b07      	ldr	r3, [sp, #28]
 8004dc2:	0021      	movs	r1, r4
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	9805      	ldr	r0, [sp, #20]
 8004dc8:	9b06      	ldr	r3, [sp, #24]
 8004dca:	aa09      	add	r2, sp, #36	; 0x24
 8004dcc:	f7ff fef4 	bl	8004bb8 <_printf_common>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d14c      	bne.n	8004e6e <_printf_i+0x1d6>
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	4240      	negs	r0, r0
 8004dd8:	b00b      	add	sp, #44	; 0x2c
 8004dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ddc:	3145      	adds	r1, #69	; 0x45
 8004dde:	700a      	strb	r2, [r1, #0]
 8004de0:	4a34      	ldr	r2, [pc, #208]	; (8004eb4 <_printf_i+0x21c>)
 8004de2:	9203      	str	r2, [sp, #12]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	6821      	ldr	r1, [r4, #0]
 8004de8:	ca20      	ldmia	r2!, {r5}
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	0608      	lsls	r0, r1, #24
 8004dee:	d516      	bpl.n	8004e1e <_printf_i+0x186>
 8004df0:	07cb      	lsls	r3, r1, #31
 8004df2:	d502      	bpl.n	8004dfa <_printf_i+0x162>
 8004df4:	2320      	movs	r3, #32
 8004df6:	4319      	orrs	r1, r3
 8004df8:	6021      	str	r1, [r4, #0]
 8004dfa:	2710      	movs	r7, #16
 8004dfc:	2d00      	cmp	r5, #0
 8004dfe:	d1b2      	bne.n	8004d66 <_printf_i+0xce>
 8004e00:	2320      	movs	r3, #32
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	439a      	bics	r2, r3
 8004e06:	6022      	str	r2, [r4, #0]
 8004e08:	e7ad      	b.n	8004d66 <_printf_i+0xce>
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	6809      	ldr	r1, [r1, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	6022      	str	r2, [r4, #0]
 8004e12:	0022      	movs	r2, r4
 8004e14:	2178      	movs	r1, #120	; 0x78
 8004e16:	3245      	adds	r2, #69	; 0x45
 8004e18:	7011      	strb	r1, [r2, #0]
 8004e1a:	4a27      	ldr	r2, [pc, #156]	; (8004eb8 <_printf_i+0x220>)
 8004e1c:	e7e1      	b.n	8004de2 <_printf_i+0x14a>
 8004e1e:	0648      	lsls	r0, r1, #25
 8004e20:	d5e6      	bpl.n	8004df0 <_printf_i+0x158>
 8004e22:	b2ad      	uxth	r5, r5
 8004e24:	e7e4      	b.n	8004df0 <_printf_i+0x158>
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	680d      	ldr	r5, [r1, #0]
 8004e2a:	1d10      	adds	r0, r2, #4
 8004e2c:	6949      	ldr	r1, [r1, #20]
 8004e2e:	6018      	str	r0, [r3, #0]
 8004e30:	6813      	ldr	r3, [r2, #0]
 8004e32:	062e      	lsls	r6, r5, #24
 8004e34:	d501      	bpl.n	8004e3a <_printf_i+0x1a2>
 8004e36:	6019      	str	r1, [r3, #0]
 8004e38:	e002      	b.n	8004e40 <_printf_i+0x1a8>
 8004e3a:	066d      	lsls	r5, r5, #25
 8004e3c:	d5fb      	bpl.n	8004e36 <_printf_i+0x19e>
 8004e3e:	8019      	strh	r1, [r3, #0]
 8004e40:	2300      	movs	r3, #0
 8004e42:	9e04      	ldr	r6, [sp, #16]
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	e7bb      	b.n	8004dc0 <_printf_i+0x128>
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	1d11      	adds	r1, r2, #4
 8004e4c:	6019      	str	r1, [r3, #0]
 8004e4e:	6816      	ldr	r6, [r2, #0]
 8004e50:	2100      	movs	r1, #0
 8004e52:	0030      	movs	r0, r6
 8004e54:	6862      	ldr	r2, [r4, #4]
 8004e56:	f000 f831 	bl	8004ebc <memchr>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d001      	beq.n	8004e62 <_printf_i+0x1ca>
 8004e5e:	1b80      	subs	r0, r0, r6
 8004e60:	6060      	str	r0, [r4, #4]
 8004e62:	6863      	ldr	r3, [r4, #4]
 8004e64:	6123      	str	r3, [r4, #16]
 8004e66:	2300      	movs	r3, #0
 8004e68:	9a04      	ldr	r2, [sp, #16]
 8004e6a:	7013      	strb	r3, [r2, #0]
 8004e6c:	e7a8      	b.n	8004dc0 <_printf_i+0x128>
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	0032      	movs	r2, r6
 8004e72:	9906      	ldr	r1, [sp, #24]
 8004e74:	9805      	ldr	r0, [sp, #20]
 8004e76:	9d07      	ldr	r5, [sp, #28]
 8004e78:	47a8      	blx	r5
 8004e7a:	1c43      	adds	r3, r0, #1
 8004e7c:	d0aa      	beq.n	8004dd4 <_printf_i+0x13c>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	079b      	lsls	r3, r3, #30
 8004e82:	d415      	bmi.n	8004eb0 <_printf_i+0x218>
 8004e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e86:	68e0      	ldr	r0, [r4, #12]
 8004e88:	4298      	cmp	r0, r3
 8004e8a:	daa5      	bge.n	8004dd8 <_printf_i+0x140>
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	e7a3      	b.n	8004dd8 <_printf_i+0x140>
 8004e90:	0022      	movs	r2, r4
 8004e92:	2301      	movs	r3, #1
 8004e94:	9906      	ldr	r1, [sp, #24]
 8004e96:	9805      	ldr	r0, [sp, #20]
 8004e98:	9e07      	ldr	r6, [sp, #28]
 8004e9a:	3219      	adds	r2, #25
 8004e9c:	47b0      	blx	r6
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	d098      	beq.n	8004dd4 <_printf_i+0x13c>
 8004ea2:	3501      	adds	r5, #1
 8004ea4:	68e3      	ldr	r3, [r4, #12]
 8004ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	42ab      	cmp	r3, r5
 8004eac:	dcf0      	bgt.n	8004e90 <_printf_i+0x1f8>
 8004eae:	e7e9      	b.n	8004e84 <_printf_i+0x1ec>
 8004eb0:	2500      	movs	r5, #0
 8004eb2:	e7f7      	b.n	8004ea4 <_printf_i+0x20c>
 8004eb4:	0800525c 	.word	0x0800525c
 8004eb8:	0800526d 	.word	0x0800526d

08004ebc <memchr>:
 8004ebc:	b2c9      	uxtb	r1, r1
 8004ebe:	1882      	adds	r2, r0, r2
 8004ec0:	4290      	cmp	r0, r2
 8004ec2:	d101      	bne.n	8004ec8 <memchr+0xc>
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	4770      	bx	lr
 8004ec8:	7803      	ldrb	r3, [r0, #0]
 8004eca:	428b      	cmp	r3, r1
 8004ecc:	d0fb      	beq.n	8004ec6 <memchr+0xa>
 8004ece:	3001      	adds	r0, #1
 8004ed0:	e7f6      	b.n	8004ec0 <memchr+0x4>

08004ed2 <memmove>:
 8004ed2:	b510      	push	{r4, lr}
 8004ed4:	4288      	cmp	r0, r1
 8004ed6:	d902      	bls.n	8004ede <memmove+0xc>
 8004ed8:	188b      	adds	r3, r1, r2
 8004eda:	4298      	cmp	r0, r3
 8004edc:	d303      	bcc.n	8004ee6 <memmove+0x14>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e007      	b.n	8004ef2 <memmove+0x20>
 8004ee2:	5c8b      	ldrb	r3, [r1, r2]
 8004ee4:	5483      	strb	r3, [r0, r2]
 8004ee6:	3a01      	subs	r2, #1
 8004ee8:	d2fb      	bcs.n	8004ee2 <memmove+0x10>
 8004eea:	bd10      	pop	{r4, pc}
 8004eec:	5ccc      	ldrb	r4, [r1, r3]
 8004eee:	54c4      	strb	r4, [r0, r3]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d1fa      	bne.n	8004eec <memmove+0x1a>
 8004ef6:	e7f8      	b.n	8004eea <memmove+0x18>

08004ef8 <_free_r>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	0005      	movs	r5, r0
 8004efc:	2900      	cmp	r1, #0
 8004efe:	d010      	beq.n	8004f22 <_free_r+0x2a>
 8004f00:	1f0c      	subs	r4, r1, #4
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	da00      	bge.n	8004f0a <_free_r+0x12>
 8004f08:	18e4      	adds	r4, r4, r3
 8004f0a:	0028      	movs	r0, r5
 8004f0c:	f000 f918 	bl	8005140 <__malloc_lock>
 8004f10:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <_free_r+0x90>)
 8004f12:	6813      	ldr	r3, [r2, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d105      	bne.n	8004f24 <_free_r+0x2c>
 8004f18:	6063      	str	r3, [r4, #4]
 8004f1a:	6014      	str	r4, [r2, #0]
 8004f1c:	0028      	movs	r0, r5
 8004f1e:	f000 f917 	bl	8005150 <__malloc_unlock>
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	d908      	bls.n	8004f3a <_free_r+0x42>
 8004f28:	6821      	ldr	r1, [r4, #0]
 8004f2a:	1860      	adds	r0, r4, r1
 8004f2c:	4283      	cmp	r3, r0
 8004f2e:	d1f3      	bne.n	8004f18 <_free_r+0x20>
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	1841      	adds	r1, r0, r1
 8004f36:	6021      	str	r1, [r4, #0]
 8004f38:	e7ee      	b.n	8004f18 <_free_r+0x20>
 8004f3a:	001a      	movs	r2, r3
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <_free_r+0x4e>
 8004f42:	42a3      	cmp	r3, r4
 8004f44:	d9f9      	bls.n	8004f3a <_free_r+0x42>
 8004f46:	6811      	ldr	r1, [r2, #0]
 8004f48:	1850      	adds	r0, r2, r1
 8004f4a:	42a0      	cmp	r0, r4
 8004f4c:	d10b      	bne.n	8004f66 <_free_r+0x6e>
 8004f4e:	6820      	ldr	r0, [r4, #0]
 8004f50:	1809      	adds	r1, r1, r0
 8004f52:	1850      	adds	r0, r2, r1
 8004f54:	6011      	str	r1, [r2, #0]
 8004f56:	4283      	cmp	r3, r0
 8004f58:	d1e0      	bne.n	8004f1c <_free_r+0x24>
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	1841      	adds	r1, r0, r1
 8004f60:	6011      	str	r1, [r2, #0]
 8004f62:	6053      	str	r3, [r2, #4]
 8004f64:	e7da      	b.n	8004f1c <_free_r+0x24>
 8004f66:	42a0      	cmp	r0, r4
 8004f68:	d902      	bls.n	8004f70 <_free_r+0x78>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	602b      	str	r3, [r5, #0]
 8004f6e:	e7d5      	b.n	8004f1c <_free_r+0x24>
 8004f70:	6821      	ldr	r1, [r4, #0]
 8004f72:	1860      	adds	r0, r4, r1
 8004f74:	4283      	cmp	r3, r0
 8004f76:	d103      	bne.n	8004f80 <_free_r+0x88>
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	1841      	adds	r1, r0, r1
 8004f7e:	6021      	str	r1, [r4, #0]
 8004f80:	6063      	str	r3, [r4, #4]
 8004f82:	6054      	str	r4, [r2, #4]
 8004f84:	e7ca      	b.n	8004f1c <_free_r+0x24>
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	20000438 	.word	0x20000438

08004f8c <sbrk_aligned>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4e0f      	ldr	r6, [pc, #60]	; (8004fcc <sbrk_aligned+0x40>)
 8004f90:	000d      	movs	r5, r1
 8004f92:	6831      	ldr	r1, [r6, #0]
 8004f94:	0004      	movs	r4, r0
 8004f96:	2900      	cmp	r1, #0
 8004f98:	d102      	bne.n	8004fa0 <sbrk_aligned+0x14>
 8004f9a:	f000 f8bf 	bl	800511c <_sbrk_r>
 8004f9e:	6030      	str	r0, [r6, #0]
 8004fa0:	0029      	movs	r1, r5
 8004fa2:	0020      	movs	r0, r4
 8004fa4:	f000 f8ba 	bl	800511c <_sbrk_r>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d00a      	beq.n	8004fc2 <sbrk_aligned+0x36>
 8004fac:	2303      	movs	r3, #3
 8004fae:	1cc5      	adds	r5, r0, #3
 8004fb0:	439d      	bics	r5, r3
 8004fb2:	42a8      	cmp	r0, r5
 8004fb4:	d007      	beq.n	8004fc6 <sbrk_aligned+0x3a>
 8004fb6:	1a29      	subs	r1, r5, r0
 8004fb8:	0020      	movs	r0, r4
 8004fba:	f000 f8af 	bl	800511c <_sbrk_r>
 8004fbe:	1c43      	adds	r3, r0, #1
 8004fc0:	d101      	bne.n	8004fc6 <sbrk_aligned+0x3a>
 8004fc2:	2501      	movs	r5, #1
 8004fc4:	426d      	negs	r5, r5
 8004fc6:	0028      	movs	r0, r5
 8004fc8:	bd70      	pop	{r4, r5, r6, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	2000043c 	.word	0x2000043c

08004fd0 <_malloc_r>:
 8004fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	1ccb      	adds	r3, r1, #3
 8004fd6:	4393      	bics	r3, r2
 8004fd8:	3308      	adds	r3, #8
 8004fda:	0006      	movs	r6, r0
 8004fdc:	001f      	movs	r7, r3
 8004fde:	2b0c      	cmp	r3, #12
 8004fe0:	d232      	bcs.n	8005048 <_malloc_r+0x78>
 8004fe2:	270c      	movs	r7, #12
 8004fe4:	42b9      	cmp	r1, r7
 8004fe6:	d831      	bhi.n	800504c <_malloc_r+0x7c>
 8004fe8:	0030      	movs	r0, r6
 8004fea:	f000 f8a9 	bl	8005140 <__malloc_lock>
 8004fee:	4d32      	ldr	r5, [pc, #200]	; (80050b8 <_malloc_r+0xe8>)
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	001c      	movs	r4, r3
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	d12e      	bne.n	8005056 <_malloc_r+0x86>
 8004ff8:	0039      	movs	r1, r7
 8004ffa:	0030      	movs	r0, r6
 8004ffc:	f7ff ffc6 	bl	8004f8c <sbrk_aligned>
 8005000:	0004      	movs	r4, r0
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d11e      	bne.n	8005044 <_malloc_r+0x74>
 8005006:	682c      	ldr	r4, [r5, #0]
 8005008:	0025      	movs	r5, r4
 800500a:	2d00      	cmp	r5, #0
 800500c:	d14a      	bne.n	80050a4 <_malloc_r+0xd4>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	0029      	movs	r1, r5
 8005012:	18e3      	adds	r3, r4, r3
 8005014:	0030      	movs	r0, r6
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	f000 f880 	bl	800511c <_sbrk_r>
 800501c:	9b01      	ldr	r3, [sp, #4]
 800501e:	4283      	cmp	r3, r0
 8005020:	d143      	bne.n	80050aa <_malloc_r+0xda>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	3703      	adds	r7, #3
 8005026:	1aff      	subs	r7, r7, r3
 8005028:	2303      	movs	r3, #3
 800502a:	439f      	bics	r7, r3
 800502c:	3708      	adds	r7, #8
 800502e:	2f0c      	cmp	r7, #12
 8005030:	d200      	bcs.n	8005034 <_malloc_r+0x64>
 8005032:	270c      	movs	r7, #12
 8005034:	0039      	movs	r1, r7
 8005036:	0030      	movs	r0, r6
 8005038:	f7ff ffa8 	bl	8004f8c <sbrk_aligned>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d034      	beq.n	80050aa <_malloc_r+0xda>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	19df      	adds	r7, r3, r7
 8005044:	6027      	str	r7, [r4, #0]
 8005046:	e013      	b.n	8005070 <_malloc_r+0xa0>
 8005048:	2b00      	cmp	r3, #0
 800504a:	dacb      	bge.n	8004fe4 <_malloc_r+0x14>
 800504c:	230c      	movs	r3, #12
 800504e:	2500      	movs	r5, #0
 8005050:	6033      	str	r3, [r6, #0]
 8005052:	0028      	movs	r0, r5
 8005054:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	1bd1      	subs	r1, r2, r7
 800505a:	d420      	bmi.n	800509e <_malloc_r+0xce>
 800505c:	290b      	cmp	r1, #11
 800505e:	d917      	bls.n	8005090 <_malloc_r+0xc0>
 8005060:	19e2      	adds	r2, r4, r7
 8005062:	6027      	str	r7, [r4, #0]
 8005064:	42a3      	cmp	r3, r4
 8005066:	d111      	bne.n	800508c <_malloc_r+0xbc>
 8005068:	602a      	str	r2, [r5, #0]
 800506a:	6863      	ldr	r3, [r4, #4]
 800506c:	6011      	str	r1, [r2, #0]
 800506e:	6053      	str	r3, [r2, #4]
 8005070:	0030      	movs	r0, r6
 8005072:	0025      	movs	r5, r4
 8005074:	f000 f86c 	bl	8005150 <__malloc_unlock>
 8005078:	2207      	movs	r2, #7
 800507a:	350b      	adds	r5, #11
 800507c:	1d23      	adds	r3, r4, #4
 800507e:	4395      	bics	r5, r2
 8005080:	1aea      	subs	r2, r5, r3
 8005082:	429d      	cmp	r5, r3
 8005084:	d0e5      	beq.n	8005052 <_malloc_r+0x82>
 8005086:	1b5b      	subs	r3, r3, r5
 8005088:	50a3      	str	r3, [r4, r2]
 800508a:	e7e2      	b.n	8005052 <_malloc_r+0x82>
 800508c:	605a      	str	r2, [r3, #4]
 800508e:	e7ec      	b.n	800506a <_malloc_r+0x9a>
 8005090:	6862      	ldr	r2, [r4, #4]
 8005092:	42a3      	cmp	r3, r4
 8005094:	d101      	bne.n	800509a <_malloc_r+0xca>
 8005096:	602a      	str	r2, [r5, #0]
 8005098:	e7ea      	b.n	8005070 <_malloc_r+0xa0>
 800509a:	605a      	str	r2, [r3, #4]
 800509c:	e7e8      	b.n	8005070 <_malloc_r+0xa0>
 800509e:	0023      	movs	r3, r4
 80050a0:	6864      	ldr	r4, [r4, #4]
 80050a2:	e7a7      	b.n	8004ff4 <_malloc_r+0x24>
 80050a4:	002c      	movs	r4, r5
 80050a6:	686d      	ldr	r5, [r5, #4]
 80050a8:	e7af      	b.n	800500a <_malloc_r+0x3a>
 80050aa:	230c      	movs	r3, #12
 80050ac:	0030      	movs	r0, r6
 80050ae:	6033      	str	r3, [r6, #0]
 80050b0:	f000 f84e 	bl	8005150 <__malloc_unlock>
 80050b4:	e7cd      	b.n	8005052 <_malloc_r+0x82>
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	20000438 	.word	0x20000438

080050bc <_realloc_r>:
 80050bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050be:	0007      	movs	r7, r0
 80050c0:	000e      	movs	r6, r1
 80050c2:	0014      	movs	r4, r2
 80050c4:	2900      	cmp	r1, #0
 80050c6:	d105      	bne.n	80050d4 <_realloc_r+0x18>
 80050c8:	0011      	movs	r1, r2
 80050ca:	f7ff ff81 	bl	8004fd0 <_malloc_r>
 80050ce:	0005      	movs	r5, r0
 80050d0:	0028      	movs	r0, r5
 80050d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	d103      	bne.n	80050e0 <_realloc_r+0x24>
 80050d8:	f7ff ff0e 	bl	8004ef8 <_free_r>
 80050dc:	0025      	movs	r5, r4
 80050de:	e7f7      	b.n	80050d0 <_realloc_r+0x14>
 80050e0:	f000 f83e 	bl	8005160 <_malloc_usable_size_r>
 80050e4:	9001      	str	r0, [sp, #4]
 80050e6:	4284      	cmp	r4, r0
 80050e8:	d803      	bhi.n	80050f2 <_realloc_r+0x36>
 80050ea:	0035      	movs	r5, r6
 80050ec:	0843      	lsrs	r3, r0, #1
 80050ee:	42a3      	cmp	r3, r4
 80050f0:	d3ee      	bcc.n	80050d0 <_realloc_r+0x14>
 80050f2:	0021      	movs	r1, r4
 80050f4:	0038      	movs	r0, r7
 80050f6:	f7ff ff6b 	bl	8004fd0 <_malloc_r>
 80050fa:	1e05      	subs	r5, r0, #0
 80050fc:	d0e8      	beq.n	80050d0 <_realloc_r+0x14>
 80050fe:	9b01      	ldr	r3, [sp, #4]
 8005100:	0022      	movs	r2, r4
 8005102:	429c      	cmp	r4, r3
 8005104:	d900      	bls.n	8005108 <_realloc_r+0x4c>
 8005106:	001a      	movs	r2, r3
 8005108:	0031      	movs	r1, r6
 800510a:	0028      	movs	r0, r5
 800510c:	f7ff fbc0 	bl	8004890 <memcpy>
 8005110:	0031      	movs	r1, r6
 8005112:	0038      	movs	r0, r7
 8005114:	f7ff fef0 	bl	8004ef8 <_free_r>
 8005118:	e7da      	b.n	80050d0 <_realloc_r+0x14>
	...

0800511c <_sbrk_r>:
 800511c:	2300      	movs	r3, #0
 800511e:	b570      	push	{r4, r5, r6, lr}
 8005120:	4d06      	ldr	r5, [pc, #24]	; (800513c <_sbrk_r+0x20>)
 8005122:	0004      	movs	r4, r0
 8005124:	0008      	movs	r0, r1
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	f7fb fef6 	bl	8000f18 <_sbrk>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d103      	bne.n	8005138 <_sbrk_r+0x1c>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d000      	beq.n	8005138 <_sbrk_r+0x1c>
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	bd70      	pop	{r4, r5, r6, pc}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	20000440 	.word	0x20000440

08005140 <__malloc_lock>:
 8005140:	b510      	push	{r4, lr}
 8005142:	4802      	ldr	r0, [pc, #8]	; (800514c <__malloc_lock+0xc>)
 8005144:	f000 f814 	bl	8005170 <__retarget_lock_acquire_recursive>
 8005148:	bd10      	pop	{r4, pc}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	20000444 	.word	0x20000444

08005150 <__malloc_unlock>:
 8005150:	b510      	push	{r4, lr}
 8005152:	4802      	ldr	r0, [pc, #8]	; (800515c <__malloc_unlock+0xc>)
 8005154:	f000 f80d 	bl	8005172 <__retarget_lock_release_recursive>
 8005158:	bd10      	pop	{r4, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	20000444 	.word	0x20000444

08005160 <_malloc_usable_size_r>:
 8005160:	1f0b      	subs	r3, r1, #4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	1f18      	subs	r0, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	da01      	bge.n	800516e <_malloc_usable_size_r+0xe>
 800516a:	580b      	ldr	r3, [r1, r0]
 800516c:	18c0      	adds	r0, r0, r3
 800516e:	4770      	bx	lr

08005170 <__retarget_lock_acquire_recursive>:
 8005170:	4770      	bx	lr

08005172 <__retarget_lock_release_recursive>:
 8005172:	4770      	bx	lr

08005174 <_init>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr

08005180 <_fini>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr
